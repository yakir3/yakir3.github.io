{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"themes/next/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/android-chrome-192x192.png","path":"images/android-chrome-192x192.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/android-chrome-512x512.png","path":"images/android-chrome-512x512.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon.png","path":"images/apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/background.jpeg","path":"images/background.jpeg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16.png","path":"images/favicon-16x16.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32.png","path":"images/favicon-32x32.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/LICENSE","path":"lib/pace/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/README.md","path":"lib/pace/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flat-top.min.css","path":"lib/pace/pace-theme-flat-top.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-material.min.css","path":"lib/pace/pace-theme-material.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0}],"Cache":[{"_id":"source/_data/footer.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1651584022236},{"_id":"source/_posts/alicloud-ram-sts/ram3.png","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1651584022283},{"_id":"source/CNAME","hash":"d51215c5b96a0da78f3308a910cdce7d308f31cb","modified":1724935490658},{"_id":"source/404/index.md","hash":"8078cc5eedf9fabf7b3a01b1b53de6875de460e7","modified":1724935503324},{"_id":"source/_data/variables.styl","hash":"299faf0840683fe8c7dd03a6b5a1a19b17a78a50","modified":1651584022236},{"_id":"source/_data/styles.styl","hash":"5464f2cffbf3c43f263b50e9b78295ecfd0e4f3f","modified":1651584022236},{"_id":"source/about/index.md","hash":"ffe179638a71cebe2e2d690fa0ef257e8980b5f6","modified":1651584022289},{"_id":"source/musiclist/index.md","hash":"5559c04d7214d767e6d72a5b02b9f8fb1ff06ef1","modified":1651584022289},{"_id":"source/categories/index.md","hash":"bb2c12cfe473b1b2307363df8645fd8f0765fbda","modified":1651584022289},{"_id":"source/tags/index.md","hash":"84321ecec46e86680db98ff973026bb4a4347d93","modified":1651584022289},{"_id":"source/_posts/First-Article.md","hash":"d51dec81dbea0d7b99ee1a1a7d7038b2b6fcfb35","modified":1705850923148},{"_id":"source/_posts/alicloud-vpc.md","hash":"4d6c44f51a8ea484d29e7a7b7c7fe0ec40ee278a","modified":1705851068717},{"_id":"source/_posts/docker.md","hash":"fbe66c696d1b0cfcb8fcdb73a3be0e44880fee48","modified":1705851220702},{"_id":"source/_posts/gatewayGrayRelease.md","hash":"31652f43911c4393452edb8f6760e2b09ae39ea9","modified":1705850957071},{"_id":"source/_posts/alicloud-ack-sls-deploy.md","hash":"d9a9c759b1944b796e6870cf3f5771cae43ebf56","modified":1705850923149},{"_id":"source/_posts/alicloud-ram-sts.md","hash":"2cec9abec7496ecd7b55a36c3240cafa57fb3472","modified":1705851092930},{"_id":"source/_posts/git-flow.md","hash":"bcb5241410542e1533befb37fe5a1a3911b25a4b","modified":1705850923152},{"_id":"source/_posts/k8s-ack-learn.md","hash":"a936263d2fcd209f9099d4469e23326d38aa6ebc","modified":1705850923153},{"_id":"source/_posts/helm-deploy.md","hash":"7cb29b61ac268c774e09c6f1a5804f7718e97a43","modified":1705850923152},{"_id":"source/_posts/k8s-rbac.md","hash":"c666c3095387898bbbaafb07318b6961967d08f5","modified":1705850923155},{"_id":"source/_posts/k8s-networkpolicy.md","hash":"01e8e271dbef7aa0fbdfc6c92bc2dde56a9e4ca4","modified":1705851000082},{"_id":"source/_posts/.DS_Store","hash":"7635756b78eb8de40954402fd8d57154a4a72644","modified":1654010449392},{"_id":"source/_posts/kube-eventer.md","hash":"ebe7d74fe4a18e6b324023d76d3b5d2e8c8c3707","modified":1705850923156},{"_id":"source/_posts/observability-fluentd-component.md","hash":"3fcfecdb6b31e09d8490bd2a56ca45e996353224","modified":1705850923158},{"_id":"source/_posts/observability-prometheus-component.md","hash":"93181a61d9712cf682d6e2d48cb4f1a3d769de65","modified":1705850923159},{"_id":"source/_posts/prometheus-grafana-notice.md","hash":"ab282d9fb123fe35af2c4a17afd279fbe95c9920","modified":1705851017732},{"_id":"source/_posts/rabbitmq.md","hash":"429a5392ea04fe323abdb5335d0f3444bfbe681f","modified":1705850923161},{"_id":"source/_posts/ubuntuk8sdeploy.md","hash":"c94077952f0352c0c615b32f9e7ec83ee5a623cb","modified":1705850923162},{"_id":"source/_posts/k8s-network.md","hash":"24f889fcb858471ef961385945e89e54c15c57af","modified":1705850923154},{"_id":"source/_posts/openssl-basic.md","hash":"373e45cf42020ab413b9c547a71308cfe640e232","modified":1705850923160},{"_id":"source/_posts/k8s-network/k8s-nw2.png","hash":"69e0e6620d6d22f2b648b709a49b8dd35041b330","modified":1675869690477},{"_id":"source/_posts/k8s-network/k8s-nw1.png","hash":"391065f8d0bb31b5532d644ef00754cc784cc07d","modified":1675869677601},{"_id":"source/_posts/k8s-network/k8s-nw3.png","hash":"947cc0578cae966815d91c328c6c7d28daf5dff0","modified":1675869696507},{"_id":"source/_posts/k8s-network/k8s-nw8.png","hash":"bbbfb00a31db94cb4ee22af8f05282601eec5681","modified":1675869727798},{"_id":"source/_posts/k8s-ack-learn/.DS_Store","hash":"1a61ae9dbef0d9879707cd241742be82601c8bf6","modified":1654010619084},{"_id":"source/_posts/k8s-ack-learn/k8s4.png","hash":"6aa83ddbf3e30faf0470132a1eed2082d59ef9f9","modified":1653920162553},{"_id":"source/_posts/rabbitmq/rbmq3.png","hash":"18703c0eaba69f5c3ffe7ac1974f2942f94aabb7","modified":1654518818846},{"_id":"source/_posts/rabbitmq/rbmq5.png","hash":"66b61a85a11a414b98118a09f7802fe63cb2b6ed","modified":1654518818847},{"_id":"source/_posts/alicloud-ack-sls-deploy/acksls10.png","hash":"2f8532ccf93fca2a54aeb0b7aa065b470aa482ec","modified":1653920126350},{"_id":"source/_posts/git-flow/gf3.png","hash":"e7d9aa0ab06fc65ae32203b98a354baa1cace26e","modified":1651670077948},{"_id":"source/_posts/helm-deploy/helm3.png","hash":"d3c7998f0a1eea7a45b89f7501d8c0c2184d91d2","modified":1651671979708},{"_id":"source/_posts/helm-deploy/helm2.png","hash":"6f9e17f844e5d17aad5496b36c36e0ff4b361d06","modified":1651671979708},{"_id":"source/_posts/k8s-network/k8s-nw6.png","hash":"044a7ba37a744ebad84deb2218c6540872f34278","modified":1675869715825},{"_id":"source/_posts/k8s-rbac/634be995b5bc.png","hash":"9f543f1ed29803038c5466b3046b48f4f46bb412","modified":1651584022239},{"_id":"source/_posts/k8s-ack-learn/k8s2.png","hash":"a302084342d68c89523f7f689a43ae4767a06c19","modified":1653920171784},{"_id":"source/_posts/observability-fluentd-component/fluent1.png","hash":"8e69e636606804c0dae89683e378d425d52bd912","modified":1657547848157},{"_id":"source/_posts/observability-fluentd-component/fluent3.png","hash":"85db7a11048d6c414d02544b8fbb7c21aae64054","modified":1657547848159},{"_id":"source/_posts/observability-fluentd-component/fluent4.png","hash":"96055366019a53214a52f767312f703fce248703","modified":1657547848160},{"_id":"source/_posts/prometheus-grafana-notice/2.png","hash":"756e78903b14556b0235e5f6f37fc7e0ac639370","modified":1651584022271},{"_id":"source/_posts/rabbitmq/rbmq1.png","hash":"f30671f3bfb12fb7a34404a22f643a11002390bb","modified":1654518818843},{"_id":"source/_posts/rabbitmq/rbmq10.png","hash":"f1a32d7f9c94def34fc8b104e29e6f43a00e41fa","modified":1654518818843},{"_id":"source/_posts/rabbitmq/rbmq11.png","hash":"441c484b202c39a5b77f401cad6b4a089697702d","modified":1654518818844},{"_id":"source/_posts/rabbitmq/rbmq12.png","hash":"44dc4f502174980bb2b10a00026a1dc6f92cba87","modified":1654518818845},{"_id":"source/_posts/rabbitmq/rbmq4.png","hash":"a3cfcf7bbb46f44c1671443a440366e9520c80cf","modified":1654518818846},{"_id":"source/_posts/rabbitmq/rbmq7.png","hash":"2dea294cb0dc369002f2872455223978f1f7b2c9","modified":1654518818848},{"_id":"source/_posts/alicloud-vpc/vpc1.png","hash":"15bfeea34245e4f5510c5e157070ca032e711ceb","modified":1651679770021},{"_id":"source/_posts/alicloud-ack-sls-deploy/acksls12.png","hash":"a3a6908911b93afe3c68cff3026b3334ab457bb1","modified":1653920140862},{"_id":"source/_posts/git-flow/gf12.png","hash":"0a5e4f151242bc29662a43161454b7f2d161458d","modified":1651670077945},{"_id":"source/_posts/git-flow/gf15.png","hash":"54182efd66a40daa1d36b580052edbb296cd8ab2","modified":1651670077947},{"_id":"source/_posts/rabbitmq/rbmq9.png","hash":"1c76e0c1d88db133937bd3f3912a277d830941f6","modified":1654518818849},{"_id":"source/_posts/git-flow/gf8.png","hash":"07444a7a4bbe315081f434a30678f0cc39ba2474","modified":1651670077952},{"_id":"source/_posts/helm-deploy/helm4.png","hash":"bc6b76c4aaf08c5776f11fbf996cc186a7047382","modified":1651671979709},{"_id":"source/_posts/k8s-networkpolicy/2afdc3d69fa9.png","hash":"ee2ec4d29d2516159aeeea040d6f7ddc5f07718f","modified":1651584022251},{"_id":"source/_posts/k8s-network/k8s-nw7.png","hash":"97626dafbe2d67b3f8943cebb33174b4bfe0d790","modified":1675869721653},{"_id":"source/_posts/k8s-ack-learn/k8s1.png","hash":"9547deb721fcaaed961f6ef664dfc950a04fc8f7","modified":1653920177727},{"_id":"source/_posts/k8s-ack-learn/k8s3.png","hash":"18aa943783a1351824bbdb78ae3e0127a9390c42","modified":1653920162163},{"_id":"source/_posts/observability-fluentd-component/fluent2.png","hash":"545be7c6e1000b1ecaf45326bcbe356be3c77110","modified":1657547848158},{"_id":"source/_posts/prometheus-grafana-notice/10.png","hash":"98ebeaf917ff2eaa08e1461eb93ff99b8bbac6cd","modified":1651584022257},{"_id":"source/_posts/prometheus-grafana-notice/8.png","hash":"368f23564344b0e005ccd37d8979488b72214257","modified":1651584022279},{"_id":"source/_posts/rabbitmq/rbmq2.png","hash":"4a7e45905a42332b23da28402bcc306af55b2bf6","modified":1654518818845},{"_id":"source/_posts/alicloud-vpc/vpc2.png","hash":"7ccbcbba992ce1eb64b025e48ff00eeec47884a5","modified":1651679770021},{"_id":"source/_posts/rabbitmq/rbmq6.png","hash":"43c99df943628a5272bd83313f78b3043c3ab388","modified":1654518818847},{"_id":"source/_posts/alicloud-ram-sts/ram2.png","hash":"99f25eec2df909cc9e07d7195c342624b50d58d8","modified":1651584022283},{"_id":"source/_posts/alicloud-ram-sts/ram8.png","hash":"740b8967bcc256d5247207e83af79e11221d24be","modified":1651584022289},{"_id":"source/_posts/alicloud-ram-sts/ram6.png","hash":"781469a74ebe155ab4a9ca08eb0023482ff3297e","modified":1651584022287},{"_id":"source/_posts/rabbitmq/rbmq8.png","hash":"0185b410014d47066a51e10f8ac7555e5081beab","modified":1654518818848},{"_id":"source/_posts/alicloud-ack-sls-deploy/acksls11.png","hash":"31a758e6e7e9a06a35ae0265bd84aedc708661a3","modified":1653920109284},{"_id":"source/_posts/git-flow/gf4.png","hash":"29ca4a085f45728fc270a44e40cd151adfba1a8a","modified":1651670077950},{"_id":"source/_posts/git-flow/gf5.png","hash":"2c349dd6d441189d569759b2152fb4f71e77791d","modified":1651670077950},{"_id":"source/_posts/k8s-network/k8s-nw5.png","hash":"61528716079e575ffab68afecd42eb64e3b3b0ef","modified":1675869710256},{"_id":"source/_posts/k8s-rbac/1572c2ebc891.png","hash":"57f775f88760fdcea12d1143ec21d682960c9e52","modified":1651584022237},{"_id":"source/_posts/k8s-rbac/c31775e8bbe3.png","hash":"a58d8da564b0b4a01447cb0521bbd4198fd3bea2","modified":1651584022242},{"_id":"source/_posts/k8s-rbac/ab8f20ce2acc.png","hash":"af7e38d63e99daa064a42d7f0777863c01eb49b6","modified":1651584022241},{"_id":"source/_posts/prometheus-grafana-notice/1.png","hash":"63c1e5df5faa1a140d3054728da94b29cf70cb75","modified":1651584022256},{"_id":"source/_posts/prometheus-grafana-notice/16.png","hash":"3c5c7cf44aeb7a025d21e6ebd96c204d91c65bcb","modified":1651584022266},{"_id":"source/_posts/prometheus-grafana-notice/3.png","hash":"bd5b4a8679b5b6bb03cf4a6848b3116ea2db722a","modified":1651584022272},{"_id":"source/_posts/prometheus-grafana-notice/5.png","hash":"fcee6b78b57dac400c5bb2fa82c5446140504ad1","modified":1651584022275},{"_id":"source/_posts/prometheus-grafana-notice/6.png","hash":"82f9cea0d6b7b8a86c1efffd9addf06172c465ab","modified":1651584022276},{"_id":"source/_posts/alicloud-ram-sts/ram1.png","hash":"3f81fb567b165494d7b1eb1b25c052bda32c742a","modified":1651584022282},{"_id":"source/_posts/alicloud-vpc/vpc3.png","hash":"a52347fe4ed962a47d1a3d4f0f20cd197ab138a6","modified":1651679770022},{"_id":"source/_posts/alicloud-ram-sts/ram5.png","hash":"b2c5cf28a5480294fabfca8db9f717d6d6487b66","modified":1651584022286},{"_id":"source/_posts/alicloud-ack-sls-deploy/acksls1.png","hash":"0a654c70f52a6403542f3fe2b3369b88239ef1dc","modified":1653920103686},{"_id":"source/_posts/alicloud-ram-sts/ram7.png","hash":"043b10ad0217c47f6835bbcb7b9d5f5a9cd5f988","modified":1651584022288},{"_id":"source/_posts/alicloud-ack-sls-deploy/acksls14.png","hash":"d9cbed932627cf66058634461b79765fa67aad48","modified":1653920143429},{"_id":"source/_posts/alicloud-ack-sls-deploy/acksls13.png","hash":"5c75193323836115fdb0fadf2c0e43e9072f72b9","modified":1653920125517},{"_id":"source/_posts/alicloud-ack-sls-deploy/acksls3.png","hash":"a67f569c44b641ab5facc083aa7a7a02b5f6889c","modified":1653920115325},{"_id":"source/_posts/alicloud-ack-sls-deploy/acksls15.png","hash":"c9212adc1447f708fa092fe1b21b7cd0df2ab0ce","modified":1653920158973},{"_id":"source/_posts/git-flow/gf6.png","hash":"8447116a852a91d68acd947993405b6cf415381d","modified":1651670077951},{"_id":"source/_posts/k8s-rbac/de4222775e67.png","hash":"99be909dcafe21213c13265bd3636ade2f77a415","modified":1651584022249},{"_id":"source/_posts/k8s-rbac/gaisu.png","hash":"c58ef01e18142f1ce637217762542a73367e483e","modified":1651584022250},{"_id":"source/_posts/prometheus-grafana-notice/11.png","hash":"dcc4ad85ab1f4edbc0aa094b53b1d0e8493d8c88","modified":1651584022258},{"_id":"source/_posts/prometheus-grafana-notice/9.png","hash":"7f74a9f47a2d9d83fc82b884b17b8c93a1d05924","modified":1651584022280},{"_id":"source/_posts/git-flow/gf11.png","hash":"3245ba84de0a8fbf411987e2a5901ed9ec2cf6cc","modified":1651670077945},{"_id":"source/_posts/git-flow/gf2.png","hash":"13a289912911701423f80d6083c9af797acc19f5","modified":1651670077947},{"_id":"source/_posts/k8s-networkpolicy/6bbe6aab7201.png","hash":"93e7a9dd7e4b7efe65eceb19d9ca28fba17950a7","modified":1651584022253},{"_id":"source/_posts/helm-deploy/helm5.png","hash":"701a5e3cfd12b99d0db435681a4517428a266325","modified":1651671979709},{"_id":"source/_posts/k8s-networkpolicy/7b70de99e5f7.png","hash":"fd04d7733c5b1447e9c0508d92807fbf9c2421e1","modified":1651584022255},{"_id":"source/_posts/k8s-rbac/7528aa1bf3da.png","hash":"9c579e40e532170a13b32abec1ebaf39378670e1","modified":1651584022241},{"_id":"source/_posts/k8s-rbac/21812e1bbfad.png","hash":"ce2e8a583d00ee261c661986dc611400c87ba818","modified":1651584022239},{"_id":"source/_posts/prometheus-grafana-notice/15.png","hash":"9bcf9769e3261a8ca84251085db63ca00078ea38","modified":1651584022265},{"_id":"source/_posts/prometheus-grafana-notice/13.png","hash":"b46a01d70f0397d238893562c74177e2620e96fa","modified":1651584022262},{"_id":"source/_posts/prometheus-grafana-notice/7.png","hash":"d46ccdd0c1fec9379f28dc153dfcd53aaa3e75d6","modified":1651584022278},{"_id":"source/_posts/alicloud-ram-sts/ram4.png","hash":"d7c69a6cd55e5c6761f8d10f97df6fec7ca192d0","modified":1651584022284},{"_id":"source/_posts/alicloud-ack-sls-deploy/acksls16.png","hash":"10b6bbc9aca654654d36d546848c36c7e893a83e","modified":1653920107322},{"_id":"source/_posts/alicloud-ack-sls-deploy/acksls5.png","hash":"10797ce6eeb03d68022ed53cf543d7bc88ef6522","modified":1653920112638},{"_id":"source/_posts/alicloud-ack-sls-deploy/acksls6.png","hash":"4dfbdbb054223b440881864813745ea01b1085e4","modified":1653920135134},{"_id":"source/_posts/alicloud-ack-sls-deploy/acksls7.png","hash":"9b5a20e762e7f096539bb4bdc0780babd7524762","modified":1653920146971},{"_id":"source/_posts/git-flow/gf14.png","hash":"a55c37098012fe7c2357f160f18b46fa3375befd","modified":1651670077946},{"_id":"source/_posts/git-flow/gf13.png","hash":"67bcb850aae40f8cfa0f0f004faf78c84a27ae36","modified":1651670077946},{"_id":"source/_posts/git-flow/gf7.png","hash":"977bd10d62f62daf2f10692e75df6c011bf7c1fe","modified":1651670077952},{"_id":"source/_posts/prometheus-grafana-notice/14.png","hash":"501f84e8376fedc0036539ba36fd9e69c0906b47","modified":1651584022264},{"_id":"source/_posts/alicloud-vpc/vpc4.png","hash":"9334c5fb57bb6b8991b3b8ef86794ee8f5c27247","modified":1651679770022},{"_id":"source/_posts/git-flow/gf1.png","hash":"4ef3ab2f2f41d15d31e6f1845403bbfabb59d9df","modified":1651670077943},{"_id":"source/_posts/k8s-rbac/d6da8c845c41.png","hash":"b614ff7f3d18a32abedd27f042286d3e911400e3","modified":1651584022245},{"_id":"source/_posts/prometheus-grafana-notice/12.png","hash":"49545c7daa918e583dc69dbd75d33b9fe0d2ded1","modified":1651584022260},{"_id":"source/_posts/prometheus-grafana-notice/4.png","hash":"34b58260b8187846fab853620311e97d3b50033a","modified":1651584022274},{"_id":"source/_posts/alicloud-ack-sls-deploy/acksls2.png","hash":"fd46498cc37b4852ca2b8be3f412d75c1de791e9","modified":1653920139411},{"_id":"source/_posts/alicloud-ack-sls-deploy/acksls4.png","hash":"685f32a6227218888bbb828665a0d29ff08e11ce","modified":1653920131705},{"_id":"source/_posts/git-flow/gf10.png","hash":"b23b6cb991497506195c01c55fc54fa5a912d339","modified":1651670077944},{"_id":"source/_posts/openssl-basic/openssl-1.jpeg","hash":"f6a7f58030452e9791c4d9e7ec374d7b563c77df","modified":1670511255571},{"_id":"source/_posts/git-flow/gf9.png","hash":"699f349910e318ba1d8cdd63be891ac58b2d5747","modified":1651670077953},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1651584022289},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1651584022289},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1651584022290},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1651584022289},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1651584022289},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1651584022290},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1651584022290},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1651584022299},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1651584022290},{"_id":"themes/next/_config.yml","hash":"34c938e0ca5b9ba59cacc10d5497cb34fc11f5f0","modified":1651584022290},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1651584022290},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1651584022292},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1651584022290},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1651584022290},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1651584022291},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1651584022291},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1651584022290},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1651584022291},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1651584022291},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1651584022291},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1651584022292},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1651584022293},{"_id":"themes/next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1651584022293},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1651584022293},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1651584022293},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1651584022293},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1651584022293},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1651584022293},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1651584022293},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1651584022293},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1651584022293},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1651584022293},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1651584022294},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1651584022294},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1651584022293},{"_id":"themes/next/languages/tr.yml","hash":"2b041eeb8bd096f549464f191cfc1ea0181daca4","modified":1651584022294},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1651584022294},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1651584022294},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1651584022293},{"_id":"themes/next/languages/zh-CN.yml","hash":"bd5106b400ddd02ad81bd3d0a47e7ea6704dc008","modified":1651584022294},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1651584022294},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1651584022294},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1651584022294},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1651584022299},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1651584022298},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1651584022301},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1651584022299},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1651584022299},{"_id":"themes/next/layout/page.swig","hash":"aa9ce35a7880cd043ab3241bcd7707da18079cad","modified":1651584022299},{"_id":"themes/next/layout/tag-color.swig","hash":"5826fca287979119e35f4d194e1aa17413503bd4","modified":1651584022299},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1651584022299},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1651584022291},{"_id":"themes/next/source/.DS_Store","hash":"f131619ff937b89bd60097b66ac9f16b740fe029","modified":1724936654496},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1651584022291},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1651584022291},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1651584022292},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1651584022292},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1651584022292},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1651584022292},{"_id":"themes/next/source/404.html","hash":"cb36e99331f1059bcd0f0f67763e6689e22eba9a","modified":1724935547213},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1651584022292},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1651584022291},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1651584022292},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1651584022292},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1651584022292},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1651584022294},{"_id":"themes/next/layout/_macro/post.swig","hash":"f56c340777b8c530ef0ca2ff1e606a703d1c0acc","modified":1651584022294},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6cc5719d5db80d70a7db9e53c7e031b1b021e145","modified":1651584022294},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1651584022292},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1651584022296},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1651584022296},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1651584022296},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1651584022294},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1651584022295},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4369b313cbbeae742cb35f86d23d99d4285f7359","modified":1651584022294},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1651584022296},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1651584022295},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1651584022296},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1651584022296},{"_id":"themes/next/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1651584022299},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1651584022300},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1651584022297},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1651584022297},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1651584022300},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1651584022300},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1651584022300},{"_id":"themes/next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1651584022300},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1651584022301},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1651584022301},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1651584022301},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1651584022298},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1651584022298},{"_id":"themes/next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1651584022301},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1651584022301},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1651584022301},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1651584022301},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1651584022301},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1651584022301},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1651584022301},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1651584022301},{"_id":"themes/next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1651584022302},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1651584022301},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1651584022302},{"_id":"themes/next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1651584022302},{"_id":"themes/next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1651584022306},{"_id":"themes/next/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1651584022310},{"_id":"themes/next/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1651584022310},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1651584022308},{"_id":"themes/next/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1651584022311},{"_id":"themes/next/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1651584022311},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1651584022311},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1651584022308},{"_id":"themes/next/source/images/android-chrome-192x192.png","hash":"cceef8d2b5000ccaf07441815a928ed569d7befe","modified":1724907808000},{"_id":"themes/next/source/images/apple-touch-icon.png","hash":"45a73040134a7034b8245bd3d59bedbd045ea31f","modified":1724907808000},{"_id":"themes/next/source/images/android-chrome-512x512.png","hash":"9e228026245f101325ff9a0b1022d92d9b47c7be","modified":1724907808000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1651584022309},{"_id":"themes/next/source/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1651584022311},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1651584022309},{"_id":"themes/next/source/images/.DS_Store","hash":"9bef97296eecc43d0d791ae05c95093deb65b286","modified":1724936701718},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1651584022310},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1651584022310},{"_id":"themes/next/source/images/favicon-16x16.png","hash":"8b5ca499cc5685f629f28219c10056466842aedf","modified":1724907808000},{"_id":"themes/next/source/images/favicon.ico","hash":"bd55b6d87a8138974a88950eba2d1c7d1c3f048b","modified":1724907808000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1651584022310},{"_id":"themes/next/source/images/favicon-32x32.png","hash":"c0d78017d384b14a506b643d5da5922cd9c874f4","modified":1724907808000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1651584022310},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1651584022310},{"_id":"themes/next/source/images/logo.svg","hash":"264fd86714b6f257a4cdafa42fc8e8d01432f1fb","modified":1651584022310},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1651584022311},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1651584022296},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1651584022296},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1651584022296},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1651584022296},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1651584022294},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1651584022296},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1651584022295},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1651584022295},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1651584022295},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1651584022295},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1651584022295},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1651584022295},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1651584022295},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1651584022295},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1651584022295},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1651584022295},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1651584022295},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1651584022295},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1651584022295},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1651584022296},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1651584022296},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1651584022295},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"47043445214a28a0bda3a30e4742bf16c0a98b64","modified":1651584022296},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1651584022297},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1651584022297},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1651584022297},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1651584022297},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1651584022297},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1651584022297},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1651584022297},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1651584022297},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1651584022297},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1651584022297},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1651584022297},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1651584022297},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1651584022297},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1651584022298},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1651584022298},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1651584022298},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1651584022298},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1651584022298},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1651584022298},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1651584022298},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1651584022299},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1651584022298},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1651584022298},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1651584022298},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1651584022299},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1651584022300},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1651584022300},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1651584022300},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1651584022299},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1651584022300},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1651584022298},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1651584022300},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1651584022300},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1651584022300},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1651584022300},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1651584022298},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1651584022308},{"_id":"themes/next/source/css/_variables/base.styl","hash":"66c09b8c9e5287521200b162a9c4e4305135afa1","modified":1651584022308},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1651584022308},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1651584022311},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1651584022308},{"_id":"themes/next/source/lib/pace/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1651584022312},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1651584022312},{"_id":"themes/next/source/lib/pace/README.md","hash":"168f57bb63563b9671d0c4f10c0940e7eec261f0","modified":1651584022312},{"_id":"themes/next/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1651584022311},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1651584022312},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1651584022312},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1651584022312},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1651584022308},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1651584022312},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1651584022312},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1651584022313},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1651584022312},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1651584022313},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1651584022313},{"_id":"themes/next/source/lib/pace/pace-theme-flat-top.min.css","hash":"5e1c97e232b46e48592a8e4983ae5a89e0a7da6a","modified":1651584022313},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1651584022313},{"_id":"themes/next/source/lib/pace/pace-theme-material.min.css","hash":"f1ff83985c090f3a3236554c5ef69542dcceb049","modified":1651584022313},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1651584022313},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1651584022313},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1651584022313},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1651584022313},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1651584022302},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1651584022302},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1651584022304},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1651584022303},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1651584022305},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1651584022304},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1651584022305},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1651584022305},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1651584022305},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1651584022306},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1651584022302},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1651584022313},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1651584022306},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1651584022306},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1651584022307},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1651584022307},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1651584022307},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1651584022307},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1651584022307},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1651584022306},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1651584022306},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1651584022306},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1651584022307},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1651584022306},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1651584022307},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1651584022306},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1651584022307},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1651584022307},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1651584022307},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1651584022307},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1651584022307},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1651584022311},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1651584022312},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1651584022307},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1651584022302},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1651584022302},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1651584022305},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1651584022302},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1651584022303},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1651584022302},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1651584022303},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1651584022302},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1651584022303},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1651584022303},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1651584022303},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1651584022303},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1651584022303},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1651584022303},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1651584022303},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1651584022303},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1651584022303},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1651584022303},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1651584022304},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"cea1527ce53d0c475c16ae594dd9d87595273ae1","modified":1651584022303},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1651584022304},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1651584022303},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1651584022304},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1651584022303},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1651584022304},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1651584022304},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1651584022304},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1651584022304},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1651584022304},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1651584022304},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1651584022304},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1651584022304},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1651584022305},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"b6ee998e33337e9ade63f201d00f3cc4ddd367b8","modified":1651584022305},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1651584022304},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1651584022305},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1651584022305},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1651584022304},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1651584022305},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1651584022305},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1651584022305},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1651584022305},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1651584022305},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1651584022305},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1651584022305},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1651584022305},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1651584022306},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1651584022306},{"_id":"source/_posts/k8s-rbac/de3ebdd4f016.png","hash":"b6a766011b329f668f083b6714e9842f565c3e73","modified":1651584022247},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1651584022306},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1651584022306},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1651584022306},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1651584022306},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1651584022306},{"_id":"themes/next/source/images/avatar.jpg","hash":"ebb2d834abbab660efa98d2db960aaf4270476f1","modified":1651584022308},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1651584022312},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1651584022312},{"_id":"source/_posts/k8s-network/k8s-nw4.png","hash":"2ce625b08cdf95ae45190ae29c6329887da573b0","modified":1675869703683},{"_id":"themes/next/source/images/background.jpeg","hash":"b9e6ecf7699b5fd7c95f50d56d2b48afe62e4488","modified":1651584022309},{"_id":"source/_posts/prometheus-grafana-notice/17.png","hash":"4233ab5fda184bb53e8a7eb413ca09bcbb9f0e54","modified":1651584022270},{"_id":"source/_posts/alicloud-ack-sls-deploy/acksls9.png","hash":"18695f8a86c0a8049b1f3804572808eceaf0ee06","modified":1653920123512},{"_id":"source/_posts/alicloud-ack-sls-deploy/acksls8.png","hash":"f5de58a056403ff94e0cafc3b578f531e8020572","modified":1653920156300},{"_id":"source/_posts/helm-deploy/helm1.png","hash":"2ab9276bbc7a6e87221fbd9bf589ee074d4c651c","modified":1651671979707},{"_id":"public/404.html","hash":"c22de48b6a94cbb09c2cc7ae281100525590d007","modified":1724936763262},{"_id":"public/atom.xml","hash":"92a6b2fa4704be6a917bbf23ceb739d979cf45de","modified":1724936763262},{"_id":"public/search.xml","hash":"88fc544f451794b890d7b7a188d914a6fa80d147","modified":1724936763262},{"_id":"public/musiclist/index.html","hash":"8e2101f2a799c84f3dd01ccf033818425897cade","modified":1724936763262},{"_id":"public/tags/index.html","hash":"299e7d9bb5ad166db14d15d8a87d6659bfc46ceb","modified":1724936763262},{"_id":"public/categories/index.html","hash":"c2ea962e70e3719f2c746060331c4f0fd5373783","modified":1724936763262},{"_id":"public/about/index.html","hash":"6d9fc299dbeedb0c0beb48d7db4c381566f715bb","modified":1724936763262},{"_id":"public/posts/c018.html","hash":"a89ee8df3c90327eb9c0d99b1356ff5fb54851e7","modified":1724936763262},{"_id":"public/posts/5d90.html","hash":"6bdb66589841b6a3db8882708cb0c60dc3eebb16","modified":1724936763262},{"_id":"public/posts/b8bc.html","hash":"111cc623e1aec16b3d384abac9b6cbad76139f57","modified":1724936763262},{"_id":"public/posts/2ead.html","hash":"c46ff72be882f4999db9725a01eed754077e4fd0","modified":1724936763262},{"_id":"public/posts/41fe.html","hash":"c79285951efec1fe2f728bbae5055c662cf58132","modified":1724936763262},{"_id":"public/posts/6bfb.html","hash":"d1ce21d4d3eafd1785134857f81c00d962ee3556","modified":1724936763262},{"_id":"public/posts/28d6.html","hash":"c8d911abe154f6510054433846d3ce3cac1eefba","modified":1724936763262},{"_id":"public/posts/9bae.html","hash":"bb6aa6d4a73cadf34ded281cf79c40396944f0b4","modified":1724936763262},{"_id":"public/posts/dc02.html","hash":"3145e973d440f8c1686ec3fb035b8d14750fc60a","modified":1724936763262},{"_id":"public/posts/754e.html","hash":"954404a22b4b70b0da88381a2ba070844450ded2","modified":1724936763262},{"_id":"public/posts/4a2a.html","hash":"9af8746d505b975637dc349721f28fb155b70730","modified":1724936763262},{"_id":"public/posts/539.html","hash":"70c4e8e9317f4157c4f2d3da62bf270ad0d3889c","modified":1724936763262},{"_id":"public/posts/64a8.html","hash":"9303fff29b220bf2e8d5df8de6413448484942dd","modified":1724936763262},{"_id":"public/posts/9a8h.html","hash":"1a6473f7d0838f23cec2bfa9e01fa27932e46304","modified":1724936763262},{"_id":"public/posts/fdc.html","hash":"4c262d22191761186973cf524de6a2b522411c4b","modified":1724936763262},{"_id":"public/posts/8aa0.html","hash":"40910a9136a9a64aac830274b727bdfc1832d2d3","modified":1724936763262},{"_id":"public/posts/fa45.html","hash":"8b03c25a622570d35d61b8a2615fe2dc4eac71fd","modified":1724936763262},{"_id":"public/posts/3eeb.html","hash":"f53b03304e96a09d8b13270b0bf2085beb411914","modified":1724936763262},{"_id":"public/posts/ce0f.html","hash":"59559538ff7c0b6a022c9471e38e2d0d8a0a04fe","modified":1724936763262},{"_id":"public/categories/alicloud/index.html","hash":"b2c370374664a3b245562b071a02dcbc0a5c0a2d","modified":1724936763262},{"_id":"public/categories/container/index.html","hash":"a5cfecd79edd92af99b1f8e99c2dce3eacd0f914","modified":1724936763262},{"_id":"public/categories/cncf/index.html","hash":"9a4039849d6c3a1f08fd9a565baf23de60b79a25","modified":1724936763262},{"_id":"public/categories/operations/index.html","hash":"a47cd6223895cdca85a6cdd906d722d0b2762fdf","modified":1724936763262},{"_id":"public/categories/alicloud/network/index.html","hash":"6b737efb249f32135a53760a16567d103516d2ea","modified":1724936763262},{"_id":"public/categories/alicloud/cncf/index.html","hash":"c6368df37b36addc239e7884042a6a08490296d5","modified":1724936763262},{"_id":"public/categories/cncf/alicloud/index.html","hash":"4482c83801549ff22db384ad5977e1ac60801db7","modified":1724936763262},{"_id":"public/categories/middleware/index.html","hash":"32d2dcc8631215b7a281bb0ebd7f7603c83bdff1","modified":1724936763262},{"_id":"public/archives/index.html","hash":"1265b52a1257111abaa0bdca8b6c175228279317","modified":1724936763262},{"_id":"public/archives/page/2/index.html","hash":"1d33d8ce2a09bb9fa2aa99999e5c090116dfa992","modified":1724936763262},{"_id":"public/archives/2022/index.html","hash":"7077e635886f265ecfb722d31ddda8a50ab706b4","modified":1724936763262},{"_id":"public/archives/2022/page/2/index.html","hash":"ad4c8f9f3920360dcf87b726fbe1b5c1b0d9e1d2","modified":1724936763262},{"_id":"public/archives/2022/02/index.html","hash":"3bc9b36da50eed8a32c59cb5e2f0e9aed188cb46","modified":1724936763262},{"_id":"public/archives/2022/03/index.html","hash":"a2b1b749f4e9d7dc3378b8d61d9dfef5f2215dcd","modified":1724936763262},{"_id":"public/archives/2022/05/index.html","hash":"bc93b0618c3e051eb06b3ab906cdbe72664f273f","modified":1724936763262},{"_id":"public/archives/2022/06/index.html","hash":"d8528a8036f92ae0cb46e73eb8841597ff344ffd","modified":1724936763262},{"_id":"public/archives/2022/07/index.html","hash":"e389b188f7b5eade9d611e1ae3be41e1c83824f1","modified":1724936763262},{"_id":"public/archives/2022/09/index.html","hash":"05ef72a1c1922db27fe5a463dd9b4db259715e84","modified":1724936763262},{"_id":"public/archives/2022/12/index.html","hash":"5ae1232fbb1b11a173c194153479b4fec5f27a42","modified":1724936763262},{"_id":"public/archives/2023/index.html","hash":"743fc3f7b8f7e2be6ceb61776a7432ba64dffe1f","modified":1724936763262},{"_id":"public/archives/2023/02/index.html","hash":"9626d3a7bd174ca8fd108f6b39c6bb6abad68d43","modified":1724936763262},{"_id":"public/archives/2024/index.html","hash":"64e7b9002de9d56ae2bc1c668f13d3fc74752452","modified":1724936763262},{"_id":"public/archives/2024/01/index.html","hash":"045f2ece0a909c24537f7d0408044a21e2090820","modified":1724936763262},{"_id":"public/tags/ack/index.html","hash":"fb3a82229349518da7f86238733e14b1624abbad","modified":1724936763262},{"_id":"public/tags/ram/index.html","hash":"64682532639812dd2f17ae33da25c960257d2998","modified":1724936763262},{"_id":"public/tags/vpc/index.html","hash":"6b1a89433b33365b24283be40868568fad6a0b6a","modified":1724936763262},{"_id":"public/tags/docker/index.html","hash":"639835c524dd9a87695313f938e36692d7622b72","modified":1724936763262},{"_id":"public/tags/istio/index.html","hash":"2db02c65303c0a3408643c6a97784035d61f6647","modified":1724936763262},{"_id":"public/tags/git/index.html","hash":"ab5739a74e6d4cbc4909eb74faa52f6641587b12","modified":1724936763262},{"_id":"public/tags/alicloud/index.html","hash":"5f13a84b61e09ae05fe2f43590f8f216bae07809","modified":1724936763262},{"_id":"public/tags/kubernetes/index.html","hash":"44e25850bc9dcd3bcd17d6637f5bb34b6ba183c8","modified":1724936763262},{"_id":"public/tags/observability/index.html","hash":"4f8a8393b2bd1be83e645cb62b1121634a15ac9d","modified":1724936763262},{"_id":"public/tags/openssl/index.html","hash":"beffb1a6d462f89a2cdf447d5df6b008963c98ab","modified":1724936763262},{"_id":"public/tags/linux/index.html","hash":"04c439d0d455fc8b3cc57df7b6c2e0b6e4752457","modified":1724936763262},{"_id":"public/posts/fdc/ram3.png","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1724936763262},{"_id":"public/tags/rabbitmq/index.html","hash":"48d7ba5daf06a646a12e4478d8c6597f18190338","modified":1724936763262},{"_id":"public/page/2/index.html","hash":"3525f71c1fde52fa934b6bc646c6b0004154f572","modified":1724936763262},{"_id":"public/index.html","hash":"311ff8f3d7bc9885daf0ee4e13cce99376107905","modified":1724936763262},{"_id":"public/images/android-chrome-512x512.png","hash":"9e228026245f101325ff9a0b1022d92d9b47c7be","modified":1724936763262},{"_id":"public/images/apple-touch-icon.png","hash":"45a73040134a7034b8245bd3d59bedbd045ea31f","modified":1724936763262},{"_id":"public/images/android-chrome-192x192.png","hash":"cceef8d2b5000ccaf07441815a928ed569d7befe","modified":1724936763262},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1724936763262},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1724936763262},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1724936763262},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1724936763262},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1724936763262},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1724936763262},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1724936763262},{"_id":"public/images/favicon-32x32.png","hash":"c0d78017d384b14a506b643d5da5922cd9c874f4","modified":1724936763262},{"_id":"public/images/favicon-16x16.png","hash":"8b5ca499cc5685f629f28219c10056466842aedf","modified":1724936763262},{"_id":"public/images/logo.svg","hash":"264fd86714b6f257a4cdafa42fc8e8d01432f1fb","modified":1724936763262},{"_id":"public/lib/pace/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1724936763262},{"_id":"public/images/favicon.ico","hash":"bd55b6d87a8138974a88950eba2d1c7d1c3f048b","modified":1724936763262},{"_id":"public/CNAME","hash":"d51215c5b96a0da78f3308a910cdce7d308f31cb","modified":1724936763262},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1724936763262},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1724936763262},{"_id":"public/posts/754e/k8s4.png","hash":"6aa83ddbf3e30faf0470132a1eed2082d59ef9f9","modified":1724936763262},{"_id":"public/posts/5d90/k8s-nw1.png","hash":"391065f8d0bb31b5532d644ef00754cc784cc07d","modified":1724936763262},{"_id":"public/posts/5d90/k8s-nw2.png","hash":"69e0e6620d6d22f2b648b709a49b8dd35041b330","modified":1724936763262},{"_id":"public/posts/5d90/k8s-nw3.png","hash":"947cc0578cae966815d91c328c6c7d28daf5dff0","modified":1724936763262},{"_id":"public/posts/5d90/k8s-nw8.png","hash":"bbbfb00a31db94cb4ee22af8f05282601eec5681","modified":1724936763262},{"_id":"public/posts/9bae/rbmq3.png","hash":"18703c0eaba69f5c3ffe7ac1974f2942f94aabb7","modified":1724936763262},{"_id":"public/posts/9bae/rbmq5.png","hash":"66b61a85a11a414b98118a09f7802fe63cb2b6ed","modified":1724936763262},{"_id":"public/images/avatar.jpg","hash":"ebb2d834abbab660efa98d2db960aaf4270476f1","modified":1724936763262},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1724936763262},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1724936763262},{"_id":"public/assets/js/Meting.min.js","hash":"a0585220b918d78649a7893279e1ec4fb5abe835","modified":1724936763262},{"_id":"public/assets/css/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1724936763262},{"_id":"public/assets/js/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1724936763262},{"_id":"public/posts/4a2a/acksls10.png","hash":"2f8532ccf93fca2a54aeb0b7aa065b470aa482ec","modified":1724936763262},{"_id":"public/posts/ce0f/helm3.png","hash":"d3c7998f0a1eea7a45b89f7501d8c0c2184d91d2","modified":1724936763262},{"_id":"public/posts/ce0f/helm2.png","hash":"6f9e17f844e5d17aad5496b36c36e0ff4b361d06","modified":1724936763262},{"_id":"public/posts/754e/k8s2.png","hash":"a302084342d68c89523f7f689a43ae4767a06c19","modified":1724936763262},{"_id":"public/posts/539/gf3.png","hash":"e7d9aa0ab06fc65ae32203b98a354baa1cace26e","modified":1724936763262},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1724936763262},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1724936763262},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1724936763262},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1724936763262},{"_id":"public/css/main.css","hash":"f0faaa06e3c39e0907eb2281ec1caf2a759f00ae","modified":1724936763262},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1724936763262},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1724936763262},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1724936763262},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1724936763262},{"_id":"public/lib/pace/README.html","hash":"b1db0e6c71c25fbdc5a161e1bd70382846ce99ab","modified":1724936763262},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1724936763262},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1724936763262},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1724936763262},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1724936763262},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1724936763262},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1724936763262},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1724936763262},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1724936763262},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1724936763262},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1724936763262},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1724936763262},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1724936763262},{"_id":"public/lib/pace/pace-theme-material.min.css","hash":"f1ff83985c090f3a3236554c5ef69542dcceb049","modified":1724936763262},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1724936763262},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1724936763262},{"_id":"public/lib/pace/pace-theme-flat-top.min.css","hash":"5e1c97e232b46e48592a8e4983ae5a89e0a7da6a","modified":1724936763262},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1724936763262},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1724936763262},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1724936763262},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1724936763262},{"_id":"public/posts/41fe/fluent1.png","hash":"8e69e636606804c0dae89683e378d425d52bd912","modified":1724936763262},{"_id":"public/posts/41fe/fluent3.png","hash":"85db7a11048d6c414d02544b8fbb7c21aae64054","modified":1724936763262},{"_id":"public/posts/41fe/fluent4.png","hash":"96055366019a53214a52f767312f703fce248703","modified":1724936763262},{"_id":"public/posts/fa45/634be995b5bc.png","hash":"9f543f1ed29803038c5466b3046b48f4f46bb412","modified":1724936763262},{"_id":"public/posts/5d90/k8s-nw6.png","hash":"044a7ba37a744ebad84deb2218c6540872f34278","modified":1724936763262},{"_id":"public/posts/9bae/rbmq1.png","hash":"f30671f3bfb12fb7a34404a22f643a11002390bb","modified":1724936763262},{"_id":"public/posts/9bae/rbmq10.png","hash":"f1a32d7f9c94def34fc8b104e29e6f43a00e41fa","modified":1724936763262},{"_id":"public/posts/9bae/rbmq12.png","hash":"44dc4f502174980bb2b10a00026a1dc6f92cba87","modified":1724936763262},{"_id":"public/posts/9bae/rbmq11.png","hash":"441c484b202c39a5b77f401cad6b4a089697702d","modified":1724936763262},{"_id":"public/posts/9bae/rbmq4.png","hash":"a3cfcf7bbb46f44c1671443a440366e9520c80cf","modified":1724936763262},{"_id":"public/posts/9bae/rbmq7.png","hash":"2dea294cb0dc369002f2872455223978f1f7b2c9","modified":1724936763262},{"_id":"public/posts/9bae/rbmq9.png","hash":"1c76e0c1d88db133937bd3f3912a277d830941f6","modified":1724936763262},{"_id":"public/posts/9a8h/2.png","hash":"756e78903b14556b0235e5f6f37fc7e0ac639370","modified":1724936763262},{"_id":"public/posts/64a8/vpc1.png","hash":"15bfeea34245e4f5510c5e157070ca032e711ceb","modified":1724936763262},{"_id":"public/posts/4a2a/acksls12.png","hash":"a3a6908911b93afe3c68cff3026b3334ab457bb1","modified":1724936763262},{"_id":"public/posts/ce0f/helm4.png","hash":"bc6b76c4aaf08c5776f11fbf996cc186a7047382","modified":1724936763262},{"_id":"public/posts/754e/k8s1.png","hash":"9547deb721fcaaed961f6ef664dfc950a04fc8f7","modified":1724936763262},{"_id":"public/posts/754e/k8s3.png","hash":"18aa943783a1351824bbdb78ae3e0127a9390c42","modified":1724936763262},{"_id":"public/posts/539/gf12.png","hash":"0a5e4f151242bc29662a43161454b7f2d161458d","modified":1724936763262},{"_id":"public/posts/539/gf15.png","hash":"54182efd66a40daa1d36b580052edbb296cd8ab2","modified":1724936763262},{"_id":"public/posts/539/gf8.png","hash":"07444a7a4bbe315081f434a30678f0cc39ba2474","modified":1724936763262},{"_id":"public/posts/8aa0/2afdc3d69fa9.png","hash":"ee2ec4d29d2516159aeeea040d6f7ddc5f07718f","modified":1724936763262},{"_id":"public/posts/41fe/fluent2.png","hash":"545be7c6e1000b1ecaf45326bcbe356be3c77110","modified":1724936763262},{"_id":"public/posts/5d90/k8s-nw7.png","hash":"97626dafbe2d67b3f8943cebb33174b4bfe0d790","modified":1724936763262},{"_id":"public/posts/9bae/rbmq2.png","hash":"4a7e45905a42332b23da28402bcc306af55b2bf6","modified":1724936763262},{"_id":"public/posts/9bae/rbmq8.png","hash":"0185b410014d47066a51e10f8ac7555e5081beab","modified":1724936763262},{"_id":"public/posts/9bae/rbmq6.png","hash":"43c99df943628a5272bd83313f78b3043c3ab388","modified":1724936763262},{"_id":"public/posts/9a8h/10.png","hash":"98ebeaf917ff2eaa08e1461eb93ff99b8bbac6cd","modified":1724936763262},{"_id":"public/posts/9a8h/8.png","hash":"368f23564344b0e005ccd37d8979488b72214257","modified":1724936763262},{"_id":"public/posts/fdc/ram2.png","hash":"99f25eec2df909cc9e07d7195c342624b50d58d8","modified":1724936763262},{"_id":"public/posts/64a8/vpc2.png","hash":"7ccbcbba992ce1eb64b025e48ff00eeec47884a5","modified":1724936763262},{"_id":"public/posts/fdc/ram6.png","hash":"781469a74ebe155ab4a9ca08eb0023482ff3297e","modified":1724936763262},{"_id":"public/posts/fdc/ram8.png","hash":"740b8967bcc256d5247207e83af79e11221d24be","modified":1724936763262},{"_id":"public/posts/4a2a/acksls11.png","hash":"31a758e6e7e9a06a35ae0265bd84aedc708661a3","modified":1724936763262},{"_id":"public/posts/539/gf5.png","hash":"2c349dd6d441189d569759b2152fb4f71e77791d","modified":1724936763262},{"_id":"public/posts/539/gf4.png","hash":"29ca4a085f45728fc270a44e40cd151adfba1a8a","modified":1724936763262},{"_id":"public/posts/fa45/1572c2ebc891.png","hash":"57f775f88760fdcea12d1143ec21d682960c9e52","modified":1724936763262},{"_id":"public/posts/fa45/ab8f20ce2acc.png","hash":"af7e38d63e99daa064a42d7f0777863c01eb49b6","modified":1724936763262},{"_id":"public/posts/fa45/c31775e8bbe3.png","hash":"a58d8da564b0b4a01447cb0521bbd4198fd3bea2","modified":1724936763262},{"_id":"public/posts/5d90/k8s-nw5.png","hash":"61528716079e575ffab68afecd42eb64e3b3b0ef","modified":1724936763262},{"_id":"public/posts/9a8h/1.png","hash":"63c1e5df5faa1a140d3054728da94b29cf70cb75","modified":1724936763262},{"_id":"public/posts/9a8h/3.png","hash":"bd5b4a8679b5b6bb03cf4a6848b3116ea2db722a","modified":1724936763262},{"_id":"public/posts/9a8h/16.png","hash":"3c5c7cf44aeb7a025d21e6ebd96c204d91c65bcb","modified":1724936763262},{"_id":"public/posts/9a8h/5.png","hash":"fcee6b78b57dac400c5bb2fa82c5446140504ad1","modified":1724936763262},{"_id":"public/posts/9a8h/6.png","hash":"82f9cea0d6b7b8a86c1efffd9addf06172c465ab","modified":1724936763262},{"_id":"public/posts/64a8/vpc3.png","hash":"a52347fe4ed962a47d1a3d4f0f20cd197ab138a6","modified":1724936763262},{"_id":"public/posts/fdc/ram1.png","hash":"3f81fb567b165494d7b1eb1b25c052bda32c742a","modified":1724936763262},{"_id":"public/posts/fdc/ram7.png","hash":"043b10ad0217c47f6835bbcb7b9d5f5a9cd5f988","modified":1724936763262},{"_id":"public/posts/fdc/ram5.png","hash":"b2c5cf28a5480294fabfca8db9f717d6d6487b66","modified":1724936763262},{"_id":"public/posts/4a2a/acksls1.png","hash":"0a654c70f52a6403542f3fe2b3369b88239ef1dc","modified":1724936763262},{"_id":"public/posts/4a2a/acksls13.png","hash":"5c75193323836115fdb0fadf2c0e43e9072f72b9","modified":1724936763262},{"_id":"public/posts/4a2a/acksls14.png","hash":"d9cbed932627cf66058634461b79765fa67aad48","modified":1724936763262},{"_id":"public/posts/4a2a/acksls15.png","hash":"c9212adc1447f708fa092fe1b21b7cd0df2ab0ce","modified":1724936763262},{"_id":"public/posts/4a2a/acksls3.png","hash":"a67f569c44b641ab5facc083aa7a7a02b5f6889c","modified":1724936763262},{"_id":"public/posts/539/gf6.png","hash":"8447116a852a91d68acd947993405b6cf415381d","modified":1724936763262},{"_id":"public/posts/fa45/gaisu.png","hash":"c58ef01e18142f1ce637217762542a73367e483e","modified":1724936763262},{"_id":"public/posts/fa45/de4222775e67.png","hash":"99be909dcafe21213c13265bd3636ade2f77a415","modified":1724936763262},{"_id":"public/posts/9a8h/11.png","hash":"dcc4ad85ab1f4edbc0aa094b53b1d0e8493d8c88","modified":1724936763262},{"_id":"public/posts/9a8h/9.png","hash":"7f74a9f47a2d9d83fc82b884b17b8c93a1d05924","modified":1724936763262},{"_id":"public/images/background.jpeg","hash":"b9e6ecf7699b5fd7c95f50d56d2b48afe62e4488","modified":1724936763262},{"_id":"public/posts/ce0f/helm5.png","hash":"701a5e3cfd12b99d0db435681a4517428a266325","modified":1724936763262},{"_id":"public/posts/539/gf11.png","hash":"3245ba84de0a8fbf411987e2a5901ed9ec2cf6cc","modified":1724936763262},{"_id":"public/posts/539/gf2.png","hash":"13a289912911701423f80d6083c9af797acc19f5","modified":1724936763262},{"_id":"public/posts/8aa0/7b70de99e5f7.png","hash":"fd04d7733c5b1447e9c0508d92807fbf9c2421e1","modified":1724936763262},{"_id":"public/posts/8aa0/6bbe6aab7201.png","hash":"93e7a9dd7e4b7efe65eceb19d9ca28fba17950a7","modified":1724936763262},{"_id":"public/posts/fa45/7528aa1bf3da.png","hash":"9c579e40e532170a13b32abec1ebaf39378670e1","modified":1724936763262},{"_id":"public/posts/fa45/21812e1bbfad.png","hash":"ce2e8a583d00ee261c661986dc611400c87ba818","modified":1724936763262},{"_id":"public/posts/9a8h/13.png","hash":"b46a01d70f0397d238893562c74177e2620e96fa","modified":1724936763262},{"_id":"public/posts/9a8h/15.png","hash":"9bcf9769e3261a8ca84251085db63ca00078ea38","modified":1724936763262},{"_id":"public/posts/9a8h/7.png","hash":"d46ccdd0c1fec9379f28dc153dfcd53aaa3e75d6","modified":1724936763262},{"_id":"public/posts/fdc/ram4.png","hash":"d7c69a6cd55e5c6761f8d10f97df6fec7ca192d0","modified":1724936763262},{"_id":"public/posts/4a2a/acksls16.png","hash":"10b6bbc9aca654654d36d546848c36c7e893a83e","modified":1724936763262},{"_id":"public/posts/4a2a/acksls5.png","hash":"10797ce6eeb03d68022ed53cf543d7bc88ef6522","modified":1724936763262},{"_id":"public/posts/4a2a/acksls6.png","hash":"4dfbdbb054223b440881864813745ea01b1085e4","modified":1724936763262},{"_id":"public/posts/4a2a/acksls7.png","hash":"9b5a20e762e7f096539bb4bdc0780babd7524762","modified":1724936763262},{"_id":"public/posts/539/gf13.png","hash":"67bcb850aae40f8cfa0f0f004faf78c84a27ae36","modified":1724936763262},{"_id":"public/posts/539/gf14.png","hash":"a55c37098012fe7c2357f160f18b46fa3375befd","modified":1724936763262},{"_id":"public/posts/539/gf7.png","hash":"977bd10d62f62daf2f10692e75df6c011bf7c1fe","modified":1724936763262},{"_id":"public/posts/9a8h/14.png","hash":"501f84e8376fedc0036539ba36fd9e69c0906b47","modified":1724936763262},{"_id":"public/posts/64a8/vpc4.png","hash":"9334c5fb57bb6b8991b3b8ef86794ee8f5c27247","modified":1724936763262},{"_id":"public/posts/539/gf1.png","hash":"4ef3ab2f2f41d15d31e6f1845403bbfabb59d9df","modified":1724936763262},{"_id":"public/posts/fa45/d6da8c845c41.png","hash":"b614ff7f3d18a32abedd27f042286d3e911400e3","modified":1724936763262},{"_id":"public/posts/9a8h/12.png","hash":"49545c7daa918e583dc69dbd75d33b9fe0d2ded1","modified":1724936763262},{"_id":"public/posts/9a8h/4.png","hash":"34b58260b8187846fab853620311e97d3b50033a","modified":1724936763262},{"_id":"public/posts/4a2a/acksls2.png","hash":"fd46498cc37b4852ca2b8be3f412d75c1de791e9","modified":1724936763262},{"_id":"public/posts/4a2a/acksls4.png","hash":"685f32a6227218888bbb828665a0d29ff08e11ce","modified":1724936763262},{"_id":"public/posts/539/gf10.png","hash":"b23b6cb991497506195c01c55fc54fa5a912d339","modified":1724936763262},{"_id":"public/posts/b8bc/openssl-1.jpeg","hash":"f6a7f58030452e9791c4d9e7ec374d7b563c77df","modified":1724936763262},{"_id":"public/posts/539/gf9.png","hash":"699f349910e318ba1d8cdd63be891ac58b2d5747","modified":1724936763262},{"_id":"public/posts/fa45/de3ebdd4f016.png","hash":"b6a766011b329f668f083b6714e9842f565c3e73","modified":1724936763262},{"_id":"public/posts/5d90/k8s-nw4.png","hash":"2ce625b08cdf95ae45190ae29c6329887da573b0","modified":1724936763262},{"_id":"public/posts/9a8h/17.png","hash":"4233ab5fda184bb53e8a7eb413ca09bcbb9f0e54","modified":1724936763262},{"_id":"public/posts/4a2a/acksls9.png","hash":"18695f8a86c0a8049b1f3804572808eceaf0ee06","modified":1724936763262},{"_id":"public/posts/4a2a/acksls8.png","hash":"f5de58a056403ff94e0cafc3b578f531e8020572","modified":1724936763262},{"_id":"public/posts/ce0f/helm1.png","hash":"2ab9276bbc7a6e87221fbd9bf589ee074d4c651c","modified":1724936763262}],"Category":[{"name":"Alicloud","_id":"cm0fat8zi0004s0njgieg3w5h"},{"name":"Container","_id":"cm0fat8zn000ns0njdxr37li7"},{"name":"CNCF","_id":"cm0fat8zn000ss0njdmbp1ahq"},{"name":"Operations","_id":"cm0fat8zn000ws0njb5pid2pg"},{"name":"Network","parent":"cm0fat8zi0004s0njgieg3w5h","_id":"cm0fat8zo0012s0nj6aop0rhb"},{"name":"CNCF","parent":"cm0fat8zi0004s0njgieg3w5h","_id":"cm0fat8zo0019s0nja09050r2"},{"name":"Alicloud","parent":"cm0fat8zn000ss0njdmbp1ahq","_id":"cm0fat8zo001fs0nj6mwx7xvx"},{"name":"Middleware","_id":"cm0fat8zr0029s0nj7ukk0alx"}],"Data":[{"_id":"footer","data":""},{"_id":"styles","data":".post {\n  margin-top: 50px;\n  margin-bottom: 50px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n.headband {\n  display: none;\n}\nbody {\n  background: url(\"/images/background.jpeg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\n.post-block.page {\n  margin-top: 40px;\n}\n.category-all-page {\n  box-shadow: 0px 0px 10px 0px rgba(0,0,0,0.5);\n  background-color: #797d7f;\n  padding: 20px 30px 60px 30px;\n  border-radius: 25px 25px 25px 25px;\n}\n.category-all-title {\n  font-family: Impact;\n  font-size: 24px;\n  color: #0ff;\n}\n.category-list {\n  overflow: auto;\n}\n.category-list li {\n  height: 100%;\n  float: left;\n  border-right: 3px solid #222;\n  padding: 0 20px;\n}\n.category-all ul li {\n  list-style: none !important;\n}\n.category-list li:last-child {\n  border-right: none;\n}\n.category-list li a {\n  font-size: 16px;\n  text-decoration: none;\n  color: #7fff00;\n  font-family: Helvetica, Verdana, sans-serif;\n  -webkit-transition: all 0.5s ease;\n  -moz-transition: all 0.5s ease;\n  -o-transition: all 0.5s ease;\n  -ms-transition: all 0.5s ease;\n  transition: all 0.5s ease;\n}\n.category-list li a:hover {\n  color: #000;\n}\n.category-list li.active a {\n  font-weight: bold;\n  color: #000;\n}\n.tag-cloud a {\n  box-shadow: 0 1px 3px #6f42c1, 0 1px 2px #d9534f;\n  padding: 2px 10px;\n  margin: 8px;\n  background: rgba(193,66,92,0);\n  border-bottom: none;\n  border-radius: 20px;\n}\ncode {\n  background: #555;\n  color: #fff;\n}\n"},{"_id":"variables","data":""}],"Page":[{"title":"404","date":"2022-03-07T15:53:45.000Z","layout":"false","_content":"<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>(404) The page you were looking for doesn't exist.</title>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"//cloud.typography.com/746852/739588/css/fonts.css\" />\n  <style type=\"text/css\">\n    html,\n    body {\n      margin: 0;\n      padding: 0;\n      height: 100%;\n    }\n\n    body {\n      font-family: \"Whitney SSm A\", \"Whitney SSm B\", \"Helvetica Neue\", Helvetica, Arial, Sans-Serif;\n      background-color: #2D72D9;\n      color: #fff;\n      -moz-font-smoothing: antialiased;\n      -webkit-font-smoothing: antialiased;\n    }\n\n    .error-container {\n      text-align: center;\n      height: 100%;\n    }\n\n    @media (max-width: 480px) {\n      .error-container {\n        position: relative;\n        top: 50%;\n        height: initial;\n        -webkit-transform: translateY(-50%);\n        -ms-transform: translateY(-50%);\n        transform: translateY(-50%);\n      }\n    }\n\n    .error-container h1 {\n      margin: 0;\n      font-size: 130px;\n      font-weight: 300;\n    }\n\n    @media (min-width: 480px) {\n      .error-container h1 {\n        position: relative;\n        top: 50%;\n        -webkit-transform: translateY(-50%);\n        -ms-transform: translateY(-50%);\n        transform: translateY(-50%);\n      }\n    }\n\n    @media (min-width: 768px) {\n      .error-container h1 {\n        font-size: 220px;\n      }\n    }\n\n    .return {\n      color: rgba(255, 255, 255, 0.6);\n      font-weight: 400;\n      letter-spacing: -0.04em;\n      margin: 0;\n    }\n\n    @media (min-width: 480px) {\n      .return {\n        position: absolute;\n        width: 100%;\n        bottom: 30px;\n      }\n    }\n\n    .return a {\n      padding-bottom: 1px;\n      color: #fff;\n      text-decoration: none;\n      border-bottom: 1px solid rgba(255, 255, 255, 0.6);\n      -webkit-transition: border-color 0.1s ease-in;\n      transition: border-color 0.1s ease-in;\n    }\n\n    .return a:hover {\n      border-bottom-color: #fff;\n    }\n  </style>\n</head>\n\n<body>\n\n<div class=\"error-container\">\n  <h1>404</h1>\n  <p class=\"return\">Take me back to <a href=\"/\">yakir.top</a></p>\n</div>\n\n</body>\n</html>\n","source":"404/index.md","raw":"---\ntitle: 404\ndate: 2022-03-07 23:53:45\nlayout: false\npermalink: /404\n---\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>(404) The page you were looking for doesn't exist.</title>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"//cloud.typography.com/746852/739588/css/fonts.css\" />\n  <style type=\"text/css\">\n    html,\n    body {\n      margin: 0;\n      padding: 0;\n      height: 100%;\n    }\n\n    body {\n      font-family: \"Whitney SSm A\", \"Whitney SSm B\", \"Helvetica Neue\", Helvetica, Arial, Sans-Serif;\n      background-color: #2D72D9;\n      color: #fff;\n      -moz-font-smoothing: antialiased;\n      -webkit-font-smoothing: antialiased;\n    }\n\n    .error-container {\n      text-align: center;\n      height: 100%;\n    }\n\n    @media (max-width: 480px) {\n      .error-container {\n        position: relative;\n        top: 50%;\n        height: initial;\n        -webkit-transform: translateY(-50%);\n        -ms-transform: translateY(-50%);\n        transform: translateY(-50%);\n      }\n    }\n\n    .error-container h1 {\n      margin: 0;\n      font-size: 130px;\n      font-weight: 300;\n    }\n\n    @media (min-width: 480px) {\n      .error-container h1 {\n        position: relative;\n        top: 50%;\n        -webkit-transform: translateY(-50%);\n        -ms-transform: translateY(-50%);\n        transform: translateY(-50%);\n      }\n    }\n\n    @media (min-width: 768px) {\n      .error-container h1 {\n        font-size: 220px;\n      }\n    }\n\n    .return {\n      color: rgba(255, 255, 255, 0.6);\n      font-weight: 400;\n      letter-spacing: -0.04em;\n      margin: 0;\n    }\n\n    @media (min-width: 480px) {\n      .return {\n        position: absolute;\n        width: 100%;\n        bottom: 30px;\n      }\n    }\n\n    .return a {\n      padding-bottom: 1px;\n      color: #fff;\n      text-decoration: none;\n      border-bottom: 1px solid rgba(255, 255, 255, 0.6);\n      -webkit-transition: border-color 0.1s ease-in;\n      transition: border-color 0.1s ease-in;\n    }\n\n    .return a:hover {\n      border-bottom-color: #fff;\n    }\n  </style>\n</head>\n\n<body>\n\n<div class=\"error-container\">\n  <h1>404</h1>\n  <p class=\"return\">Take me back to <a href=\"/\">yakir.top</a></p>\n</div>\n\n</body>\n</html>\n","updated":"2024-08-29T12:45:03.324Z","path":"/404.html","comments":1,"_id":"cm0fat8ze0000s0nj6dzxgfu2","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>(404) The page you were looking for doesn't exist.</title>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"//cloud.typography.com/746852/739588/css/fonts.css\">\n  <style type=\"text/css\">\n    html,\n    body {\n      margin: 0;\n      padding: 0;\n      height: 100%;\n    }\n\n<pre><code>body &#123;\n  font-family: &quot;Whitney SSm A&quot;, &quot;Whitney SSm B&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, Sans-Serif;\n  background-color: #2D72D9;\n  color: #fff;\n  -moz-font-smoothing: antialiased;\n  -webkit-font-smoothing: antialiased;\n&#125;\n\n.error-container &#123;\n  text-align: center;\n  height: 100%;\n&#125;\n\n@media (max-width: 480px) &#123;\n  .error-container &#123;\n    position: relative;\n    top: 50%;\n    height: initial;\n    -webkit-transform: translateY(-50%);\n    -ms-transform: translateY(-50%);\n    transform: translateY(-50%);\n  &#125;\n&#125;\n\n.error-container h1 &#123;\n  margin: 0;\n  font-size: 130px;\n  font-weight: 300;\n&#125;\n\n@media (min-width: 480px) &#123;\n  .error-container h1 &#123;\n    position: relative;\n    top: 50%;\n    -webkit-transform: translateY(-50%);\n    -ms-transform: translateY(-50%);\n    transform: translateY(-50%);\n  &#125;\n&#125;\n\n@media (min-width: 768px) &#123;\n  .error-container h1 &#123;\n    font-size: 220px;\n  &#125;\n&#125;\n\n.return &#123;\n  color: rgba(255, 255, 255, 0.6);\n  font-weight: 400;\n  letter-spacing: -0.04em;\n  margin: 0;\n&#125;\n\n@media (min-width: 480px) &#123;\n  .return &#123;\n    position: absolute;\n    width: 100%;\n    bottom: 30px;\n  &#125;\n&#125;\n\n.return a &#123;\n  padding-bottom: 1px;\n  color: #fff;\n  text-decoration: none;\n  border-bottom: 1px solid rgba(255, 255, 255, 0.6);\n  -webkit-transition: border-color 0.1s ease-in;\n  transition: border-color 0.1s ease-in;\n&#125;\n\n.return a:hover &#123;\n  border-bottom-color: #fff;\n&#125;\n</code></pre>\n<p>  </style><p></p>\n</head>\n\n<body>\n\n<div class=\"error-container\">\n  <h1>404</h1>\n  <p class=\"return\">Take me back to <a href=\"/\">yakir.top</a></p>\n</div>\n\n</body>\n</html>\n","site":{"data":{"footer":"","styles":".post {\n  margin-top: 50px;\n  margin-bottom: 50px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n.headband {\n  display: none;\n}\nbody {\n  background: url(\"/images/background.jpeg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\n.post-block.page {\n  margin-top: 40px;\n}\n.category-all-page {\n  box-shadow: 0px 0px 10px 0px rgba(0,0,0,0.5);\n  background-color: #797d7f;\n  padding: 20px 30px 60px 30px;\n  border-radius: 25px 25px 25px 25px;\n}\n.category-all-title {\n  font-family: Impact;\n  font-size: 24px;\n  color: #0ff;\n}\n.category-list {\n  overflow: auto;\n}\n.category-list li {\n  height: 100%;\n  float: left;\n  border-right: 3px solid #222;\n  padding: 0 20px;\n}\n.category-all ul li {\n  list-style: none !important;\n}\n.category-list li:last-child {\n  border-right: none;\n}\n.category-list li a {\n  font-size: 16px;\n  text-decoration: none;\n  color: #7fff00;\n  font-family: Helvetica, Verdana, sans-serif;\n  -webkit-transition: all 0.5s ease;\n  -moz-transition: all 0.5s ease;\n  -o-transition: all 0.5s ease;\n  -ms-transition: all 0.5s ease;\n  transition: all 0.5s ease;\n}\n.category-list li a:hover {\n  color: #000;\n}\n.category-list li.active a {\n  font-weight: bold;\n  color: #000;\n}\n.tag-cloud a {\n  box-shadow: 0 1px 3px #6f42c1, 0 1px 2px #d9534f;\n  padding: 2px 10px;\n  margin: 8px;\n  background: rgba(193,66,92,0);\n  border-bottom: none;\n  border-radius: 20px;\n}\ncode {\n  background: #555;\n  color: #fff;\n}\n","variables":""}},"length":1365,"excerpt":"","more":"<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>(404) The page you were looking for doesn't exist.</title>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"//cloud.typography.com/746852/739588/css/fonts.css\">\n  <style type=\"text/css\">\n    html,\n    body {\n      margin: 0;\n      padding: 0;\n      height: 100%;\n    }\n\n<pre><code>body &#123;\n  font-family: &quot;Whitney SSm A&quot;, &quot;Whitney SSm B&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, Sans-Serif;\n  background-color: #2D72D9;\n  color: #fff;\n  -moz-font-smoothing: antialiased;\n  -webkit-font-smoothing: antialiased;\n&#125;\n\n.error-container &#123;\n  text-align: center;\n  height: 100%;\n&#125;\n\n@media (max-width: 480px) &#123;\n  .error-container &#123;\n    position: relative;\n    top: 50%;\n    height: initial;\n    -webkit-transform: translateY(-50%);\n    -ms-transform: translateY(-50%);\n    transform: translateY(-50%);\n  &#125;\n&#125;\n\n.error-container h1 &#123;\n  margin: 0;\n  font-size: 130px;\n  font-weight: 300;\n&#125;\n\n@media (min-width: 480px) &#123;\n  .error-container h1 &#123;\n    position: relative;\n    top: 50%;\n    -webkit-transform: translateY(-50%);\n    -ms-transform: translateY(-50%);\n    transform: translateY(-50%);\n  &#125;\n&#125;\n\n@media (min-width: 768px) &#123;\n  .error-container h1 &#123;\n    font-size: 220px;\n  &#125;\n&#125;\n\n.return &#123;\n  color: rgba(255, 255, 255, 0.6);\n  font-weight: 400;\n  letter-spacing: -0.04em;\n  margin: 0;\n&#125;\n\n@media (min-width: 480px) &#123;\n  .return &#123;\n    position: absolute;\n    width: 100%;\n    bottom: 30px;\n  &#125;\n&#125;\n\n.return a &#123;\n  padding-bottom: 1px;\n  color: #fff;\n  text-decoration: none;\n  border-bottom: 1px solid rgba(255, 255, 255, 0.6);\n  -webkit-transition: border-color 0.1s ease-in;\n  transition: border-color 0.1s ease-in;\n&#125;\n\n.return a:hover &#123;\n  border-bottom-color: #fff;\n&#125;\n</code></pre>\n<p>  </style><p></p>\n</head>\n\n<body>\n\n<div class=\"error-container\">\n  <h1>404</h1>\n  <p class=\"return\">Take me back to <a href=\"/\">yakir.top</a></p>\n</div>\n\n</body>\n</html>\n"},{"title":"歌单","date":"2022-03-08T14:53:42.000Z","type":"musiclist","_content":"{% meting \"1781370591\" \"tencent\" \"playlist\" \"theme:#FF4081\" \"mode:circulation\" \"mutex:true\" \"listmaxheight:340px\" \"preload:auto\" %}\n","source":"musiclist/index.md","raw":"---\ntitle: 歌单\ndate: 2022-03-08 22:53:42\ntype: musiclist\n---\n{% meting \"1781370591\" \"tencent\" \"playlist\" \"theme:#FF4081\" \"mode:circulation\" \"mutex:true\" \"listmaxheight:340px\" \"preload:auto\" %}\n","updated":"2022-05-03T13:20:22.289Z","path":"musiclist/index.html","comments":1,"layout":"page","_id":"cm0fat8zh0002s0nj4kx88mks","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-mCmSfYzR\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1781370591\" data-server=\"tencent\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#FF4081\"></div>\n","site":{"data":{"footer":"","styles":".post {\n  margin-top: 50px;\n  margin-bottom: 50px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n.headband {\n  display: none;\n}\nbody {\n  background: url(\"/images/background.jpeg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\n.post-block.page {\n  margin-top: 40px;\n}\n.category-all-page {\n  box-shadow: 0px 0px 10px 0px rgba(0,0,0,0.5);\n  background-color: #797d7f;\n  padding: 20px 30px 60px 30px;\n  border-radius: 25px 25px 25px 25px;\n}\n.category-all-title {\n  font-family: Impact;\n  font-size: 24px;\n  color: #0ff;\n}\n.category-list {\n  overflow: auto;\n}\n.category-list li {\n  height: 100%;\n  float: left;\n  border-right: 3px solid #222;\n  padding: 0 20px;\n}\n.category-all ul li {\n  list-style: none !important;\n}\n.category-list li:last-child {\n  border-right: none;\n}\n.category-list li a {\n  font-size: 16px;\n  text-decoration: none;\n  color: #7fff00;\n  font-family: Helvetica, Verdana, sans-serif;\n  -webkit-transition: all 0.5s ease;\n  -moz-transition: all 0.5s ease;\n  -o-transition: all 0.5s ease;\n  -ms-transition: all 0.5s ease;\n  transition: all 0.5s ease;\n}\n.category-list li a:hover {\n  color: #000;\n}\n.category-list li.active a {\n  font-weight: bold;\n  color: #000;\n}\n.tag-cloud a {\n  box-shadow: 0 1px 3px #6f42c1, 0 1px 2px #d9534f;\n  padding: 2px 10px;\n  margin: 8px;\n  background: rgba(193,66,92,0);\n  border-bottom: none;\n  border-radius: 20px;\n}\ncode {\n  background: #555;\n  color: #fff;\n}\n","variables":""}},"length":0,"excerpt":"","more":"\n    <div id=\"aplayer-mCmSfYzR\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1781370591\" data-server=\"tencent\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#FF4081\"></div>\n"},{"title":"分类","date":"2022-03-01T15:40:17.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2022-03-01 23:40:17\ntype: categories\n---\n","updated":"2022-05-03T13:20:22.289Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cm0fat8zj0006s0nj5yrsffbj","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>","site":{"data":{"footer":"","styles":".post {\n  margin-top: 50px;\n  margin-bottom: 50px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n.headband {\n  display: none;\n}\nbody {\n  background: url(\"/images/background.jpeg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\n.post-block.page {\n  margin-top: 40px;\n}\n.category-all-page {\n  box-shadow: 0px 0px 10px 0px rgba(0,0,0,0.5);\n  background-color: #797d7f;\n  padding: 20px 30px 60px 30px;\n  border-radius: 25px 25px 25px 25px;\n}\n.category-all-title {\n  font-family: Impact;\n  font-size: 24px;\n  color: #0ff;\n}\n.category-list {\n  overflow: auto;\n}\n.category-list li {\n  height: 100%;\n  float: left;\n  border-right: 3px solid #222;\n  padding: 0 20px;\n}\n.category-all ul li {\n  list-style: none !important;\n}\n.category-list li:last-child {\n  border-right: none;\n}\n.category-list li a {\n  font-size: 16px;\n  text-decoration: none;\n  color: #7fff00;\n  font-family: Helvetica, Verdana, sans-serif;\n  -webkit-transition: all 0.5s ease;\n  -moz-transition: all 0.5s ease;\n  -o-transition: all 0.5s ease;\n  -ms-transition: all 0.5s ease;\n  transition: all 0.5s ease;\n}\n.category-list li a:hover {\n  color: #000;\n}\n.category-list li.active a {\n  font-weight: bold;\n  color: #000;\n}\n.tag-cloud a {\n  box-shadow: 0 1px 3px #6f42c1, 0 1px 2px #d9534f;\n  padding: 2px 10px;\n  margin: 8px;\n  background: rgba(193,66,92,0);\n  border-bottom: none;\n  border-radius: 20px;\n}\ncode {\n  background: #555;\n  color: #fff;\n}\n","variables":""}},"length":0,"excerpt":"","more":""},{"title":"标签","date":"2022-03-01T15:42:07.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2022-03-01 23:42:07\ntype: tags\n---\n","updated":"2022-05-03T13:20:22.289Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cm0fat8zj0008s0njhhbzcyv1","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>","site":{"data":{"footer":"","styles":".post {\n  margin-top: 50px;\n  margin-bottom: 50px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n.headband {\n  display: none;\n}\nbody {\n  background: url(\"/images/background.jpeg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\n.post-block.page {\n  margin-top: 40px;\n}\n.category-all-page {\n  box-shadow: 0px 0px 10px 0px rgba(0,0,0,0.5);\n  background-color: #797d7f;\n  padding: 20px 30px 60px 30px;\n  border-radius: 25px 25px 25px 25px;\n}\n.category-all-title {\n  font-family: Impact;\n  font-size: 24px;\n  color: #0ff;\n}\n.category-list {\n  overflow: auto;\n}\n.category-list li {\n  height: 100%;\n  float: left;\n  border-right: 3px solid #222;\n  padding: 0 20px;\n}\n.category-all ul li {\n  list-style: none !important;\n}\n.category-list li:last-child {\n  border-right: none;\n}\n.category-list li a {\n  font-size: 16px;\n  text-decoration: none;\n  color: #7fff00;\n  font-family: Helvetica, Verdana, sans-serif;\n  -webkit-transition: all 0.5s ease;\n  -moz-transition: all 0.5s ease;\n  -o-transition: all 0.5s ease;\n  -ms-transition: all 0.5s ease;\n  transition: all 0.5s ease;\n}\n.category-list li a:hover {\n  color: #000;\n}\n.category-list li.active a {\n  font-weight: bold;\n  color: #000;\n}\n.tag-cloud a {\n  box-shadow: 0 1px 3px #6f42c1, 0 1px 2px #d9534f;\n  padding: 2px 10px;\n  margin: 8px;\n  background: rgba(193,66,92,0);\n  border-bottom: none;\n  border-radius: 20px;\n}\ncode {\n  background: #555;\n  color: #fff;\n}\n","variables":""}},"length":0,"excerpt":"","more":""},{"title":"关于","date":"2022-03-01T16:17:07.000Z","_content":"### 关于\n\n用途：个人学习记录博客\n\nGitbub 地址：https://github.com/yakir3\n\n本博客使用GithubPages + Hexo + Next 主题\n","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2022-03-02 00:17:07\n---\n### 关于\n\n用途：个人学习记录博客\n\nGitbub 地址：https://github.com/yakir3\n\n本博客使用GithubPages + Hexo + Next 主题\n","updated":"2022-05-03T13:20:22.289Z","path":"about/index.html","comments":1,"layout":"page","_id":"cm0fat8zk000as0nj41955b4z","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"关于\"><a href=\"#关于\" class=\"headerlink\" title=\"关于\"></a>关于</h3><p>用途：个人学习记录博客</p>\n<p>Gitbub 地址：<a href=\"https://github.com/yakir3\">https://github.com/yakir3</a></p>\n<p>本博客使用GithubPages + Hexo + Next 主题</p>\n","site":{"data":{"footer":"","styles":".post {\n  margin-top: 50px;\n  margin-bottom: 50px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n.headband {\n  display: none;\n}\nbody {\n  background: url(\"/images/background.jpeg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\n.post-block.page {\n  margin-top: 40px;\n}\n.category-all-page {\n  box-shadow: 0px 0px 10px 0px rgba(0,0,0,0.5);\n  background-color: #797d7f;\n  padding: 20px 30px 60px 30px;\n  border-radius: 25px 25px 25px 25px;\n}\n.category-all-title {\n  font-family: Impact;\n  font-size: 24px;\n  color: #0ff;\n}\n.category-list {\n  overflow: auto;\n}\n.category-list li {\n  height: 100%;\n  float: left;\n  border-right: 3px solid #222;\n  padding: 0 20px;\n}\n.category-all ul li {\n  list-style: none !important;\n}\n.category-list li:last-child {\n  border-right: none;\n}\n.category-list li a {\n  font-size: 16px;\n  text-decoration: none;\n  color: #7fff00;\n  font-family: Helvetica, Verdana, sans-serif;\n  -webkit-transition: all 0.5s ease;\n  -moz-transition: all 0.5s ease;\n  -o-transition: all 0.5s ease;\n  -ms-transition: all 0.5s ease;\n  transition: all 0.5s ease;\n}\n.category-list li a:hover {\n  color: #000;\n}\n.category-list li.active a {\n  font-weight: bold;\n  color: #000;\n}\n.tag-cloud a {\n  box-shadow: 0 1px 3px #6f42c1, 0 1px 2px #d9534f;\n  padding: 2px 10px;\n  margin: 8px;\n  background: rgba(193,66,92,0);\n  border-bottom: none;\n  border-radius: 20px;\n}\ncode {\n  background: #555;\n  color: #fff;\n}\n","variables":""}},"length":75,"excerpt":"","more":"<h3 id=\"关于\"><a href=\"#关于\" class=\"headerlink\" title=\"关于\"></a>关于</h3><p>用途：个人学习记录博客</p>\n<p>Gitbub 地址：<a href=\"https://github.com/yakir3\">https://github.com/yakir3</a></p>\n<p>本博客使用GithubPages + Hexo + Next 主题</p>\n"}],"Post":[{"title":"ACK 集群日志接入 SLS","abbrlink":"4a2a","date":"2022-05-31T14:38:39.000Z","_content":"## 一、接入前提\n**ACK 集群开启日志服务组件Logtail**\n\n- 创建集群时启用Logtail（初始化ACK 集群时操作，新集群建议开启）\n{% asset_img acksls1.png %}\n\n<!--more-->\n- 为已有集群启用Logtail：在ACK控制台--> 进入对应集群管理界面 --> 运维管理 --> 组件管理，找到logtail-ds 组件并点击安装即可。\n{% asset_img acksls2.png %}\n\n- 创建成功后即可在SLS 控制台搜索到相关集群Project\n\n{% asset_img acksls3.png %}\n\n\n## 二、接入日志方式\n### 2.1 ACK 集群手动接入\n> 本次接入应用标准输出日志，如需接入文件日志，还需创建对应volumeMounts和volumes 配置，规则逻辑类似。\n\n#### 1）通过控制台配置\n\n- 进入应用详情页\n\n{% asset_img acksls4.png %}\n\n- 点击应用编辑按钮，添加相关日志采集配置。\n\n{% asset_img acksls5.png %}\n{% asset_img acksls6.png %}\n\n#### 2）通过YAML 模板创建（Deployment / Pod）\n\n- 采集规则\n> - name: aliyun_logs_{Logstore名称}   \n>    value: {日志采集路径}  \n\n\n- 模板关键配置示例\n\nPod 示例部分：\n```yaml\napiVersion: v1\nkind: Pod\nspec:\n  containers:\n  - name: my-demo-app\n    env:\n    ######### 配置 环境变量 ###########\n    - name: aliyun_logs_log-stdout\n      value: stdout\n    - name: aliyun_logs_log-varlog\n      value: /var/log/*.log\n    - name: aliyun_logs_mytag1_tags\n      value: tag1=v1\n    ###############################\n    ######### 配置volume mount ###########\n    volumeMounts:\n    - name: volumn-sls-mydemo\n      mountPath: /var/log\n  volumes:\n  - name: volumn-sls-mydemo\n    emptyDir: {}\n  ###############################\n```\ndeployment 示例部分：\n```yaml\napiVersion: apps/v1\nkind: Deployment\nspec:\n  template:\n    spec:\n      containers:\n        - args: xxx-args\n          env:\n            - name: aliyun_logs_app-110760134-domain-event-center\n              value: stdout\n          image: xxx-image\n```\n多个应用收集到同一个logstore 示例：\n```yaml\n#应用A 配置：\n######### 配置 环境变量 ###########\n    - name: aliyun_logs_app1-stdout\n      value: stdout\n    - name: aliyun_logs_app1-stdout_logstore\n      value: stdout-logstore\n      \n      \n#应用B 配置：\n######### 配置 环境变量 ###########\n    - name: aliyun_logs_app2-stdout\n      value: stdout\n    - name: aliyun_logs_app2-stdout_logstore\n      value: stdout-logstore\n```\n\n#### 3）验证查看日志\n\n- 登录SLS 控制台，进入对应集群Project\n\n{% asset_img acksls7.png %}\n\n- 查询分析\n\n{% asset_img acksls8.png %}\n\n#### 4）其他\n\n- 注意事项\n> **注意：**\n> **    当多个不同namespace 的同名应用配置为同一个logstore 时，可通过__tag__ 过滤条件，搜索对应需要的日志。**\n> **    如需自定义tag 区分不同日志时，可通过自定义tag 区分。**\n> {% asset_img acksls9.png %}\n\n> 参考Alicloud官方文档：[https://help.aliyun.com/document_detail/87540.html](https://help.aliyun.com/document_detail/87540.html)\n\n\n\n### 2.2 DaemonSet 方式接入\n#### 1）通过DaemonSet 控制台方式采集\n> 可选择采集文件或标准输出，本次接入应用标准输出日志。\n\n- 在SLS 控制台搜索 **Kubenetes - 标准输出**，选择日志收集方式。\n\n{% asset_img acksls10.png %}\n\n- 选择/创建 Project 和store。\n\n{% asset_img acksls11.png %}\n\n- 选择已有机器组\n\n{% asset_img acksls12.png %}\n\n- 收集过滤需要的日志，详细语法可参考文档。\n\n{% asset_img acksls13.png %}\n```json\n{\n  \"inputs\": [\n    {\n      \"detail\": {\n        \"IncludeLabel\": {},\n        \"ExcludeLabel\": {\"io.kubernetes.container.name\": \"camel-k-operator\"},\n        \"IncludeEnv\": {\"CAMEL_K_INTEGRATION\": \"\"},\n      },\n      \"type\": \"service_docker_stdout\"\n    }\n  ]\n}\n```\n\n- 进入SLS 控制台，并选择对应Project。点击创建索引\n\n{% asset_img acksls14.png %}\n{% asset_img acksls15.png %}\n\n- 索引创建后等待1 min左右，即可看到标准输出日志。\n\n{% asset_img acksls16.png %}\n\n#### 2）通过DaemonSet CRD 方式采集\n> Edas 中配置日志收集即使用的该方式。\n\n[https://help.aliyun.com/document_detail/74878.htm](https://help.aliyun.com/document_detail/74878.htm)\n\n### 2.3 Sidecar 方式接入\n#### 1）通过Sidecar 控制台方式采集\n[https://help.aliyun.com/document_detail/100575.htm](https://help.aliyun.com/document_detail/100575.htm)\n\n#### 2）通过Sidecar CRD 方式采集\n[https://help.aliyun.com/document_detail/100575.htm](https://help.aliyun.com/document_detail/100575.htm)\n\n> 参考Alicloud官方文档：[https://help.aliyun.com/document_detail/66654.html](https://help.aliyun.com/document_detail/66654.html)\n\n","source":"_posts/alicloud-ack-sls-deploy.md","raw":"---\ntitle: ACK 集群日志接入 SLS\ncategories:\n  - Alicloud\ntags:\n  - ACK\nabbrlink: 4a2a\ndate: 2022-05-31 22:38:39\n---\n## 一、接入前提\n**ACK 集群开启日志服务组件Logtail**\n\n- 创建集群时启用Logtail（初始化ACK 集群时操作，新集群建议开启）\n{% asset_img acksls1.png %}\n\n<!--more-->\n- 为已有集群启用Logtail：在ACK控制台--> 进入对应集群管理界面 --> 运维管理 --> 组件管理，找到logtail-ds 组件并点击安装即可。\n{% asset_img acksls2.png %}\n\n- 创建成功后即可在SLS 控制台搜索到相关集群Project\n\n{% asset_img acksls3.png %}\n\n\n## 二、接入日志方式\n### 2.1 ACK 集群手动接入\n> 本次接入应用标准输出日志，如需接入文件日志，还需创建对应volumeMounts和volumes 配置，规则逻辑类似。\n\n#### 1）通过控制台配置\n\n- 进入应用详情页\n\n{% asset_img acksls4.png %}\n\n- 点击应用编辑按钮，添加相关日志采集配置。\n\n{% asset_img acksls5.png %}\n{% asset_img acksls6.png %}\n\n#### 2）通过YAML 模板创建（Deployment / Pod）\n\n- 采集规则\n> - name: aliyun_logs_{Logstore名称}   \n>    value: {日志采集路径}  \n\n\n- 模板关键配置示例\n\nPod 示例部分：\n```yaml\napiVersion: v1\nkind: Pod\nspec:\n  containers:\n  - name: my-demo-app\n    env:\n    ######### 配置 环境变量 ###########\n    - name: aliyun_logs_log-stdout\n      value: stdout\n    - name: aliyun_logs_log-varlog\n      value: /var/log/*.log\n    - name: aliyun_logs_mytag1_tags\n      value: tag1=v1\n    ###############################\n    ######### 配置volume mount ###########\n    volumeMounts:\n    - name: volumn-sls-mydemo\n      mountPath: /var/log\n  volumes:\n  - name: volumn-sls-mydemo\n    emptyDir: {}\n  ###############################\n```\ndeployment 示例部分：\n```yaml\napiVersion: apps/v1\nkind: Deployment\nspec:\n  template:\n    spec:\n      containers:\n        - args: xxx-args\n          env:\n            - name: aliyun_logs_app-110760134-domain-event-center\n              value: stdout\n          image: xxx-image\n```\n多个应用收集到同一个logstore 示例：\n```yaml\n#应用A 配置：\n######### 配置 环境变量 ###########\n    - name: aliyun_logs_app1-stdout\n      value: stdout\n    - name: aliyun_logs_app1-stdout_logstore\n      value: stdout-logstore\n      \n      \n#应用B 配置：\n######### 配置 环境变量 ###########\n    - name: aliyun_logs_app2-stdout\n      value: stdout\n    - name: aliyun_logs_app2-stdout_logstore\n      value: stdout-logstore\n```\n\n#### 3）验证查看日志\n\n- 登录SLS 控制台，进入对应集群Project\n\n{% asset_img acksls7.png %}\n\n- 查询分析\n\n{% asset_img acksls8.png %}\n\n#### 4）其他\n\n- 注意事项\n> **注意：**\n> **    当多个不同namespace 的同名应用配置为同一个logstore 时，可通过__tag__ 过滤条件，搜索对应需要的日志。**\n> **    如需自定义tag 区分不同日志时，可通过自定义tag 区分。**\n> {% asset_img acksls9.png %}\n\n> 参考Alicloud官方文档：[https://help.aliyun.com/document_detail/87540.html](https://help.aliyun.com/document_detail/87540.html)\n\n\n\n### 2.2 DaemonSet 方式接入\n#### 1）通过DaemonSet 控制台方式采集\n> 可选择采集文件或标准输出，本次接入应用标准输出日志。\n\n- 在SLS 控制台搜索 **Kubenetes - 标准输出**，选择日志收集方式。\n\n{% asset_img acksls10.png %}\n\n- 选择/创建 Project 和store。\n\n{% asset_img acksls11.png %}\n\n- 选择已有机器组\n\n{% asset_img acksls12.png %}\n\n- 收集过滤需要的日志，详细语法可参考文档。\n\n{% asset_img acksls13.png %}\n```json\n{\n  \"inputs\": [\n    {\n      \"detail\": {\n        \"IncludeLabel\": {},\n        \"ExcludeLabel\": {\"io.kubernetes.container.name\": \"camel-k-operator\"},\n        \"IncludeEnv\": {\"CAMEL_K_INTEGRATION\": \"\"},\n      },\n      \"type\": \"service_docker_stdout\"\n    }\n  ]\n}\n```\n\n- 进入SLS 控制台，并选择对应Project。点击创建索引\n\n{% asset_img acksls14.png %}\n{% asset_img acksls15.png %}\n\n- 索引创建后等待1 min左右，即可看到标准输出日志。\n\n{% asset_img acksls16.png %}\n\n#### 2）通过DaemonSet CRD 方式采集\n> Edas 中配置日志收集即使用的该方式。\n\n[https://help.aliyun.com/document_detail/74878.htm](https://help.aliyun.com/document_detail/74878.htm)\n\n### 2.3 Sidecar 方式接入\n#### 1）通过Sidecar 控制台方式采集\n[https://help.aliyun.com/document_detail/100575.htm](https://help.aliyun.com/document_detail/100575.htm)\n\n#### 2）通过Sidecar CRD 方式采集\n[https://help.aliyun.com/document_detail/100575.htm](https://help.aliyun.com/document_detail/100575.htm)\n\n> 参考Alicloud官方文档：[https://help.aliyun.com/document_detail/66654.html](https://help.aliyun.com/document_detail/66654.html)\n\n","slug":"alicloud-ack-sls-deploy","published":1,"updated":"2024-01-21T15:28:43.149Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm0fat8zg0001s0njgl080pl2","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h2 id=\"一、接入前提\"><a href=\"#一、接入前提\" class=\"headerlink\" title=\"一、接入前提\"></a>一、接入前提</h2><p><strong>ACK 集群开启日志服务组件Logtail</strong></p>\n<ul>\n<li>创建集群时启用Logtail（初始化ACK 集群时操作，新集群建议开启）<img data-src=\"/posts/4a2a/acksls1.png\" class></li>\n</ul>\n<span id=\"more\"></span>\n<ul>\n<li><p>为已有集群启用Logtail：在ACK控制台–&gt; 进入对应集群管理界面 –&gt; 运维管理 –&gt; 组件管理，找到logtail-ds 组件并点击安装即可。</p>\n<img data-src=\"/posts/4a2a/acksls2.png\" class>\n</li>\n<li><p>创建成功后即可在SLS 控制台搜索到相关集群Project</p>\n</li>\n</ul>\n<img data-src=\"/posts/4a2a/acksls3.png\" class>\n\n\n<h2 id=\"二、接入日志方式\"><a href=\"#二、接入日志方式\" class=\"headerlink\" title=\"二、接入日志方式\"></a>二、接入日志方式</h2><h3 id=\"2-1-ACK-集群手动接入\"><a href=\"#2-1-ACK-集群手动接入\" class=\"headerlink\" title=\"2.1 ACK 集群手动接入\"></a>2.1 ACK 集群手动接入</h3><blockquote>\n<p>本次接入应用标准输出日志，如需接入文件日志，还需创建对应volumeMounts和volumes 配置，规则逻辑类似。</p>\n</blockquote>\n<h4 id=\"1）通过控制台配置\"><a href=\"#1）通过控制台配置\" class=\"headerlink\" title=\"1）通过控制台配置\"></a>1）通过控制台配置</h4><ul>\n<li>进入应用详情页</li>\n</ul>\n<img data-src=\"/posts/4a2a/acksls4.png\" class>\n\n<ul>\n<li>点击应用编辑按钮，添加相关日志采集配置。</li>\n</ul>\n<img data-src=\"/posts/4a2a/acksls5.png\" class>\n<img data-src=\"/posts/4a2a/acksls6.png\" class>\n\n<h4 id=\"2）通过YAML-模板创建（Deployment-x2F-Pod）\"><a href=\"#2）通过YAML-模板创建（Deployment-x2F-Pod）\" class=\"headerlink\" title=\"2）通过YAML 模板创建（Deployment &#x2F; Pod）\"></a>2）通过YAML 模板创建（Deployment &#x2F; Pod）</h4><ul>\n<li><p>采集规则</p>\n<blockquote>\n<ul>\n<li>name: aliyun_logs_{Logstore名称}<br> value: {日志采集路径}</li>\n</ul>\n</blockquote>\n</li>\n<li><p>模板关键配置示例</p>\n</li>\n</ul>\n<p>Pod 示例部分：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">my-demo-app</span></span><br><span class=\"line\">    <span class=\"attr\">env:</span></span><br><span class=\"line\">    <span class=\"comment\">######### 配置 环境变量 ###########</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">aliyun_logs_log-stdout</span></span><br><span class=\"line\">      <span class=\"attr\">value:</span> <span class=\"string\">stdout</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">aliyun_logs_log-varlog</span></span><br><span class=\"line\">      <span class=\"attr\">value:</span> <span class=\"string\">/var/log/*.log</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">aliyun_logs_mytag1_tags</span></span><br><span class=\"line\">      <span class=\"attr\">value:</span> <span class=\"string\">tag1=v1</span></span><br><span class=\"line\">    <span class=\"comment\">###############################</span></span><br><span class=\"line\">    <span class=\"comment\">######### 配置volume mount ###########</span></span><br><span class=\"line\">    <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">volumn-sls-mydemo</span></span><br><span class=\"line\">      <span class=\"attr\">mountPath:</span> <span class=\"string\">/var/log</span></span><br><span class=\"line\">  <span class=\"attr\">volumes:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">volumn-sls-mydemo</span></span><br><span class=\"line\">    <span class=\"attr\">emptyDir:</span> &#123;&#125;</span><br><span class=\"line\">  <span class=\"comment\">###############################</span></span><br></pre></td></tr></table></figure>\n<p>deployment 示例部分：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">args:</span> <span class=\"string\">xxx-args</span></span><br><span class=\"line\">          <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">aliyun_logs_app-110760134-domain-event-center</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">stdout</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">xxx-image</span></span><br></pre></td></tr></table></figure>\n<p>多个应用收集到同一个logstore 示例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#应用A 配置：</span></span><br><span class=\"line\"><span class=\"comment\">######### 配置 环境变量 ###########</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">aliyun_logs_app1-stdout</span></span><br><span class=\"line\">      <span class=\"attr\">value:</span> <span class=\"string\">stdout</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">aliyun_logs_app1-stdout_logstore</span></span><br><span class=\"line\">      <span class=\"attr\">value:</span> <span class=\"string\">stdout-logstore</span></span><br><span class=\"line\">      </span><br><span class=\"line\">      </span><br><span class=\"line\"><span class=\"comment\">#应用B 配置：</span></span><br><span class=\"line\"><span class=\"comment\">######### 配置 环境变量 ###########</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">aliyun_logs_app2-stdout</span></span><br><span class=\"line\">      <span class=\"attr\">value:</span> <span class=\"string\">stdout</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">aliyun_logs_app2-stdout_logstore</span></span><br><span class=\"line\">      <span class=\"attr\">value:</span> <span class=\"string\">stdout-logstore</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3）验证查看日志\"><a href=\"#3）验证查看日志\" class=\"headerlink\" title=\"3）验证查看日志\"></a>3）验证查看日志</h4><ul>\n<li>登录SLS 控制台，进入对应集群Project</li>\n</ul>\n<img data-src=\"/posts/4a2a/acksls7.png\" class>\n\n<ul>\n<li>查询分析</li>\n</ul>\n<img data-src=\"/posts/4a2a/acksls8.png\" class>\n\n<h4 id=\"4）其他\"><a href=\"#4）其他\" class=\"headerlink\" title=\"4）其他\"></a>4）其他</h4><ul>\n<li>注意事项<blockquote>\n<p><strong>注意：</strong><br>**    当多个不同namespace 的同名应用配置为同一个logstore 时，可通过__tag__ 过滤条件，搜索对应需要的日志。**<br>**    如需自定义tag 区分不同日志时，可通过自定义tag 区分。**</p>\n<img data-src=\"/posts/4a2a/acksls9.png\" class></blockquote>\n</li>\n</ul>\n<blockquote>\n<p>参考Alicloud官方文档：<a href=\"https://help.aliyun.com/document_detail/87540.html\">https://help.aliyun.com/document_detail&#x2F;87540.html</a></p>\n</blockquote>\n<h3 id=\"2-2-DaemonSet-方式接入\"><a href=\"#2-2-DaemonSet-方式接入\" class=\"headerlink\" title=\"2.2 DaemonSet 方式接入\"></a>2.2 DaemonSet 方式接入</h3><h4 id=\"1）通过DaemonSet-控制台方式采集\"><a href=\"#1）通过DaemonSet-控制台方式采集\" class=\"headerlink\" title=\"1）通过DaemonSet 控制台方式采集\"></a>1）通过DaemonSet 控制台方式采集</h4><blockquote>\n<p>可选择采集文件或标准输出，本次接入应用标准输出日志。</p>\n</blockquote>\n<ul>\n<li>在SLS 控制台搜索 <strong>Kubenetes - 标准输出</strong>，选择日志收集方式。</li>\n</ul>\n<img data-src=\"/posts/4a2a/acksls10.png\" class>\n\n<ul>\n<li>选择&#x2F;创建 Project 和store。</li>\n</ul>\n<img data-src=\"/posts/4a2a/acksls11.png\" class>\n\n<ul>\n<li>选择已有机器组</li>\n</ul>\n<img data-src=\"/posts/4a2a/acksls12.png\" class>\n\n<ul>\n<li>收集过滤需要的日志，详细语法可参考文档。</li>\n</ul>\n<img data-src=\"/posts/4a2a/acksls13.png\" class>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;inputs&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;detail&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;IncludeLabel&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;ExcludeLabel&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;io.kubernetes.container.name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;camel-k-operator&quot;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;IncludeEnv&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;CAMEL_K_INTEGRATION&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;service_docker_stdout&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>进入SLS 控制台，并选择对应Project。点击创建索引</li>\n</ul>\n<img data-src=\"/posts/4a2a/acksls14.png\" class>\n<img data-src=\"/posts/4a2a/acksls15.png\" class>\n\n<ul>\n<li>索引创建后等待1 min左右，即可看到标准输出日志。</li>\n</ul>\n<img data-src=\"/posts/4a2a/acksls16.png\" class>\n\n<h4 id=\"2）通过DaemonSet-CRD-方式采集\"><a href=\"#2）通过DaemonSet-CRD-方式采集\" class=\"headerlink\" title=\"2）通过DaemonSet CRD 方式采集\"></a>2）通过DaemonSet CRD 方式采集</h4><blockquote>\n<p>Edas 中配置日志收集即使用的该方式。</p>\n</blockquote>\n<p><a href=\"https://help.aliyun.com/document_detail/74878.htm\">https://help.aliyun.com/document_detail&#x2F;74878.htm</a></p>\n<h3 id=\"2-3-Sidecar-方式接入\"><a href=\"#2-3-Sidecar-方式接入\" class=\"headerlink\" title=\"2.3 Sidecar 方式接入\"></a>2.3 Sidecar 方式接入</h3><h4 id=\"1）通过Sidecar-控制台方式采集\"><a href=\"#1）通过Sidecar-控制台方式采集\" class=\"headerlink\" title=\"1）通过Sidecar 控制台方式采集\"></a>1）通过Sidecar 控制台方式采集</h4><p><a href=\"https://help.aliyun.com/document_detail/100575.htm\">https://help.aliyun.com/document_detail&#x2F;100575.htm</a></p>\n<h4 id=\"2）通过Sidecar-CRD-方式采集\"><a href=\"#2）通过Sidecar-CRD-方式采集\" class=\"headerlink\" title=\"2）通过Sidecar CRD 方式采集\"></a>2）通过Sidecar CRD 方式采集</h4><p><a href=\"https://help.aliyun.com/document_detail/100575.htm\">https://help.aliyun.com/document_detail&#x2F;100575.htm</a></p>\n<blockquote>\n<p>参考Alicloud官方文档：<a href=\"https://help.aliyun.com/document_detail/66654.html\">https://help.aliyun.com/document_detail&#x2F;66654.html</a></p>\n</blockquote>\n","site":{"data":{"footer":"","styles":".post {\n  margin-top: 50px;\n  margin-bottom: 50px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n.headband {\n  display: none;\n}\nbody {\n  background: url(\"/images/background.jpeg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\n.post-block.page {\n  margin-top: 40px;\n}\n.category-all-page {\n  box-shadow: 0px 0px 10px 0px rgba(0,0,0,0.5);\n  background-color: #797d7f;\n  padding: 20px 30px 60px 30px;\n  border-radius: 25px 25px 25px 25px;\n}\n.category-all-title {\n  font-family: Impact;\n  font-size: 24px;\n  color: #0ff;\n}\n.category-list {\n  overflow: auto;\n}\n.category-list li {\n  height: 100%;\n  float: left;\n  border-right: 3px solid #222;\n  padding: 0 20px;\n}\n.category-all ul li {\n  list-style: none !important;\n}\n.category-list li:last-child {\n  border-right: none;\n}\n.category-list li a {\n  font-size: 16px;\n  text-decoration: none;\n  color: #7fff00;\n  font-family: Helvetica, Verdana, sans-serif;\n  -webkit-transition: all 0.5s ease;\n  -moz-transition: all 0.5s ease;\n  -o-transition: all 0.5s ease;\n  -ms-transition: all 0.5s ease;\n  transition: all 0.5s ease;\n}\n.category-list li a:hover {\n  color: #000;\n}\n.category-list li.active a {\n  font-weight: bold;\n  color: #000;\n}\n.tag-cloud a {\n  box-shadow: 0 1px 3px #6f42c1, 0 1px 2px #d9534f;\n  padding: 2px 10px;\n  margin: 8px;\n  background: rgba(193,66,92,0);\n  border-bottom: none;\n  border-radius: 20px;\n}\ncode {\n  background: #555;\n  color: #fff;\n}\n","variables":""}},"length":2420,"excerpt":"<h2 id=\"一、接入前提\"><a href=\"#一、接入前提\" class=\"headerlink\" title=\"一、接入前提\"></a>一、接入前提</h2><p><strong>ACK 集群开启日志服务组件Logtail</strong></p>\n<ul>\n<li>创建集群时启用Logtail（初始化ACK 集群时操作，新集群建议开启）<img data-src=\"/posts/4a2a/acksls1.png\" class></li>\n</ul>","more":"<ul>\n<li><p>为已有集群启用Logtail：在ACK控制台–&gt; 进入对应集群管理界面 –&gt; 运维管理 –&gt; 组件管理，找到logtail-ds 组件并点击安装即可。</p>\n<img data-src=\"/posts/4a2a/acksls2.png\" class>\n</li>\n<li><p>创建成功后即可在SLS 控制台搜索到相关集群Project</p>\n</li>\n</ul>\n<img data-src=\"/posts/4a2a/acksls3.png\" class>\n\n\n<h2 id=\"二、接入日志方式\"><a href=\"#二、接入日志方式\" class=\"headerlink\" title=\"二、接入日志方式\"></a>二、接入日志方式</h2><h3 id=\"2-1-ACK-集群手动接入\"><a href=\"#2-1-ACK-集群手动接入\" class=\"headerlink\" title=\"2.1 ACK 集群手动接入\"></a>2.1 ACK 集群手动接入</h3><blockquote>\n<p>本次接入应用标准输出日志，如需接入文件日志，还需创建对应volumeMounts和volumes 配置，规则逻辑类似。</p>\n</blockquote>\n<h4 id=\"1）通过控制台配置\"><a href=\"#1）通过控制台配置\" class=\"headerlink\" title=\"1）通过控制台配置\"></a>1）通过控制台配置</h4><ul>\n<li>进入应用详情页</li>\n</ul>\n<img data-src=\"/posts/4a2a/acksls4.png\" class>\n\n<ul>\n<li>点击应用编辑按钮，添加相关日志采集配置。</li>\n</ul>\n<img data-src=\"/posts/4a2a/acksls5.png\" class>\n<img data-src=\"/posts/4a2a/acksls6.png\" class>\n\n<h4 id=\"2）通过YAML-模板创建（Deployment-x2F-Pod）\"><a href=\"#2）通过YAML-模板创建（Deployment-x2F-Pod）\" class=\"headerlink\" title=\"2）通过YAML 模板创建（Deployment &#x2F; Pod）\"></a>2）通过YAML 模板创建（Deployment &#x2F; Pod）</h4><ul>\n<li><p>采集规则</p>\n<blockquote>\n<ul>\n<li>name: aliyun_logs_{Logstore名称}<br> value: {日志采集路径}</li>\n</ul>\n</blockquote>\n</li>\n<li><p>模板关键配置示例</p>\n</li>\n</ul>\n<p>Pod 示例部分：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">my-demo-app</span></span><br><span class=\"line\">    <span class=\"attr\">env:</span></span><br><span class=\"line\">    <span class=\"comment\">######### 配置 环境变量 ###########</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">aliyun_logs_log-stdout</span></span><br><span class=\"line\">      <span class=\"attr\">value:</span> <span class=\"string\">stdout</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">aliyun_logs_log-varlog</span></span><br><span class=\"line\">      <span class=\"attr\">value:</span> <span class=\"string\">/var/log/*.log</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">aliyun_logs_mytag1_tags</span></span><br><span class=\"line\">      <span class=\"attr\">value:</span> <span class=\"string\">tag1=v1</span></span><br><span class=\"line\">    <span class=\"comment\">###############################</span></span><br><span class=\"line\">    <span class=\"comment\">######### 配置volume mount ###########</span></span><br><span class=\"line\">    <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">volumn-sls-mydemo</span></span><br><span class=\"line\">      <span class=\"attr\">mountPath:</span> <span class=\"string\">/var/log</span></span><br><span class=\"line\">  <span class=\"attr\">volumes:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">volumn-sls-mydemo</span></span><br><span class=\"line\">    <span class=\"attr\">emptyDir:</span> &#123;&#125;</span><br><span class=\"line\">  <span class=\"comment\">###############################</span></span><br></pre></td></tr></table></figure>\n<p>deployment 示例部分：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">args:</span> <span class=\"string\">xxx-args</span></span><br><span class=\"line\">          <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">aliyun_logs_app-110760134-domain-event-center</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">stdout</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">xxx-image</span></span><br></pre></td></tr></table></figure>\n<p>多个应用收集到同一个logstore 示例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#应用A 配置：</span></span><br><span class=\"line\"><span class=\"comment\">######### 配置 环境变量 ###########</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">aliyun_logs_app1-stdout</span></span><br><span class=\"line\">      <span class=\"attr\">value:</span> <span class=\"string\">stdout</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">aliyun_logs_app1-stdout_logstore</span></span><br><span class=\"line\">      <span class=\"attr\">value:</span> <span class=\"string\">stdout-logstore</span></span><br><span class=\"line\">      </span><br><span class=\"line\">      </span><br><span class=\"line\"><span class=\"comment\">#应用B 配置：</span></span><br><span class=\"line\"><span class=\"comment\">######### 配置 环境变量 ###########</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">aliyun_logs_app2-stdout</span></span><br><span class=\"line\">      <span class=\"attr\">value:</span> <span class=\"string\">stdout</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">aliyun_logs_app2-stdout_logstore</span></span><br><span class=\"line\">      <span class=\"attr\">value:</span> <span class=\"string\">stdout-logstore</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3）验证查看日志\"><a href=\"#3）验证查看日志\" class=\"headerlink\" title=\"3）验证查看日志\"></a>3）验证查看日志</h4><ul>\n<li>登录SLS 控制台，进入对应集群Project</li>\n</ul>\n<img data-src=\"/posts/4a2a/acksls7.png\" class>\n\n<ul>\n<li>查询分析</li>\n</ul>\n<img data-src=\"/posts/4a2a/acksls8.png\" class>\n\n<h4 id=\"4）其他\"><a href=\"#4）其他\" class=\"headerlink\" title=\"4）其他\"></a>4）其他</h4><ul>\n<li>注意事项<blockquote>\n<p><strong>注意：</strong><br>**    当多个不同namespace 的同名应用配置为同一个logstore 时，可通过__tag__ 过滤条件，搜索对应需要的日志。**<br>**    如需自定义tag 区分不同日志时，可通过自定义tag 区分。**</p>\n<img data-src=\"/posts/4a2a/acksls9.png\" class></blockquote>\n</li>\n</ul>\n<blockquote>\n<p>参考Alicloud官方文档：<a href=\"https://help.aliyun.com/document_detail/87540.html\">https://help.aliyun.com/document_detail&#x2F;87540.html</a></p>\n</blockquote>\n<h3 id=\"2-2-DaemonSet-方式接入\"><a href=\"#2-2-DaemonSet-方式接入\" class=\"headerlink\" title=\"2.2 DaemonSet 方式接入\"></a>2.2 DaemonSet 方式接入</h3><h4 id=\"1）通过DaemonSet-控制台方式采集\"><a href=\"#1）通过DaemonSet-控制台方式采集\" class=\"headerlink\" title=\"1）通过DaemonSet 控制台方式采集\"></a>1）通过DaemonSet 控制台方式采集</h4><blockquote>\n<p>可选择采集文件或标准输出，本次接入应用标准输出日志。</p>\n</blockquote>\n<ul>\n<li>在SLS 控制台搜索 <strong>Kubenetes - 标准输出</strong>，选择日志收集方式。</li>\n</ul>\n<img data-src=\"/posts/4a2a/acksls10.png\" class>\n\n<ul>\n<li>选择&#x2F;创建 Project 和store。</li>\n</ul>\n<img data-src=\"/posts/4a2a/acksls11.png\" class>\n\n<ul>\n<li>选择已有机器组</li>\n</ul>\n<img data-src=\"/posts/4a2a/acksls12.png\" class>\n\n<ul>\n<li>收集过滤需要的日志，详细语法可参考文档。</li>\n</ul>\n<img data-src=\"/posts/4a2a/acksls13.png\" class>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;inputs&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;detail&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;IncludeLabel&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;ExcludeLabel&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;io.kubernetes.container.name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;camel-k-operator&quot;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;IncludeEnv&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;CAMEL_K_INTEGRATION&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;service_docker_stdout&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>进入SLS 控制台，并选择对应Project。点击创建索引</li>\n</ul>\n<img data-src=\"/posts/4a2a/acksls14.png\" class>\n<img data-src=\"/posts/4a2a/acksls15.png\" class>\n\n<ul>\n<li>索引创建后等待1 min左右，即可看到标准输出日志。</li>\n</ul>\n<img data-src=\"/posts/4a2a/acksls16.png\" class>\n\n<h4 id=\"2）通过DaemonSet-CRD-方式采集\"><a href=\"#2）通过DaemonSet-CRD-方式采集\" class=\"headerlink\" title=\"2）通过DaemonSet CRD 方式采集\"></a>2）通过DaemonSet CRD 方式采集</h4><blockquote>\n<p>Edas 中配置日志收集即使用的该方式。</p>\n</blockquote>\n<p><a href=\"https://help.aliyun.com/document_detail/74878.htm\">https://help.aliyun.com/document_detail&#x2F;74878.htm</a></p>\n<h3 id=\"2-3-Sidecar-方式接入\"><a href=\"#2-3-Sidecar-方式接入\" class=\"headerlink\" title=\"2.3 Sidecar 方式接入\"></a>2.3 Sidecar 方式接入</h3><h4 id=\"1）通过Sidecar-控制台方式采集\"><a href=\"#1）通过Sidecar-控制台方式采集\" class=\"headerlink\" title=\"1）通过Sidecar 控制台方式采集\"></a>1）通过Sidecar 控制台方式采集</h4><p><a href=\"https://help.aliyun.com/document_detail/100575.htm\">https://help.aliyun.com/document_detail&#x2F;100575.htm</a></p>\n<h4 id=\"2）通过Sidecar-CRD-方式采集\"><a href=\"#2）通过Sidecar-CRD-方式采集\" class=\"headerlink\" title=\"2）通过Sidecar CRD 方式采集\"></a>2）通过Sidecar CRD 方式采集</h4><p><a href=\"https://help.aliyun.com/document_detail/100575.htm\">https://help.aliyun.com/document_detail&#x2F;100575.htm</a></p>\n<blockquote>\n<p>参考Alicloud官方文档：<a href=\"https://help.aliyun.com/document_detail/66654.html\">https://help.aliyun.com/document_detail&#x2F;66654.html</a></p>\n</blockquote>"},{"title":"Alicloud-RAM 与 STS 权限","abbrlink":"fdc","date":"2022-03-20T15:37:32.000Z","_content":"### 一、前言\n当通过OpenApi接口来调用云资源时（即替代控制台的操作），当前的方式有两种：\n\n- 通过 AK+SK 方式直接调用，只要该AK所属的账号有相关权限即可调用对应资源（授权分为系统策略和自定义策略）\n- Alicloud账号（RAM用户）/Alicloud服务（ECS等）/身份提供商（SSO） 通过扮演角色获取角色的临时令牌（即通过调用AssumeRole接口），通过该临时令牌（临时令牌可设定会话时间），通过 STS接口获取到的 临时AK+临时SK+临时STSToken 进行调用对应资源\n\n### 二、官方概念介绍\n\n1. STS概念\n- AlicloudSTS（Security Token Service）是Alicloud提供的一种临时访问权限管理服务。RAM提供RAM用户和RAM角色两种身份。其中，RAM角色不具备永久身份凭证，而只能通过STS获取可以自定义时效和访问权限的临时身份凭证，即安全令牌（STS Token）\n\n<!--more-->\n建议阅读：[https://help.aliyun.com/document_detail/28756.html](https://help.aliyun.com/document_detail/28756.html)\n\n2. RAM概念\n- RAM用户：身份实体，可访问Alicloud资源的账号或程序；创建时可选择登录场景、AccessKey场景（通过程序调用API）。\n- **RAM角色**：虚拟用户，向信任的RAM实体账号进行授权（根据STS令牌颁发短时有效的临时访问token）；创建角色后会生成Arn描述符（角色的描述符：每个RAM角色存在唯一值且遵循Alicloudarn命名规范）。\n- RAM权限策略：一组权限集，使用简单的Policy语法进行描述（分为系统策略和自定义策略）；权限策略是实际细分授权资源集、操作集、授权条件的描述。\n\n{% asset_img ram1.png %}\n\n> 创建RAM角色时有三种类型：\n> - **Alicloud账号**：允许RAM用户所扮演的角色。扮演角色的RAM用户可以属于自己的Alicloud账号，也可以属于其他Alicloud账号。此类角色主要用来解决跨账号访问和临时授权问题\n> - **Alicloud服务**：允许云服务所扮演的角色。此类角色主要用于授权云服务代理您进行资源操作（服务又分为两种）\n>    - 普通服务角色：您需要自定义角色名称，选择受信服务，并自定义权限策略\n>    - 服务关联角色：您只需选择受信的云服务，云服务会自带预设的角色名称和权限策略\n>    - 两种服务角色没太大区别，服务关联角色会多一个预设的配置（一般服务角色用户Alicloud跨服务间的调用，例如ECS的授予/收回RAM角色功能、RDS云服务调用KMS角色加密等，从某个云产品调用另一个云产品的授权）\n> \n{% asset_img ram2.png %}\n> - **身份提供商**：允许可信身份提供商下的用户所扮演的角色。此类角色主要用于实现与Alicloud的单点登录（SSO）\n> \n> **常用的RAM角色一般为创建 Alicloud账号 方式（OSS官方推荐使用）**\n> - 授权RAM角色介绍：[https://help.aliyun.com/document_detail/116819.html](https://help.aliyun.com/document_detail/116819.html)\n> - OSS官方推荐使用 Alicloud账号 方式：[https://help.aliyun.com/document_detail/100624.html](https://help.aliyun.com/document_detail/100624.html)\n\n\n### 三、创建STS角色，自定义授权OSS功能测试\n1）测试账号信息\n账号：devops_test@xxx.onaliyun.com\nAK：xxxxx\nSK：xxxxx\nARN：acs:ram::xxxxx:role/xxx-sts\nOSS Bucket名称：oss-test\nOSS授权目录：dir111/dir111_secondline1/\n\n2）进行授权\n\n- 创建RAM用户（子账号），生成AK SK （此步骤忽略）\n- 测试账号添加STS权限\n\n{% asset_img ram3.png %}\n\n- 添加权限策略，使用自定义策略授权（OSS官方示例Policy：[https://help.aliyun.com/document_detail/266627.html](https://help.aliyun.com/document_detail/266627.html)）\n\n{% asset_img ram4.png %}\n\n- 添加RAM角色并授权Policy\n\n{% asset_img ram5.png %}\n\n{% asset_img ram6.png %}\n\n3）测试验证（控制台无法登录RAM账号验证权限情况下，可以使用ossutil或ossbrowser工具进行验证）\n\n- ossutil使用：[https://help.aliyun.com/document_detail/50451.html](https://help.aliyun.com/document_detail/50451.html)\n\n{% asset_img ram7.png %}\n\n- ossbrowser使用：[https://help.aliyun.com/document_detail/92268.html](https://help.aliyun.com/document_detail/92268.html)\n\n\n4）验证列举和其他相关权限无误后，将ARN信息提供研发即可\n\n> 权限流程：\n> 1. 客户端程序/调用端发起扮演角色，此时在进入实际要获取的角色权限前，需要通过调用AssumeRole接口返回STS凭证（调用STS接口需要**AliyunSTSAssumeRoleAccess**权限，因此对应RAM账号需要授权该系统策略）\n> 1. 通过返回的STS临时凭证（临时AK+临时SK+临时token）发起相关云资源接口的调用\n> 1. 客户端使用STS发起调用时，会验证两个部分的权限策略Policy （注意：最后的权限取这两个权限Policy的交集）\n> - STS扮演的角色本身授权的权限策略是否拥有对应云资源的权限（系统或自定义的Policy）\n> - SDK/API调用时传入的policy_text参数值，在构造调用请求时传入（[https://help.aliyun.com/document_detail/100624.html](https://help.aliyun.com/document_detail/100624.html)\n> {% asset_img ram8.png %}\n\n\n### 四、结合实际需求\n\n1. 开发提出需求：需要某一个oss bucket的STS ARN信息\n\n2. 需要相关信息：\n+ oss bucket具体需授权目录，必须\n+ endpoint: oss bucket所属区域，非必须\n+ bucket-name: oss bucket名称，必须\n+ 调用OSS RAM账号，必须\n\n3. 通过提供信息进行创建RAM角色、Policy策略新建（注意oss 细粒度的策略）、授权策略到RAM角色中，最后将新建的RAM角色的ARN描述符信息提供给研发。\n","source":"_posts/alicloud-ram-sts.md","raw":"---\ntitle: Alicloud-RAM 与 STS 权限\ncategories:\n  - Alicloud\ntags:\n  - RAM\nabbrlink: fdc\ndate: 2022-03-20 23:37:32\n---\n### 一、前言\n当通过OpenApi接口来调用云资源时（即替代控制台的操作），当前的方式有两种：\n\n- 通过 AK+SK 方式直接调用，只要该AK所属的账号有相关权限即可调用对应资源（授权分为系统策略和自定义策略）\n- Alicloud账号（RAM用户）/Alicloud服务（ECS等）/身份提供商（SSO） 通过扮演角色获取角色的临时令牌（即通过调用AssumeRole接口），通过该临时令牌（临时令牌可设定会话时间），通过 STS接口获取到的 临时AK+临时SK+临时STSToken 进行调用对应资源\n\n### 二、官方概念介绍\n\n1. STS概念\n- AlicloudSTS（Security Token Service）是Alicloud提供的一种临时访问权限管理服务。RAM提供RAM用户和RAM角色两种身份。其中，RAM角色不具备永久身份凭证，而只能通过STS获取可以自定义时效和访问权限的临时身份凭证，即安全令牌（STS Token）\n\n<!--more-->\n建议阅读：[https://help.aliyun.com/document_detail/28756.html](https://help.aliyun.com/document_detail/28756.html)\n\n2. RAM概念\n- RAM用户：身份实体，可访问Alicloud资源的账号或程序；创建时可选择登录场景、AccessKey场景（通过程序调用API）。\n- **RAM角色**：虚拟用户，向信任的RAM实体账号进行授权（根据STS令牌颁发短时有效的临时访问token）；创建角色后会生成Arn描述符（角色的描述符：每个RAM角色存在唯一值且遵循Alicloudarn命名规范）。\n- RAM权限策略：一组权限集，使用简单的Policy语法进行描述（分为系统策略和自定义策略）；权限策略是实际细分授权资源集、操作集、授权条件的描述。\n\n{% asset_img ram1.png %}\n\n> 创建RAM角色时有三种类型：\n> - **Alicloud账号**：允许RAM用户所扮演的角色。扮演角色的RAM用户可以属于自己的Alicloud账号，也可以属于其他Alicloud账号。此类角色主要用来解决跨账号访问和临时授权问题\n> - **Alicloud服务**：允许云服务所扮演的角色。此类角色主要用于授权云服务代理您进行资源操作（服务又分为两种）\n>    - 普通服务角色：您需要自定义角色名称，选择受信服务，并自定义权限策略\n>    - 服务关联角色：您只需选择受信的云服务，云服务会自带预设的角色名称和权限策略\n>    - 两种服务角色没太大区别，服务关联角色会多一个预设的配置（一般服务角色用户Alicloud跨服务间的调用，例如ECS的授予/收回RAM角色功能、RDS云服务调用KMS角色加密等，从某个云产品调用另一个云产品的授权）\n> \n{% asset_img ram2.png %}\n> - **身份提供商**：允许可信身份提供商下的用户所扮演的角色。此类角色主要用于实现与Alicloud的单点登录（SSO）\n> \n> **常用的RAM角色一般为创建 Alicloud账号 方式（OSS官方推荐使用）**\n> - 授权RAM角色介绍：[https://help.aliyun.com/document_detail/116819.html](https://help.aliyun.com/document_detail/116819.html)\n> - OSS官方推荐使用 Alicloud账号 方式：[https://help.aliyun.com/document_detail/100624.html](https://help.aliyun.com/document_detail/100624.html)\n\n\n### 三、创建STS角色，自定义授权OSS功能测试\n1）测试账号信息\n账号：devops_test@xxx.onaliyun.com\nAK：xxxxx\nSK：xxxxx\nARN：acs:ram::xxxxx:role/xxx-sts\nOSS Bucket名称：oss-test\nOSS授权目录：dir111/dir111_secondline1/\n\n2）进行授权\n\n- 创建RAM用户（子账号），生成AK SK （此步骤忽略）\n- 测试账号添加STS权限\n\n{% asset_img ram3.png %}\n\n- 添加权限策略，使用自定义策略授权（OSS官方示例Policy：[https://help.aliyun.com/document_detail/266627.html](https://help.aliyun.com/document_detail/266627.html)）\n\n{% asset_img ram4.png %}\n\n- 添加RAM角色并授权Policy\n\n{% asset_img ram5.png %}\n\n{% asset_img ram6.png %}\n\n3）测试验证（控制台无法登录RAM账号验证权限情况下，可以使用ossutil或ossbrowser工具进行验证）\n\n- ossutil使用：[https://help.aliyun.com/document_detail/50451.html](https://help.aliyun.com/document_detail/50451.html)\n\n{% asset_img ram7.png %}\n\n- ossbrowser使用：[https://help.aliyun.com/document_detail/92268.html](https://help.aliyun.com/document_detail/92268.html)\n\n\n4）验证列举和其他相关权限无误后，将ARN信息提供研发即可\n\n> 权限流程：\n> 1. 客户端程序/调用端发起扮演角色，此时在进入实际要获取的角色权限前，需要通过调用AssumeRole接口返回STS凭证（调用STS接口需要**AliyunSTSAssumeRoleAccess**权限，因此对应RAM账号需要授权该系统策略）\n> 1. 通过返回的STS临时凭证（临时AK+临时SK+临时token）发起相关云资源接口的调用\n> 1. 客户端使用STS发起调用时，会验证两个部分的权限策略Policy （注意：最后的权限取这两个权限Policy的交集）\n> - STS扮演的角色本身授权的权限策略是否拥有对应云资源的权限（系统或自定义的Policy）\n> - SDK/API调用时传入的policy_text参数值，在构造调用请求时传入（[https://help.aliyun.com/document_detail/100624.html](https://help.aliyun.com/document_detail/100624.html)\n> {% asset_img ram8.png %}\n\n\n### 四、结合实际需求\n\n1. 开发提出需求：需要某一个oss bucket的STS ARN信息\n\n2. 需要相关信息：\n+ oss bucket具体需授权目录，必须\n+ endpoint: oss bucket所属区域，非必须\n+ bucket-name: oss bucket名称，必须\n+ 调用OSS RAM账号，必须\n\n3. 通过提供信息进行创建RAM角色、Policy策略新建（注意oss 细粒度的策略）、授权策略到RAM角色中，最后将新建的RAM角色的ARN描述符信息提供给研发。\n","slug":"alicloud-ram-sts","published":1,"updated":"2024-01-21T15:31:32.930Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm0fat8zh0003s0njgnlk7dhl","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h3><p>当通过OpenApi接口来调用云资源时（即替代控制台的操作），当前的方式有两种：</p>\n<ul>\n<li>通过 AK+SK 方式直接调用，只要该AK所属的账号有相关权限即可调用对应资源（授权分为系统策略和自定义策略）</li>\n<li>Alicloud账号（RAM用户）&#x2F;Alicloud服务（ECS等）&#x2F;身份提供商（SSO） 通过扮演角色获取角色的临时令牌（即通过调用AssumeRole接口），通过该临时令牌（临时令牌可设定会话时间），通过 STS接口获取到的 临时AK+临时SK+临时STSToken 进行调用对应资源</li>\n</ul>\n<h3 id=\"二、官方概念介绍\"><a href=\"#二、官方概念介绍\" class=\"headerlink\" title=\"二、官方概念介绍\"></a>二、官方概念介绍</h3><ol>\n<li>STS概念</li>\n</ol>\n<ul>\n<li>AlicloudSTS（Security Token Service）是Alicloud提供的一种临时访问权限管理服务。RAM提供RAM用户和RAM角色两种身份。其中，RAM角色不具备永久身份凭证，而只能通过STS获取可以自定义时效和访问权限的临时身份凭证，即安全令牌（STS Token）</li>\n</ul>\n<span id=\"more\"></span>\n<p>建议阅读：<a href=\"https://help.aliyun.com/document_detail/28756.html\">https://help.aliyun.com/document_detail&#x2F;28756.html</a></p>\n<ol start=\"2\">\n<li>RAM概念</li>\n</ol>\n<ul>\n<li>RAM用户：身份实体，可访问Alicloud资源的账号或程序；创建时可选择登录场景、AccessKey场景（通过程序调用API）。</li>\n<li><strong>RAM角色</strong>：虚拟用户，向信任的RAM实体账号进行授权（根据STS令牌颁发短时有效的临时访问token）；创建角色后会生成Arn描述符（角色的描述符：每个RAM角色存在唯一值且遵循Alicloudarn命名规范）。</li>\n<li>RAM权限策略：一组权限集，使用简单的Policy语法进行描述（分为系统策略和自定义策略）；权限策略是实际细分授权资源集、操作集、授权条件的描述。</li>\n</ul>\n<img data-src=\"/posts/fdc/ram1.png\" class>\n\n<blockquote>\n<p>创建RAM角色时有三种类型：</p>\n<ul>\n<li><strong>Alicloud账号</strong>：允许RAM用户所扮演的角色。扮演角色的RAM用户可以属于自己的Alicloud账号，也可以属于其他Alicloud账号。此类角色主要用来解决跨账号访问和临时授权问题</li>\n<li><strong>Alicloud服务</strong>：允许云服务所扮演的角色。此类角色主要用于授权云服务代理您进行资源操作（服务又分为两种）<ul>\n<li>普通服务角色：您需要自定义角色名称，选择受信服务，并自定义权限策略</li>\n<li>服务关联角色：您只需选择受信的云服务，云服务会自带预设的角色名称和权限策略</li>\n<li>两种服务角色没太大区别，服务关联角色会多一个预设的配置（一般服务角色用户Alicloud跨服务间的调用，例如ECS的授予&#x2F;收回RAM角色功能、RDS云服务调用KMS角色加密等，从某个云产品调用另一个云产品的授权）</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<img data-src=\"/posts/fdc/ram2.png\" class>\n<blockquote>\n<ul>\n<li><strong>身份提供商</strong>：允许可信身份提供商下的用户所扮演的角色。此类角色主要用于实现与Alicloud的单点登录（SSO）</li>\n</ul>\n<p><strong>常用的RAM角色一般为创建 Alicloud账号 方式（OSS官方推荐使用）</strong></p>\n<ul>\n<li>授权RAM角色介绍：<a href=\"https://help.aliyun.com/document_detail/116819.html\">https://help.aliyun.com/document_detail&#x2F;116819.html</a></li>\n<li>OSS官方推荐使用 Alicloud账号 方式：<a href=\"https://help.aliyun.com/document_detail/100624.html\">https://help.aliyun.com/document_detail&#x2F;100624.html</a></li>\n</ul>\n</blockquote>\n<h3 id=\"三、创建STS角色，自定义授权OSS功能测试\"><a href=\"#三、创建STS角色，自定义授权OSS功能测试\" class=\"headerlink\" title=\"三、创建STS角色，自定义授权OSS功能测试\"></a>三、创建STS角色，自定义授权OSS功能测试</h3><p>1）测试账号信息<br>账号：<a href=\"mailto:&#100;&#101;&#118;&#111;&#x70;&#x73;&#x5f;&#116;&#x65;&#115;&#x74;&#x40;&#x78;&#120;&#120;&#46;&#111;&#x6e;&#97;&#x6c;&#105;&#121;&#117;&#x6e;&#46;&#x63;&#111;&#x6d;\">&#100;&#101;&#118;&#111;&#x70;&#x73;&#x5f;&#116;&#x65;&#115;&#x74;&#x40;&#x78;&#120;&#120;&#46;&#111;&#x6e;&#97;&#x6c;&#105;&#121;&#117;&#x6e;&#46;&#x63;&#111;&#x6d;</a><br>AK：xxxxx<br>SK：xxxxx<br>ARN：acs:ram::xxxxx:role&#x2F;xxx-sts<br>OSS Bucket名称：oss-test<br>OSS授权目录：dir111&#x2F;dir111_secondline1&#x2F;</p>\n<p>2）进行授权</p>\n<ul>\n<li>创建RAM用户（子账号），生成AK SK （此步骤忽略）</li>\n<li>测试账号添加STS权限</li>\n</ul>\n<img data-src=\"/posts/fdc/ram3.png\" class>\n\n<ul>\n<li>添加权限策略，使用自定义策略授权（OSS官方示例Policy：<a href=\"https://help.aliyun.com/document_detail/266627.html\">https://help.aliyun.com/document_detail&#x2F;266627.html</a>）</li>\n</ul>\n<img data-src=\"/posts/fdc/ram4.png\" class>\n\n<ul>\n<li>添加RAM角色并授权Policy</li>\n</ul>\n<img data-src=\"/posts/fdc/ram5.png\" class>\n\n<img data-src=\"/posts/fdc/ram6.png\" class>\n\n<p>3）测试验证（控制台无法登录RAM账号验证权限情况下，可以使用ossutil或ossbrowser工具进行验证）</p>\n<ul>\n<li>ossutil使用：<a href=\"https://help.aliyun.com/document_detail/50451.html\">https://help.aliyun.com/document_detail&#x2F;50451.html</a></li>\n</ul>\n<img data-src=\"/posts/fdc/ram7.png\" class>\n\n<ul>\n<li>ossbrowser使用：<a href=\"https://help.aliyun.com/document_detail/92268.html\">https://help.aliyun.com/document_detail&#x2F;92268.html</a></li>\n</ul>\n<p>4）验证列举和其他相关权限无误后，将ARN信息提供研发即可</p>\n<blockquote>\n<p>权限流程：</p>\n<ol>\n<li>客户端程序&#x2F;调用端发起扮演角色，此时在进入实际要获取的角色权限前，需要通过调用AssumeRole接口返回STS凭证（调用STS接口需要<strong>AliyunSTSAssumeRoleAccess</strong>权限，因此对应RAM账号需要授权该系统策略）</li>\n<li>通过返回的STS临时凭证（临时AK+临时SK+临时token）发起相关云资源接口的调用</li>\n<li>客户端使用STS发起调用时，会验证两个部分的权限策略Policy （注意：最后的权限取这两个权限Policy的交集）</li>\n</ol>\n<ul>\n<li>STS扮演的角色本身授权的权限策略是否拥有对应云资源的权限（系统或自定义的Policy）</li>\n<li>SDK&#x2F;API调用时传入的policy_text参数值，在构造调用请求时传入（<a href=\"https://help.aliyun.com/document_detail/100624.html\">https://help.aliyun.com/document_detail&#x2F;100624.html</a><img data-src=\"/posts/fdc/ram8.png\" class></li>\n</ul>\n</blockquote>\n<h3 id=\"四、结合实际需求\"><a href=\"#四、结合实际需求\" class=\"headerlink\" title=\"四、结合实际需求\"></a>四、结合实际需求</h3><ol>\n<li><p>开发提出需求：需要某一个oss bucket的STS ARN信息</p>\n</li>\n<li><p>需要相关信息：</p>\n</li>\n</ol>\n<ul>\n<li>oss bucket具体需授权目录，必须</li>\n<li>endpoint: oss bucket所属区域，非必须</li>\n<li>bucket-name: oss bucket名称，必须</li>\n<li>调用OSS RAM账号，必须</li>\n</ul>\n<ol start=\"3\">\n<li>通过提供信息进行创建RAM角色、Policy策略新建（注意oss 细粒度的策略）、授权策略到RAM角色中，最后将新建的RAM角色的ARN描述符信息提供给研发。</li>\n</ol>\n","site":{"data":{"footer":"","styles":".post {\n  margin-top: 50px;\n  margin-bottom: 50px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n.headband {\n  display: none;\n}\nbody {\n  background: url(\"/images/background.jpeg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\n.post-block.page {\n  margin-top: 40px;\n}\n.category-all-page {\n  box-shadow: 0px 0px 10px 0px rgba(0,0,0,0.5);\n  background-color: #797d7f;\n  padding: 20px 30px 60px 30px;\n  border-radius: 25px 25px 25px 25px;\n}\n.category-all-title {\n  font-family: Impact;\n  font-size: 24px;\n  color: #0ff;\n}\n.category-list {\n  overflow: auto;\n}\n.category-list li {\n  height: 100%;\n  float: left;\n  border-right: 3px solid #222;\n  padding: 0 20px;\n}\n.category-all ul li {\n  list-style: none !important;\n}\n.category-list li:last-child {\n  border-right: none;\n}\n.category-list li a {\n  font-size: 16px;\n  text-decoration: none;\n  color: #7fff00;\n  font-family: Helvetica, Verdana, sans-serif;\n  -webkit-transition: all 0.5s ease;\n  -moz-transition: all 0.5s ease;\n  -o-transition: all 0.5s ease;\n  -ms-transition: all 0.5s ease;\n  transition: all 0.5s ease;\n}\n.category-list li a:hover {\n  color: #000;\n}\n.category-list li.active a {\n  font-weight: bold;\n  color: #000;\n}\n.tag-cloud a {\n  box-shadow: 0 1px 3px #6f42c1, 0 1px 2px #d9534f;\n  padding: 2px 10px;\n  margin: 8px;\n  background: rgba(193,66,92,0);\n  border-bottom: none;\n  border-radius: 20px;\n}\ncode {\n  background: #555;\n  color: #fff;\n}\n","variables":""}},"length":2543,"excerpt":"<h3 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h3><p>当通过OpenApi接口来调用云资源时（即替代控制台的操作），当前的方式有两种：</p>\n<ul>\n<li>通过 AK+SK 方式直接调用，只要该AK所属的账号有相关权限即可调用对应资源（授权分为系统策略和自定义策略）</li>\n<li>Alicloud账号（RAM用户）&#x2F;Alicloud服务（ECS等）&#x2F;身份提供商（SSO） 通过扮演角色获取角色的临时令牌（即通过调用AssumeRole接口），通过该临时令牌（临时令牌可设定会话时间），通过 STS接口获取到的 临时AK+临时SK+临时STSToken 进行调用对应资源</li>\n</ul>\n<h3 id=\"二、官方概念介绍\"><a href=\"#二、官方概念介绍\" class=\"headerlink\" title=\"二、官方概念介绍\"></a>二、官方概念介绍</h3><ol>\n<li>STS概念</li>\n</ol>\n<ul>\n<li>AlicloudSTS（Security Token Service）是Alicloud提供的一种临时访问权限管理服务。RAM提供RAM用户和RAM角色两种身份。其中，RAM角色不具备永久身份凭证，而只能通过STS获取可以自定义时效和访问权限的临时身份凭证，即安全令牌（STS Token）</li>\n</ul>","more":"<p>建议阅读：<a href=\"https://help.aliyun.com/document_detail/28756.html\">https://help.aliyun.com/document_detail&#x2F;28756.html</a></p>\n<ol start=\"2\">\n<li>RAM概念</li>\n</ol>\n<ul>\n<li>RAM用户：身份实体，可访问Alicloud资源的账号或程序；创建时可选择登录场景、AccessKey场景（通过程序调用API）。</li>\n<li><strong>RAM角色</strong>：虚拟用户，向信任的RAM实体账号进行授权（根据STS令牌颁发短时有效的临时访问token）；创建角色后会生成Arn描述符（角色的描述符：每个RAM角色存在唯一值且遵循Alicloudarn命名规范）。</li>\n<li>RAM权限策略：一组权限集，使用简单的Policy语法进行描述（分为系统策略和自定义策略）；权限策略是实际细分授权资源集、操作集、授权条件的描述。</li>\n</ul>\n<img data-src=\"/posts/fdc/ram1.png\" class>\n\n<blockquote>\n<p>创建RAM角色时有三种类型：</p>\n<ul>\n<li><strong>Alicloud账号</strong>：允许RAM用户所扮演的角色。扮演角色的RAM用户可以属于自己的Alicloud账号，也可以属于其他Alicloud账号。此类角色主要用来解决跨账号访问和临时授权问题</li>\n<li><strong>Alicloud服务</strong>：允许云服务所扮演的角色。此类角色主要用于授权云服务代理您进行资源操作（服务又分为两种）<ul>\n<li>普通服务角色：您需要自定义角色名称，选择受信服务，并自定义权限策略</li>\n<li>服务关联角色：您只需选择受信的云服务，云服务会自带预设的角色名称和权限策略</li>\n<li>两种服务角色没太大区别，服务关联角色会多一个预设的配置（一般服务角色用户Alicloud跨服务间的调用，例如ECS的授予&#x2F;收回RAM角色功能、RDS云服务调用KMS角色加密等，从某个云产品调用另一个云产品的授权）</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<img data-src=\"/posts/fdc/ram2.png\" class>\n<blockquote>\n<ul>\n<li><strong>身份提供商</strong>：允许可信身份提供商下的用户所扮演的角色。此类角色主要用于实现与Alicloud的单点登录（SSO）</li>\n</ul>\n<p><strong>常用的RAM角色一般为创建 Alicloud账号 方式（OSS官方推荐使用）</strong></p>\n<ul>\n<li>授权RAM角色介绍：<a href=\"https://help.aliyun.com/document_detail/116819.html\">https://help.aliyun.com/document_detail&#x2F;116819.html</a></li>\n<li>OSS官方推荐使用 Alicloud账号 方式：<a href=\"https://help.aliyun.com/document_detail/100624.html\">https://help.aliyun.com/document_detail&#x2F;100624.html</a></li>\n</ul>\n</blockquote>\n<h3 id=\"三、创建STS角色，自定义授权OSS功能测试\"><a href=\"#三、创建STS角色，自定义授权OSS功能测试\" class=\"headerlink\" title=\"三、创建STS角色，自定义授权OSS功能测试\"></a>三、创建STS角色，自定义授权OSS功能测试</h3><p>1）测试账号信息<br>账号：<a href=\"mailto:&#100;&#101;&#118;&#111;&#x70;&#x73;&#x5f;&#116;&#x65;&#115;&#x74;&#x40;&#x78;&#120;&#120;&#46;&#111;&#x6e;&#97;&#x6c;&#105;&#121;&#117;&#x6e;&#46;&#x63;&#111;&#x6d;\">&#100;&#101;&#118;&#111;&#x70;&#x73;&#x5f;&#116;&#x65;&#115;&#x74;&#x40;&#x78;&#120;&#120;&#46;&#111;&#x6e;&#97;&#x6c;&#105;&#121;&#117;&#x6e;&#46;&#x63;&#111;&#x6d;</a><br>AK：xxxxx<br>SK：xxxxx<br>ARN：acs:ram::xxxxx:role&#x2F;xxx-sts<br>OSS Bucket名称：oss-test<br>OSS授权目录：dir111&#x2F;dir111_secondline1&#x2F;</p>\n<p>2）进行授权</p>\n<ul>\n<li>创建RAM用户（子账号），生成AK SK （此步骤忽略）</li>\n<li>测试账号添加STS权限</li>\n</ul>\n<img data-src=\"/posts/fdc/ram3.png\" class>\n\n<ul>\n<li>添加权限策略，使用自定义策略授权（OSS官方示例Policy：<a href=\"https://help.aliyun.com/document_detail/266627.html\">https://help.aliyun.com/document_detail&#x2F;266627.html</a>）</li>\n</ul>\n<img data-src=\"/posts/fdc/ram4.png\" class>\n\n<ul>\n<li>添加RAM角色并授权Policy</li>\n</ul>\n<img data-src=\"/posts/fdc/ram5.png\" class>\n\n<img data-src=\"/posts/fdc/ram6.png\" class>\n\n<p>3）测试验证（控制台无法登录RAM账号验证权限情况下，可以使用ossutil或ossbrowser工具进行验证）</p>\n<ul>\n<li>ossutil使用：<a href=\"https://help.aliyun.com/document_detail/50451.html\">https://help.aliyun.com/document_detail&#x2F;50451.html</a></li>\n</ul>\n<img data-src=\"/posts/fdc/ram7.png\" class>\n\n<ul>\n<li>ossbrowser使用：<a href=\"https://help.aliyun.com/document_detail/92268.html\">https://help.aliyun.com/document_detail&#x2F;92268.html</a></li>\n</ul>\n<p>4）验证列举和其他相关权限无误后，将ARN信息提供研发即可</p>\n<blockquote>\n<p>权限流程：</p>\n<ol>\n<li>客户端程序&#x2F;调用端发起扮演角色，此时在进入实际要获取的角色权限前，需要通过调用AssumeRole接口返回STS凭证（调用STS接口需要<strong>AliyunSTSAssumeRoleAccess</strong>权限，因此对应RAM账号需要授权该系统策略）</li>\n<li>通过返回的STS临时凭证（临时AK+临时SK+临时token）发起相关云资源接口的调用</li>\n<li>客户端使用STS发起调用时，会验证两个部分的权限策略Policy （注意：最后的权限取这两个权限Policy的交集）</li>\n</ol>\n<ul>\n<li>STS扮演的角色本身授权的权限策略是否拥有对应云资源的权限（系统或自定义的Policy）</li>\n<li>SDK&#x2F;API调用时传入的policy_text参数值，在构造调用请求时传入（<a href=\"https://help.aliyun.com/document_detail/100624.html\">https://help.aliyun.com/document_detail&#x2F;100624.html</a><img data-src=\"/posts/fdc/ram8.png\" class></li>\n</ul>\n</blockquote>\n<h3 id=\"四、结合实际需求\"><a href=\"#四、结合实际需求\" class=\"headerlink\" title=\"四、结合实际需求\"></a>四、结合实际需求</h3><ol>\n<li><p>开发提出需求：需要某一个oss bucket的STS ARN信息</p>\n</li>\n<li><p>需要相关信息：</p>\n</li>\n</ol>\n<ul>\n<li>oss bucket具体需授权目录，必须</li>\n<li>endpoint: oss bucket所属区域，非必须</li>\n<li>bucket-name: oss bucket名称，必须</li>\n<li>调用OSS RAM账号，必须</li>\n</ul>\n<ol start=\"3\">\n<li>通过提供信息进行创建RAM角色、Policy策略新建（注意oss 细粒度的策略）、授权策略到RAM角色中，最后将新建的RAM角色的ARN描述符信息提供给研发。</li>\n</ol>"},{"title":"VPC 网络规划案例","abbrlink":"64a8","date":"2022-05-04T14:17:00.000Z","_content":"### 网段规划概述\n#### 1）规划网段的目的\n\n- 方便查看管理，相当于对某一个/多个IDC 机房的IP 规划，根据IP 地址可以一目了然的判断出归属。\n- 便于同集群/VPC 内网段判断网络、路由走向、以及网络隔离策略（白名单）。\n- 区分多VPC/网络 环境，方便在打通网络时区分子网网段。\n\n#### 2）规范化设计的方式\n首先需要分清两类，是否有ACK 等集群类资源单独规划：\n\n1. 如无集群资源（即只有RDS、ECS 等常规资源），按正常内网网段定义VPC与交换机即可\n1. 有集群资源，最好划分单独交换机部署常规资源，**独立交换机**部署集群资源。\n\n<!--more-->\n\n由于线上部署，或者未来趋势 基本云上都会已集群方式存在，因此只讨论第二种方式。\n网段设计规范：\n\n- VPC可使用的私网网段：192.168.0.0/16、10.0.0.0/8、172.16.0.0/12及其子网，每个专有网络只能指定一个网段。\n- 交换机可使用的网段：需要<= VPC网段（子集）\n\n{% asset_img vpc1.png%}\n\n- VPC数量：创建多个VPC 时尽量使用不同网段\n- 集群数量：同账号下部署多集群时尽量使用不同网段\n- 如有ACK 集群资源时，需判断集群网络插件模式\n   - 非Terway 插件时，需要三个私网网段，如：10.1.0.0/16（VPC-vswitch）、192.168.0.0/24（Pod 使用）、192.168.10.0/24（Service 使用）\n   - 使用Terway 插件时，需要两个私网网段，如：10.16.0.0/8（VPC-vswitch + Pod）、192.168.0.0/24（Service 使用）\n\n\n#### **个人建议\n\n- 同账号下（同环境）选择 192.168.0.0/16、10.0.0.0/0、172.16.0.0/12 进行VPC 创建组网。\n   - 不同集群与云产品资源之间使用子交换机分割。\n   - 使用云产品白名单或其他网络插件做网络隔离策略。\n- 不同账号（如日常、线上）可复用同网段进行组网（一般不存在跨环境调用）。\n\n- 当前环境网络组网信息（建议后续都使用Terway 插件）：\n   - 日常环境网络架构\n{% asset_img vpc2.png %}\n\n   - 线上网络架构（集群与集群、集群与云产品，通过私网的交换机网段进行隔离）\n{% asset_img vpc3.png %}\n\n\n### 线上实际案例\n#### 1）案例1\n{% asset_img vpc4.png %}\n\n- VPC：10.0.0.0/8 （复用线上VPC）\n- 交换机：新建4 台交换机\n   - test-swc-10_200_0_0_20  （可用区 1）\n   - test-swc-10_200_16_0_20 （可用区 2）\n   - test-swc-10_200_64_0_19 （可用区 1）\n   - test-swc-10_200_96_0_19 （可用区 2）\n- 集群CIDR规划\n   - Node CIDR：\n      - 10.200.0.0/20\n      - 10.200.16.0/20\n   - Pod CIDR：\n      - 10.200.64.0/19\n      - 10.200.96.0/19\n   - Service CIDR：\n      - 172.31.0.0/16\n> 注意：\n> - Node 和Pod 交换机如要高可用选择不同可用区时，需要每个可用区都有Node 和Pod 可使用的交换机。\n> - Service 网段不能与VPC 网段 及VPC 内已有Kubernetes 集群使用的网段重复。\n\n#### 2）相关文档与工具\n\n- [云企业网工作原理与操作](https://help.aliyun.com/document_detail/189596.html)\n\n- VPN网关原理与操作：\n   - [IPSec VPN 技术原理](https://cloud.tencent.com/developer/article/1824924)\n   - [Alicloud官方操作文档](https://help.aliyun.com/document_detail/65072.html)\n\n- [子网计算在线工具](https://www.bejson.com/convert/subnetmask/)\n\n- 架构图\n\n![总体网络架构.png](https://intranetproxy.alipay.com/skylark/lark/0/2022/png/21956377/1646207048171-c0f5a83d-b982-4e85-ab78-f724882be069.png#clientId=ufadced67-c1c1-4&from=ui&id=u1dc1cab7&margin=%5Bobject%20Object%5D&name=%E6%80%BB%E4%BD%93%E7%BD%91%E7%BB%9C%E6%9E%B6%E6%9E%84.png&originHeight=1993&originWidth=4131&originalType=binary&ratio=1&size=515776&status=done&style=none&taskId=uffed0b55-26c9-4f1d-b577-67c4f6f81ec)\n\n","source":"_posts/alicloud-vpc.md","raw":"---\ntitle: VPC 网络规划案例\ncategories:\n  - Alicloud\n  - Network\ntags:\n  - VPC\nabbrlink: 64a8\ndate: 2022-05-04 22:17:00\n---\n### 网段规划概述\n#### 1）规划网段的目的\n\n- 方便查看管理，相当于对某一个/多个IDC 机房的IP 规划，根据IP 地址可以一目了然的判断出归属。\n- 便于同集群/VPC 内网段判断网络、路由走向、以及网络隔离策略（白名单）。\n- 区分多VPC/网络 环境，方便在打通网络时区分子网网段。\n\n#### 2）规范化设计的方式\n首先需要分清两类，是否有ACK 等集群类资源单独规划：\n\n1. 如无集群资源（即只有RDS、ECS 等常规资源），按正常内网网段定义VPC与交换机即可\n1. 有集群资源，最好划分单独交换机部署常规资源，**独立交换机**部署集群资源。\n\n<!--more-->\n\n由于线上部署，或者未来趋势 基本云上都会已集群方式存在，因此只讨论第二种方式。\n网段设计规范：\n\n- VPC可使用的私网网段：192.168.0.0/16、10.0.0.0/8、172.16.0.0/12及其子网，每个专有网络只能指定一个网段。\n- 交换机可使用的网段：需要<= VPC网段（子集）\n\n{% asset_img vpc1.png%}\n\n- VPC数量：创建多个VPC 时尽量使用不同网段\n- 集群数量：同账号下部署多集群时尽量使用不同网段\n- 如有ACK 集群资源时，需判断集群网络插件模式\n   - 非Terway 插件时，需要三个私网网段，如：10.1.0.0/16（VPC-vswitch）、192.168.0.0/24（Pod 使用）、192.168.10.0/24（Service 使用）\n   - 使用Terway 插件时，需要两个私网网段，如：10.16.0.0/8（VPC-vswitch + Pod）、192.168.0.0/24（Service 使用）\n\n\n#### **个人建议\n\n- 同账号下（同环境）选择 192.168.0.0/16、10.0.0.0/0、172.16.0.0/12 进行VPC 创建组网。\n   - 不同集群与云产品资源之间使用子交换机分割。\n   - 使用云产品白名单或其他网络插件做网络隔离策略。\n- 不同账号（如日常、线上）可复用同网段进行组网（一般不存在跨环境调用）。\n\n- 当前环境网络组网信息（建议后续都使用Terway 插件）：\n   - 日常环境网络架构\n{% asset_img vpc2.png %}\n\n   - 线上网络架构（集群与集群、集群与云产品，通过私网的交换机网段进行隔离）\n{% asset_img vpc3.png %}\n\n\n### 线上实际案例\n#### 1）案例1\n{% asset_img vpc4.png %}\n\n- VPC：10.0.0.0/8 （复用线上VPC）\n- 交换机：新建4 台交换机\n   - test-swc-10_200_0_0_20  （可用区 1）\n   - test-swc-10_200_16_0_20 （可用区 2）\n   - test-swc-10_200_64_0_19 （可用区 1）\n   - test-swc-10_200_96_0_19 （可用区 2）\n- 集群CIDR规划\n   - Node CIDR：\n      - 10.200.0.0/20\n      - 10.200.16.0/20\n   - Pod CIDR：\n      - 10.200.64.0/19\n      - 10.200.96.0/19\n   - Service CIDR：\n      - 172.31.0.0/16\n> 注意：\n> - Node 和Pod 交换机如要高可用选择不同可用区时，需要每个可用区都有Node 和Pod 可使用的交换机。\n> - Service 网段不能与VPC 网段 及VPC 内已有Kubernetes 集群使用的网段重复。\n\n#### 2）相关文档与工具\n\n- [云企业网工作原理与操作](https://help.aliyun.com/document_detail/189596.html)\n\n- VPN网关原理与操作：\n   - [IPSec VPN 技术原理](https://cloud.tencent.com/developer/article/1824924)\n   - [Alicloud官方操作文档](https://help.aliyun.com/document_detail/65072.html)\n\n- [子网计算在线工具](https://www.bejson.com/convert/subnetmask/)\n\n- 架构图\n\n![总体网络架构.png](https://intranetproxy.alipay.com/skylark/lark/0/2022/png/21956377/1646207048171-c0f5a83d-b982-4e85-ab78-f724882be069.png#clientId=ufadced67-c1c1-4&from=ui&id=u1dc1cab7&margin=%5Bobject%20Object%5D&name=%E6%80%BB%E4%BD%93%E7%BD%91%E7%BB%9C%E6%9E%B6%E6%9E%84.png&originHeight=1993&originWidth=4131&originalType=binary&ratio=1&size=515776&status=done&style=none&taskId=uffed0b55-26c9-4f1d-b577-67c4f6f81ec)\n\n","slug":"alicloud-vpc","published":1,"updated":"2024-01-21T15:31:08.717Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm0fat8zj0007s0nj78qnen2i","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"网段规划概述\"><a href=\"#网段规划概述\" class=\"headerlink\" title=\"网段规划概述\"></a>网段规划概述</h3><h4 id=\"1）规划网段的目的\"><a href=\"#1）规划网段的目的\" class=\"headerlink\" title=\"1）规划网段的目的\"></a>1）规划网段的目的</h4><ul>\n<li>方便查看管理，相当于对某一个&#x2F;多个IDC 机房的IP 规划，根据IP 地址可以一目了然的判断出归属。</li>\n<li>便于同集群&#x2F;VPC 内网段判断网络、路由走向、以及网络隔离策略（白名单）。</li>\n<li>区分多VPC&#x2F;网络 环境，方便在打通网络时区分子网网段。</li>\n</ul>\n<h4 id=\"2）规范化设计的方式\"><a href=\"#2）规范化设计的方式\" class=\"headerlink\" title=\"2）规范化设计的方式\"></a>2）规范化设计的方式</h4><p>首先需要分清两类，是否有ACK 等集群类资源单独规划：</p>\n<ol>\n<li>如无集群资源（即只有RDS、ECS 等常规资源），按正常内网网段定义VPC与交换机即可</li>\n<li>有集群资源，最好划分单独交换机部署常规资源，<strong>独立交换机</strong>部署集群资源。</li>\n</ol>\n<span id=\"more\"></span>\n\n<p>由于线上部署，或者未来趋势 基本云上都会已集群方式存在，因此只讨论第二种方式。<br>网段设计规范：</p>\n<ul>\n<li>VPC可使用的私网网段：192.168.0.0&#x2F;16、10.0.0.0&#x2F;8、172.16.0.0&#x2F;12及其子网，每个专有网络只能指定一个网段。</li>\n<li>交换机可使用的网段：需要&lt;&#x3D; VPC网段（子集）</li>\n</ul>\n<img data-src=\"/posts/64a8/vpc1.png\" class>\n\n<ul>\n<li>VPC数量：创建多个VPC 时尽量使用不同网段</li>\n<li>集群数量：同账号下部署多集群时尽量使用不同网段</li>\n<li>如有ACK 集群资源时，需判断集群网络插件模式<ul>\n<li>非Terway 插件时，需要三个私网网段，如：10.1.0.0&#x2F;16（VPC-vswitch）、192.168.0.0&#x2F;24（Pod 使用）、192.168.10.0&#x2F;24（Service 使用）</li>\n<li>使用Terway 插件时，需要两个私网网段，如：10.16.0.0&#x2F;8（VPC-vswitch + Pod）、192.168.0.0&#x2F;24（Service 使用）</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"个人建议\"><a href=\"#个人建议\" class=\"headerlink\" title=\"**个人建议\"></a>**个人建议</h4><ul>\n<li><p>同账号下（同环境）选择 192.168.0.0&#x2F;16、10.0.0.0&#x2F;0、172.16.0.0&#x2F;12 进行VPC 创建组网。</p>\n<ul>\n<li>不同集群与云产品资源之间使用子交换机分割。</li>\n<li>使用云产品白名单或其他网络插件做网络隔离策略。</li>\n</ul>\n</li>\n<li><p>不同账号（如日常、线上）可复用同网段进行组网（一般不存在跨环境调用）。</p>\n</li>\n<li><p>当前环境网络组网信息（建议后续都使用Terway 插件）：</p>\n<ul>\n<li><p>日常环境网络架构</p>\n<img data-src=\"/posts/64a8/vpc2.png\" class>\n</li>\n<li><p>线上网络架构（集群与集群、集群与云产品，通过私网的交换机网段进行隔离）</p>\n</li>\n</ul>\n</li>\n</ul>\n<img data-src=\"/posts/64a8/vpc3.png\" class>\n\n\n<h3 id=\"线上实际案例\"><a href=\"#线上实际案例\" class=\"headerlink\" title=\"线上实际案例\"></a>线上实际案例</h3><h4 id=\"1）案例1\"><a href=\"#1）案例1\" class=\"headerlink\" title=\"1）案例1\"></a>1）案例1</h4><img data-src=\"/posts/64a8/vpc4.png\" class>\n\n<ul>\n<li>VPC：10.0.0.0&#x2F;8 （复用线上VPC）</li>\n<li>交换机：新建4 台交换机<ul>\n<li>test-swc-10_200_0_0_20  （可用区 1）</li>\n<li>test-swc-10_200_16_0_20 （可用区 2）</li>\n<li>test-swc-10_200_64_0_19 （可用区 1）</li>\n<li>test-swc-10_200_96_0_19 （可用区 2）</li>\n</ul>\n</li>\n<li>集群CIDR规划<ul>\n<li>Node CIDR：<ul>\n<li>10.200.0.0&#x2F;20</li>\n<li>10.200.16.0&#x2F;20</li>\n</ul>\n</li>\n<li>Pod CIDR：<ul>\n<li>10.200.64.0&#x2F;19</li>\n<li>10.200.96.0&#x2F;19</li>\n</ul>\n</li>\n<li>Service CIDR：<ul>\n<li>172.31.0.0&#x2F;16<blockquote>\n<p>注意：</p>\n<ul>\n<li>Node 和Pod 交换机如要高可用选择不同可用区时，需要每个可用区都有Node 和Pod 可使用的交换机。</li>\n<li>Service 网段不能与VPC 网段 及VPC 内已有Kubernetes 集群使用的网段重复。</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2）相关文档与工具\"><a href=\"#2）相关文档与工具\" class=\"headerlink\" title=\"2）相关文档与工具\"></a>2）相关文档与工具</h4><ul>\n<li><p><a href=\"https://help.aliyun.com/document_detail/189596.html\">云企业网工作原理与操作</a></p>\n</li>\n<li><p>VPN网关原理与操作：</p>\n<ul>\n<li><a href=\"https://cloud.tencent.com/developer/article/1824924\">IPSec VPN 技术原理</a></li>\n<li><a href=\"https://help.aliyun.com/document_detail/65072.html\">Alicloud官方操作文档</a></li>\n</ul>\n</li>\n<li><p><a href=\"https://www.bejson.com/convert/subnetmask/\">子网计算在线工具</a></p>\n</li>\n<li><p>架构图</p>\n</li>\n</ul>\n<p><img data-src=\"https://intranetproxy.alipay.com/skylark/lark/0/2022/png/21956377/1646207048171-c0f5a83d-b982-4e85-ab78-f724882be069.png#clientId=ufadced67-c1c1-4&from=ui&id=u1dc1cab7&margin=%5Bobject%20Object%5D&name=%E6%80%BB%E4%BD%93%E7%BD%91%E7%BB%9C%E6%9E%B6%E6%9E%84.png&originHeight=1993&originWidth=4131&originalType=binary&ratio=1&size=515776&status=done&style=none&taskId=uffed0b55-26c9-4f1d-b577-67c4f6f81ec\" alt=\"总体网络架构.png\"></p>\n","site":{"data":{"footer":"","styles":".post {\n  margin-top: 50px;\n  margin-bottom: 50px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n.headband {\n  display: none;\n}\nbody {\n  background: url(\"/images/background.jpeg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\n.post-block.page {\n  margin-top: 40px;\n}\n.category-all-page {\n  box-shadow: 0px 0px 10px 0px rgba(0,0,0,0.5);\n  background-color: #797d7f;\n  padding: 20px 30px 60px 30px;\n  border-radius: 25px 25px 25px 25px;\n}\n.category-all-title {\n  font-family: Impact;\n  font-size: 24px;\n  color: #0ff;\n}\n.category-list {\n  overflow: auto;\n}\n.category-list li {\n  height: 100%;\n  float: left;\n  border-right: 3px solid #222;\n  padding: 0 20px;\n}\n.category-all ul li {\n  list-style: none !important;\n}\n.category-list li:last-child {\n  border-right: none;\n}\n.category-list li a {\n  font-size: 16px;\n  text-decoration: none;\n  color: #7fff00;\n  font-family: Helvetica, Verdana, sans-serif;\n  -webkit-transition: all 0.5s ease;\n  -moz-transition: all 0.5s ease;\n  -o-transition: all 0.5s ease;\n  -ms-transition: all 0.5s ease;\n  transition: all 0.5s ease;\n}\n.category-list li a:hover {\n  color: #000;\n}\n.category-list li.active a {\n  font-weight: bold;\n  color: #000;\n}\n.tag-cloud a {\n  box-shadow: 0 1px 3px #6f42c1, 0 1px 2px #d9534f;\n  padding: 2px 10px;\n  margin: 8px;\n  background: rgba(193,66,92,0);\n  border-bottom: none;\n  border-radius: 20px;\n}\ncode {\n  background: #555;\n  color: #fff;\n}\n","variables":""}},"length":1369,"excerpt":"<h3 id=\"网段规划概述\"><a href=\"#网段规划概述\" class=\"headerlink\" title=\"网段规划概述\"></a>网段规划概述</h3><h4 id=\"1）规划网段的目的\"><a href=\"#1）规划网段的目的\" class=\"headerlink\" title=\"1）规划网段的目的\"></a>1）规划网段的目的</h4><ul>\n<li>方便查看管理，相当于对某一个&#x2F;多个IDC 机房的IP 规划，根据IP 地址可以一目了然的判断出归属。</li>\n<li>便于同集群&#x2F;VPC 内网段判断网络、路由走向、以及网络隔离策略（白名单）。</li>\n<li>区分多VPC&#x2F;网络 环境，方便在打通网络时区分子网网段。</li>\n</ul>\n<h4 id=\"2）规范化设计的方式\"><a href=\"#2）规范化设计的方式\" class=\"headerlink\" title=\"2）规范化设计的方式\"></a>2）规范化设计的方式</h4><p>首先需要分清两类，是否有ACK 等集群类资源单独规划：</p>\n<ol>\n<li>如无集群资源（即只有RDS、ECS 等常规资源），按正常内网网段定义VPC与交换机即可</li>\n<li>有集群资源，最好划分单独交换机部署常规资源，<strong>独立交换机</strong>部署集群资源。</li>\n</ol>","more":"<p>由于线上部署，或者未来趋势 基本云上都会已集群方式存在，因此只讨论第二种方式。<br>网段设计规范：</p>\n<ul>\n<li>VPC可使用的私网网段：192.168.0.0&#x2F;16、10.0.0.0&#x2F;8、172.16.0.0&#x2F;12及其子网，每个专有网络只能指定一个网段。</li>\n<li>交换机可使用的网段：需要&lt;&#x3D; VPC网段（子集）</li>\n</ul>\n<img data-src=\"/posts/64a8/vpc1.png\" class>\n\n<ul>\n<li>VPC数量：创建多个VPC 时尽量使用不同网段</li>\n<li>集群数量：同账号下部署多集群时尽量使用不同网段</li>\n<li>如有ACK 集群资源时，需判断集群网络插件模式<ul>\n<li>非Terway 插件时，需要三个私网网段，如：10.1.0.0&#x2F;16（VPC-vswitch）、192.168.0.0&#x2F;24（Pod 使用）、192.168.10.0&#x2F;24（Service 使用）</li>\n<li>使用Terway 插件时，需要两个私网网段，如：10.16.0.0&#x2F;8（VPC-vswitch + Pod）、192.168.0.0&#x2F;24（Service 使用）</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"个人建议\"><a href=\"#个人建议\" class=\"headerlink\" title=\"**个人建议\"></a>**个人建议</h4><ul>\n<li><p>同账号下（同环境）选择 192.168.0.0&#x2F;16、10.0.0.0&#x2F;0、172.16.0.0&#x2F;12 进行VPC 创建组网。</p>\n<ul>\n<li>不同集群与云产品资源之间使用子交换机分割。</li>\n<li>使用云产品白名单或其他网络插件做网络隔离策略。</li>\n</ul>\n</li>\n<li><p>不同账号（如日常、线上）可复用同网段进行组网（一般不存在跨环境调用）。</p>\n</li>\n<li><p>当前环境网络组网信息（建议后续都使用Terway 插件）：</p>\n<ul>\n<li><p>日常环境网络架构</p>\n<img data-src=\"/posts/64a8/vpc2.png\" class>\n</li>\n<li><p>线上网络架构（集群与集群、集群与云产品，通过私网的交换机网段进行隔离）</p>\n</li>\n</ul>\n</li>\n</ul>\n<img data-src=\"/posts/64a8/vpc3.png\" class>\n\n\n<h3 id=\"线上实际案例\"><a href=\"#线上实际案例\" class=\"headerlink\" title=\"线上实际案例\"></a>线上实际案例</h3><h4 id=\"1）案例1\"><a href=\"#1）案例1\" class=\"headerlink\" title=\"1）案例1\"></a>1）案例1</h4><img data-src=\"/posts/64a8/vpc4.png\" class>\n\n<ul>\n<li>VPC：10.0.0.0&#x2F;8 （复用线上VPC）</li>\n<li>交换机：新建4 台交换机<ul>\n<li>test-swc-10_200_0_0_20  （可用区 1）</li>\n<li>test-swc-10_200_16_0_20 （可用区 2）</li>\n<li>test-swc-10_200_64_0_19 （可用区 1）</li>\n<li>test-swc-10_200_96_0_19 （可用区 2）</li>\n</ul>\n</li>\n<li>集群CIDR规划<ul>\n<li>Node CIDR：<ul>\n<li>10.200.0.0&#x2F;20</li>\n<li>10.200.16.0&#x2F;20</li>\n</ul>\n</li>\n<li>Pod CIDR：<ul>\n<li>10.200.64.0&#x2F;19</li>\n<li>10.200.96.0&#x2F;19</li>\n</ul>\n</li>\n<li>Service CIDR：<ul>\n<li>172.31.0.0&#x2F;16<blockquote>\n<p>注意：</p>\n<ul>\n<li>Node 和Pod 交换机如要高可用选择不同可用区时，需要每个可用区都有Node 和Pod 可使用的交换机。</li>\n<li>Service 网段不能与VPC 网段 及VPC 内已有Kubernetes 集群使用的网段重复。</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2）相关文档与工具\"><a href=\"#2）相关文档与工具\" class=\"headerlink\" title=\"2）相关文档与工具\"></a>2）相关文档与工具</h4><ul>\n<li><p><a href=\"https://help.aliyun.com/document_detail/189596.html\">云企业网工作原理与操作</a></p>\n</li>\n<li><p>VPN网关原理与操作：</p>\n<ul>\n<li><a href=\"https://cloud.tencent.com/developer/article/1824924\">IPSec VPN 技术原理</a></li>\n<li><a href=\"https://help.aliyun.com/document_detail/65072.html\">Alicloud官方操作文档</a></li>\n</ul>\n</li>\n<li><p><a href=\"https://www.bejson.com/convert/subnetmask/\">子网计算在线工具</a></p>\n</li>\n<li><p>架构图</p>\n</li>\n</ul>\n<p><img data-src=\"https://intranetproxy.alipay.com/skylark/lark/0/2022/png/21956377/1646207048171-c0f5a83d-b982-4e85-ab78-f724882be069.png#clientId=ufadced67-c1c1-4&from=ui&id=u1dc1cab7&margin=%5Bobject%20Object%5D&name=%E6%80%BB%E4%BD%93%E7%BD%91%E7%BB%9C%E6%9E%B6%E6%9E%84.png&originHeight=1993&originWidth=4131&originalType=binary&ratio=1&size=515776&status=done&style=none&taskId=uffed0b55-26c9-4f1d-b577-67c4f6f81ec\" alt=\"总体网络架构.png\"></p>"},{"title":"Hello World","abbrlink":"3eeb","date":"2022-02-27T15:30:35.000Z","_content":"## Hello World!\n\n### For test.\n\n```\n# /bin/bash\necho test\n```\n\nTo Google [谷歌](https://www.google.com)\n","source":"_posts/First-Article.md","raw":"---\ntitle: Hello World\nabbrlink: 3eeb\ndate: 2022-02-27 23:30:35\ntags:\n---\n## Hello World!\n\n### For test.\n\n```\n# /bin/bash\necho test\n```\n\nTo Google [谷歌](https://www.google.com)\n","slug":"First-Article","published":1,"updated":"2024-01-21T15:28:43.148Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm0fat8zj0009s0njb24s1qg6","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h2 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World!\"></a>Hello World!</h2><h3 id=\"For-test\"><a href=\"#For-test\" class=\"headerlink\" title=\"For test.\"></a>For test.</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># /bin/bash</span><br><span class=\"line\">echo test</span><br></pre></td></tr></table></figure>\n\n<p>To Google <a href=\"https://www.google.com/\">谷歌</a></p>\n","site":{"data":{"footer":"","styles":".post {\n  margin-top: 50px;\n  margin-bottom: 50px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n.headband {\n  display: none;\n}\nbody {\n  background: url(\"/images/background.jpeg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\n.post-block.page {\n  margin-top: 40px;\n}\n.category-all-page {\n  box-shadow: 0px 0px 10px 0px rgba(0,0,0,0.5);\n  background-color: #797d7f;\n  padding: 20px 30px 60px 30px;\n  border-radius: 25px 25px 25px 25px;\n}\n.category-all-title {\n  font-family: Impact;\n  font-size: 24px;\n  color: #0ff;\n}\n.category-list {\n  overflow: auto;\n}\n.category-list li {\n  height: 100%;\n  float: left;\n  border-right: 3px solid #222;\n  padding: 0 20px;\n}\n.category-all ul li {\n  list-style: none !important;\n}\n.category-list li:last-child {\n  border-right: none;\n}\n.category-list li a {\n  font-size: 16px;\n  text-decoration: none;\n  color: #7fff00;\n  font-family: Helvetica, Verdana, sans-serif;\n  -webkit-transition: all 0.5s ease;\n  -moz-transition: all 0.5s ease;\n  -o-transition: all 0.5s ease;\n  -ms-transition: all 0.5s ease;\n  transition: all 0.5s ease;\n}\n.category-list li a:hover {\n  color: #000;\n}\n.category-list li.active a {\n  font-weight: bold;\n  color: #000;\n}\n.tag-cloud a {\n  box-shadow: 0 1px 3px #6f42c1, 0 1px 2px #d9534f;\n  padding: 2px 10px;\n  margin: 8px;\n  background: rgba(193,66,92,0);\n  border-bottom: none;\n  border-radius: 20px;\n}\ncode {\n  background: #555;\n  color: #fff;\n}\n","variables":""}},"length":49,"excerpt":"","more":"<h2 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World!\"></a>Hello World!</h2><h3 id=\"For-test\"><a href=\"#For-test\" class=\"headerlink\" title=\"For test.\"></a>For test.</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># /bin/bash</span><br><span class=\"line\">echo test</span><br></pre></td></tr></table></figure>\n\n<p>To Google <a href=\"https://www.google.com/\">谷歌</a></p>\n"},{"title":"Docker","abbrlink":"c018","date":"2024-01-21T14:49:15.000Z","_content":"### Docker Engine\n#### Install\n```shell\n# install docker engine\nhttps://docs.docker.com/engine/install/debian/\n\n```\n\n#### Storage\n##### Overview\n```shell\n# show docker volume info\ndocker volume ls\nDRIVER    VOLUME NAME\nlocal     jenkins_home\nlocal     yakir-test\n\n\n# how to use\n# default volume, directory = /var/lib/docker/volumes/\n-v yakir-test:/container-app/my-app\n--volume yakir-test:/container-app/my-app\n--mount\n# bind mounts\n-v /local_path/app.conf:/container-app/app.conf\n--volume /local_path/app.conf:/container-app/app.conf\n--mount\n# memory volume\n--tmpfs\n\n```\n<!--more-->\n##### Volumes\n```shell\n# create volume\ndocker volume create yakir-test\n\n\n# start container with volume\ndocker run -d --name test \\\n### \n# option1\n-v yakir-test:/app \\\n--volume yakir-test:/app \\\n# anonymous mode\n--volume /app\n# option2\n--mount source=yakir-test,target=/app \\\n# readonly mode\n--mount source=yakir-test,destination=/usr/share/nginx/html,readonly \\\n--mount 'type=volume,source=nfsvolume,target=/app,volume-driver=local,volume-opt=type=nfs,volume-opt=device=:/var/docker-nfs,volume-opt=o=addr=10.0.0.10' \\\n###\nnginx:latest\n\n\n# use a volume with docker-ompose\nservices:\n  frontend:\n    image: node:lts\n    volumes:\n      - yakir-test:/home/node/app\nvolumes:\n  yakir-test:\n     # external: true\n\n\n# show and remove volume\ndocker inspect volume yakir-test\ndocker stop test\ndocker volume rm yakir-test\n\n```\n\n##### Bind mounts\n```shell\n# start container with bind mounts\ndocker run -d --name test \\\n###\n# option1\n-v /opt/app.conf:/app/app.conf \\\n# option2\n--mount type=bind,source=\"$(pwd)\"/target,target=/app/ \\\n--mount type=bind,source=\"$(pwd)\"/target,target=/app/,readonly \\\n# bind propagation\n--mount type=bind,source=\"$(pwd)\"/target,target=/app2,readonly,bind-propagation=rslave \\\n###\nnginx:latest\n\n\n# use bind mounts with docker-compose\nservices:\n  frontend:\n    image: node:lts\n    volumes:\n      - type: bind\n        source: ./static\n        target: /opt/app/static\nvolumes:\n  myapp:\n\n\n# show and remove container\ndocker inspect test --format '{{ json .Mounts }}'\ndocker stop test\ndocker rm test\n\n```\n\n##### tmpfs mounts\n```shell\n# start container with tmpfs\ndocker run -it --name tmptest \\\n###\n# option1\n--tmpfs /app\n# option2\n--mount type=tmpfs,target=/app \\\n# specify tmpfs options\n--mount type=tmpfs,destination=/app,tmpfs-mode=1770,tmpfs-size=104857600 \\\n###\nnginx:latest\n\n\n# show and remove container\ndocker inspect tmptest --format '{{ json .Mounts }}'\ndocker stop tmptest\ndocker rm tmptest\n\n```\n\n##### Storage drivers\n###### Btrfs\n```shell\n# stop docker\nsystemctl stop docker.service\n\n# backup and empty contents\ncp -au /var/lib/docker/ /var/lib/docker.bk\nrm -rf /var/lib/docker/*\n\n# format block device as a btrfs filesystem\nmkfs.btrfs -f /dev/xvdf\n\n# mount the btrfs filesystem on /var/lib/docker mount point\nmount -t btrfs /dev/xvdf /var/lib/docker\ncp -au /var/lib/docker.bk/* /var/lib/docker/\n\n# configure Docker to use the btrfs storage driver\nvim /etc/docker/daemon.json\n{\n  \"storage-driver\": \"btrfs\"\n}\nsystemctl start docker.service\n\n# verify\ndocker info --format '{{ json .Driver }}'\n\"btrfs\"\n```\n\n###### OverlayFS\n```shell\n# stop docker\nsystemctl stop docker.service\n\n# backup and empty contents\ncp -au /var/lib/docker/ /var/lib/docker.bk\nrm -rf /var/lib/docker/*\n\n# options: separate backing filesystem, mount into /var/lib/docker and make sure to add mount to /etc/fstab to make it.  \n\n# configure Docker to use the btrfs storage driver\nvim /etc/docker/daemon.json\n{\n  \"storage-driver\": \"overlay2\"\n}\nsystemctl start docker.service\n\n# verify\ndocker info --format '{{ json .Driver }}'    \n\"overlay2\"\nmount |grep overlay |grep docker\n```\n\n###### ZFS\n```shell\n# stop docker\nsystemctl stop docker.service\n\n# backup and empty contents\ncp -auR /var/lib/docker/ /var/lib/docker.bk\nrm -rf /var/lib/docker/*\n\n# create a new zpool on block device and mount into /var/lib/docker\nzpool create -f zpool-docker -m /var/lib/docker /dev/xvdf\n# add zpoll\nzpool add zpool-docker /dev/xvdh\n# verify zpool\nzfs list\nNAME           USED  AVAIL  REFER  MOUNTPOINT\nzpool-docker    55K  96.4G    19K  /var/lib/docker\n\n# configure Docker to use the btrfs storage driver\nvim /etc/docker/daemon.json\n{\n  \"storage-driver\": \"zfs\"\n}\nsystemctl start docker.service\n\n# verify\ndocker info --format '{{ json .Driver }}'    \n\"zfs\"\n```\n\n###### containerd snapshotters\n```shell\n# configure Docker to use the btrfs storage driver\nvim /etc/docker/daemon.json\n{\n  \"features\": {\n    \"containerd-snapshotter\": true\n  }\n}\nsystemctl restart docker.service\n\n# verify\ndocker info -f '{{ .DriverStatus }}'\n[[driver-type io.containerd.snapshotter.v1]]\n\n```\n\n#### Networking\n##### Overview\n\n```shell\n# show docker network info\ndocker network ls\nNETWORK ID     NAME      DRIVER    SCOPE\nb2adc1fcf214   bridge    bridge    local\n2ed9fbc8db3e   host      host      local\nf1b2d749ed2c   none      null      local\n\n# how to use\n# bridge\n--net bridge\n# host\n--net host\n# none\n--net none\n# container\n--net container:container_name|container_id\n\n```\n\n##### Networking drivers\n###### Bridge\n```shell\n# bridge\n每个容器拥有独立网络协议栈，为每一个容器分配、设置 IP 等。将容器连接到虚拟网桥（默认为 docker0 网桥）。\n\n# 1.在宿主机上创建 container namespace\nxxx\n\n# 2.daemon 进程利用 veth pair 技术，在宿主机上创建一对对等虚拟网络接口设备。veth pair 特性是一端流量会流向另一端。\n# 一个接口放在宿主机的 docker0 虚拟网桥上并命名为 vethxxx\n# 查看网桥信息\nbrctl show\nbridge name     bridge id               STP enabled     interfaces\ndocker0         8000.0242db01d347       no              vethccab668\n# 查看宿主机 vethxxx 接口\nip addr |grep vethccab668\n# 另外一个接口放进 container 所属的 namespace 下并命名为 eth0 接口\ndocker run --rm -dit busybox sh ip addr\n\n# 3.daemon 进程还会从网桥 docker0 的私有地址空间中分配一个 IP 地址和子网给该容器，并设置 docker0 的 IP 地址为容器的默认网关\ndocker inspect test |grep Gateway\n            \"Gateway\": \"172.17.0.1\",\n\n```\n\n###### Overlay\n```shell\n# 多 docker 主机组建网络，配合 docker swarm 使用\n```\n\n###### Host\n```shell\n# host\n使用宿主机的 IP 和端口，共享宿主机网络协议栈。\n\n# test\ndocker run --rm -dit --net host busybox ip addr\n```\n\n###### IPvlan\n```shell\n# ipvlan\nipvlan_mode: l2, l3(default), l3s\nipvlan_flag: bridge(default), private, vepa\nparent: eth0\n\n# l2 mode: 使用宿主机的望断\ndocker network create -d ipvlan \\\n     --subnet=192.168.1.0/24 \\\n     --gateway=192.168.1.1 \\\n     -o ipvlan_mode=l2 \\\n     -o parent=eth0 test_l2_net\n# test\ndocker run --net=test_l2_net --name=ipv1 -dit alpine /bin/sh\ndocker run --net=test_l2_net --name=ipv2 -it --rm alpine /bin/sh\nping -c 4 ipv1\n\n# l3 mode\ndocker network create -d ipvlan \\\n     --subnet=192.168.1.0/24 \\\n     --subnet=10.10.1.0/24 \\\n     -o ipvlan_mode=l3 test_l3_net\n# test\ndocker run --net=test_l3_net --ip=192.168.1.10 -dit busybox /bin/sh\ndocker run --net=test_l3_net --ip=10.10.1.10 -dit busybox /bin/sh\n\ndocker run --net=test_l3_net --ip=192.168.1.9 -it --rm busybox ping -c 2 10.10.1.10\ndocker run --net=test_l3_net --ip=10.10.1.9 -it --rm busybox ping -c 2 192.168.1.10\n\n```\n\n###### Macvlan\n```shell\n# macvlan\n\n# bridge mode\ndocker network create -d macvlan \\\n  --subnet=172.16.86.0/24 \\\n  --gateway=172.16.86.1 \\\n  -o parent=eth0 pub_net\n\n\n# 802.1Q trunk bridge mode\ndocker network create -d macvlan \\\n    --subnet=192.168.50.0/24 \\\n    --gateway=192.168.50.1 \\\n    -o parent=eth0.50 macvlan50\n\ndocker network create -d macvlan \\\n    --subnet=192.168.60.0/24 \\\n    --gateway=192.168.60.1 \\\n    -o parent=eth0.60 macvlan60\n\n# https://zhuanlan.zhihu.com/p/616504632\n```\n\n###### None\n```shell\n# none\n每个容器拥有独立网络协议栈，但没有网络设置，如分配 veth pair 和网桥连接等。\n\n# verify\ndocker run --rm -dit --net none busybox ip addr\n```\n\n###### Container\n```shell\n# container\n和一个指定已有的容器共享网络协议栈，使用共有的 IP、端口等。\n\n# verify\ndocker run -dit --name test --rm busybox sh\ndocker run -it --name c1 --net container:test --rm busybox ip addr\ndocker run -it --name c2 --net container:test --rm busybox ip addr\n```\n\n###### 自定义网络模式\n```shell\n# user-defined \n默认 docker0 网桥无法通过 container name host 通信，自定义网络默认使用 daemon 进程内嵌的 DNS server，可以直接通过 --name 指定的 container name 进行通信\n\n# 创建自定义网络\ndocker network create yakir-test\n# 宿主机查看新增虚拟网卡\nip addr\n    inet 172.19.0.1/16 brd 172.19.255.255 scope global br-8cb8260a95cf\nbrctl show\nbr-8cb8260a95cf         8000.024272aa9d38       no              veth556b81b\n# verify\ndocker run -dit --name test1 --net yakir-test --rm busybox sh\ndocker run -it --name test2 --net yakir-test --rm busybox ping -c 4 test1\n\n# 连接已有的网络\ndocker run -dit --name test3 --net yakir-test --rm busybox sh\ndocker network connect yakir-test test3 \ndocker exec -it test3 ip addr\n531: eth0@if532: <BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN> mtu 1500 qdisc noqueue \n    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff\n    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0\n       valid_lft forever preferred_lft forever\n533: eth1@if534: <BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN> mtu 1500 qdisc noqueue \n    link/ether 02:42:ac:13:00:02 brd ff:ff:ff:ff:ff:ff\n    inet 172.19.0.2/16 brd 172.19.255.255 scope global eth1\n       valid_lft forever preferred_lft forever\n\n```\n\n##### Daemon\n```shell\n# configuration file\n/etc/docker/daemon.json\n~/.config/docker/daemon.json\n# configuration using flags\ndockerd --debug \\\n  --tls=true \\\n  --tlscert=/var/docker/server.pem \\\n  --tlskey=/var/docker/serverkey.pem \\\n  --host tcp://192.168.10.1:2376\n\n\n# default data directory\n/var/lib/docker\n\n\n# systemd\ncat /lib/systemd/system/docker.service\n\n\n```\n\n#### Docker Build && Compose\n##### Dockerfile\n```shell\n\n# 编写规范\n1. 使用统一的 base 镜像。\n2. 动静分离（基础稳定内容放在底层）。\n3. 最小原则（镜像只打包必需的东西）。\n4. 一个原则（每个镜像只有一个功能，交互通过网络，模块化管理）。\n5. 使用更少的层，减少每层的内容。\n6. 不要在 Dockerfile 单独修改文件权限（entrypoint / 拷贝+修改权限同时操作）。\n7. 利用 cache 加快构建速度。\n8. 版本控制和自动构建（放入 git 版本控制中，自动构建镜像，构建参数/变量给予文档说明）。\n9. 使用 .dockerignore 文件（排除文件和目录）\n```\n\n##### docker-compose\n```shell\n\n```\n\n#### Command\n[[containerRuntime#docker & podman|Docker Command]]\n\n\n\n>Reference:\n>1. [Docker Official Documentation](https://docs.docker.com/)\n>2. [Docker network-drivers](https://docs.docker.com/network/drivers/)\n>3. [Dockerfile reference](https://docs.docker.com/engine/reference/builder/)\n","source":"_posts/docker.md","raw":"---\ntitle: Docker\ncategories:\n  - Container\ntags:\n  - Docker\nabbrlink: c018\ndate: 2024-01-21 22:49:15\n---\n### Docker Engine\n#### Install\n```shell\n# install docker engine\nhttps://docs.docker.com/engine/install/debian/\n\n```\n\n#### Storage\n##### Overview\n```shell\n# show docker volume info\ndocker volume ls\nDRIVER    VOLUME NAME\nlocal     jenkins_home\nlocal     yakir-test\n\n\n# how to use\n# default volume, directory = /var/lib/docker/volumes/\n-v yakir-test:/container-app/my-app\n--volume yakir-test:/container-app/my-app\n--mount\n# bind mounts\n-v /local_path/app.conf:/container-app/app.conf\n--volume /local_path/app.conf:/container-app/app.conf\n--mount\n# memory volume\n--tmpfs\n\n```\n<!--more-->\n##### Volumes\n```shell\n# create volume\ndocker volume create yakir-test\n\n\n# start container with volume\ndocker run -d --name test \\\n### \n# option1\n-v yakir-test:/app \\\n--volume yakir-test:/app \\\n# anonymous mode\n--volume /app\n# option2\n--mount source=yakir-test,target=/app \\\n# readonly mode\n--mount source=yakir-test,destination=/usr/share/nginx/html,readonly \\\n--mount 'type=volume,source=nfsvolume,target=/app,volume-driver=local,volume-opt=type=nfs,volume-opt=device=:/var/docker-nfs,volume-opt=o=addr=10.0.0.10' \\\n###\nnginx:latest\n\n\n# use a volume with docker-ompose\nservices:\n  frontend:\n    image: node:lts\n    volumes:\n      - yakir-test:/home/node/app\nvolumes:\n  yakir-test:\n     # external: true\n\n\n# show and remove volume\ndocker inspect volume yakir-test\ndocker stop test\ndocker volume rm yakir-test\n\n```\n\n##### Bind mounts\n```shell\n# start container with bind mounts\ndocker run -d --name test \\\n###\n# option1\n-v /opt/app.conf:/app/app.conf \\\n# option2\n--mount type=bind,source=\"$(pwd)\"/target,target=/app/ \\\n--mount type=bind,source=\"$(pwd)\"/target,target=/app/,readonly \\\n# bind propagation\n--mount type=bind,source=\"$(pwd)\"/target,target=/app2,readonly,bind-propagation=rslave \\\n###\nnginx:latest\n\n\n# use bind mounts with docker-compose\nservices:\n  frontend:\n    image: node:lts\n    volumes:\n      - type: bind\n        source: ./static\n        target: /opt/app/static\nvolumes:\n  myapp:\n\n\n# show and remove container\ndocker inspect test --format '{{ json .Mounts }}'\ndocker stop test\ndocker rm test\n\n```\n\n##### tmpfs mounts\n```shell\n# start container with tmpfs\ndocker run -it --name tmptest \\\n###\n# option1\n--tmpfs /app\n# option2\n--mount type=tmpfs,target=/app \\\n# specify tmpfs options\n--mount type=tmpfs,destination=/app,tmpfs-mode=1770,tmpfs-size=104857600 \\\n###\nnginx:latest\n\n\n# show and remove container\ndocker inspect tmptest --format '{{ json .Mounts }}'\ndocker stop tmptest\ndocker rm tmptest\n\n```\n\n##### Storage drivers\n###### Btrfs\n```shell\n# stop docker\nsystemctl stop docker.service\n\n# backup and empty contents\ncp -au /var/lib/docker/ /var/lib/docker.bk\nrm -rf /var/lib/docker/*\n\n# format block device as a btrfs filesystem\nmkfs.btrfs -f /dev/xvdf\n\n# mount the btrfs filesystem on /var/lib/docker mount point\nmount -t btrfs /dev/xvdf /var/lib/docker\ncp -au /var/lib/docker.bk/* /var/lib/docker/\n\n# configure Docker to use the btrfs storage driver\nvim /etc/docker/daemon.json\n{\n  \"storage-driver\": \"btrfs\"\n}\nsystemctl start docker.service\n\n# verify\ndocker info --format '{{ json .Driver }}'\n\"btrfs\"\n```\n\n###### OverlayFS\n```shell\n# stop docker\nsystemctl stop docker.service\n\n# backup and empty contents\ncp -au /var/lib/docker/ /var/lib/docker.bk\nrm -rf /var/lib/docker/*\n\n# options: separate backing filesystem, mount into /var/lib/docker and make sure to add mount to /etc/fstab to make it.  \n\n# configure Docker to use the btrfs storage driver\nvim /etc/docker/daemon.json\n{\n  \"storage-driver\": \"overlay2\"\n}\nsystemctl start docker.service\n\n# verify\ndocker info --format '{{ json .Driver }}'    \n\"overlay2\"\nmount |grep overlay |grep docker\n```\n\n###### ZFS\n```shell\n# stop docker\nsystemctl stop docker.service\n\n# backup and empty contents\ncp -auR /var/lib/docker/ /var/lib/docker.bk\nrm -rf /var/lib/docker/*\n\n# create a new zpool on block device and mount into /var/lib/docker\nzpool create -f zpool-docker -m /var/lib/docker /dev/xvdf\n# add zpoll\nzpool add zpool-docker /dev/xvdh\n# verify zpool\nzfs list\nNAME           USED  AVAIL  REFER  MOUNTPOINT\nzpool-docker    55K  96.4G    19K  /var/lib/docker\n\n# configure Docker to use the btrfs storage driver\nvim /etc/docker/daemon.json\n{\n  \"storage-driver\": \"zfs\"\n}\nsystemctl start docker.service\n\n# verify\ndocker info --format '{{ json .Driver }}'    \n\"zfs\"\n```\n\n###### containerd snapshotters\n```shell\n# configure Docker to use the btrfs storage driver\nvim /etc/docker/daemon.json\n{\n  \"features\": {\n    \"containerd-snapshotter\": true\n  }\n}\nsystemctl restart docker.service\n\n# verify\ndocker info -f '{{ .DriverStatus }}'\n[[driver-type io.containerd.snapshotter.v1]]\n\n```\n\n#### Networking\n##### Overview\n\n```shell\n# show docker network info\ndocker network ls\nNETWORK ID     NAME      DRIVER    SCOPE\nb2adc1fcf214   bridge    bridge    local\n2ed9fbc8db3e   host      host      local\nf1b2d749ed2c   none      null      local\n\n# how to use\n# bridge\n--net bridge\n# host\n--net host\n# none\n--net none\n# container\n--net container:container_name|container_id\n\n```\n\n##### Networking drivers\n###### Bridge\n```shell\n# bridge\n每个容器拥有独立网络协议栈，为每一个容器分配、设置 IP 等。将容器连接到虚拟网桥（默认为 docker0 网桥）。\n\n# 1.在宿主机上创建 container namespace\nxxx\n\n# 2.daemon 进程利用 veth pair 技术，在宿主机上创建一对对等虚拟网络接口设备。veth pair 特性是一端流量会流向另一端。\n# 一个接口放在宿主机的 docker0 虚拟网桥上并命名为 vethxxx\n# 查看网桥信息\nbrctl show\nbridge name     bridge id               STP enabled     interfaces\ndocker0         8000.0242db01d347       no              vethccab668\n# 查看宿主机 vethxxx 接口\nip addr |grep vethccab668\n# 另外一个接口放进 container 所属的 namespace 下并命名为 eth0 接口\ndocker run --rm -dit busybox sh ip addr\n\n# 3.daemon 进程还会从网桥 docker0 的私有地址空间中分配一个 IP 地址和子网给该容器，并设置 docker0 的 IP 地址为容器的默认网关\ndocker inspect test |grep Gateway\n            \"Gateway\": \"172.17.0.1\",\n\n```\n\n###### Overlay\n```shell\n# 多 docker 主机组建网络，配合 docker swarm 使用\n```\n\n###### Host\n```shell\n# host\n使用宿主机的 IP 和端口，共享宿主机网络协议栈。\n\n# test\ndocker run --rm -dit --net host busybox ip addr\n```\n\n###### IPvlan\n```shell\n# ipvlan\nipvlan_mode: l2, l3(default), l3s\nipvlan_flag: bridge(default), private, vepa\nparent: eth0\n\n# l2 mode: 使用宿主机的望断\ndocker network create -d ipvlan \\\n     --subnet=192.168.1.0/24 \\\n     --gateway=192.168.1.1 \\\n     -o ipvlan_mode=l2 \\\n     -o parent=eth0 test_l2_net\n# test\ndocker run --net=test_l2_net --name=ipv1 -dit alpine /bin/sh\ndocker run --net=test_l2_net --name=ipv2 -it --rm alpine /bin/sh\nping -c 4 ipv1\n\n# l3 mode\ndocker network create -d ipvlan \\\n     --subnet=192.168.1.0/24 \\\n     --subnet=10.10.1.0/24 \\\n     -o ipvlan_mode=l3 test_l3_net\n# test\ndocker run --net=test_l3_net --ip=192.168.1.10 -dit busybox /bin/sh\ndocker run --net=test_l3_net --ip=10.10.1.10 -dit busybox /bin/sh\n\ndocker run --net=test_l3_net --ip=192.168.1.9 -it --rm busybox ping -c 2 10.10.1.10\ndocker run --net=test_l3_net --ip=10.10.1.9 -it --rm busybox ping -c 2 192.168.1.10\n\n```\n\n###### Macvlan\n```shell\n# macvlan\n\n# bridge mode\ndocker network create -d macvlan \\\n  --subnet=172.16.86.0/24 \\\n  --gateway=172.16.86.1 \\\n  -o parent=eth0 pub_net\n\n\n# 802.1Q trunk bridge mode\ndocker network create -d macvlan \\\n    --subnet=192.168.50.0/24 \\\n    --gateway=192.168.50.1 \\\n    -o parent=eth0.50 macvlan50\n\ndocker network create -d macvlan \\\n    --subnet=192.168.60.0/24 \\\n    --gateway=192.168.60.1 \\\n    -o parent=eth0.60 macvlan60\n\n# https://zhuanlan.zhihu.com/p/616504632\n```\n\n###### None\n```shell\n# none\n每个容器拥有独立网络协议栈，但没有网络设置，如分配 veth pair 和网桥连接等。\n\n# verify\ndocker run --rm -dit --net none busybox ip addr\n```\n\n###### Container\n```shell\n# container\n和一个指定已有的容器共享网络协议栈，使用共有的 IP、端口等。\n\n# verify\ndocker run -dit --name test --rm busybox sh\ndocker run -it --name c1 --net container:test --rm busybox ip addr\ndocker run -it --name c2 --net container:test --rm busybox ip addr\n```\n\n###### 自定义网络模式\n```shell\n# user-defined \n默认 docker0 网桥无法通过 container name host 通信，自定义网络默认使用 daemon 进程内嵌的 DNS server，可以直接通过 --name 指定的 container name 进行通信\n\n# 创建自定义网络\ndocker network create yakir-test\n# 宿主机查看新增虚拟网卡\nip addr\n    inet 172.19.0.1/16 brd 172.19.255.255 scope global br-8cb8260a95cf\nbrctl show\nbr-8cb8260a95cf         8000.024272aa9d38       no              veth556b81b\n# verify\ndocker run -dit --name test1 --net yakir-test --rm busybox sh\ndocker run -it --name test2 --net yakir-test --rm busybox ping -c 4 test1\n\n# 连接已有的网络\ndocker run -dit --name test3 --net yakir-test --rm busybox sh\ndocker network connect yakir-test test3 \ndocker exec -it test3 ip addr\n531: eth0@if532: <BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN> mtu 1500 qdisc noqueue \n    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff\n    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0\n       valid_lft forever preferred_lft forever\n533: eth1@if534: <BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN> mtu 1500 qdisc noqueue \n    link/ether 02:42:ac:13:00:02 brd ff:ff:ff:ff:ff:ff\n    inet 172.19.0.2/16 brd 172.19.255.255 scope global eth1\n       valid_lft forever preferred_lft forever\n\n```\n\n##### Daemon\n```shell\n# configuration file\n/etc/docker/daemon.json\n~/.config/docker/daemon.json\n# configuration using flags\ndockerd --debug \\\n  --tls=true \\\n  --tlscert=/var/docker/server.pem \\\n  --tlskey=/var/docker/serverkey.pem \\\n  --host tcp://192.168.10.1:2376\n\n\n# default data directory\n/var/lib/docker\n\n\n# systemd\ncat /lib/systemd/system/docker.service\n\n\n```\n\n#### Docker Build && Compose\n##### Dockerfile\n```shell\n\n# 编写规范\n1. 使用统一的 base 镜像。\n2. 动静分离（基础稳定内容放在底层）。\n3. 最小原则（镜像只打包必需的东西）。\n4. 一个原则（每个镜像只有一个功能，交互通过网络，模块化管理）。\n5. 使用更少的层，减少每层的内容。\n6. 不要在 Dockerfile 单独修改文件权限（entrypoint / 拷贝+修改权限同时操作）。\n7. 利用 cache 加快构建速度。\n8. 版本控制和自动构建（放入 git 版本控制中，自动构建镜像，构建参数/变量给予文档说明）。\n9. 使用 .dockerignore 文件（排除文件和目录）\n```\n\n##### docker-compose\n```shell\n\n```\n\n#### Command\n[[containerRuntime#docker & podman|Docker Command]]\n\n\n\n>Reference:\n>1. [Docker Official Documentation](https://docs.docker.com/)\n>2. [Docker network-drivers](https://docs.docker.com/network/drivers/)\n>3. [Dockerfile reference](https://docs.docker.com/engine/reference/builder/)\n","slug":"docker","published":1,"updated":"2024-01-21T15:33:40.702Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm0fat8zk000bs0nj1p9k5py2","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"Docker-Engine\"><a href=\"#Docker-Engine\" class=\"headerlink\" title=\"Docker Engine\"></a>Docker Engine</h3><h4 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">install docker engine</span></span><br><span class=\"line\">https://docs.docker.com/engine/install/debian/</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Storage\"><a href=\"#Storage\" class=\"headerlink\" title=\"Storage\"></a>Storage</h4><h5 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a>Overview</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">show docker volume info</span></span><br><span class=\"line\">docker volume ls</span><br><span class=\"line\">DRIVER    VOLUME NAME</span><br><span class=\"line\">local     jenkins_home</span><br><span class=\"line\">local     yakir-test</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">how to use</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">default volume, directory = /var/lib/docker/volumes/</span></span><br><span class=\"line\">-v yakir-test:/container-app/my-app</span><br><span class=\"line\">--volume yakir-test:/container-app/my-app</span><br><span class=\"line\">--mount</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">bind</span> mounts</span></span><br><span class=\"line\">-v /local_path/app.conf:/container-app/app.conf</span><br><span class=\"line\">--volume /local_path/app.conf:/container-app/app.conf</span><br><span class=\"line\">--mount</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">memory volume</span></span><br><span class=\"line\">--tmpfs</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h5 id=\"Volumes\"><a href=\"#Volumes\" class=\"headerlink\" title=\"Volumes\"></a>Volumes</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">create volume</span></span><br><span class=\"line\">docker volume create yakir-test</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">start container with volume</span></span><br><span class=\"line\">docker run -d --name test \\</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\">##</span></span> </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">option1</span></span><br><span class=\"line\">-v yakir-test:/app \\</span><br><span class=\"line\">--volume yakir-test:/app \\</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">anonymous mode</span></span><br><span class=\"line\">--volume /app</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">option2</span></span><br><span class=\"line\">--mount source=yakir-test,target=/app \\</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">readonly</span> mode</span></span><br><span class=\"line\">--mount source=yakir-test,destination=/usr/share/nginx/html,readonly \\</span><br><span class=\"line\">--mount &#x27;type=volume,source=nfsvolume,target=/app,volume-driver=local,volume-opt=type=nfs,volume-opt=device=:/var/docker-nfs,volume-opt=o=addr=10.0.0.10&#x27; \\</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\">##</span></span></span><br><span class=\"line\">nginx:latest</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">use a volume with docker-ompose</span></span><br><span class=\"line\">services:</span><br><span class=\"line\">  frontend:</span><br><span class=\"line\">    image: node:lts</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - yakir-test:/home/node/app</span><br><span class=\"line\">volumes:</span><br><span class=\"line\">  yakir-test:</span><br><span class=\"line\">     # external: true</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">show and remove volume</span></span><br><span class=\"line\">docker inspect volume yakir-test</span><br><span class=\"line\">docker stop test</span><br><span class=\"line\">docker volume rm yakir-test</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Bind-mounts\"><a href=\"#Bind-mounts\" class=\"headerlink\" title=\"Bind mounts\"></a>Bind mounts</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">start container with <span class=\"built_in\">bind</span> mounts</span></span><br><span class=\"line\">docker run -d --name test \\</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\">##</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">option1</span></span><br><span class=\"line\">-v /opt/app.conf:/app/app.conf \\</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">option2</span></span><br><span class=\"line\">--mount type=bind,source=&quot;$(pwd)&quot;/target,target=/app/ \\</span><br><span class=\"line\">--mount type=bind,source=&quot;$(pwd)&quot;/target,target=/app/,readonly \\</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">bind</span> propagation</span></span><br><span class=\"line\">--mount type=bind,source=&quot;$(pwd)&quot;/target,target=/app2,readonly,bind-propagation=rslave \\</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\">##</span></span></span><br><span class=\"line\">nginx:latest</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">use <span class=\"built_in\">bind</span> mounts with docker-compose</span></span><br><span class=\"line\">services:</span><br><span class=\"line\">  frontend:</span><br><span class=\"line\">    image: node:lts</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - type: bind</span><br><span class=\"line\">        source: ./static</span><br><span class=\"line\">        target: /opt/app/static</span><br><span class=\"line\">volumes:</span><br><span class=\"line\">  myapp:</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">show and remove container</span></span><br><span class=\"line\">docker inspect test --format &#x27;&#123;&#123; json .Mounts &#125;&#125;&#x27;</span><br><span class=\"line\">docker stop test</span><br><span class=\"line\">docker rm test</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"tmpfs-mounts\"><a href=\"#tmpfs-mounts\" class=\"headerlink\" title=\"tmpfs mounts\"></a>tmpfs mounts</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">start container with tmpfs</span></span><br><span class=\"line\">docker run -it --name tmptest \\</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\">##</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">option1</span></span><br><span class=\"line\">--tmpfs /app</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">option2</span></span><br><span class=\"line\">--mount type=tmpfs,target=/app \\</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">specify tmpfs options</span></span><br><span class=\"line\">--mount type=tmpfs,destination=/app,tmpfs-mode=1770,tmpfs-size=104857600 \\</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\">##</span></span></span><br><span class=\"line\">nginx:latest</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">show and remove container</span></span><br><span class=\"line\">docker inspect tmptest --format &#x27;&#123;&#123; json .Mounts &#125;&#125;&#x27;</span><br><span class=\"line\">docker stop tmptest</span><br><span class=\"line\">docker rm tmptest</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Storage-drivers\"><a href=\"#Storage-drivers\" class=\"headerlink\" title=\"Storage drivers\"></a>Storage drivers</h5><h6 id=\"Btrfs\"><a href=\"#Btrfs\" class=\"headerlink\" title=\"Btrfs\"></a>Btrfs</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">stop docker</span></span><br><span class=\"line\">systemctl stop docker.service</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">backup and empty contents</span></span><br><span class=\"line\">cp -au /var/lib/docker/ /var/lib/docker.bk</span><br><span class=\"line\">rm -rf /var/lib/docker/*</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">format block device as a btrfs filesystem</span></span><br><span class=\"line\">mkfs.btrfs -f /dev/xvdf</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">mount the btrfs filesystem on /var/lib/docker mount point</span></span><br><span class=\"line\">mount -t btrfs /dev/xvdf /var/lib/docker</span><br><span class=\"line\">cp -au /var/lib/docker.bk/* /var/lib/docker/</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">configure Docker to use the btrfs storage driver</span></span><br><span class=\"line\">vim /etc/docker/daemon.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;storage-driver&quot;: &quot;btrfs&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">systemctl start docker.service</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">verify</span></span><br><span class=\"line\">docker info --format &#x27;&#123;&#123; json .Driver &#125;&#125;&#x27;</span><br><span class=\"line\">&quot;btrfs&quot;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"OverlayFS\"><a href=\"#OverlayFS\" class=\"headerlink\" title=\"OverlayFS\"></a>OverlayFS</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">stop docker</span></span><br><span class=\"line\">systemctl stop docker.service</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">backup and empty contents</span></span><br><span class=\"line\">cp -au /var/lib/docker/ /var/lib/docker.bk</span><br><span class=\"line\">rm -rf /var/lib/docker/*</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">options: separate backing filesystem, mount into /var/lib/docker and make sure to add mount to /etc/fstab to make it.</span>  </span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">configure Docker to use the btrfs storage driver</span></span><br><span class=\"line\">vim /etc/docker/daemon.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;storage-driver&quot;: &quot;overlay2&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">systemctl start docker.service</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">verify</span></span><br><span class=\"line\">docker info --format &#x27;&#123;&#123; json .Driver &#125;&#125;&#x27;    </span><br><span class=\"line\">&quot;overlay2&quot;</span><br><span class=\"line\">mount |grep overlay |grep docker</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"ZFS\"><a href=\"#ZFS\" class=\"headerlink\" title=\"ZFS\"></a>ZFS</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">stop docker</span></span><br><span class=\"line\">systemctl stop docker.service</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">backup and empty contents</span></span><br><span class=\"line\">cp -auR /var/lib/docker/ /var/lib/docker.bk</span><br><span class=\"line\">rm -rf /var/lib/docker/*</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">create a new zpool on block device and mount into /var/lib/docker</span></span><br><span class=\"line\">zpool create -f zpool-docker -m /var/lib/docker /dev/xvdf</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">add zpoll</span></span><br><span class=\"line\">zpool add zpool-docker /dev/xvdh</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">verify zpool</span></span><br><span class=\"line\">zfs list</span><br><span class=\"line\">NAME           USED  AVAIL  REFER  MOUNTPOINT</span><br><span class=\"line\">zpool-docker    55K  96.4G    19K  /var/lib/docker</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">configure Docker to use the btrfs storage driver</span></span><br><span class=\"line\">vim /etc/docker/daemon.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;storage-driver&quot;: &quot;zfs&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">systemctl start docker.service</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">verify</span></span><br><span class=\"line\">docker info --format &#x27;&#123;&#123; json .Driver &#125;&#125;&#x27;    </span><br><span class=\"line\">&quot;zfs&quot;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"containerd-snapshotters\"><a href=\"#containerd-snapshotters\" class=\"headerlink\" title=\"containerd snapshotters\"></a>containerd snapshotters</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">configure Docker to use the btrfs storage driver</span></span><br><span class=\"line\">vim /etc/docker/daemon.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;features&quot;: &#123;</span><br><span class=\"line\">    &quot;containerd-snapshotter&quot;: true</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">systemctl restart docker.service</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">verify</span></span><br><span class=\"line\">docker info -f &#x27;&#123;&#123; .DriverStatus &#125;&#125;&#x27;</span><br><span class=\"line\">[[driver-type io.containerd.snapshotter.v1]]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Networking\"><a href=\"#Networking\" class=\"headerlink\" title=\"Networking\"></a>Networking</h4><h5 id=\"Overview-1\"><a href=\"#Overview-1\" class=\"headerlink\" title=\"Overview\"></a>Overview</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">show docker network info</span></span><br><span class=\"line\">docker network ls</span><br><span class=\"line\">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class=\"line\">b2adc1fcf214   bridge    bridge    local</span><br><span class=\"line\">2ed9fbc8db3e   host      host      local</span><br><span class=\"line\">f1b2d749ed2c   none      null      local</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">how to use</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">bridge</span></span><br><span class=\"line\">--net bridge</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">host</span></span><br><span class=\"line\">--net host</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">none</span></span><br><span class=\"line\">--net none</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">container</span></span><br><span class=\"line\">--net container:container_name|container_id</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Networking-drivers\"><a href=\"#Networking-drivers\" class=\"headerlink\" title=\"Networking drivers\"></a>Networking drivers</h5><h6 id=\"Bridge\"><a href=\"#Bridge\" class=\"headerlink\" title=\"Bridge\"></a>Bridge</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">bridge</span></span><br><span class=\"line\">每个容器拥有独立网络协议栈，为每一个容器分配、设置 IP 等。将容器连接到虚拟网桥（默认为 docker0 网桥）。</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">1.在宿主机上创建 container namespace</span></span><br><span class=\"line\">xxx</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">2.daemon 进程利用 veth pair 技术，在宿主机上创建一对对等虚拟网络接口设备。veth pair 特性是一端流量会流向另一端。</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">一个接口放在宿主机的 docker0 虚拟网桥上并命名为 vethxxx</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看网桥信息</span></span><br><span class=\"line\">brctl show</span><br><span class=\"line\">bridge name     bridge id               STP enabled     interfaces</span><br><span class=\"line\">docker0         8000.0242db01d347       no              vethccab668</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看宿主机 vethxxx 接口</span></span><br><span class=\"line\">ip addr |grep vethccab668</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">另外一个接口放进 container 所属的 namespace 下并命名为 eth0 接口</span></span><br><span class=\"line\">docker run --rm -dit busybox sh ip addr</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">3.daemon 进程还会从网桥 docker0 的私有地址空间中分配一个 IP 地址和子网给该容器，并设置 docker0 的 IP 地址为容器的默认网关</span></span><br><span class=\"line\">docker inspect test |grep Gateway</span><br><span class=\"line\">            &quot;Gateway&quot;: &quot;172.17.0.1&quot;,</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"Overlay\"><a href=\"#Overlay\" class=\"headerlink\" title=\"Overlay\"></a>Overlay</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">多 docker 主机组建网络，配合 docker swarm 使用</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"Host\"><a href=\"#Host\" class=\"headerlink\" title=\"Host\"></a>Host</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">host</span></span><br><span class=\"line\">使用宿主机的 IP 和端口，共享宿主机网络协议栈。</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">test</span></span></span><br><span class=\"line\">docker run --rm -dit --net host busybox ip addr</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"IPvlan\"><a href=\"#IPvlan\" class=\"headerlink\" title=\"IPvlan\"></a>IPvlan</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ipvlan</span></span><br><span class=\"line\">ipvlan_mode: l2, l3(default), l3s</span><br><span class=\"line\">ipvlan_flag: bridge(default), private, vepa</span><br><span class=\"line\">parent: eth0</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">l2 mode: 使用宿主机的望断</span></span><br><span class=\"line\">docker network create -d ipvlan \\</span><br><span class=\"line\">     --subnet=192.168.1.0/24 \\</span><br><span class=\"line\">     --gateway=192.168.1.1 \\</span><br><span class=\"line\">     -o ipvlan_mode=l2 \\</span><br><span class=\"line\">     -o parent=eth0 test_l2_net</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">test</span></span></span><br><span class=\"line\">docker run --net=test_l2_net --name=ipv1 -dit alpine /bin/sh</span><br><span class=\"line\">docker run --net=test_l2_net --name=ipv2 -it --rm alpine /bin/sh</span><br><span class=\"line\">ping -c 4 ipv1</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">l3 mode</span></span><br><span class=\"line\">docker network create -d ipvlan \\</span><br><span class=\"line\">     --subnet=192.168.1.0/24 \\</span><br><span class=\"line\">     --subnet=10.10.1.0/24 \\</span><br><span class=\"line\">     -o ipvlan_mode=l3 test_l3_net</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">test</span></span></span><br><span class=\"line\">docker run --net=test_l3_net --ip=192.168.1.10 -dit busybox /bin/sh</span><br><span class=\"line\">docker run --net=test_l3_net --ip=10.10.1.10 -dit busybox /bin/sh</span><br><span class=\"line\"></span><br><span class=\"line\">docker run --net=test_l3_net --ip=192.168.1.9 -it --rm busybox ping -c 2 10.10.1.10</span><br><span class=\"line\">docker run --net=test_l3_net --ip=10.10.1.9 -it --rm busybox ping -c 2 192.168.1.10</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"Macvlan\"><a href=\"#Macvlan\" class=\"headerlink\" title=\"Macvlan\"></a>Macvlan</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">macvlan</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">bridge mode</span></span><br><span class=\"line\">docker network create -d macvlan \\</span><br><span class=\"line\">  --subnet=172.16.86.0/24 \\</span><br><span class=\"line\">  --gateway=172.16.86.1 \\</span><br><span class=\"line\">  -o parent=eth0 pub_net</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">802.1Q trunk bridge mode</span></span><br><span class=\"line\">docker network create -d macvlan \\</span><br><span class=\"line\">    --subnet=192.168.50.0/24 \\</span><br><span class=\"line\">    --gateway=192.168.50.1 \\</span><br><span class=\"line\">    -o parent=eth0.50 macvlan50</span><br><span class=\"line\"></span><br><span class=\"line\">docker network create -d macvlan \\</span><br><span class=\"line\">    --subnet=192.168.60.0/24 \\</span><br><span class=\"line\">    --gateway=192.168.60.1 \\</span><br><span class=\"line\">    -o parent=eth0.60 macvlan60</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">https://zhuanlan.zhihu.com/p/616504632</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"None\"><a href=\"#None\" class=\"headerlink\" title=\"None\"></a>None</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">none</span></span><br><span class=\"line\">每个容器拥有独立网络协议栈，但没有网络设置，如分配 veth pair 和网桥连接等。</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">verify</span></span><br><span class=\"line\">docker run --rm -dit --net none busybox ip addr</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"Container\"><a href=\"#Container\" class=\"headerlink\" title=\"Container\"></a>Container</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">container</span></span><br><span class=\"line\">和一个指定已有的容器共享网络协议栈，使用共有的 IP、端口等。</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">verify</span></span><br><span class=\"line\">docker run -dit --name test --rm busybox sh</span><br><span class=\"line\">docker run -it --name c1 --net container:test --rm busybox ip addr</span><br><span class=\"line\">docker run -it --name c2 --net container:test --rm busybox ip addr</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"自定义网络模式\"><a href=\"#自定义网络模式\" class=\"headerlink\" title=\"自定义网络模式\"></a>自定义网络模式</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">user-defined</span> </span><br><span class=\"line\">默认 docker0 网桥无法通过 container name host 通信，自定义网络默认使用 daemon 进程内嵌的 DNS server，可以直接通过 --name 指定的 container name 进行通信</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建自定义网络</span></span><br><span class=\"line\">docker network create yakir-test</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">宿主机查看新增虚拟网卡</span></span><br><span class=\"line\">ip addr</span><br><span class=\"line\">    inet 172.19.0.1/16 brd 172.19.255.255 scope global br-8cb8260a95cf</span><br><span class=\"line\">brctl show</span><br><span class=\"line\">br-8cb8260a95cf         8000.024272aa9d38       no              veth556b81b</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">verify</span></span><br><span class=\"line\">docker run -dit --name test1 --net yakir-test --rm busybox sh</span><br><span class=\"line\">docker run -it --name test2 --net yakir-test --rm busybox ping -c 4 test1</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">连接已有的网络</span></span><br><span class=\"line\">docker run -dit --name test3 --net yakir-test --rm busybox sh</span><br><span class=\"line\">docker network connect yakir-test test3 </span><br><span class=\"line\">docker exec -it test3 ip addr</span><br><span class=\"line\">531: eth0@if532: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue </span><br><span class=\"line\">    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">533: eth1@if534: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue </span><br><span class=\"line\">    link/ether 02:42:ac:13:00:02 brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 172.19.0.2/16 brd 172.19.255.255 scope global eth1</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Daemon\"><a href=\"#Daemon\" class=\"headerlink\" title=\"Daemon\"></a>Daemon</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">configuration file</span></span><br><span class=\"line\">/etc/docker/daemon.json</span><br><span class=\"line\">~/.config/docker/daemon.json</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">configuration using flags</span></span><br><span class=\"line\">dockerd --debug \\</span><br><span class=\"line\">  --tls=true \\</span><br><span class=\"line\">  --tlscert=/var/docker/server.pem \\</span><br><span class=\"line\">  --tlskey=/var/docker/serverkey.pem \\</span><br><span class=\"line\">  --host tcp://192.168.10.1:2376</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">default data directory</span></span><br><span class=\"line\">/var/lib/docker</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">systemd</span></span><br><span class=\"line\">cat /lib/systemd/system/docker.service</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Docker-Build-amp-amp-Compose\"><a href=\"#Docker-Build-amp-amp-Compose\" class=\"headerlink\" title=\"Docker Build &amp;&amp; Compose\"></a>Docker Build &amp;&amp; Compose</h4><h5 id=\"Dockerfile\"><a href=\"#Dockerfile\" class=\"headerlink\" title=\"Dockerfile\"></a>Dockerfile</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编写规范</span></span><br><span class=\"line\">1. 使用统一的 base 镜像。</span><br><span class=\"line\">2. 动静分离（基础稳定内容放在底层）。</span><br><span class=\"line\">3. 最小原则（镜像只打包必需的东西）。</span><br><span class=\"line\">4. 一个原则（每个镜像只有一个功能，交互通过网络，模块化管理）。</span><br><span class=\"line\">5. 使用更少的层，减少每层的内容。</span><br><span class=\"line\">6. 不要在 Dockerfile 单独修改文件权限（entrypoint / 拷贝+修改权限同时操作）。</span><br><span class=\"line\">7. 利用 cache 加快构建速度。</span><br><span class=\"line\">8. 版本控制和自动构建（放入 git 版本控制中，自动构建镜像，构建参数/变量给予文档说明）。</span><br><span class=\"line\">9. 使用 .dockerignore 文件（排除文件和目录）</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"docker-compose\"><a href=\"#docker-compose\" class=\"headerlink\" title=\"docker-compose\"></a>docker-compose</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Command\"><a href=\"#Command\" class=\"headerlink\" title=\"Command\"></a>Command</h4><p>[[containerRuntime#docker &amp; podman|Docker Command]]</p>\n<blockquote>\n<p>Reference:</p>\n<ol>\n<li><a href=\"https://docs.docker.com/\">Docker Official Documentation</a></li>\n<li><a href=\"https://docs.docker.com/network/drivers/\">Docker network-drivers</a></li>\n<li><a href=\"https://docs.docker.com/engine/reference/builder/\">Dockerfile reference</a></li>\n</ol>\n</blockquote>\n","site":{"data":{"footer":"","styles":".post {\n  margin-top: 50px;\n  margin-bottom: 50px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n.headband {\n  display: none;\n}\nbody {\n  background: url(\"/images/background.jpeg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\n.post-block.page {\n  margin-top: 40px;\n}\n.category-all-page {\n  box-shadow: 0px 0px 10px 0px rgba(0,0,0,0.5);\n  background-color: #797d7f;\n  padding: 20px 30px 60px 30px;\n  border-radius: 25px 25px 25px 25px;\n}\n.category-all-title {\n  font-family: Impact;\n  font-size: 24px;\n  color: #0ff;\n}\n.category-list {\n  overflow: auto;\n}\n.category-list li {\n  height: 100%;\n  float: left;\n  border-right: 3px solid #222;\n  padding: 0 20px;\n}\n.category-all ul li {\n  list-style: none !important;\n}\n.category-list li:last-child {\n  border-right: none;\n}\n.category-list li a {\n  font-size: 16px;\n  text-decoration: none;\n  color: #7fff00;\n  font-family: Helvetica, Verdana, sans-serif;\n  -webkit-transition: all 0.5s ease;\n  -moz-transition: all 0.5s ease;\n  -o-transition: all 0.5s ease;\n  -ms-transition: all 0.5s ease;\n  transition: all 0.5s ease;\n}\n.category-list li a:hover {\n  color: #000;\n}\n.category-list li.active a {\n  font-weight: bold;\n  color: #000;\n}\n.tag-cloud a {\n  box-shadow: 0 1px 3px #6f42c1, 0 1px 2px #d9534f;\n  padding: 2px 10px;\n  margin: 8px;\n  background: rgba(193,66,92,0);\n  border-bottom: none;\n  border-radius: 20px;\n}\ncode {\n  background: #555;\n  color: #fff;\n}\n","variables":""}},"length":8702,"excerpt":"<h3 id=\"Docker-Engine\"><a href=\"#Docker-Engine\" class=\"headerlink\" title=\"Docker Engine\"></a>Docker Engine</h3><h4 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">install docker engine</span></span><br><span class=\"line\">https://docs.docker.com/engine/install/debian/</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Storage\"><a href=\"#Storage\" class=\"headerlink\" title=\"Storage\"></a>Storage</h4><h5 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a>Overview</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">show docker volume info</span></span><br><span class=\"line\">docker volume ls</span><br><span class=\"line\">DRIVER    VOLUME NAME</span><br><span class=\"line\">local     jenkins_home</span><br><span class=\"line\">local     yakir-test</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">how to use</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">default volume, directory = /var/lib/docker/volumes/</span></span><br><span class=\"line\">-v yakir-test:/container-app/my-app</span><br><span class=\"line\">--volume yakir-test:/container-app/my-app</span><br><span class=\"line\">--mount</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">bind</span> mounts</span></span><br><span class=\"line\">-v /local_path/app.conf:/container-app/app.conf</span><br><span class=\"line\">--volume /local_path/app.conf:/container-app/app.conf</span><br><span class=\"line\">--mount</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">memory volume</span></span><br><span class=\"line\">--tmpfs</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","more":"<h5 id=\"Volumes\"><a href=\"#Volumes\" class=\"headerlink\" title=\"Volumes\"></a>Volumes</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">create volume</span></span><br><span class=\"line\">docker volume create yakir-test</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">start container with volume</span></span><br><span class=\"line\">docker run -d --name test \\</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\">##</span></span> </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">option1</span></span><br><span class=\"line\">-v yakir-test:/app \\</span><br><span class=\"line\">--volume yakir-test:/app \\</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">anonymous mode</span></span><br><span class=\"line\">--volume /app</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">option2</span></span><br><span class=\"line\">--mount source=yakir-test,target=/app \\</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">readonly</span> mode</span></span><br><span class=\"line\">--mount source=yakir-test,destination=/usr/share/nginx/html,readonly \\</span><br><span class=\"line\">--mount &#x27;type=volume,source=nfsvolume,target=/app,volume-driver=local,volume-opt=type=nfs,volume-opt=device=:/var/docker-nfs,volume-opt=o=addr=10.0.0.10&#x27; \\</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\">##</span></span></span><br><span class=\"line\">nginx:latest</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">use a volume with docker-ompose</span></span><br><span class=\"line\">services:</span><br><span class=\"line\">  frontend:</span><br><span class=\"line\">    image: node:lts</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - yakir-test:/home/node/app</span><br><span class=\"line\">volumes:</span><br><span class=\"line\">  yakir-test:</span><br><span class=\"line\">     # external: true</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">show and remove volume</span></span><br><span class=\"line\">docker inspect volume yakir-test</span><br><span class=\"line\">docker stop test</span><br><span class=\"line\">docker volume rm yakir-test</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Bind-mounts\"><a href=\"#Bind-mounts\" class=\"headerlink\" title=\"Bind mounts\"></a>Bind mounts</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">start container with <span class=\"built_in\">bind</span> mounts</span></span><br><span class=\"line\">docker run -d --name test \\</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\">##</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">option1</span></span><br><span class=\"line\">-v /opt/app.conf:/app/app.conf \\</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">option2</span></span><br><span class=\"line\">--mount type=bind,source=&quot;$(pwd)&quot;/target,target=/app/ \\</span><br><span class=\"line\">--mount type=bind,source=&quot;$(pwd)&quot;/target,target=/app/,readonly \\</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">bind</span> propagation</span></span><br><span class=\"line\">--mount type=bind,source=&quot;$(pwd)&quot;/target,target=/app2,readonly,bind-propagation=rslave \\</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\">##</span></span></span><br><span class=\"line\">nginx:latest</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">use <span class=\"built_in\">bind</span> mounts with docker-compose</span></span><br><span class=\"line\">services:</span><br><span class=\"line\">  frontend:</span><br><span class=\"line\">    image: node:lts</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - type: bind</span><br><span class=\"line\">        source: ./static</span><br><span class=\"line\">        target: /opt/app/static</span><br><span class=\"line\">volumes:</span><br><span class=\"line\">  myapp:</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">show and remove container</span></span><br><span class=\"line\">docker inspect test --format &#x27;&#123;&#123; json .Mounts &#125;&#125;&#x27;</span><br><span class=\"line\">docker stop test</span><br><span class=\"line\">docker rm test</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"tmpfs-mounts\"><a href=\"#tmpfs-mounts\" class=\"headerlink\" title=\"tmpfs mounts\"></a>tmpfs mounts</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">start container with tmpfs</span></span><br><span class=\"line\">docker run -it --name tmptest \\</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\">##</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">option1</span></span><br><span class=\"line\">--tmpfs /app</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">option2</span></span><br><span class=\"line\">--mount type=tmpfs,target=/app \\</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">specify tmpfs options</span></span><br><span class=\"line\">--mount type=tmpfs,destination=/app,tmpfs-mode=1770,tmpfs-size=104857600 \\</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\">##</span></span></span><br><span class=\"line\">nginx:latest</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">show and remove container</span></span><br><span class=\"line\">docker inspect tmptest --format &#x27;&#123;&#123; json .Mounts &#125;&#125;&#x27;</span><br><span class=\"line\">docker stop tmptest</span><br><span class=\"line\">docker rm tmptest</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Storage-drivers\"><a href=\"#Storage-drivers\" class=\"headerlink\" title=\"Storage drivers\"></a>Storage drivers</h5><h6 id=\"Btrfs\"><a href=\"#Btrfs\" class=\"headerlink\" title=\"Btrfs\"></a>Btrfs</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">stop docker</span></span><br><span class=\"line\">systemctl stop docker.service</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">backup and empty contents</span></span><br><span class=\"line\">cp -au /var/lib/docker/ /var/lib/docker.bk</span><br><span class=\"line\">rm -rf /var/lib/docker/*</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">format block device as a btrfs filesystem</span></span><br><span class=\"line\">mkfs.btrfs -f /dev/xvdf</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">mount the btrfs filesystem on /var/lib/docker mount point</span></span><br><span class=\"line\">mount -t btrfs /dev/xvdf /var/lib/docker</span><br><span class=\"line\">cp -au /var/lib/docker.bk/* /var/lib/docker/</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">configure Docker to use the btrfs storage driver</span></span><br><span class=\"line\">vim /etc/docker/daemon.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;storage-driver&quot;: &quot;btrfs&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">systemctl start docker.service</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">verify</span></span><br><span class=\"line\">docker info --format &#x27;&#123;&#123; json .Driver &#125;&#125;&#x27;</span><br><span class=\"line\">&quot;btrfs&quot;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"OverlayFS\"><a href=\"#OverlayFS\" class=\"headerlink\" title=\"OverlayFS\"></a>OverlayFS</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">stop docker</span></span><br><span class=\"line\">systemctl stop docker.service</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">backup and empty contents</span></span><br><span class=\"line\">cp -au /var/lib/docker/ /var/lib/docker.bk</span><br><span class=\"line\">rm -rf /var/lib/docker/*</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">options: separate backing filesystem, mount into /var/lib/docker and make sure to add mount to /etc/fstab to make it.</span>  </span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">configure Docker to use the btrfs storage driver</span></span><br><span class=\"line\">vim /etc/docker/daemon.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;storage-driver&quot;: &quot;overlay2&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">systemctl start docker.service</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">verify</span></span><br><span class=\"line\">docker info --format &#x27;&#123;&#123; json .Driver &#125;&#125;&#x27;    </span><br><span class=\"line\">&quot;overlay2&quot;</span><br><span class=\"line\">mount |grep overlay |grep docker</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"ZFS\"><a href=\"#ZFS\" class=\"headerlink\" title=\"ZFS\"></a>ZFS</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">stop docker</span></span><br><span class=\"line\">systemctl stop docker.service</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">backup and empty contents</span></span><br><span class=\"line\">cp -auR /var/lib/docker/ /var/lib/docker.bk</span><br><span class=\"line\">rm -rf /var/lib/docker/*</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">create a new zpool on block device and mount into /var/lib/docker</span></span><br><span class=\"line\">zpool create -f zpool-docker -m /var/lib/docker /dev/xvdf</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">add zpoll</span></span><br><span class=\"line\">zpool add zpool-docker /dev/xvdh</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">verify zpool</span></span><br><span class=\"line\">zfs list</span><br><span class=\"line\">NAME           USED  AVAIL  REFER  MOUNTPOINT</span><br><span class=\"line\">zpool-docker    55K  96.4G    19K  /var/lib/docker</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">configure Docker to use the btrfs storage driver</span></span><br><span class=\"line\">vim /etc/docker/daemon.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;storage-driver&quot;: &quot;zfs&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">systemctl start docker.service</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">verify</span></span><br><span class=\"line\">docker info --format &#x27;&#123;&#123; json .Driver &#125;&#125;&#x27;    </span><br><span class=\"line\">&quot;zfs&quot;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"containerd-snapshotters\"><a href=\"#containerd-snapshotters\" class=\"headerlink\" title=\"containerd snapshotters\"></a>containerd snapshotters</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">configure Docker to use the btrfs storage driver</span></span><br><span class=\"line\">vim /etc/docker/daemon.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;features&quot;: &#123;</span><br><span class=\"line\">    &quot;containerd-snapshotter&quot;: true</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">systemctl restart docker.service</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">verify</span></span><br><span class=\"line\">docker info -f &#x27;&#123;&#123; .DriverStatus &#125;&#125;&#x27;</span><br><span class=\"line\">[[driver-type io.containerd.snapshotter.v1]]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Networking\"><a href=\"#Networking\" class=\"headerlink\" title=\"Networking\"></a>Networking</h4><h5 id=\"Overview-1\"><a href=\"#Overview-1\" class=\"headerlink\" title=\"Overview\"></a>Overview</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">show docker network info</span></span><br><span class=\"line\">docker network ls</span><br><span class=\"line\">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class=\"line\">b2adc1fcf214   bridge    bridge    local</span><br><span class=\"line\">2ed9fbc8db3e   host      host      local</span><br><span class=\"line\">f1b2d749ed2c   none      null      local</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">how to use</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">bridge</span></span><br><span class=\"line\">--net bridge</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">host</span></span><br><span class=\"line\">--net host</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">none</span></span><br><span class=\"line\">--net none</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">container</span></span><br><span class=\"line\">--net container:container_name|container_id</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Networking-drivers\"><a href=\"#Networking-drivers\" class=\"headerlink\" title=\"Networking drivers\"></a>Networking drivers</h5><h6 id=\"Bridge\"><a href=\"#Bridge\" class=\"headerlink\" title=\"Bridge\"></a>Bridge</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">bridge</span></span><br><span class=\"line\">每个容器拥有独立网络协议栈，为每一个容器分配、设置 IP 等。将容器连接到虚拟网桥（默认为 docker0 网桥）。</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">1.在宿主机上创建 container namespace</span></span><br><span class=\"line\">xxx</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">2.daemon 进程利用 veth pair 技术，在宿主机上创建一对对等虚拟网络接口设备。veth pair 特性是一端流量会流向另一端。</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">一个接口放在宿主机的 docker0 虚拟网桥上并命名为 vethxxx</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看网桥信息</span></span><br><span class=\"line\">brctl show</span><br><span class=\"line\">bridge name     bridge id               STP enabled     interfaces</span><br><span class=\"line\">docker0         8000.0242db01d347       no              vethccab668</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看宿主机 vethxxx 接口</span></span><br><span class=\"line\">ip addr |grep vethccab668</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">另外一个接口放进 container 所属的 namespace 下并命名为 eth0 接口</span></span><br><span class=\"line\">docker run --rm -dit busybox sh ip addr</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">3.daemon 进程还会从网桥 docker0 的私有地址空间中分配一个 IP 地址和子网给该容器，并设置 docker0 的 IP 地址为容器的默认网关</span></span><br><span class=\"line\">docker inspect test |grep Gateway</span><br><span class=\"line\">            &quot;Gateway&quot;: &quot;172.17.0.1&quot;,</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"Overlay\"><a href=\"#Overlay\" class=\"headerlink\" title=\"Overlay\"></a>Overlay</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">多 docker 主机组建网络，配合 docker swarm 使用</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"Host\"><a href=\"#Host\" class=\"headerlink\" title=\"Host\"></a>Host</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">host</span></span><br><span class=\"line\">使用宿主机的 IP 和端口，共享宿主机网络协议栈。</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">test</span></span></span><br><span class=\"line\">docker run --rm -dit --net host busybox ip addr</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"IPvlan\"><a href=\"#IPvlan\" class=\"headerlink\" title=\"IPvlan\"></a>IPvlan</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ipvlan</span></span><br><span class=\"line\">ipvlan_mode: l2, l3(default), l3s</span><br><span class=\"line\">ipvlan_flag: bridge(default), private, vepa</span><br><span class=\"line\">parent: eth0</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">l2 mode: 使用宿主机的望断</span></span><br><span class=\"line\">docker network create -d ipvlan \\</span><br><span class=\"line\">     --subnet=192.168.1.0/24 \\</span><br><span class=\"line\">     --gateway=192.168.1.1 \\</span><br><span class=\"line\">     -o ipvlan_mode=l2 \\</span><br><span class=\"line\">     -o parent=eth0 test_l2_net</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">test</span></span></span><br><span class=\"line\">docker run --net=test_l2_net --name=ipv1 -dit alpine /bin/sh</span><br><span class=\"line\">docker run --net=test_l2_net --name=ipv2 -it --rm alpine /bin/sh</span><br><span class=\"line\">ping -c 4 ipv1</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">l3 mode</span></span><br><span class=\"line\">docker network create -d ipvlan \\</span><br><span class=\"line\">     --subnet=192.168.1.0/24 \\</span><br><span class=\"line\">     --subnet=10.10.1.0/24 \\</span><br><span class=\"line\">     -o ipvlan_mode=l3 test_l3_net</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">test</span></span></span><br><span class=\"line\">docker run --net=test_l3_net --ip=192.168.1.10 -dit busybox /bin/sh</span><br><span class=\"line\">docker run --net=test_l3_net --ip=10.10.1.10 -dit busybox /bin/sh</span><br><span class=\"line\"></span><br><span class=\"line\">docker run --net=test_l3_net --ip=192.168.1.9 -it --rm busybox ping -c 2 10.10.1.10</span><br><span class=\"line\">docker run --net=test_l3_net --ip=10.10.1.9 -it --rm busybox ping -c 2 192.168.1.10</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"Macvlan\"><a href=\"#Macvlan\" class=\"headerlink\" title=\"Macvlan\"></a>Macvlan</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">macvlan</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">bridge mode</span></span><br><span class=\"line\">docker network create -d macvlan \\</span><br><span class=\"line\">  --subnet=172.16.86.0/24 \\</span><br><span class=\"line\">  --gateway=172.16.86.1 \\</span><br><span class=\"line\">  -o parent=eth0 pub_net</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">802.1Q trunk bridge mode</span></span><br><span class=\"line\">docker network create -d macvlan \\</span><br><span class=\"line\">    --subnet=192.168.50.0/24 \\</span><br><span class=\"line\">    --gateway=192.168.50.1 \\</span><br><span class=\"line\">    -o parent=eth0.50 macvlan50</span><br><span class=\"line\"></span><br><span class=\"line\">docker network create -d macvlan \\</span><br><span class=\"line\">    --subnet=192.168.60.0/24 \\</span><br><span class=\"line\">    --gateway=192.168.60.1 \\</span><br><span class=\"line\">    -o parent=eth0.60 macvlan60</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">https://zhuanlan.zhihu.com/p/616504632</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"None\"><a href=\"#None\" class=\"headerlink\" title=\"None\"></a>None</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">none</span></span><br><span class=\"line\">每个容器拥有独立网络协议栈，但没有网络设置，如分配 veth pair 和网桥连接等。</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">verify</span></span><br><span class=\"line\">docker run --rm -dit --net none busybox ip addr</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"Container\"><a href=\"#Container\" class=\"headerlink\" title=\"Container\"></a>Container</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">container</span></span><br><span class=\"line\">和一个指定已有的容器共享网络协议栈，使用共有的 IP、端口等。</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">verify</span></span><br><span class=\"line\">docker run -dit --name test --rm busybox sh</span><br><span class=\"line\">docker run -it --name c1 --net container:test --rm busybox ip addr</span><br><span class=\"line\">docker run -it --name c2 --net container:test --rm busybox ip addr</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"自定义网络模式\"><a href=\"#自定义网络模式\" class=\"headerlink\" title=\"自定义网络模式\"></a>自定义网络模式</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">user-defined</span> </span><br><span class=\"line\">默认 docker0 网桥无法通过 container name host 通信，自定义网络默认使用 daemon 进程内嵌的 DNS server，可以直接通过 --name 指定的 container name 进行通信</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建自定义网络</span></span><br><span class=\"line\">docker network create yakir-test</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">宿主机查看新增虚拟网卡</span></span><br><span class=\"line\">ip addr</span><br><span class=\"line\">    inet 172.19.0.1/16 brd 172.19.255.255 scope global br-8cb8260a95cf</span><br><span class=\"line\">brctl show</span><br><span class=\"line\">br-8cb8260a95cf         8000.024272aa9d38       no              veth556b81b</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">verify</span></span><br><span class=\"line\">docker run -dit --name test1 --net yakir-test --rm busybox sh</span><br><span class=\"line\">docker run -it --name test2 --net yakir-test --rm busybox ping -c 4 test1</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">连接已有的网络</span></span><br><span class=\"line\">docker run -dit --name test3 --net yakir-test --rm busybox sh</span><br><span class=\"line\">docker network connect yakir-test test3 </span><br><span class=\"line\">docker exec -it test3 ip addr</span><br><span class=\"line\">531: eth0@if532: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue </span><br><span class=\"line\">    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">533: eth1@if534: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue </span><br><span class=\"line\">    link/ether 02:42:ac:13:00:02 brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 172.19.0.2/16 brd 172.19.255.255 scope global eth1</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Daemon\"><a href=\"#Daemon\" class=\"headerlink\" title=\"Daemon\"></a>Daemon</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">configuration file</span></span><br><span class=\"line\">/etc/docker/daemon.json</span><br><span class=\"line\">~/.config/docker/daemon.json</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">configuration using flags</span></span><br><span class=\"line\">dockerd --debug \\</span><br><span class=\"line\">  --tls=true \\</span><br><span class=\"line\">  --tlscert=/var/docker/server.pem \\</span><br><span class=\"line\">  --tlskey=/var/docker/serverkey.pem \\</span><br><span class=\"line\">  --host tcp://192.168.10.1:2376</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">default data directory</span></span><br><span class=\"line\">/var/lib/docker</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">systemd</span></span><br><span class=\"line\">cat /lib/systemd/system/docker.service</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Docker-Build-amp-amp-Compose\"><a href=\"#Docker-Build-amp-amp-Compose\" class=\"headerlink\" title=\"Docker Build &amp;&amp; Compose\"></a>Docker Build &amp;&amp; Compose</h4><h5 id=\"Dockerfile\"><a href=\"#Dockerfile\" class=\"headerlink\" title=\"Dockerfile\"></a>Dockerfile</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编写规范</span></span><br><span class=\"line\">1. 使用统一的 base 镜像。</span><br><span class=\"line\">2. 动静分离（基础稳定内容放在底层）。</span><br><span class=\"line\">3. 最小原则（镜像只打包必需的东西）。</span><br><span class=\"line\">4. 一个原则（每个镜像只有一个功能，交互通过网络，模块化管理）。</span><br><span class=\"line\">5. 使用更少的层，减少每层的内容。</span><br><span class=\"line\">6. 不要在 Dockerfile 单独修改文件权限（entrypoint / 拷贝+修改权限同时操作）。</span><br><span class=\"line\">7. 利用 cache 加快构建速度。</span><br><span class=\"line\">8. 版本控制和自动构建（放入 git 版本控制中，自动构建镜像，构建参数/变量给予文档说明）。</span><br><span class=\"line\">9. 使用 .dockerignore 文件（排除文件和目录）</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"docker-compose\"><a href=\"#docker-compose\" class=\"headerlink\" title=\"docker-compose\"></a>docker-compose</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Command\"><a href=\"#Command\" class=\"headerlink\" title=\"Command\"></a>Command</h4><p>[[containerRuntime#docker &amp; podman|Docker Command]]</p>\n<blockquote>\n<p>Reference:</p>\n<ol>\n<li><a href=\"https://docs.docker.com/\">Docker Official Documentation</a></li>\n<li><a href=\"https://docs.docker.com/network/drivers/\">Docker network-drivers</a></li>\n<li><a href=\"https://docs.docker.com/engine/reference/builder/\">Dockerfile reference</a></li>\n</ol>\n</blockquote>"},{"title":"流量网关方案与灰度发布","abbrlink":"dc02","date":"2022-06-06T12:28:44.000Z","_content":"### 流量网关方案与灰度发布方式\n\n#### 一、Alicloud原生 Ingress 方式\n**前置要求**\n\n1. 集群已安装 Ingress 组件\n1. 明确灰度发布规则（使用 cookie 值匹配 A/B 测试规则）\n\n\n**操作步骤**\n\n1. 部署新旧版本 Deployment 和 Service\n\n通过 Edas 创建新应用，并暴露 service（无需 SLB 暴露）。已 app1 应用为例：\n\n| **资源** | **旧版本** | **新版本** |\n| --- | --- | --- |\n| Edas 应用 | app1-test | app1-new-test |\n| Deployment | app1-test-group-x-xxx | app1-new-test-group-x-xxx |\n| Service | app1-svc | app1-new-svc |\n\n<!--more-->\n\n2. 配置 ingress\n```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  annotations:\n    # 匹配规则：正则匹配 cookie 值\n    nginx.ingress.kubernetes.io/service-match: |\n      new-nginx: cookie(\"foo\", /^aBc123.*/)\n  name: gray-release\n  namespace: default\nspec:\n  rules:\n  - host: www.yakir.com\n    http:\n      paths:\n      # 旧版本服务\n      - backend:\n          service:\n            name: old-nginx\n            port:\n              number: 80\n        path: /\n        pathType: ImplementationSpecific\n      # 新版本服务\n      - backend:\n          service:\n            name: new-nginx\n            port:\n              number: 80\n        path: /\n        pathType: ImplementationSpecific\n```\n\n3. 验证请求\n略\n\n\n#### 二、Istio 网关方式\n**前置要求**\n\n1. 集群部署 istio \n```\n# 下载 istio\ncurl -L https://istio.io/downloadIstio | sh -\n\n# 进入 istio 目录，执行安装命令\ncd istio-1.13.3/\n./bin/istioctl install --set profile=demo\n\n# 查看可安装的环境（default 用于生产环境，demo 用于测试）\n./bin/istioctl profile list\nIstio configuration profiles:\n    default\n    demo\n    empty\n    external\n    minimal\n    openshift\n    preview\n    remote\n\n```\n\n2. 明确灰度发布规则（使用 cookie 值匹配 A/B 测试规则）\n\n**操作步骤**\n\n1. 部署新旧版本 Deployment 和 Service\n\n2. 配置 istio 网关与匹配规则\n\nistio-gateway.yaml 文件内容，执行 kubectl apply -f istio-gateway.yaml && kubectl apply -f virtualservice.yaml 创建相关资源。\n```\napiVersion: networking.istio.io/v1alpha3\nkind: Gateway\nmetadata:\n  name: istio-gateway-test\nspec:\n  selector:\n    istio: ingressgateway # use istio default controller\n  servers:\n  - port:\n      number: 80\n      name: http\n      protocol: HTTP\n    tls:\n      httpsRedirect: true\n    hosts:\n    - \"*.yakir.com\"\n  - port:\n      number: 443\n      name: https\n      protocol: HTTPS\n    tls:\n      mode: SIMPLE\n      credentialName: yakir-com.cert\n    hosts:\n    - \"*.yakir.com\"\n```\n```\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: virtual-service-test\nspec:\n  hosts:\n  - yakir.yakir.com\n  gateways:\n  - istio-gateway-test\n  http:\n  - match:\n    - headers:\n        cookie:\n          regex: \"^(.*?;)?(foo=aBc123.*)(;.*)?$\"\n    route:\n    - destination:\n        host: new-nginx-svc\n        port:\n          number: 80\n  - route:\n    - destination:\n        host: old-nginx-svc\n        port:\n          number: 80\n```\n\n3. 验证请求\n略\n\n> istio 配置 https 证书：\n> 1. 导入 yakir.com 证书（可通过控制台或 kubectl cli 方式导入）\n> 控制台方式：配置管理 -> 保密字典 中点击创建，填入 crt、key、名称，选择 TLS 证书类型，点击确定导入证书密钥。\n> 2. istio gateway 资源开启 https 配置，选择 secret 方式导入 （见上述配置文件）\n\n\n\n#### 应用调整为灰度发布策略操作方式\n第一种方式：保留两套应用实现\n\n- 新建 CI/CD 流水线 + Edas 应用 + Service，即同时保留两套应用（如日常环境 app1-test、app1-test-new）\n- 在网关入口处，将 app1 域名流量按照规则匹配到两个应用 Service（默认规则流量进入稳定版应用对应的 Service，匹配到 cookie 值规则的流量进入新版本应用对应的 Service）\n\n- 应用 owner 操作：将应用域名解析修改到 WAF 解析（回源为实际 ingress 或 istio 网关地址）\n\n~~第二种方式：复用一套应用，通过分批发布方式？（暂无法实现）~~\n\n- 通过分批发布可以保留两个新旧版本 Deployment ，使用同一个Service。通过 DestinationRule 规则匹配不同流量流入不同 Deployment，实现灰度流量分流。\n\n问题点：每次需要手动获取发布的新旧版本 Deployment 的 label 值，更新 DestinationRule 规则。\n```\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: virtual-service-test\nspec:\n  hosts:\n  - yakir.yakir.com\n  gateways:\n  - istio-gateway-test\n  http:\n  # 路由规则目标使用同一个 host，通过 subsets 子集来区分流量走向\n  - match:\n    - headers:\n        cookie:\n          regex: \"^(.*?;)?(foo=aBc123.*)(;.*)?$\"\n    route:\n    - destination:\n        host: test-nginx-svc\n        subset: new\n        port:\n          number: 80\n  - route:\n    - destination:\n        host: test-nginx-svc\n        subset: old\n        port:\n          number: 80\n```\n```\nkind: DestinationRule\nmetadata:\n  name: destination-rule-test\nspec:\n  host: test-nginx-svc\n  # 使用 label 值来区别流量流入的 Deployment\n  subsets:\n  - name: old\n    labels:\n      edas.oam.acversion: \"3\"\n  - name: new\n    labels:\n      edas.oam.acversion: \"4\"\n```\n\n\n#### ***其他\n**注意事项**\n可观测性：新增 CRD 资源，开启 ingress 日志。\nistio 高可用性保证？\n兜底方案： SLB 兜底？\n\n\n**参考文档**\nAlicloud Ingress：[https://help.aliyun.com/document_detail/200941.html#section-t2t-eik-oyr](https://help.aliyun.com/document_detail/200941.html#section-t2t-eik-oyr)\nIstio 官网：[https://istio.io/latest/zh/docs/concepts/traffic-management/](https://istio.io/latest/zh/docs/concepts/traffic-management/)\n\n","source":"_posts/gatewayGrayRelease.md","raw":"---\ntitle: 流量网关方案与灰度发布\ncategories:\n  - CNCF\n  - Alicloud\ntags:\n  - Istio\nabbrlink: dc02\ndate: 2022-06-06 20:28:44\n---\n### 流量网关方案与灰度发布方式\n\n#### 一、Alicloud原生 Ingress 方式\n**前置要求**\n\n1. 集群已安装 Ingress 组件\n1. 明确灰度发布规则（使用 cookie 值匹配 A/B 测试规则）\n\n\n**操作步骤**\n\n1. 部署新旧版本 Deployment 和 Service\n\n通过 Edas 创建新应用，并暴露 service（无需 SLB 暴露）。已 app1 应用为例：\n\n| **资源** | **旧版本** | **新版本** |\n| --- | --- | --- |\n| Edas 应用 | app1-test | app1-new-test |\n| Deployment | app1-test-group-x-xxx | app1-new-test-group-x-xxx |\n| Service | app1-svc | app1-new-svc |\n\n<!--more-->\n\n2. 配置 ingress\n```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  annotations:\n    # 匹配规则：正则匹配 cookie 值\n    nginx.ingress.kubernetes.io/service-match: |\n      new-nginx: cookie(\"foo\", /^aBc123.*/)\n  name: gray-release\n  namespace: default\nspec:\n  rules:\n  - host: www.yakir.com\n    http:\n      paths:\n      # 旧版本服务\n      - backend:\n          service:\n            name: old-nginx\n            port:\n              number: 80\n        path: /\n        pathType: ImplementationSpecific\n      # 新版本服务\n      - backend:\n          service:\n            name: new-nginx\n            port:\n              number: 80\n        path: /\n        pathType: ImplementationSpecific\n```\n\n3. 验证请求\n略\n\n\n#### 二、Istio 网关方式\n**前置要求**\n\n1. 集群部署 istio \n```\n# 下载 istio\ncurl -L https://istio.io/downloadIstio | sh -\n\n# 进入 istio 目录，执行安装命令\ncd istio-1.13.3/\n./bin/istioctl install --set profile=demo\n\n# 查看可安装的环境（default 用于生产环境，demo 用于测试）\n./bin/istioctl profile list\nIstio configuration profiles:\n    default\n    demo\n    empty\n    external\n    minimal\n    openshift\n    preview\n    remote\n\n```\n\n2. 明确灰度发布规则（使用 cookie 值匹配 A/B 测试规则）\n\n**操作步骤**\n\n1. 部署新旧版本 Deployment 和 Service\n\n2. 配置 istio 网关与匹配规则\n\nistio-gateway.yaml 文件内容，执行 kubectl apply -f istio-gateway.yaml && kubectl apply -f virtualservice.yaml 创建相关资源。\n```\napiVersion: networking.istio.io/v1alpha3\nkind: Gateway\nmetadata:\n  name: istio-gateway-test\nspec:\n  selector:\n    istio: ingressgateway # use istio default controller\n  servers:\n  - port:\n      number: 80\n      name: http\n      protocol: HTTP\n    tls:\n      httpsRedirect: true\n    hosts:\n    - \"*.yakir.com\"\n  - port:\n      number: 443\n      name: https\n      protocol: HTTPS\n    tls:\n      mode: SIMPLE\n      credentialName: yakir-com.cert\n    hosts:\n    - \"*.yakir.com\"\n```\n```\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: virtual-service-test\nspec:\n  hosts:\n  - yakir.yakir.com\n  gateways:\n  - istio-gateway-test\n  http:\n  - match:\n    - headers:\n        cookie:\n          regex: \"^(.*?;)?(foo=aBc123.*)(;.*)?$\"\n    route:\n    - destination:\n        host: new-nginx-svc\n        port:\n          number: 80\n  - route:\n    - destination:\n        host: old-nginx-svc\n        port:\n          number: 80\n```\n\n3. 验证请求\n略\n\n> istio 配置 https 证书：\n> 1. 导入 yakir.com 证书（可通过控制台或 kubectl cli 方式导入）\n> 控制台方式：配置管理 -> 保密字典 中点击创建，填入 crt、key、名称，选择 TLS 证书类型，点击确定导入证书密钥。\n> 2. istio gateway 资源开启 https 配置，选择 secret 方式导入 （见上述配置文件）\n\n\n\n#### 应用调整为灰度发布策略操作方式\n第一种方式：保留两套应用实现\n\n- 新建 CI/CD 流水线 + Edas 应用 + Service，即同时保留两套应用（如日常环境 app1-test、app1-test-new）\n- 在网关入口处，将 app1 域名流量按照规则匹配到两个应用 Service（默认规则流量进入稳定版应用对应的 Service，匹配到 cookie 值规则的流量进入新版本应用对应的 Service）\n\n- 应用 owner 操作：将应用域名解析修改到 WAF 解析（回源为实际 ingress 或 istio 网关地址）\n\n~~第二种方式：复用一套应用，通过分批发布方式？（暂无法实现）~~\n\n- 通过分批发布可以保留两个新旧版本 Deployment ，使用同一个Service。通过 DestinationRule 规则匹配不同流量流入不同 Deployment，实现灰度流量分流。\n\n问题点：每次需要手动获取发布的新旧版本 Deployment 的 label 值，更新 DestinationRule 规则。\n```\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: virtual-service-test\nspec:\n  hosts:\n  - yakir.yakir.com\n  gateways:\n  - istio-gateway-test\n  http:\n  # 路由规则目标使用同一个 host，通过 subsets 子集来区分流量走向\n  - match:\n    - headers:\n        cookie:\n          regex: \"^(.*?;)?(foo=aBc123.*)(;.*)?$\"\n    route:\n    - destination:\n        host: test-nginx-svc\n        subset: new\n        port:\n          number: 80\n  - route:\n    - destination:\n        host: test-nginx-svc\n        subset: old\n        port:\n          number: 80\n```\n```\nkind: DestinationRule\nmetadata:\n  name: destination-rule-test\nspec:\n  host: test-nginx-svc\n  # 使用 label 值来区别流量流入的 Deployment\n  subsets:\n  - name: old\n    labels:\n      edas.oam.acversion: \"3\"\n  - name: new\n    labels:\n      edas.oam.acversion: \"4\"\n```\n\n\n#### ***其他\n**注意事项**\n可观测性：新增 CRD 资源，开启 ingress 日志。\nistio 高可用性保证？\n兜底方案： SLB 兜底？\n\n\n**参考文档**\nAlicloud Ingress：[https://help.aliyun.com/document_detail/200941.html#section-t2t-eik-oyr](https://help.aliyun.com/document_detail/200941.html#section-t2t-eik-oyr)\nIstio 官网：[https://istio.io/latest/zh/docs/concepts/traffic-management/](https://istio.io/latest/zh/docs/concepts/traffic-management/)\n\n","slug":"gatewayGrayRelease","published":1,"updated":"2024-01-21T15:29:17.071Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm0fat8zl000fs0nj7p6m6d3k","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"流量网关方案与灰度发布方式\"><a href=\"#流量网关方案与灰度发布方式\" class=\"headerlink\" title=\"流量网关方案与灰度发布方式\"></a>流量网关方案与灰度发布方式</h3><h4 id=\"一、Alicloud原生-Ingress-方式\"><a href=\"#一、Alicloud原生-Ingress-方式\" class=\"headerlink\" title=\"一、Alicloud原生 Ingress 方式\"></a>一、Alicloud原生 Ingress 方式</h4><p><strong>前置要求</strong></p>\n<ol>\n<li>集群已安装 Ingress 组件</li>\n<li>明确灰度发布规则（使用 cookie 值匹配 A&#x2F;B 测试规则）</li>\n</ol>\n<p><strong>操作步骤</strong></p>\n<ol>\n<li>部署新旧版本 Deployment 和 Service</li>\n</ol>\n<p>通过 Edas 创建新应用，并暴露 service（无需 SLB 暴露）。已 app1 应用为例：</p>\n<table>\n<thead>\n<tr>\n<th><strong>资源</strong></th>\n<th><strong>旧版本</strong></th>\n<th><strong>新版本</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Edas 应用</td>\n<td>app1-test</td>\n<td>app1-new-test</td>\n</tr>\n<tr>\n<td>Deployment</td>\n<td>app1-test-group-x-xxx</td>\n<td>app1-new-test-group-x-xxx</td>\n</tr>\n<tr>\n<td>Service</td>\n<td>app1-svc</td>\n<td>app1-new-svc</td>\n</tr>\n</tbody></table>\n<span id=\"more\"></span>\n\n<ol start=\"2\">\n<li><p>配置 ingress</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: networking.k8s.io/v1</span><br><span class=\"line\">kind: Ingress</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  annotations:</span><br><span class=\"line\">    # 匹配规则：正则匹配 cookie 值</span><br><span class=\"line\">    nginx.ingress.kubernetes.io/service-match: |</span><br><span class=\"line\">      new-nginx: cookie(&quot;foo&quot;, /^aBc123.*/)</span><br><span class=\"line\">  name: gray-release</span><br><span class=\"line\">  namespace: default</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  rules:</span><br><span class=\"line\">  - host: www.yakir.com</span><br><span class=\"line\">    http:</span><br><span class=\"line\">      paths:</span><br><span class=\"line\">      # 旧版本服务</span><br><span class=\"line\">      - backend:</span><br><span class=\"line\">          service:</span><br><span class=\"line\">            name: old-nginx</span><br><span class=\"line\">            port:</span><br><span class=\"line\">              number: 80</span><br><span class=\"line\">        path: /</span><br><span class=\"line\">        pathType: ImplementationSpecific</span><br><span class=\"line\">      # 新版本服务</span><br><span class=\"line\">      - backend:</span><br><span class=\"line\">          service:</span><br><span class=\"line\">            name: new-nginx</span><br><span class=\"line\">            port:</span><br><span class=\"line\">              number: 80</span><br><span class=\"line\">        path: /</span><br><span class=\"line\">        pathType: ImplementationSpecific</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>验证请求<br>略</p>\n</li>\n</ol>\n<h4 id=\"二、Istio-网关方式\"><a href=\"#二、Istio-网关方式\" class=\"headerlink\" title=\"二、Istio 网关方式\"></a>二、Istio 网关方式</h4><p><strong>前置要求</strong></p>\n<ol>\n<li><p>集群部署 istio </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 下载 istio</span><br><span class=\"line\">curl -L https://istio.io/downloadIstio | sh -</span><br><span class=\"line\"></span><br><span class=\"line\"># 进入 istio 目录，执行安装命令</span><br><span class=\"line\">cd istio-1.13.3/</span><br><span class=\"line\">./bin/istioctl install --set profile=demo</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看可安装的环境（default 用于生产环境，demo 用于测试）</span><br><span class=\"line\">./bin/istioctl profile list</span><br><span class=\"line\">Istio configuration profiles:</span><br><span class=\"line\">    default</span><br><span class=\"line\">    demo</span><br><span class=\"line\">    empty</span><br><span class=\"line\">    external</span><br><span class=\"line\">    minimal</span><br><span class=\"line\">    openshift</span><br><span class=\"line\">    preview</span><br><span class=\"line\">    remote</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>明确灰度发布规则（使用 cookie 值匹配 A&#x2F;B 测试规则）</p>\n</li>\n</ol>\n<p><strong>操作步骤</strong></p>\n<ol>\n<li><p>部署新旧版本 Deployment 和 Service</p>\n</li>\n<li><p>配置 istio 网关与匹配规则</p>\n</li>\n</ol>\n<p>istio-gateway.yaml 文件内容，执行 kubectl apply -f istio-gateway.yaml &amp;&amp; kubectl apply -f virtualservice.yaml 创建相关资源。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: networking.istio.io/v1alpha3</span><br><span class=\"line\">kind: Gateway</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: istio-gateway-test</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    istio: ingressgateway # use istio default controller</span><br><span class=\"line\">  servers:</span><br><span class=\"line\">  - port:</span><br><span class=\"line\">      number: 80</span><br><span class=\"line\">      name: http</span><br><span class=\"line\">      protocol: HTTP</span><br><span class=\"line\">    tls:</span><br><span class=\"line\">      httpsRedirect: true</span><br><span class=\"line\">    hosts:</span><br><span class=\"line\">    - &quot;*.yakir.com&quot;</span><br><span class=\"line\">  - port:</span><br><span class=\"line\">      number: 443</span><br><span class=\"line\">      name: https</span><br><span class=\"line\">      protocol: HTTPS</span><br><span class=\"line\">    tls:</span><br><span class=\"line\">      mode: SIMPLE</span><br><span class=\"line\">      credentialName: yakir-com.cert</span><br><span class=\"line\">    hosts:</span><br><span class=\"line\">    - &quot;*.yakir.com&quot;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: networking.istio.io/v1alpha3</span><br><span class=\"line\">kind: VirtualService</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: virtual-service-test</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  hosts:</span><br><span class=\"line\">  - yakir.yakir.com</span><br><span class=\"line\">  gateways:</span><br><span class=\"line\">  - istio-gateway-test</span><br><span class=\"line\">  http:</span><br><span class=\"line\">  - match:</span><br><span class=\"line\">    - headers:</span><br><span class=\"line\">        cookie:</span><br><span class=\"line\">          regex: &quot;^(.*?;)?(foo=aBc123.*)(;.*)?$&quot;</span><br><span class=\"line\">    route:</span><br><span class=\"line\">    - destination:</span><br><span class=\"line\">        host: new-nginx-svc</span><br><span class=\"line\">        port:</span><br><span class=\"line\">          number: 80</span><br><span class=\"line\">  - route:</span><br><span class=\"line\">    - destination:</span><br><span class=\"line\">        host: old-nginx-svc</span><br><span class=\"line\">        port:</span><br><span class=\"line\">          number: 80</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>验证请求<br>略</li>\n</ol>\n<blockquote>\n<p>istio 配置 https 证书：</p>\n<ol>\n<li>导入 yakir.com 证书（可通过控制台或 kubectl cli 方式导入）<br>控制台方式：配置管理 -&gt; 保密字典 中点击创建，填入 crt、key、名称，选择 TLS 证书类型，点击确定导入证书密钥。</li>\n<li>istio gateway 资源开启 https 配置，选择 secret 方式导入 （见上述配置文件）</li>\n</ol>\n</blockquote>\n<h4 id=\"应用调整为灰度发布策略操作方式\"><a href=\"#应用调整为灰度发布策略操作方式\" class=\"headerlink\" title=\"应用调整为灰度发布策略操作方式\"></a>应用调整为灰度发布策略操作方式</h4><p>第一种方式：保留两套应用实现</p>\n<ul>\n<li><p>新建 CI&#x2F;CD 流水线 + Edas 应用 + Service，即同时保留两套应用（如日常环境 app1-test、app1-test-new）</p>\n</li>\n<li><p>在网关入口处，将 app1 域名流量按照规则匹配到两个应用 Service（默认规则流量进入稳定版应用对应的 Service，匹配到 cookie 值规则的流量进入新版本应用对应的 Service）</p>\n</li>\n<li><p>应用 owner 操作：将应用域名解析修改到 WAF 解析（回源为实际 ingress 或 istio 网关地址）</p>\n</li>\n</ul>\n<p><del>第二种方式：复用一套应用，通过分批发布方式？（暂无法实现）</del></p>\n<ul>\n<li>通过分批发布可以保留两个新旧版本 Deployment ，使用同一个Service。通过 DestinationRule 规则匹配不同流量流入不同 Deployment，实现灰度流量分流。</li>\n</ul>\n<p>问题点：每次需要手动获取发布的新旧版本 Deployment 的 label 值，更新 DestinationRule 规则。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: networking.istio.io/v1alpha3</span><br><span class=\"line\">kind: VirtualService</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: virtual-service-test</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  hosts:</span><br><span class=\"line\">  - yakir.yakir.com</span><br><span class=\"line\">  gateways:</span><br><span class=\"line\">  - istio-gateway-test</span><br><span class=\"line\">  http:</span><br><span class=\"line\">  # 路由规则目标使用同一个 host，通过 subsets 子集来区分流量走向</span><br><span class=\"line\">  - match:</span><br><span class=\"line\">    - headers:</span><br><span class=\"line\">        cookie:</span><br><span class=\"line\">          regex: &quot;^(.*?;)?(foo=aBc123.*)(;.*)?$&quot;</span><br><span class=\"line\">    route:</span><br><span class=\"line\">    - destination:</span><br><span class=\"line\">        host: test-nginx-svc</span><br><span class=\"line\">        subset: new</span><br><span class=\"line\">        port:</span><br><span class=\"line\">          number: 80</span><br><span class=\"line\">  - route:</span><br><span class=\"line\">    - destination:</span><br><span class=\"line\">        host: test-nginx-svc</span><br><span class=\"line\">        subset: old</span><br><span class=\"line\">        port:</span><br><span class=\"line\">          number: 80</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kind: DestinationRule</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: destination-rule-test</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  host: test-nginx-svc</span><br><span class=\"line\">  # 使用 label 值来区别流量流入的 Deployment</span><br><span class=\"line\">  subsets:</span><br><span class=\"line\">  - name: old</span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      edas.oam.acversion: &quot;3&quot;</span><br><span class=\"line\">  - name: new</span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      edas.oam.acversion: &quot;4&quot;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"***其他\"></a>***其他</h4><p><strong>注意事项</strong><br>可观测性：新增 CRD 资源，开启 ingress 日志。<br>istio 高可用性保证？<br>兜底方案： SLB 兜底？</p>\n<p><strong>参考文档</strong><br>Alicloud Ingress：<a href=\"https://help.aliyun.com/document_detail/200941.html#section-t2t-eik-oyr\">https://help.aliyun.com/document_detail&#x2F;200941.html#section-t2t-eik-oyr</a><br>Istio 官网：<a href=\"https://istio.io/latest/zh/docs/concepts/traffic-management/\">https://istio.io/latest/zh/docs/concepts/traffic-management/</a></p>\n","site":{"data":{"footer":"","styles":".post {\n  margin-top: 50px;\n  margin-bottom: 50px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n.headband {\n  display: none;\n}\nbody {\n  background: url(\"/images/background.jpeg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\n.post-block.page {\n  margin-top: 40px;\n}\n.category-all-page {\n  box-shadow: 0px 0px 10px 0px rgba(0,0,0,0.5);\n  background-color: #797d7f;\n  padding: 20px 30px 60px 30px;\n  border-radius: 25px 25px 25px 25px;\n}\n.category-all-title {\n  font-family: Impact;\n  font-size: 24px;\n  color: #0ff;\n}\n.category-list {\n  overflow: auto;\n}\n.category-list li {\n  height: 100%;\n  float: left;\n  border-right: 3px solid #222;\n  padding: 0 20px;\n}\n.category-all ul li {\n  list-style: none !important;\n}\n.category-list li:last-child {\n  border-right: none;\n}\n.category-list li a {\n  font-size: 16px;\n  text-decoration: none;\n  color: #7fff00;\n  font-family: Helvetica, Verdana, sans-serif;\n  -webkit-transition: all 0.5s ease;\n  -moz-transition: all 0.5s ease;\n  -o-transition: all 0.5s ease;\n  -ms-transition: all 0.5s ease;\n  transition: all 0.5s ease;\n}\n.category-list li a:hover {\n  color: #000;\n}\n.category-list li.active a {\n  font-weight: bold;\n  color: #000;\n}\n.tag-cloud a {\n  box-shadow: 0 1px 3px #6f42c1, 0 1px 2px #d9534f;\n  padding: 2px 10px;\n  margin: 8px;\n  background: rgba(193,66,92,0);\n  border-bottom: none;\n  border-radius: 20px;\n}\ncode {\n  background: #555;\n  color: #fff;\n}\n","variables":""}},"length":3459,"excerpt":"<h3 id=\"流量网关方案与灰度发布方式\"><a href=\"#流量网关方案与灰度发布方式\" class=\"headerlink\" title=\"流量网关方案与灰度发布方式\"></a>流量网关方案与灰度发布方式</h3><h4 id=\"一、Alicloud原生-Ingress-方式\"><a href=\"#一、Alicloud原生-Ingress-方式\" class=\"headerlink\" title=\"一、Alicloud原生 Ingress 方式\"></a>一、Alicloud原生 Ingress 方式</h4><p><strong>前置要求</strong></p>\n<ol>\n<li>集群已安装 Ingress 组件</li>\n<li>明确灰度发布规则（使用 cookie 值匹配 A&#x2F;B 测试规则）</li>\n</ol>\n<p><strong>操作步骤</strong></p>\n<ol>\n<li>部署新旧版本 Deployment 和 Service</li>\n</ol>\n<p>通过 Edas 创建新应用，并暴露 service（无需 SLB 暴露）。已 app1 应用为例：</p>\n<table>\n<thead>\n<tr>\n<th><strong>资源</strong></th>\n<th><strong>旧版本</strong></th>\n<th><strong>新版本</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Edas 应用</td>\n<td>app1-test</td>\n<td>app1-new-test</td>\n</tr>\n<tr>\n<td>Deployment</td>\n<td>app1-test-group-x-xxx</td>\n<td>app1-new-test-group-x-xxx</td>\n</tr>\n<tr>\n<td>Service</td>\n<td>app1-svc</td>\n<td>app1-new-svc</td>\n</tr>\n</tbody></table>","more":"<ol start=\"2\">\n<li><p>配置 ingress</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: networking.k8s.io/v1</span><br><span class=\"line\">kind: Ingress</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  annotations:</span><br><span class=\"line\">    # 匹配规则：正则匹配 cookie 值</span><br><span class=\"line\">    nginx.ingress.kubernetes.io/service-match: |</span><br><span class=\"line\">      new-nginx: cookie(&quot;foo&quot;, /^aBc123.*/)</span><br><span class=\"line\">  name: gray-release</span><br><span class=\"line\">  namespace: default</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  rules:</span><br><span class=\"line\">  - host: www.yakir.com</span><br><span class=\"line\">    http:</span><br><span class=\"line\">      paths:</span><br><span class=\"line\">      # 旧版本服务</span><br><span class=\"line\">      - backend:</span><br><span class=\"line\">          service:</span><br><span class=\"line\">            name: old-nginx</span><br><span class=\"line\">            port:</span><br><span class=\"line\">              number: 80</span><br><span class=\"line\">        path: /</span><br><span class=\"line\">        pathType: ImplementationSpecific</span><br><span class=\"line\">      # 新版本服务</span><br><span class=\"line\">      - backend:</span><br><span class=\"line\">          service:</span><br><span class=\"line\">            name: new-nginx</span><br><span class=\"line\">            port:</span><br><span class=\"line\">              number: 80</span><br><span class=\"line\">        path: /</span><br><span class=\"line\">        pathType: ImplementationSpecific</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>验证请求<br>略</p>\n</li>\n</ol>\n<h4 id=\"二、Istio-网关方式\"><a href=\"#二、Istio-网关方式\" class=\"headerlink\" title=\"二、Istio 网关方式\"></a>二、Istio 网关方式</h4><p><strong>前置要求</strong></p>\n<ol>\n<li><p>集群部署 istio </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 下载 istio</span><br><span class=\"line\">curl -L https://istio.io/downloadIstio | sh -</span><br><span class=\"line\"></span><br><span class=\"line\"># 进入 istio 目录，执行安装命令</span><br><span class=\"line\">cd istio-1.13.3/</span><br><span class=\"line\">./bin/istioctl install --set profile=demo</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看可安装的环境（default 用于生产环境，demo 用于测试）</span><br><span class=\"line\">./bin/istioctl profile list</span><br><span class=\"line\">Istio configuration profiles:</span><br><span class=\"line\">    default</span><br><span class=\"line\">    demo</span><br><span class=\"line\">    empty</span><br><span class=\"line\">    external</span><br><span class=\"line\">    minimal</span><br><span class=\"line\">    openshift</span><br><span class=\"line\">    preview</span><br><span class=\"line\">    remote</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>明确灰度发布规则（使用 cookie 值匹配 A&#x2F;B 测试规则）</p>\n</li>\n</ol>\n<p><strong>操作步骤</strong></p>\n<ol>\n<li><p>部署新旧版本 Deployment 和 Service</p>\n</li>\n<li><p>配置 istio 网关与匹配规则</p>\n</li>\n</ol>\n<p>istio-gateway.yaml 文件内容，执行 kubectl apply -f istio-gateway.yaml &amp;&amp; kubectl apply -f virtualservice.yaml 创建相关资源。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: networking.istio.io/v1alpha3</span><br><span class=\"line\">kind: Gateway</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: istio-gateway-test</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    istio: ingressgateway # use istio default controller</span><br><span class=\"line\">  servers:</span><br><span class=\"line\">  - port:</span><br><span class=\"line\">      number: 80</span><br><span class=\"line\">      name: http</span><br><span class=\"line\">      protocol: HTTP</span><br><span class=\"line\">    tls:</span><br><span class=\"line\">      httpsRedirect: true</span><br><span class=\"line\">    hosts:</span><br><span class=\"line\">    - &quot;*.yakir.com&quot;</span><br><span class=\"line\">  - port:</span><br><span class=\"line\">      number: 443</span><br><span class=\"line\">      name: https</span><br><span class=\"line\">      protocol: HTTPS</span><br><span class=\"line\">    tls:</span><br><span class=\"line\">      mode: SIMPLE</span><br><span class=\"line\">      credentialName: yakir-com.cert</span><br><span class=\"line\">    hosts:</span><br><span class=\"line\">    - &quot;*.yakir.com&quot;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: networking.istio.io/v1alpha3</span><br><span class=\"line\">kind: VirtualService</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: virtual-service-test</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  hosts:</span><br><span class=\"line\">  - yakir.yakir.com</span><br><span class=\"line\">  gateways:</span><br><span class=\"line\">  - istio-gateway-test</span><br><span class=\"line\">  http:</span><br><span class=\"line\">  - match:</span><br><span class=\"line\">    - headers:</span><br><span class=\"line\">        cookie:</span><br><span class=\"line\">          regex: &quot;^(.*?;)?(foo=aBc123.*)(;.*)?$&quot;</span><br><span class=\"line\">    route:</span><br><span class=\"line\">    - destination:</span><br><span class=\"line\">        host: new-nginx-svc</span><br><span class=\"line\">        port:</span><br><span class=\"line\">          number: 80</span><br><span class=\"line\">  - route:</span><br><span class=\"line\">    - destination:</span><br><span class=\"line\">        host: old-nginx-svc</span><br><span class=\"line\">        port:</span><br><span class=\"line\">          number: 80</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>验证请求<br>略</li>\n</ol>\n<blockquote>\n<p>istio 配置 https 证书：</p>\n<ol>\n<li>导入 yakir.com 证书（可通过控制台或 kubectl cli 方式导入）<br>控制台方式：配置管理 -&gt; 保密字典 中点击创建，填入 crt、key、名称，选择 TLS 证书类型，点击确定导入证书密钥。</li>\n<li>istio gateway 资源开启 https 配置，选择 secret 方式导入 （见上述配置文件）</li>\n</ol>\n</blockquote>\n<h4 id=\"应用调整为灰度发布策略操作方式\"><a href=\"#应用调整为灰度发布策略操作方式\" class=\"headerlink\" title=\"应用调整为灰度发布策略操作方式\"></a>应用调整为灰度发布策略操作方式</h4><p>第一种方式：保留两套应用实现</p>\n<ul>\n<li><p>新建 CI&#x2F;CD 流水线 + Edas 应用 + Service，即同时保留两套应用（如日常环境 app1-test、app1-test-new）</p>\n</li>\n<li><p>在网关入口处，将 app1 域名流量按照规则匹配到两个应用 Service（默认规则流量进入稳定版应用对应的 Service，匹配到 cookie 值规则的流量进入新版本应用对应的 Service）</p>\n</li>\n<li><p>应用 owner 操作：将应用域名解析修改到 WAF 解析（回源为实际 ingress 或 istio 网关地址）</p>\n</li>\n</ul>\n<p><del>第二种方式：复用一套应用，通过分批发布方式？（暂无法实现）</del></p>\n<ul>\n<li>通过分批发布可以保留两个新旧版本 Deployment ，使用同一个Service。通过 DestinationRule 规则匹配不同流量流入不同 Deployment，实现灰度流量分流。</li>\n</ul>\n<p>问题点：每次需要手动获取发布的新旧版本 Deployment 的 label 值，更新 DestinationRule 规则。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: networking.istio.io/v1alpha3</span><br><span class=\"line\">kind: VirtualService</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: virtual-service-test</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  hosts:</span><br><span class=\"line\">  - yakir.yakir.com</span><br><span class=\"line\">  gateways:</span><br><span class=\"line\">  - istio-gateway-test</span><br><span class=\"line\">  http:</span><br><span class=\"line\">  # 路由规则目标使用同一个 host，通过 subsets 子集来区分流量走向</span><br><span class=\"line\">  - match:</span><br><span class=\"line\">    - headers:</span><br><span class=\"line\">        cookie:</span><br><span class=\"line\">          regex: &quot;^(.*?;)?(foo=aBc123.*)(;.*)?$&quot;</span><br><span class=\"line\">    route:</span><br><span class=\"line\">    - destination:</span><br><span class=\"line\">        host: test-nginx-svc</span><br><span class=\"line\">        subset: new</span><br><span class=\"line\">        port:</span><br><span class=\"line\">          number: 80</span><br><span class=\"line\">  - route:</span><br><span class=\"line\">    - destination:</span><br><span class=\"line\">        host: test-nginx-svc</span><br><span class=\"line\">        subset: old</span><br><span class=\"line\">        port:</span><br><span class=\"line\">          number: 80</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kind: DestinationRule</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: destination-rule-test</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  host: test-nginx-svc</span><br><span class=\"line\">  # 使用 label 值来区别流量流入的 Deployment</span><br><span class=\"line\">  subsets:</span><br><span class=\"line\">  - name: old</span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      edas.oam.acversion: &quot;3&quot;</span><br><span class=\"line\">  - name: new</span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      edas.oam.acversion: &quot;4&quot;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"***其他\"></a>***其他</h4><p><strong>注意事项</strong><br>可观测性：新增 CRD 资源，开启 ingress 日志。<br>istio 高可用性保证？<br>兜底方案： SLB 兜底？</p>\n<p><strong>参考文档</strong><br>Alicloud Ingress：<a href=\"https://help.aliyun.com/document_detail/200941.html#section-t2t-eik-oyr\">https://help.aliyun.com/document_detail&#x2F;200941.html#section-t2t-eik-oyr</a><br>Istio 官网：<a href=\"https://istio.io/latest/zh/docs/concepts/traffic-management/\">https://istio.io/latest/zh/docs/concepts/traffic-management/</a></p>"},{"title":"Git Flow 工作流","abbrlink":"539","date":"2022-05-04T13:14:23.000Z","_content":"### 一、gitflow：版本分支管理策略（相当于对git的包装）\n1. GitFlow描述\n- 常用分支包括master、develop、feature、release、hotfix（support分支不常用）\n- 其中master、develop是远程分支，feature、release、hotfix是本地分支。\n   - 远程分支是指需要push到gitlab、github远程仓库中\n   - 本地分支指开发人员的本地开发时使用的git版本控制环境\n\n<!--more-->\n2. GitFlow流程图及描述理解\n\n{% asset_img gf1.png %}\n{% asset_img gf2.png %}\n\n- master：主干分支 \n\n{% asset_img gf3.png %}\n\n   - 最稳定分支、功能完整、可随时发布线上环境（只读分支，只能从hotfix/release合并 不能修改）\n   - 在master分支上的推送应该打tag记录追溯；\n\n- develop：开发分支 ß\n   - 功能最新最全的分支，基于master分支克隆（仅首次克隆）；\n   - feature分支本地自测通过后合并到develop分支然后删除；\n   - 收集所有上线功能后（包含所有发布到下一个release的代码）从delevop拉去release分支进行提测；\n   - release/hotfix分支上线完毕，合并到develop并推送；\n\n- feature：功能开发分支 \n\n{% asset_img gf4.png %}\n\n   - 开发某部分新功能，基于develop分支克隆，功能开发完毕且本地自测通过（编译完成且无异常）合并到develop分支；\n   - 可存在多个feature分支，即团队多人同时开发创建多个临时分支，功能完成后可选删除；\n\n- release：测试分支 \n\n{% asset_img gf5.png %}\n\n   - 用于提交给测试人员进行功能测试，基于feature分支合并到develop之后，从develop分支克隆；\n   - 测试过程发现BUG在本分支进行修复，修复时创建修复分支bugfix-*，修复完所有bug上线后一次性合并到develop/master分支并推送（完成功能），推送master分支时打tag；\n   - 临时分支，功能上线后可选删除（开启release测试后，不允许develop分支新功能继续合并到release分支，新功能需放到下一个release测试及发布）；\n\n- hotfix：补丁分支 \n\n{% asset_img gf6.png %}\n\n   - 基于master分支克隆，主要用于线上版本进行BUG修复；\n   - 修复bug后合并到develop/master分支并推送（所有hotfix分支的修改会进入到下一个release），推送master分支时打tag；\n   - 临时分支，修复bug后可选删除\n\n3. 开发准则与约定\n- 准则\n   - 除了源码相关的东西之外，其他build产生的东西（如：maven的target文件夹，.idea文件夹等），均不能提交进入源码仓库，添加到.gitignore文件中忽略掉\n   - 开发人员要严格按照我们约定的gitflow版本分支管理流程切换到指定分支，开发相应的功能\n   - 任务完成后需要根据测试用例经过严格的自测才能推送develop，严禁将编译不通过，提交不完全的代码推送到远程分支\n- 约定：\n   - 主分支名称：master    主开发分支：develop\n   - 标签（tag）名称：v*. release，其中“*” 为版本号，“release” 小写，如：v1.0.0. release\n   - 新功能开发分支名称：feature-*，其中“*” 为对应jira（Aone）上的任务编号\n   - 发布分支名称：release-*，其中“*” 为版本号，“release”小写，如：release-1.0.0，release分支上修复bug的分支名称为bugfix-*\n   - master的bug修复分支名称：hotfix-*，其中“*” 为对应jira（Aone）上的任务编号\n\n### 二、测试部分\n\n- 本地git flow init 初始化仓库，提交develop分支\n\n{% asset_img gf7.png %}\n{% asset_img gf8.png %}\n\n- 提交到远程测试用github仓库（使用ssh公钥认证方式），可以看到develop分支已有第一次提交\n\n{% asset_img gf9.png %}\n\n- 到tmp目录下新建工作目录，并clone下远程仓库到本地（模拟本地开发）\n\n{% asset_img gf10.png %}\n\n- 初始化仓库后，拉取develop分支到本地进行开发。此时可以切出feature分支进行功能开发\n\n{% asset_img gf11.png %}\n{% asset_img gf12.png %}\n\n- 开发功能提交后进行提交到远程仓库并track远程分支。后续可以git push持续提交\n\n{% asset_img gf13.png %}\n{% asset_img gf14.png %}\n\n- 功能开发完成后，将分支合并到develop分支并删除本地feature分支（加上-F参数可以同时删除远程分支）\n\n{% asset_img gf15.png %}\nfinish提交后即将新功能合并到develop分支，完成新功能开发。后续即执行release发布操作，步骤类似\n\n","source":"_posts/git-flow.md","raw":"---\ntitle: Git Flow 工作流\ncategories:\n  - Operations\ntags:\n  - git\nabbrlink: '539'\ndate: 2022-05-04 21:14:23\n---\n### 一、gitflow：版本分支管理策略（相当于对git的包装）\n1. GitFlow描述\n- 常用分支包括master、develop、feature、release、hotfix（support分支不常用）\n- 其中master、develop是远程分支，feature、release、hotfix是本地分支。\n   - 远程分支是指需要push到gitlab、github远程仓库中\n   - 本地分支指开发人员的本地开发时使用的git版本控制环境\n\n<!--more-->\n2. GitFlow流程图及描述理解\n\n{% asset_img gf1.png %}\n{% asset_img gf2.png %}\n\n- master：主干分支 \n\n{% asset_img gf3.png %}\n\n   - 最稳定分支、功能完整、可随时发布线上环境（只读分支，只能从hotfix/release合并 不能修改）\n   - 在master分支上的推送应该打tag记录追溯；\n\n- develop：开发分支 ß\n   - 功能最新最全的分支，基于master分支克隆（仅首次克隆）；\n   - feature分支本地自测通过后合并到develop分支然后删除；\n   - 收集所有上线功能后（包含所有发布到下一个release的代码）从delevop拉去release分支进行提测；\n   - release/hotfix分支上线完毕，合并到develop并推送；\n\n- feature：功能开发分支 \n\n{% asset_img gf4.png %}\n\n   - 开发某部分新功能，基于develop分支克隆，功能开发完毕且本地自测通过（编译完成且无异常）合并到develop分支；\n   - 可存在多个feature分支，即团队多人同时开发创建多个临时分支，功能完成后可选删除；\n\n- release：测试分支 \n\n{% asset_img gf5.png %}\n\n   - 用于提交给测试人员进行功能测试，基于feature分支合并到develop之后，从develop分支克隆；\n   - 测试过程发现BUG在本分支进行修复，修复时创建修复分支bugfix-*，修复完所有bug上线后一次性合并到develop/master分支并推送（完成功能），推送master分支时打tag；\n   - 临时分支，功能上线后可选删除（开启release测试后，不允许develop分支新功能继续合并到release分支，新功能需放到下一个release测试及发布）；\n\n- hotfix：补丁分支 \n\n{% asset_img gf6.png %}\n\n   - 基于master分支克隆，主要用于线上版本进行BUG修复；\n   - 修复bug后合并到develop/master分支并推送（所有hotfix分支的修改会进入到下一个release），推送master分支时打tag；\n   - 临时分支，修复bug后可选删除\n\n3. 开发准则与约定\n- 准则\n   - 除了源码相关的东西之外，其他build产生的东西（如：maven的target文件夹，.idea文件夹等），均不能提交进入源码仓库，添加到.gitignore文件中忽略掉\n   - 开发人员要严格按照我们约定的gitflow版本分支管理流程切换到指定分支，开发相应的功能\n   - 任务完成后需要根据测试用例经过严格的自测才能推送develop，严禁将编译不通过，提交不完全的代码推送到远程分支\n- 约定：\n   - 主分支名称：master    主开发分支：develop\n   - 标签（tag）名称：v*. release，其中“*” 为版本号，“release” 小写，如：v1.0.0. release\n   - 新功能开发分支名称：feature-*，其中“*” 为对应jira（Aone）上的任务编号\n   - 发布分支名称：release-*，其中“*” 为版本号，“release”小写，如：release-1.0.0，release分支上修复bug的分支名称为bugfix-*\n   - master的bug修复分支名称：hotfix-*，其中“*” 为对应jira（Aone）上的任务编号\n\n### 二、测试部分\n\n- 本地git flow init 初始化仓库，提交develop分支\n\n{% asset_img gf7.png %}\n{% asset_img gf8.png %}\n\n- 提交到远程测试用github仓库（使用ssh公钥认证方式），可以看到develop分支已有第一次提交\n\n{% asset_img gf9.png %}\n\n- 到tmp目录下新建工作目录，并clone下远程仓库到本地（模拟本地开发）\n\n{% asset_img gf10.png %}\n\n- 初始化仓库后，拉取develop分支到本地进行开发。此时可以切出feature分支进行功能开发\n\n{% asset_img gf11.png %}\n{% asset_img gf12.png %}\n\n- 开发功能提交后进行提交到远程仓库并track远程分支。后续可以git push持续提交\n\n{% asset_img gf13.png %}\n{% asset_img gf14.png %}\n\n- 功能开发完成后，将分支合并到develop分支并删除本地feature分支（加上-F参数可以同时删除远程分支）\n\n{% asset_img gf15.png %}\nfinish提交后即将新功能合并到develop分支，完成新功能开发。后续即执行release发布操作，步骤类似\n\n","slug":"git-flow","published":1,"updated":"2024-01-21T15:28:43.152Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm0fat8zl000gs0njfffade4a","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"一、gitflow：版本分支管理策略（相当于对git的包装）\"><a href=\"#一、gitflow：版本分支管理策略（相当于对git的包装）\" class=\"headerlink\" title=\"一、gitflow：版本分支管理策略（相当于对git的包装）\"></a>一、gitflow：版本分支管理策略（相当于对git的包装）</h3><ol>\n<li>GitFlow描述</li>\n</ol>\n<ul>\n<li>常用分支包括master、develop、feature、release、hotfix（support分支不常用）</li>\n<li>其中master、develop是远程分支，feature、release、hotfix是本地分支。<ul>\n<li>远程分支是指需要push到gitlab、github远程仓库中</li>\n<li>本地分支指开发人员的本地开发时使用的git版本控制环境</li>\n</ul>\n</li>\n</ul>\n<span id=\"more\"></span>\n<ol start=\"2\">\n<li>GitFlow流程图及描述理解</li>\n</ol>\n<img data-src=\"/posts/539/gf1.png\" class>\n<img data-src=\"/posts/539/gf2.png\" class>\n\n<ul>\n<li>master：主干分支</li>\n</ul>\n<img data-src=\"/posts/539/gf3.png\" class>\n\n<ul>\n<li><p>最稳定分支、功能完整、可随时发布线上环境（只读分支，只能从hotfix&#x2F;release合并 不能修改）</p>\n</li>\n<li><p>在master分支上的推送应该打tag记录追溯；</p>\n</li>\n<li><p>develop：开发分支 ß</p>\n<ul>\n<li>功能最新最全的分支，基于master分支克隆（仅首次克隆）；</li>\n<li>feature分支本地自测通过后合并到develop分支然后删除；</li>\n<li>收集所有上线功能后（包含所有发布到下一个release的代码）从delevop拉去release分支进行提测；</li>\n<li>release&#x2F;hotfix分支上线完毕，合并到develop并推送；</li>\n</ul>\n</li>\n<li><p>feature：功能开发分支</p>\n</li>\n</ul>\n<img data-src=\"/posts/539/gf4.png\" class>\n\n<ul>\n<li><p>开发某部分新功能，基于develop分支克隆，功能开发完毕且本地自测通过（编译完成且无异常）合并到develop分支；</p>\n</li>\n<li><p>可存在多个feature分支，即团队多人同时开发创建多个临时分支，功能完成后可选删除；</p>\n</li>\n<li><p>release：测试分支</p>\n</li>\n</ul>\n<img data-src=\"/posts/539/gf5.png\" class>\n\n<ul>\n<li><p>用于提交给测试人员进行功能测试，基于feature分支合并到develop之后，从develop分支克隆；</p>\n</li>\n<li><p>测试过程发现BUG在本分支进行修复，修复时创建修复分支bugfix-*，修复完所有bug上线后一次性合并到develop&#x2F;master分支并推送（完成功能），推送master分支时打tag；</p>\n</li>\n<li><p>临时分支，功能上线后可选删除（开启release测试后，不允许develop分支新功能继续合并到release分支，新功能需放到下一个release测试及发布）；</p>\n</li>\n<li><p>hotfix：补丁分支</p>\n</li>\n</ul>\n<img data-src=\"/posts/539/gf6.png\" class>\n\n<ul>\n<li>基于master分支克隆，主要用于线上版本进行BUG修复；</li>\n<li>修复bug后合并到develop&#x2F;master分支并推送（所有hotfix分支的修改会进入到下一个release），推送master分支时打tag；</li>\n<li>临时分支，修复bug后可选删除</li>\n</ul>\n<ol start=\"3\">\n<li>开发准则与约定</li>\n</ol>\n<ul>\n<li>准则<ul>\n<li>除了源码相关的东西之外，其他build产生的东西（如：maven的target文件夹，.idea文件夹等），均不能提交进入源码仓库，添加到.gitignore文件中忽略掉</li>\n<li>开发人员要严格按照我们约定的gitflow版本分支管理流程切换到指定分支，开发相应的功能</li>\n<li>任务完成后需要根据测试用例经过严格的自测才能推送develop，严禁将编译不通过，提交不完全的代码推送到远程分支</li>\n</ul>\n</li>\n<li>约定：<ul>\n<li>主分支名称：master    主开发分支：develop</li>\n<li>标签（tag）名称：v*. release，其中“*” 为版本号，“release” 小写，如：v1.0.0. release</li>\n<li>新功能开发分支名称：feature-<em>，其中“</em>” 为对应jira（Aone）上的任务编号</li>\n<li>发布分支名称：release-<em>，其中“</em>” 为版本号，“release”小写，如：release-1.0.0，release分支上修复bug的分支名称为bugfix-*</li>\n<li>master的bug修复分支名称：hotfix-<em>，其中“</em>” 为对应jira（Aone）上的任务编号</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"二、测试部分\"><a href=\"#二、测试部分\" class=\"headerlink\" title=\"二、测试部分\"></a>二、测试部分</h3><ul>\n<li>本地git flow init 初始化仓库，提交develop分支</li>\n</ul>\n<img data-src=\"/posts/539/gf7.png\" class>\n<img data-src=\"/posts/539/gf8.png\" class>\n\n<ul>\n<li>提交到远程测试用github仓库（使用ssh公钥认证方式），可以看到develop分支已有第一次提交</li>\n</ul>\n<img data-src=\"/posts/539/gf9.png\" class>\n\n<ul>\n<li>到tmp目录下新建工作目录，并clone下远程仓库到本地（模拟本地开发）</li>\n</ul>\n<img data-src=\"/posts/539/gf10.png\" class>\n\n<ul>\n<li>初始化仓库后，拉取develop分支到本地进行开发。此时可以切出feature分支进行功能开发</li>\n</ul>\n<img data-src=\"/posts/539/gf11.png\" class>\n<img data-src=\"/posts/539/gf12.png\" class>\n\n<ul>\n<li>开发功能提交后进行提交到远程仓库并track远程分支。后续可以git push持续提交</li>\n</ul>\n<img data-src=\"/posts/539/gf13.png\" class>\n<img data-src=\"/posts/539/gf14.png\" class>\n\n<ul>\n<li>功能开发完成后，将分支合并到develop分支并删除本地feature分支（加上-F参数可以同时删除远程分支）</li>\n</ul>\n<img data-src=\"/posts/539/gf15.png\" class>\n<p>finish提交后即将新功能合并到develop分支，完成新功能开发。后续即执行release发布操作，步骤类似</p>\n","site":{"data":{"footer":"","styles":".post {\n  margin-top: 50px;\n  margin-bottom: 50px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n.headband {\n  display: none;\n}\nbody {\n  background: url(\"/images/background.jpeg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\n.post-block.page {\n  margin-top: 40px;\n}\n.category-all-page {\n  box-shadow: 0px 0px 10px 0px rgba(0,0,0,0.5);\n  background-color: #797d7f;\n  padding: 20px 30px 60px 30px;\n  border-radius: 25px 25px 25px 25px;\n}\n.category-all-title {\n  font-family: Impact;\n  font-size: 24px;\n  color: #0ff;\n}\n.category-list {\n  overflow: auto;\n}\n.category-list li {\n  height: 100%;\n  float: left;\n  border-right: 3px solid #222;\n  padding: 0 20px;\n}\n.category-all ul li {\n  list-style: none !important;\n}\n.category-list li:last-child {\n  border-right: none;\n}\n.category-list li a {\n  font-size: 16px;\n  text-decoration: none;\n  color: #7fff00;\n  font-family: Helvetica, Verdana, sans-serif;\n  -webkit-transition: all 0.5s ease;\n  -moz-transition: all 0.5s ease;\n  -o-transition: all 0.5s ease;\n  -ms-transition: all 0.5s ease;\n  transition: all 0.5s ease;\n}\n.category-list li a:hover {\n  color: #000;\n}\n.category-list li.active a {\n  font-weight: bold;\n  color: #000;\n}\n.tag-cloud a {\n  box-shadow: 0 1px 3px #6f42c1, 0 1px 2px #d9534f;\n  padding: 2px 10px;\n  margin: 8px;\n  background: rgba(193,66,92,0);\n  border-bottom: none;\n  border-radius: 20px;\n}\ncode {\n  background: #555;\n  color: #fff;\n}\n","variables":""}},"length":1751,"excerpt":"<h3 id=\"一、gitflow：版本分支管理策略（相当于对git的包装）\"><a href=\"#一、gitflow：版本分支管理策略（相当于对git的包装）\" class=\"headerlink\" title=\"一、gitflow：版本分支管理策略（相当于对git的包装）\"></a>一、gitflow：版本分支管理策略（相当于对git的包装）</h3><ol>\n<li>GitFlow描述</li>\n</ol>\n<ul>\n<li>常用分支包括master、develop、feature、release、hotfix（support分支不常用）</li>\n<li>其中master、develop是远程分支，feature、release、hotfix是本地分支。<ul>\n<li>远程分支是指需要push到gitlab、github远程仓库中</li>\n<li>本地分支指开发人员的本地开发时使用的git版本控制环境</li>\n</ul>\n</li>\n</ul>","more":"<ol start=\"2\">\n<li>GitFlow流程图及描述理解</li>\n</ol>\n<img data-src=\"/posts/539/gf1.png\" class>\n<img data-src=\"/posts/539/gf2.png\" class>\n\n<ul>\n<li>master：主干分支</li>\n</ul>\n<img data-src=\"/posts/539/gf3.png\" class>\n\n<ul>\n<li><p>最稳定分支、功能完整、可随时发布线上环境（只读分支，只能从hotfix&#x2F;release合并 不能修改）</p>\n</li>\n<li><p>在master分支上的推送应该打tag记录追溯；</p>\n</li>\n<li><p>develop：开发分支 ß</p>\n<ul>\n<li>功能最新最全的分支，基于master分支克隆（仅首次克隆）；</li>\n<li>feature分支本地自测通过后合并到develop分支然后删除；</li>\n<li>收集所有上线功能后（包含所有发布到下一个release的代码）从delevop拉去release分支进行提测；</li>\n<li>release&#x2F;hotfix分支上线完毕，合并到develop并推送；</li>\n</ul>\n</li>\n<li><p>feature：功能开发分支</p>\n</li>\n</ul>\n<img data-src=\"/posts/539/gf4.png\" class>\n\n<ul>\n<li><p>开发某部分新功能，基于develop分支克隆，功能开发完毕且本地自测通过（编译完成且无异常）合并到develop分支；</p>\n</li>\n<li><p>可存在多个feature分支，即团队多人同时开发创建多个临时分支，功能完成后可选删除；</p>\n</li>\n<li><p>release：测试分支</p>\n</li>\n</ul>\n<img data-src=\"/posts/539/gf5.png\" class>\n\n<ul>\n<li><p>用于提交给测试人员进行功能测试，基于feature分支合并到develop之后，从develop分支克隆；</p>\n</li>\n<li><p>测试过程发现BUG在本分支进行修复，修复时创建修复分支bugfix-*，修复完所有bug上线后一次性合并到develop&#x2F;master分支并推送（完成功能），推送master分支时打tag；</p>\n</li>\n<li><p>临时分支，功能上线后可选删除（开启release测试后，不允许develop分支新功能继续合并到release分支，新功能需放到下一个release测试及发布）；</p>\n</li>\n<li><p>hotfix：补丁分支</p>\n</li>\n</ul>\n<img data-src=\"/posts/539/gf6.png\" class>\n\n<ul>\n<li>基于master分支克隆，主要用于线上版本进行BUG修复；</li>\n<li>修复bug后合并到develop&#x2F;master分支并推送（所有hotfix分支的修改会进入到下一个release），推送master分支时打tag；</li>\n<li>临时分支，修复bug后可选删除</li>\n</ul>\n<ol start=\"3\">\n<li>开发准则与约定</li>\n</ol>\n<ul>\n<li>准则<ul>\n<li>除了源码相关的东西之外，其他build产生的东西（如：maven的target文件夹，.idea文件夹等），均不能提交进入源码仓库，添加到.gitignore文件中忽略掉</li>\n<li>开发人员要严格按照我们约定的gitflow版本分支管理流程切换到指定分支，开发相应的功能</li>\n<li>任务完成后需要根据测试用例经过严格的自测才能推送develop，严禁将编译不通过，提交不完全的代码推送到远程分支</li>\n</ul>\n</li>\n<li>约定：<ul>\n<li>主分支名称：master    主开发分支：develop</li>\n<li>标签（tag）名称：v*. release，其中“*” 为版本号，“release” 小写，如：v1.0.0. release</li>\n<li>新功能开发分支名称：feature-<em>，其中“</em>” 为对应jira（Aone）上的任务编号</li>\n<li>发布分支名称：release-<em>，其中“</em>” 为版本号，“release”小写，如：release-1.0.0，release分支上修复bug的分支名称为bugfix-*</li>\n<li>master的bug修复分支名称：hotfix-<em>，其中“</em>” 为对应jira（Aone）上的任务编号</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"二、测试部分\"><a href=\"#二、测试部分\" class=\"headerlink\" title=\"二、测试部分\"></a>二、测试部分</h3><ul>\n<li>本地git flow init 初始化仓库，提交develop分支</li>\n</ul>\n<img data-src=\"/posts/539/gf7.png\" class>\n<img data-src=\"/posts/539/gf8.png\" class>\n\n<ul>\n<li>提交到远程测试用github仓库（使用ssh公钥认证方式），可以看到develop分支已有第一次提交</li>\n</ul>\n<img data-src=\"/posts/539/gf9.png\" class>\n\n<ul>\n<li>到tmp目录下新建工作目录，并clone下远程仓库到本地（模拟本地开发）</li>\n</ul>\n<img data-src=\"/posts/539/gf10.png\" class>\n\n<ul>\n<li>初始化仓库后，拉取develop分支到本地进行开发。此时可以切出feature分支进行功能开发</li>\n</ul>\n<img data-src=\"/posts/539/gf11.png\" class>\n<img data-src=\"/posts/539/gf12.png\" class>\n\n<ul>\n<li>开发功能提交后进行提交到远程仓库并track远程分支。后续可以git push持续提交</li>\n</ul>\n<img data-src=\"/posts/539/gf13.png\" class>\n<img data-src=\"/posts/539/gf14.png\" class>\n\n<ul>\n<li>功能开发完成后，将分支合并到develop分支并删除本地feature分支（加上-F参数可以同时删除远程分支）</li>\n</ul>\n<img data-src=\"/posts/539/gf15.png\" class>\n<p>finish提交后即将新功能合并到develop分支，完成新功能开发。后续即执行release发布操作，步骤类似</p>"},{"title":"Helm 应用部署","abbrlink":"ce0f","date":"2022-05-04T13:46:04.000Z","_content":"### 一、Helm 安装与模板\n#### 1）Helm 安装部署\n\n- [安装二进制命令](https://helm.sh/zh/docs/intro/install/)（本地需要连接上kubernetes 集群）\n\n<!--more-->\n- 安装Alicloudhelm 插件与操作\n```bash\n# 安装 Helm 插件\nhelm plugin install https://github.com/AliyunContainerService/helm-acr\n\n<!--more-->\n# 配置本地仓库映射\nexport HELM_REPO_USERNAME='<企业版实例访问凭证中账号>'\nexport HELM_REPO_PASSWORD='<企业版实例访问凭证中密码>'\nhelm repo add <本地仓库名称> acr://registry-chart-test.cn-hangzhou.cr.aliyuncs.com/<命名空间>/<Chart仓库名称> --username ${HELM_REPO_USERNAME} --password ${HELM_REPO_PASSWORD}\n#export HELM_REPO_USERNAME=devops@ib_daily\n#export HELM_REPO_PASSWORD=2RJPfCgHXroSYQga\n#helm repo add aliyun-acr-repo acr://registry-chart-test.cn-hangzhou.cr.aliyuncs.com/chart-test/app-test --username ${HELM_REPO_USERNAME} --password ${HELM_REPO_PASSWORD}\n\n# 推送Chart\n#本地创建一个 Chart\nhelm create <Chart 名称>\n#helm create app-test\n#推送 Chart 目录\nhelm cm-push <Chart 名称> <本地仓库名称>\n#helm cm-push app-test aliyun-acr-repo\n#或者推送 Chart 压缩包\nhelm cm-push <Chart 名称>-<Chart 版本>.tgz <本地仓库名称>\n\n# 拉取Chart\n#从线上Chart 仓库更新本地Chart 索引\nhelm repo update\n#helm repo update aliyun-acr-repo\n#拉取Chart\nhelm fetch <本地仓库名称>/<Chart 名称> --version <Chart 版本>\n#helm fetch aliyun-acr-repo/app-test --version=20211228100329-daily\n#或者直接安装Chart\nhelm install -f values.yaml <本地仓库名称>/<Chart 名称> --version <Chart 版本>\n#helm install app-test aliyun-acr-repo/app-test --version 20211228100329-daily --namespace daily-apps\n```\n> helm install 操作实际执行按顺序安装资源：\n> - Namespace\n> - NetworkPolicy\n> - ResourceQuota\n> - LimitRange\n> - PodSecurityPolicy\n> - PodDisruptionBudget\n> - ServiceAccount\n> - Secret\n> - SecretList\n> - ConfigMap\n> - StorageClass\n> - PersistentVolume\n> - PersistentVolumeClaim\n> - CustomResourceDefinition\n> - ClusterRole\n> - ClusterRoleList\n> - ClusterRoleBinding\n> - ClusterRoleBindingList\n> - Role\n> - RoleList\n> - RoleBinding\n> - RoleBindingList\n> - Service\n> - DaemonSet\n> - Pod\n> - ReplicationController\n> - ReplicaSet\n> - Deployment\n> - HorizontalPodAutoscaler\n> - StatefulSet\n> - Job\n> - CronJob\n> - Ingress\n> - APIService\n\n[常用参数](https://helm.sh/zh/docs/helm/helm/)\n> - 查看本地仓库：helm repo list\n> - 添加/删除仓库：helm repo add xxx / helm repo remove xxx\n> - 推送/拉取charts：helm cm-push xxx / helm fetch/pull xxx\n> - 安装/卸载charts：helm install xxx /  helm uninstall xxx\n> - 升级/回滚：helm upgrade xxx / helm rollback xxx <revision>\n> - 创建本地自己的charts： helm create xxx\n> - 查看charts 可自定义配置项/获取自定义配置项 ：helm show values / helm get values\n\n\n- 配置跨账号ACR 拉取镜像\n> helm 部署时需要pull image 部署，因此需要配置跨账号ACR 拉取镜像。参考：[跨账号ACR 拉取镜像配置](https://yuque.antfin.com/kifo8h/nee5aa/wgui7o)\n\n\n\n#### 2）Helm 模板与语法编写\n> 详情参考：[Charts 文件格式，模板编写](https://www.qikqiak.com/k8strain/helm/demo/)\n\n- 内置对象\n\n- 基本目录结构内容：Chart.yaml（chart 信息说明） 、Values.yaml（自定义变量） 、charts（子chart目录，依赖）\n\n- templates 模板（实际安装到Kubernetes 集群中的资源定义Yaml 模板文件，如deployment、pod 等）\n   - 资源模板：confimap.yaml、deployment.yaml 等\n   - 命名模板：_helpers.tpl\n\n- 函数和流水线：[函数列表](https://helm.sh/zh/docs/chart_template_guide/function_list/)，[流程控制](https://helm.sh/zh/docs/chart_template_guide/control_structures/)\n\n- 访问文件\n\n\n### 二、测试验证部署app-test\n#### 1）本地安装helm、kubectl（连接Kubernetes 集群）二进制命令\n\n#### 2）初始化配置app-test \n\n- 初始化应用目录：helm create app-test\n\n- 应用app-test 目录结构\n\n{% asset_img helm1.png %}\n\n- 关键配置信息\n```yaml\n# Chart.yaml\napiVersion: v2\nname: app-test\ndescription: application app-test for env daily\ntype: application\nversion: 20211215123042-daily\nappVersion: 20211215123042_daily\n```\n```yaml\n# values.yaml\nreplicaCount: 1\n\nimage:\n  repository: registry-chart-test.cn-hangzhou.cr.aliyuncs.com/ib-ibos/app-test\n  pullPolicy: IfNotPresent\n  tag: \"\"\n\nimagePullSecrets: []\nnameOverride: \"\"\nfullnameOverride: \"\"\n\nserviceAccount:\n  create: false\n  annotations: {}\n  name: \"\"\n\npodAnnotations: {}\n\npodSecurityContext: {}\n\nsecurityContext: {}\n\nservice:\n  type: ClusterIP\n  port: 8080\n  create: false\n\ningress:\n  enabled: false\n  className: \"\"\n  annotations: {}\n  hosts:\n    - host: reos.com.cn\n      paths:\n        - path: /\n          pathType: ImplementationSpecific\n  tls: []\n\nresources: {}\n\nautoscaling:\n  enabled: false\n  minReplicas: 1\n  maxReplicas: 100\n  targetCPUUtilizationPercentage: 80\n\nnodeSelector: {}\n\ntolerations: []\n\naffinity: {}\n```\n\n#### 3）配置镜像仓库，部署应用\n\n- 配置远程ACR 企业版仓库，参考 [Helm安装部署](#ht9xj) 部分。\n\n{% asset_img helm2.png %}\n\n- 部署应用\n   - 执行部署命令\n```bash\nhelm install app-test aliyun-acr-repo/app-test --version 20211228100329-daily --namespace daily-apps\n```\n\n   - 部署结果\n{% asset_img helm3.png %}\n{% asset_img helm4.png %}\n\n- 更新版本\n{% asset_img helm5.png %}\n\n### 三、问题点\n\n- 使用helm 命令安装需本地连接Kubernetes 集群（需提供API Server 公网EIP）\n\n- 与AlicloudEdas 产品兼容问题\n   - 使用helm 部署的应用与Edas 不共通，因此使用helm 部署的无法从Edas 上查看应用的相关信息\n   - Edas 支持将手动部署的Deployment 手动导入，参考：[https://help.aliyun.com/document_detail/202036.html](https://help.aliyun.com/document_detail/202036.html)（自行部署导入Edas 的应用暂未确定是否能完整导入Edas 组件注入的变量）\n\n- 版本控制与镜像拉取\n   - helm 通过配置values 变量值写入或更新 image->repository 的值进行pull 镜像更新，并通过 helm push 推送pull 的镜像配置到私有仓库中。\n   - helm 通过upgrade 与rollback 命令进行已部署应用的升级与回滚功能。\n\n- 与原有CI/CD 配置使用问题\n   - helm 部署只能通过本地更新配置并执行，无法与现有的 CI/CD 流水线进行配合使用，需要进行调整。\n","source":"_posts/helm-deploy.md","raw":"---\ntitle: Helm 应用部署\ncategories:\n  - CNCF\ntags:\n  - Alicloud\nabbrlink: ce0f\ndate: 2022-05-04 21:46:04\n---\n### 一、Helm 安装与模板\n#### 1）Helm 安装部署\n\n- [安装二进制命令](https://helm.sh/zh/docs/intro/install/)（本地需要连接上kubernetes 集群）\n\n<!--more-->\n- 安装Alicloudhelm 插件与操作\n```bash\n# 安装 Helm 插件\nhelm plugin install https://github.com/AliyunContainerService/helm-acr\n\n<!--more-->\n# 配置本地仓库映射\nexport HELM_REPO_USERNAME='<企业版实例访问凭证中账号>'\nexport HELM_REPO_PASSWORD='<企业版实例访问凭证中密码>'\nhelm repo add <本地仓库名称> acr://registry-chart-test.cn-hangzhou.cr.aliyuncs.com/<命名空间>/<Chart仓库名称> --username ${HELM_REPO_USERNAME} --password ${HELM_REPO_PASSWORD}\n#export HELM_REPO_USERNAME=devops@ib_daily\n#export HELM_REPO_PASSWORD=2RJPfCgHXroSYQga\n#helm repo add aliyun-acr-repo acr://registry-chart-test.cn-hangzhou.cr.aliyuncs.com/chart-test/app-test --username ${HELM_REPO_USERNAME} --password ${HELM_REPO_PASSWORD}\n\n# 推送Chart\n#本地创建一个 Chart\nhelm create <Chart 名称>\n#helm create app-test\n#推送 Chart 目录\nhelm cm-push <Chart 名称> <本地仓库名称>\n#helm cm-push app-test aliyun-acr-repo\n#或者推送 Chart 压缩包\nhelm cm-push <Chart 名称>-<Chart 版本>.tgz <本地仓库名称>\n\n# 拉取Chart\n#从线上Chart 仓库更新本地Chart 索引\nhelm repo update\n#helm repo update aliyun-acr-repo\n#拉取Chart\nhelm fetch <本地仓库名称>/<Chart 名称> --version <Chart 版本>\n#helm fetch aliyun-acr-repo/app-test --version=20211228100329-daily\n#或者直接安装Chart\nhelm install -f values.yaml <本地仓库名称>/<Chart 名称> --version <Chart 版本>\n#helm install app-test aliyun-acr-repo/app-test --version 20211228100329-daily --namespace daily-apps\n```\n> helm install 操作实际执行按顺序安装资源：\n> - Namespace\n> - NetworkPolicy\n> - ResourceQuota\n> - LimitRange\n> - PodSecurityPolicy\n> - PodDisruptionBudget\n> - ServiceAccount\n> - Secret\n> - SecretList\n> - ConfigMap\n> - StorageClass\n> - PersistentVolume\n> - PersistentVolumeClaim\n> - CustomResourceDefinition\n> - ClusterRole\n> - ClusterRoleList\n> - ClusterRoleBinding\n> - ClusterRoleBindingList\n> - Role\n> - RoleList\n> - RoleBinding\n> - RoleBindingList\n> - Service\n> - DaemonSet\n> - Pod\n> - ReplicationController\n> - ReplicaSet\n> - Deployment\n> - HorizontalPodAutoscaler\n> - StatefulSet\n> - Job\n> - CronJob\n> - Ingress\n> - APIService\n\n[常用参数](https://helm.sh/zh/docs/helm/helm/)\n> - 查看本地仓库：helm repo list\n> - 添加/删除仓库：helm repo add xxx / helm repo remove xxx\n> - 推送/拉取charts：helm cm-push xxx / helm fetch/pull xxx\n> - 安装/卸载charts：helm install xxx /  helm uninstall xxx\n> - 升级/回滚：helm upgrade xxx / helm rollback xxx <revision>\n> - 创建本地自己的charts： helm create xxx\n> - 查看charts 可自定义配置项/获取自定义配置项 ：helm show values / helm get values\n\n\n- 配置跨账号ACR 拉取镜像\n> helm 部署时需要pull image 部署，因此需要配置跨账号ACR 拉取镜像。参考：[跨账号ACR 拉取镜像配置](https://yuque.antfin.com/kifo8h/nee5aa/wgui7o)\n\n\n\n#### 2）Helm 模板与语法编写\n> 详情参考：[Charts 文件格式，模板编写](https://www.qikqiak.com/k8strain/helm/demo/)\n\n- 内置对象\n\n- 基本目录结构内容：Chart.yaml（chart 信息说明） 、Values.yaml（自定义变量） 、charts（子chart目录，依赖）\n\n- templates 模板（实际安装到Kubernetes 集群中的资源定义Yaml 模板文件，如deployment、pod 等）\n   - 资源模板：confimap.yaml、deployment.yaml 等\n   - 命名模板：_helpers.tpl\n\n- 函数和流水线：[函数列表](https://helm.sh/zh/docs/chart_template_guide/function_list/)，[流程控制](https://helm.sh/zh/docs/chart_template_guide/control_structures/)\n\n- 访问文件\n\n\n### 二、测试验证部署app-test\n#### 1）本地安装helm、kubectl（连接Kubernetes 集群）二进制命令\n\n#### 2）初始化配置app-test \n\n- 初始化应用目录：helm create app-test\n\n- 应用app-test 目录结构\n\n{% asset_img helm1.png %}\n\n- 关键配置信息\n```yaml\n# Chart.yaml\napiVersion: v2\nname: app-test\ndescription: application app-test for env daily\ntype: application\nversion: 20211215123042-daily\nappVersion: 20211215123042_daily\n```\n```yaml\n# values.yaml\nreplicaCount: 1\n\nimage:\n  repository: registry-chart-test.cn-hangzhou.cr.aliyuncs.com/ib-ibos/app-test\n  pullPolicy: IfNotPresent\n  tag: \"\"\n\nimagePullSecrets: []\nnameOverride: \"\"\nfullnameOverride: \"\"\n\nserviceAccount:\n  create: false\n  annotations: {}\n  name: \"\"\n\npodAnnotations: {}\n\npodSecurityContext: {}\n\nsecurityContext: {}\n\nservice:\n  type: ClusterIP\n  port: 8080\n  create: false\n\ningress:\n  enabled: false\n  className: \"\"\n  annotations: {}\n  hosts:\n    - host: reos.com.cn\n      paths:\n        - path: /\n          pathType: ImplementationSpecific\n  tls: []\n\nresources: {}\n\nautoscaling:\n  enabled: false\n  minReplicas: 1\n  maxReplicas: 100\n  targetCPUUtilizationPercentage: 80\n\nnodeSelector: {}\n\ntolerations: []\n\naffinity: {}\n```\n\n#### 3）配置镜像仓库，部署应用\n\n- 配置远程ACR 企业版仓库，参考 [Helm安装部署](#ht9xj) 部分。\n\n{% asset_img helm2.png %}\n\n- 部署应用\n   - 执行部署命令\n```bash\nhelm install app-test aliyun-acr-repo/app-test --version 20211228100329-daily --namespace daily-apps\n```\n\n   - 部署结果\n{% asset_img helm3.png %}\n{% asset_img helm4.png %}\n\n- 更新版本\n{% asset_img helm5.png %}\n\n### 三、问题点\n\n- 使用helm 命令安装需本地连接Kubernetes 集群（需提供API Server 公网EIP）\n\n- 与AlicloudEdas 产品兼容问题\n   - 使用helm 部署的应用与Edas 不共通，因此使用helm 部署的无法从Edas 上查看应用的相关信息\n   - Edas 支持将手动部署的Deployment 手动导入，参考：[https://help.aliyun.com/document_detail/202036.html](https://help.aliyun.com/document_detail/202036.html)（自行部署导入Edas 的应用暂未确定是否能完整导入Edas 组件注入的变量）\n\n- 版本控制与镜像拉取\n   - helm 通过配置values 变量值写入或更新 image->repository 的值进行pull 镜像更新，并通过 helm push 推送pull 的镜像配置到私有仓库中。\n   - helm 通过upgrade 与rollback 命令进行已部署应用的升级与回滚功能。\n\n- 与原有CI/CD 配置使用问题\n   - helm 部署只能通过本地更新配置并执行，无法与现有的 CI/CD 流水线进行配合使用，需要进行调整。\n","slug":"helm-deploy","published":1,"updated":"2024-01-21T15:28:43.152Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm0fat8zl000ks0nj53b06id7","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"一、Helm-安装与模板\"><a href=\"#一、Helm-安装与模板\" class=\"headerlink\" title=\"一、Helm 安装与模板\"></a>一、Helm 安装与模板</h3><h4 id=\"1）Helm-安装部署\"><a href=\"#1）Helm-安装部署\" class=\"headerlink\" title=\"1）Helm 安装部署\"></a>1）Helm 安装部署</h4><ul>\n<li><a href=\"https://helm.sh/zh/docs/intro/install/\">安装二进制命令</a>（本地需要连接上kubernetes 集群）</li>\n</ul>\n<span id=\"more\"></span>\n<ul>\n<li>安装Alicloudhelm 插件与操作<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装 Helm 插件</span></span><br><span class=\"line\">helm plugin install https://github.com/AliyunContainerService/helm-acr</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--more--&gt;</span><br><span class=\"line\"><span class=\"comment\"># 配置本地仓库映射</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> HELM_REPO_USERNAME=<span class=\"string\">&#x27;&lt;企业版实例访问凭证中账号&gt;&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> HELM_REPO_PASSWORD=<span class=\"string\">&#x27;&lt;企业版实例访问凭证中密码&gt;&#x27;</span></span><br><span class=\"line\">helm repo add &lt;本地仓库名称&gt; acr://registry-chart-test.cn-hangzhou.cr.aliyuncs.com/&lt;命名空间&gt;/&lt;Chart仓库名称&gt; --username <span class=\"variable\">$&#123;HELM_REPO_USERNAME&#125;</span> --password <span class=\"variable\">$&#123;HELM_REPO_PASSWORD&#125;</span></span><br><span class=\"line\"><span class=\"comment\">#export HELM_REPO_USERNAME=devops@ib_daily</span></span><br><span class=\"line\"><span class=\"comment\">#export HELM_REPO_PASSWORD=2RJPfCgHXroSYQga</span></span><br><span class=\"line\"><span class=\"comment\">#helm repo add aliyun-acr-repo acr://registry-chart-test.cn-hangzhou.cr.aliyuncs.com/chart-test/app-test --username $&#123;HELM_REPO_USERNAME&#125; --password $&#123;HELM_REPO_PASSWORD&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 推送Chart</span></span><br><span class=\"line\"><span class=\"comment\">#本地创建一个 Chart</span></span><br><span class=\"line\">helm create &lt;Chart 名称&gt;</span><br><span class=\"line\"><span class=\"comment\">#helm create app-test</span></span><br><span class=\"line\"><span class=\"comment\">#推送 Chart 目录</span></span><br><span class=\"line\">helm cm-push &lt;Chart 名称&gt; &lt;本地仓库名称&gt;</span><br><span class=\"line\"><span class=\"comment\">#helm cm-push app-test aliyun-acr-repo</span></span><br><span class=\"line\"><span class=\"comment\">#或者推送 Chart 压缩包</span></span><br><span class=\"line\">helm cm-push &lt;Chart 名称&gt;-&lt;Chart 版本&gt;.tgz &lt;本地仓库名称&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 拉取Chart</span></span><br><span class=\"line\"><span class=\"comment\">#从线上Chart 仓库更新本地Chart 索引</span></span><br><span class=\"line\">helm repo update</span><br><span class=\"line\"><span class=\"comment\">#helm repo update aliyun-acr-repo</span></span><br><span class=\"line\"><span class=\"comment\">#拉取Chart</span></span><br><span class=\"line\">helm fetch &lt;本地仓库名称&gt;/&lt;Chart 名称&gt; --version &lt;Chart 版本&gt;</span><br><span class=\"line\"><span class=\"comment\">#helm fetch aliyun-acr-repo/app-test --version=20211228100329-daily</span></span><br><span class=\"line\"><span class=\"comment\">#或者直接安装Chart</span></span><br><span class=\"line\">helm install -f values.yaml &lt;本地仓库名称&gt;/&lt;Chart 名称&gt; --version &lt;Chart 版本&gt;</span><br><span class=\"line\"><span class=\"comment\">#helm install app-test aliyun-acr-repo/app-test --version 20211228100329-daily --namespace daily-apps</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>helm install 操作实际执行按顺序安装资源：</p>\n<ul>\n<li>Namespace</li>\n<li>NetworkPolicy</li>\n<li>ResourceQuota</li>\n<li>LimitRange</li>\n<li>PodSecurityPolicy</li>\n<li>PodDisruptionBudget</li>\n<li>ServiceAccount</li>\n<li>Secret</li>\n<li>SecretList</li>\n<li>ConfigMap</li>\n<li>StorageClass</li>\n<li>PersistentVolume</li>\n<li>PersistentVolumeClaim</li>\n<li>CustomResourceDefinition</li>\n<li>ClusterRole</li>\n<li>ClusterRoleList</li>\n<li>ClusterRoleBinding</li>\n<li>ClusterRoleBindingList</li>\n<li>Role</li>\n<li>RoleList</li>\n<li>RoleBinding</li>\n<li>RoleBindingList</li>\n<li>Service</li>\n<li>DaemonSet</li>\n<li>Pod</li>\n<li>ReplicationController</li>\n<li>ReplicaSet</li>\n<li>Deployment</li>\n<li>HorizontalPodAutoscaler</li>\n<li>StatefulSet</li>\n<li>Job</li>\n<li>CronJob</li>\n<li>Ingress</li>\n<li>APIService</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<p><a href=\"https://helm.sh/zh/docs/helm/helm/\">常用参数</a></p>\n<blockquote>\n<ul>\n<li>查看本地仓库：helm repo list</li>\n<li>添加&#x2F;删除仓库：helm repo add xxx &#x2F; helm repo remove xxx</li>\n<li>推送&#x2F;拉取charts：helm cm-push xxx &#x2F; helm fetch&#x2F;pull xxx</li>\n<li>安装&#x2F;卸载charts：helm install xxx &#x2F;  helm uninstall xxx</li>\n<li>升级&#x2F;回滚：helm upgrade xxx &#x2F; helm rollback xxx <revision></revision></li>\n<li>创建本地自己的charts： helm create xxx</li>\n<li>查看charts 可自定义配置项&#x2F;获取自定义配置项 ：helm show values &#x2F; helm get values</li>\n</ul>\n</blockquote>\n<ul>\n<li>配置跨账号ACR 拉取镜像<blockquote>\n<p>helm 部署时需要pull image 部署，因此需要配置跨账号ACR 拉取镜像。参考：<a href=\"https://yuque.antfin.com/kifo8h/nee5aa/wgui7o\">跨账号ACR 拉取镜像配置</a></p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"2）Helm-模板与语法编写\"><a href=\"#2）Helm-模板与语法编写\" class=\"headerlink\" title=\"2）Helm 模板与语法编写\"></a>2）Helm 模板与语法编写</h4><blockquote>\n<p>详情参考：<a href=\"https://www.qikqiak.com/k8strain/helm/demo/\">Charts 文件格式，模板编写</a></p>\n</blockquote>\n<ul>\n<li><p>内置对象</p>\n</li>\n<li><p>基本目录结构内容：Chart.yaml（chart 信息说明） 、Values.yaml（自定义变量） 、charts（子chart目录，依赖）</p>\n</li>\n<li><p>templates 模板（实际安装到Kubernetes 集群中的资源定义Yaml 模板文件，如deployment、pod 等）</p>\n<ul>\n<li>资源模板：confimap.yaml、deployment.yaml 等</li>\n<li>命名模板：_helpers.tpl</li>\n</ul>\n</li>\n<li><p>函数和流水线：<a href=\"https://helm.sh/zh/docs/chart_template_guide/function_list/\">函数列表</a>，<a href=\"https://helm.sh/zh/docs/chart_template_guide/control_structures/\">流程控制</a></p>\n</li>\n<li><p>访问文件</p>\n</li>\n</ul>\n<h3 id=\"二、测试验证部署app-test\"><a href=\"#二、测试验证部署app-test\" class=\"headerlink\" title=\"二、测试验证部署app-test\"></a>二、测试验证部署app-test</h3><h4 id=\"1）本地安装helm、kubectl（连接Kubernetes-集群）二进制命令\"><a href=\"#1）本地安装helm、kubectl（连接Kubernetes-集群）二进制命令\" class=\"headerlink\" title=\"1）本地安装helm、kubectl（连接Kubernetes 集群）二进制命令\"></a>1）本地安装helm、kubectl（连接Kubernetes 集群）二进制命令</h4><h4 id=\"2）初始化配置app-test\"><a href=\"#2）初始化配置app-test\" class=\"headerlink\" title=\"2）初始化配置app-test\"></a>2）初始化配置app-test</h4><ul>\n<li><p>初始化应用目录：helm create app-test</p>\n</li>\n<li><p>应用app-test 目录结构</p>\n</li>\n</ul>\n<img data-src=\"/posts/ce0f/helm1.png\" class>\n\n<ul>\n<li>关键配置信息<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Chart.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v2</span></span><br><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">app-test</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">application</span> <span class=\"string\">app-test</span> <span class=\"string\">for</span> <span class=\"string\">env</span> <span class=\"string\">daily</span></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">application</span></span><br><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"number\">20211215123042</span><span class=\"string\">-daily</span></span><br><span class=\"line\"><span class=\"attr\">appVersion:</span> <span class=\"string\">20211215123042_daily</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># values.yaml</span></span><br><span class=\"line\"><span class=\"attr\">replicaCount:</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">image:</span></span><br><span class=\"line\">  <span class=\"attr\">repository:</span> <span class=\"string\">registry-chart-test.cn-hangzhou.cr.aliyuncs.com/ib-ibos/app-test</span></span><br><span class=\"line\">  <span class=\"attr\">pullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">  <span class=\"attr\">tag:</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">imagePullSecrets:</span> []</span><br><span class=\"line\"><span class=\"attr\">nameOverride:</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"><span class=\"attr\">fullnameOverride:</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">serviceAccount:</span></span><br><span class=\"line\">  <span class=\"attr\">create:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">annotations:</span> &#123;&#125;</span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">podAnnotations:</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">podSecurityContext:</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">securityContext:</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">service:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">  <span class=\"attr\">create:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">ingress:</span></span><br><span class=\"line\">  <span class=\"attr\">enabled:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">className:</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">annotations:</span> &#123;&#125;</span><br><span class=\"line\">  <span class=\"attr\">hosts:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">host:</span> <span class=\"string\">reos.com.cn</span></span><br><span class=\"line\">      <span class=\"attr\">paths:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">path:</span> <span class=\"string\">/</span></span><br><span class=\"line\">          <span class=\"attr\">pathType:</span> <span class=\"string\">ImplementationSpecific</span></span><br><span class=\"line\">  <span class=\"attr\">tls:</span> []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">resources:</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">autoscaling:</span></span><br><span class=\"line\">  <span class=\"attr\">enabled:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">minReplicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">maxReplicas:</span> <span class=\"number\">100</span></span><br><span class=\"line\">  <span class=\"attr\">targetCPUUtilizationPercentage:</span> <span class=\"number\">80</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">nodeSelector:</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">tolerations:</span> []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">affinity:</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"3）配置镜像仓库，部署应用\"><a href=\"#3）配置镜像仓库，部署应用\" class=\"headerlink\" title=\"3）配置镜像仓库，部署应用\"></a>3）配置镜像仓库，部署应用</h4><ul>\n<li>配置远程ACR 企业版仓库，参考 <a href=\"#ht9xj\">Helm安装部署</a> 部分。</li>\n</ul>\n<img data-src=\"/posts/ce0f/helm2.png\" class>\n\n<ul>\n<li>部署应用<ul>\n<li><p>执行部署命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">helm install app-test aliyun-acr-repo/app-test --version 20211228100329-daily --namespace daily-apps</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>部署结果</p>\n</li>\n</ul>\n</li>\n</ul>\n<img data-src=\"/posts/ce0f/helm3.png\" class>\n<img data-src=\"/posts/ce0f/helm4.png\" class>\n\n<ul>\n<li>更新版本<img data-src=\"/posts/ce0f/helm5.png\" class></li>\n</ul>\n<h3 id=\"三、问题点\"><a href=\"#三、问题点\" class=\"headerlink\" title=\"三、问题点\"></a>三、问题点</h3><ul>\n<li><p>使用helm 命令安装需本地连接Kubernetes 集群（需提供API Server 公网EIP）</p>\n</li>\n<li><p>与AlicloudEdas 产品兼容问题</p>\n<ul>\n<li>使用helm 部署的应用与Edas 不共通，因此使用helm 部署的无法从Edas 上查看应用的相关信息</li>\n<li>Edas 支持将手动部署的Deployment 手动导入，参考：<a href=\"https://help.aliyun.com/document_detail/202036.html\">https://help.aliyun.com/document_detail&#x2F;202036.html</a>（自行部署导入Edas 的应用暂未确定是否能完整导入Edas 组件注入的变量）</li>\n</ul>\n</li>\n<li><p>版本控制与镜像拉取</p>\n<ul>\n<li>helm 通过配置values 变量值写入或更新 image-&gt;repository 的值进行pull 镜像更新，并通过 helm push 推送pull 的镜像配置到私有仓库中。</li>\n<li>helm 通过upgrade 与rollback 命令进行已部署应用的升级与回滚功能。</li>\n</ul>\n</li>\n<li><p>与原有CI&#x2F;CD 配置使用问题</p>\n<ul>\n<li>helm 部署只能通过本地更新配置并执行，无法与现有的 CI&#x2F;CD 流水线进行配合使用，需要进行调整。</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{"footer":"","styles":".post {\n  margin-top: 50px;\n  margin-bottom: 50px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n.headband {\n  display: none;\n}\nbody {\n  background: url(\"/images/background.jpeg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\n.post-block.page {\n  margin-top: 40px;\n}\n.category-all-page {\n  box-shadow: 0px 0px 10px 0px rgba(0,0,0,0.5);\n  background-color: #797d7f;\n  padding: 20px 30px 60px 30px;\n  border-radius: 25px 25px 25px 25px;\n}\n.category-all-title {\n  font-family: Impact;\n  font-size: 24px;\n  color: #0ff;\n}\n.category-list {\n  overflow: auto;\n}\n.category-list li {\n  height: 100%;\n  float: left;\n  border-right: 3px solid #222;\n  padding: 0 20px;\n}\n.category-all ul li {\n  list-style: none !important;\n}\n.category-list li:last-child {\n  border-right: none;\n}\n.category-list li a {\n  font-size: 16px;\n  text-decoration: none;\n  color: #7fff00;\n  font-family: Helvetica, Verdana, sans-serif;\n  -webkit-transition: all 0.5s ease;\n  -moz-transition: all 0.5s ease;\n  -o-transition: all 0.5s ease;\n  -ms-transition: all 0.5s ease;\n  transition: all 0.5s ease;\n}\n.category-list li a:hover {\n  color: #000;\n}\n.category-list li.active a {\n  font-weight: bold;\n  color: #000;\n}\n.tag-cloud a {\n  box-shadow: 0 1px 3px #6f42c1, 0 1px 2px #d9534f;\n  padding: 2px 10px;\n  margin: 8px;\n  background: rgba(193,66,92,0);\n  border-bottom: none;\n  border-radius: 20px;\n}\ncode {\n  background: #555;\n  color: #fff;\n}\n","variables":""}},"length":4171,"excerpt":"<h3 id=\"一、Helm-安装与模板\"><a href=\"#一、Helm-安装与模板\" class=\"headerlink\" title=\"一、Helm 安装与模板\"></a>一、Helm 安装与模板</h3><h4 id=\"1）Helm-安装部署\"><a href=\"#1）Helm-安装部署\" class=\"headerlink\" title=\"1）Helm 安装部署\"></a>1）Helm 安装部署</h4><ul>\n<li><a href=\"https://helm.sh/zh/docs/intro/install/\">安装二进制命令</a>（本地需要连接上kubernetes 集群）</li>\n</ul>","more":"<ul>\n<li>安装Alicloudhelm 插件与操作<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装 Helm 插件</span></span><br><span class=\"line\">helm plugin install https://github.com/AliyunContainerService/helm-acr</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--more--&gt;</span><br><span class=\"line\"><span class=\"comment\"># 配置本地仓库映射</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> HELM_REPO_USERNAME=<span class=\"string\">&#x27;&lt;企业版实例访问凭证中账号&gt;&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> HELM_REPO_PASSWORD=<span class=\"string\">&#x27;&lt;企业版实例访问凭证中密码&gt;&#x27;</span></span><br><span class=\"line\">helm repo add &lt;本地仓库名称&gt; acr://registry-chart-test.cn-hangzhou.cr.aliyuncs.com/&lt;命名空间&gt;/&lt;Chart仓库名称&gt; --username <span class=\"variable\">$&#123;HELM_REPO_USERNAME&#125;</span> --password <span class=\"variable\">$&#123;HELM_REPO_PASSWORD&#125;</span></span><br><span class=\"line\"><span class=\"comment\">#export HELM_REPO_USERNAME=devops@ib_daily</span></span><br><span class=\"line\"><span class=\"comment\">#export HELM_REPO_PASSWORD=2RJPfCgHXroSYQga</span></span><br><span class=\"line\"><span class=\"comment\">#helm repo add aliyun-acr-repo acr://registry-chart-test.cn-hangzhou.cr.aliyuncs.com/chart-test/app-test --username $&#123;HELM_REPO_USERNAME&#125; --password $&#123;HELM_REPO_PASSWORD&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 推送Chart</span></span><br><span class=\"line\"><span class=\"comment\">#本地创建一个 Chart</span></span><br><span class=\"line\">helm create &lt;Chart 名称&gt;</span><br><span class=\"line\"><span class=\"comment\">#helm create app-test</span></span><br><span class=\"line\"><span class=\"comment\">#推送 Chart 目录</span></span><br><span class=\"line\">helm cm-push &lt;Chart 名称&gt; &lt;本地仓库名称&gt;</span><br><span class=\"line\"><span class=\"comment\">#helm cm-push app-test aliyun-acr-repo</span></span><br><span class=\"line\"><span class=\"comment\">#或者推送 Chart 压缩包</span></span><br><span class=\"line\">helm cm-push &lt;Chart 名称&gt;-&lt;Chart 版本&gt;.tgz &lt;本地仓库名称&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 拉取Chart</span></span><br><span class=\"line\"><span class=\"comment\">#从线上Chart 仓库更新本地Chart 索引</span></span><br><span class=\"line\">helm repo update</span><br><span class=\"line\"><span class=\"comment\">#helm repo update aliyun-acr-repo</span></span><br><span class=\"line\"><span class=\"comment\">#拉取Chart</span></span><br><span class=\"line\">helm fetch &lt;本地仓库名称&gt;/&lt;Chart 名称&gt; --version &lt;Chart 版本&gt;</span><br><span class=\"line\"><span class=\"comment\">#helm fetch aliyun-acr-repo/app-test --version=20211228100329-daily</span></span><br><span class=\"line\"><span class=\"comment\">#或者直接安装Chart</span></span><br><span class=\"line\">helm install -f values.yaml &lt;本地仓库名称&gt;/&lt;Chart 名称&gt; --version &lt;Chart 版本&gt;</span><br><span class=\"line\"><span class=\"comment\">#helm install app-test aliyun-acr-repo/app-test --version 20211228100329-daily --namespace daily-apps</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>helm install 操作实际执行按顺序安装资源：</p>\n<ul>\n<li>Namespace</li>\n<li>NetworkPolicy</li>\n<li>ResourceQuota</li>\n<li>LimitRange</li>\n<li>PodSecurityPolicy</li>\n<li>PodDisruptionBudget</li>\n<li>ServiceAccount</li>\n<li>Secret</li>\n<li>SecretList</li>\n<li>ConfigMap</li>\n<li>StorageClass</li>\n<li>PersistentVolume</li>\n<li>PersistentVolumeClaim</li>\n<li>CustomResourceDefinition</li>\n<li>ClusterRole</li>\n<li>ClusterRoleList</li>\n<li>ClusterRoleBinding</li>\n<li>ClusterRoleBindingList</li>\n<li>Role</li>\n<li>RoleList</li>\n<li>RoleBinding</li>\n<li>RoleBindingList</li>\n<li>Service</li>\n<li>DaemonSet</li>\n<li>Pod</li>\n<li>ReplicationController</li>\n<li>ReplicaSet</li>\n<li>Deployment</li>\n<li>HorizontalPodAutoscaler</li>\n<li>StatefulSet</li>\n<li>Job</li>\n<li>CronJob</li>\n<li>Ingress</li>\n<li>APIService</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<p><a href=\"https://helm.sh/zh/docs/helm/helm/\">常用参数</a></p>\n<blockquote>\n<ul>\n<li>查看本地仓库：helm repo list</li>\n<li>添加&#x2F;删除仓库：helm repo add xxx &#x2F; helm repo remove xxx</li>\n<li>推送&#x2F;拉取charts：helm cm-push xxx &#x2F; helm fetch&#x2F;pull xxx</li>\n<li>安装&#x2F;卸载charts：helm install xxx &#x2F;  helm uninstall xxx</li>\n<li>升级&#x2F;回滚：helm upgrade xxx &#x2F; helm rollback xxx <revision></revision></li>\n<li>创建本地自己的charts： helm create xxx</li>\n<li>查看charts 可自定义配置项&#x2F;获取自定义配置项 ：helm show values &#x2F; helm get values</li>\n</ul>\n</blockquote>\n<ul>\n<li>配置跨账号ACR 拉取镜像<blockquote>\n<p>helm 部署时需要pull image 部署，因此需要配置跨账号ACR 拉取镜像。参考：<a href=\"https://yuque.antfin.com/kifo8h/nee5aa/wgui7o\">跨账号ACR 拉取镜像配置</a></p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"2）Helm-模板与语法编写\"><a href=\"#2）Helm-模板与语法编写\" class=\"headerlink\" title=\"2）Helm 模板与语法编写\"></a>2）Helm 模板与语法编写</h4><blockquote>\n<p>详情参考：<a href=\"https://www.qikqiak.com/k8strain/helm/demo/\">Charts 文件格式，模板编写</a></p>\n</blockquote>\n<ul>\n<li><p>内置对象</p>\n</li>\n<li><p>基本目录结构内容：Chart.yaml（chart 信息说明） 、Values.yaml（自定义变量） 、charts（子chart目录，依赖）</p>\n</li>\n<li><p>templates 模板（实际安装到Kubernetes 集群中的资源定义Yaml 模板文件，如deployment、pod 等）</p>\n<ul>\n<li>资源模板：confimap.yaml、deployment.yaml 等</li>\n<li>命名模板：_helpers.tpl</li>\n</ul>\n</li>\n<li><p>函数和流水线：<a href=\"https://helm.sh/zh/docs/chart_template_guide/function_list/\">函数列表</a>，<a href=\"https://helm.sh/zh/docs/chart_template_guide/control_structures/\">流程控制</a></p>\n</li>\n<li><p>访问文件</p>\n</li>\n</ul>\n<h3 id=\"二、测试验证部署app-test\"><a href=\"#二、测试验证部署app-test\" class=\"headerlink\" title=\"二、测试验证部署app-test\"></a>二、测试验证部署app-test</h3><h4 id=\"1）本地安装helm、kubectl（连接Kubernetes-集群）二进制命令\"><a href=\"#1）本地安装helm、kubectl（连接Kubernetes-集群）二进制命令\" class=\"headerlink\" title=\"1）本地安装helm、kubectl（连接Kubernetes 集群）二进制命令\"></a>1）本地安装helm、kubectl（连接Kubernetes 集群）二进制命令</h4><h4 id=\"2）初始化配置app-test\"><a href=\"#2）初始化配置app-test\" class=\"headerlink\" title=\"2）初始化配置app-test\"></a>2）初始化配置app-test</h4><ul>\n<li><p>初始化应用目录：helm create app-test</p>\n</li>\n<li><p>应用app-test 目录结构</p>\n</li>\n</ul>\n<img data-src=\"/posts/ce0f/helm1.png\" class>\n\n<ul>\n<li>关键配置信息<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Chart.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v2</span></span><br><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">app-test</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">application</span> <span class=\"string\">app-test</span> <span class=\"string\">for</span> <span class=\"string\">env</span> <span class=\"string\">daily</span></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">application</span></span><br><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"number\">20211215123042</span><span class=\"string\">-daily</span></span><br><span class=\"line\"><span class=\"attr\">appVersion:</span> <span class=\"string\">20211215123042_daily</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># values.yaml</span></span><br><span class=\"line\"><span class=\"attr\">replicaCount:</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">image:</span></span><br><span class=\"line\">  <span class=\"attr\">repository:</span> <span class=\"string\">registry-chart-test.cn-hangzhou.cr.aliyuncs.com/ib-ibos/app-test</span></span><br><span class=\"line\">  <span class=\"attr\">pullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">  <span class=\"attr\">tag:</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">imagePullSecrets:</span> []</span><br><span class=\"line\"><span class=\"attr\">nameOverride:</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"><span class=\"attr\">fullnameOverride:</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">serviceAccount:</span></span><br><span class=\"line\">  <span class=\"attr\">create:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">annotations:</span> &#123;&#125;</span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">podAnnotations:</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">podSecurityContext:</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">securityContext:</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">service:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">  <span class=\"attr\">create:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">ingress:</span></span><br><span class=\"line\">  <span class=\"attr\">enabled:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">className:</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">annotations:</span> &#123;&#125;</span><br><span class=\"line\">  <span class=\"attr\">hosts:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">host:</span> <span class=\"string\">reos.com.cn</span></span><br><span class=\"line\">      <span class=\"attr\">paths:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">path:</span> <span class=\"string\">/</span></span><br><span class=\"line\">          <span class=\"attr\">pathType:</span> <span class=\"string\">ImplementationSpecific</span></span><br><span class=\"line\">  <span class=\"attr\">tls:</span> []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">resources:</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">autoscaling:</span></span><br><span class=\"line\">  <span class=\"attr\">enabled:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">minReplicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">maxReplicas:</span> <span class=\"number\">100</span></span><br><span class=\"line\">  <span class=\"attr\">targetCPUUtilizationPercentage:</span> <span class=\"number\">80</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">nodeSelector:</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">tolerations:</span> []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">affinity:</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"3）配置镜像仓库，部署应用\"><a href=\"#3）配置镜像仓库，部署应用\" class=\"headerlink\" title=\"3）配置镜像仓库，部署应用\"></a>3）配置镜像仓库，部署应用</h4><ul>\n<li>配置远程ACR 企业版仓库，参考 <a href=\"#ht9xj\">Helm安装部署</a> 部分。</li>\n</ul>\n<img data-src=\"/posts/ce0f/helm2.png\" class>\n\n<ul>\n<li>部署应用<ul>\n<li><p>执行部署命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">helm install app-test aliyun-acr-repo/app-test --version 20211228100329-daily --namespace daily-apps</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>部署结果</p>\n</li>\n</ul>\n</li>\n</ul>\n<img data-src=\"/posts/ce0f/helm3.png\" class>\n<img data-src=\"/posts/ce0f/helm4.png\" class>\n\n<ul>\n<li>更新版本<img data-src=\"/posts/ce0f/helm5.png\" class></li>\n</ul>\n<h3 id=\"三、问题点\"><a href=\"#三、问题点\" class=\"headerlink\" title=\"三、问题点\"></a>三、问题点</h3><ul>\n<li><p>使用helm 命令安装需本地连接Kubernetes 集群（需提供API Server 公网EIP）</p>\n</li>\n<li><p>与AlicloudEdas 产品兼容问题</p>\n<ul>\n<li>使用helm 部署的应用与Edas 不共通，因此使用helm 部署的无法从Edas 上查看应用的相关信息</li>\n<li>Edas 支持将手动部署的Deployment 手动导入，参考：<a href=\"https://help.aliyun.com/document_detail/202036.html\">https://help.aliyun.com/document_detail&#x2F;202036.html</a>（自行部署导入Edas 的应用暂未确定是否能完整导入Edas 组件注入的变量）</li>\n</ul>\n</li>\n<li><p>版本控制与镜像拉取</p>\n<ul>\n<li>helm 通过配置values 变量值写入或更新 image-&gt;repository 的值进行pull 镜像更新，并通过 helm push 推送pull 的镜像配置到私有仓库中。</li>\n<li>helm 通过upgrade 与rollback 命令进行已部署应用的升级与回滚功能。</li>\n</ul>\n</li>\n<li><p>与原有CI&#x2F;CD 配置使用问题</p>\n<ul>\n<li>helm 部署只能通过本地更新配置并执行，无法与现有的 CI&#x2F;CD 流水线进行配合使用，需要进行调整。</li>\n</ul>\n</li>\n</ul>"},{"title":"Kubernetes & ACK 学习记录","abbrlink":"754e","date":"2022-05-31T15:04:28.000Z","_content":"### 一、ACK集群网络规划\n[https://help.aliyun.com/document_detail/86500.html](https://help.aliyun.com/document_detail/86500.html)\n\n### 二、RBAC授权\n[https://yuque.antfin.com/kifo8h/nee5aa/mvx5t5](https://yuque.antfin.com/kifo8h/nee5aa/mvx5t5)\n\n### 三、网络\n#### 容器网络CNI\n[https://help.aliyun.com/document_detail/195424.html](https://help.aliyun.com/document_detail/195424.html)\n\n<!--more-->\n\n#### Service：将一组容器暴露访问接入点，可负载均衡\n\n- **ClusterIP**：在集群内部IP上公开服务。选择此值使服务只能从集群中访问。（默认创建的 ServiceType）\n\n- **NodePort**：在每个Node的IP上公开静态端口（NodePort）服务。将自动创建NodePort服务到ClusterIP服务的路由。可以通过请求：来从群集外部请求NodePort服务。\n\n- **LoadBalancer**：使用云提供商的负载均衡器在外部公开服务。将自动创建外部负载均衡器到NodePort和ClusterIP服务的路由\n\n- **Headless Service**：在Service属性中指定clusterIP字段为None类型。采用Headless Service类型后，Service将没有固定的虚拟IP地址，客户端访问Service的域名时会通过DNS返回所有的后端Pod实例的IP地址，客户端需要采用DNS负载均衡来实现对后端的负载均衡\n\n- **ExternalName**：将集群外部的域名映射到集群内部的Service上，例如将外部的数据库域名映射到集群内部的Service名，那么就能在集群内部通过Service名直接访问。\n\n> **集群信息：**\n> - 集群CIDR（Master、Node ECS实例IP）：172.16.0.0/16 \n> - Pod CIDR：10.16.0.0/12\n> - Service CIDR：10.32.0.0/16\n> \n> **Service信息：**\n> - 暴露ClusterIP：10.32.230.55\n> - 内部端点：reos-app-file-base-svc:80 TCP\n> \n**Pod 信息（两个副本）：**\n> - IP：10.16.1.41、10.16.3.227\n> - 容器内部启动端口：8080\n> \n**NodePort信息（两个Node节点、使用ClusterIP模式时没有该信息）：**\n> - NodeIP：172.16.9.150、172.16.9.64\n> - 公开的静态端口：30152、30144\n> \n**LoadBanlancer 信息（公网或私网）：**\n> - 暴露公网IP：112.124.13.114\n> - 外部端点：112.124.13.114:80\n> \n> **此时，可通过四种方式进行应用的请求（最终流量到达一致，都会到容器内部）：**\n> 1. 集群内部请求 ServiceIP：10.32.230.55:80 或 reos-app-file-base-svc:80（解析需Coredns组件）\n> 1. 集群内部请求 PodIP（随时变化，一般不使用）：10.16.1.41:8080 或 10.16.3.227:8080\n> 1. 集群内部或外部请求 NodeIP：172.16.9.150:30152 或 172.16.9.64:30144\n> 1. 集群内部或外部请求 SLB IP：112.124.13.114:80 （注意集群内部访问时要修改外部策略 local --> Cluster）\n> \n> **查看端点信息：kubectl get endpoints/xxxxx -owide**\n{% asset_img k8s1.png %}\n\n\n#### Ingress：将集群内的 Service 对外暴露7层的访问接入点\n如：前后端使用 /static/ 、 /apis/ 的不同 URL ，使用 Ingress 匹配规则并进行对应后端的反向代理\n{% asset_img k8s2.png %}\n\n#### Coredns：服务发现DNS，实现不同部署环境访问同样的访问入口\n\n   - 通过 Service 的服务名解析出 ClusterIP\n   - 通过 StatefulSet 的 Pod 名解析出 Pod 的 IP\n\n#### 其他\n\n- 相关Alicloud资源：[VPC](https://help.aliyun.com/product/27706.html)、[SLB](https://help.aliyun.com/product/27537.html)\n- [Terway 与 Flannel对比](https://help.aliyun.com/document_detail/97467.html)\n\n### 四、存储\n{% asset_img k8s3.png %}\n#### 容器存储接口CSI-Plugin 组件\n\n- 云盘存储卷\n- 容器网络文件系统\n- NAS 存储卷\n- OSS 存储卷\n- CPFS 存储卷\n- 本地存储卷\n- 容器存储监控&运维\n\n#### 存储FlexVolume 组件\n\n- 云盘存储卷\n- NAS 存储卷\n- OSS 存储卷\n- CPFS 存储卷\n- 持久化存储卷声明\n\n### 五、应用\n#### 工作负载\n\n- 无状态工作 Deployment\n- 有状态工作 StatefulSet\n   - 特性：Pod 一致性、稳定的持久化存储、稳定的网络标志（hostname）、稳定的次序（副本的数字序号）\n- 守护进程集 DaemenSet\n   - 保证每个节点上都运行一个容器副本\n   - 部署集群日志、监控或其他系统管理应用\n- 任务 Job\n   - 仅执行一次性任务，保证批处理任务一个或多个 Pod 成功结束\n   - 支持的Job类型：非并行、固定结束次数、工作队列并行Job、固定结束次数的并行Job\n- 定时任务 CronJob\n   - 执行周期性和重复性任务（如备份操作或发送邮件），通过时间调度\n- 容器组\n   - Pod：最小部署单元，由单个容器（实际docker 容器）或几个紧耦合的容器组成\n- 自定义资源\n   - 自定义资源定义拓展 Kubernetes API\n   - 查看集群中所有API 组和包含的资源类型\n\n#### 镜像（ACR仓库）\n\n- 镜像签名组件：kritis-validation-hook\n- 镜像免密拉取组件：aliyun-acr-credential-helper \n\n#### 配置项 Configmap 与保密字典 Secret\n\n- 配置项管理和使用\n   - 控制台/YAML  创建管理Configmap 资源\n   - 使用：设置Pod 环境变量、设置命令行参数、数据卷中使用\n- 保密字典管理和使用\n   - 控制台/YAML 创建管理Secret 资源\n   - 使用：设置Pod 环境变量、数据卷中使用\n\n#### 应用调度与部署\n\n- 调度应用Pod 至指定节点：通过设置节点**标签**，配置nodeSelector 强制约束Pod 调度到指定节点（控制台给节点添加标签，然后Pod 启动的YAML 模板 spec --> nodeSelector --> gourp 配置为新增的标签名）\n- Descheduler 组件对集群Pod 调度优化（通过策略设置）\n   - 删除重复Pod，确保只有一个Pod 与同一节点运行的ReplicaSet、Replication Controller、StatefulSet、Job 关联\n   - 删除违反Pod 间反亲和性的Pod\n   - 驱逐其他节点Pod 到未充分利用的节点\n   - 删除重启次数过多的Pod\n- 应用触发器重新部署应用：控制台生成触发器URL，通过请求URL 触发重新部署（可通过curl 或集成开发语言）\n- Helm 应用部署\n   - Chart：Helm包，包含运行应用所需的镜像、依赖和资源定义、集群中服务定义，类似APT 的dpkg 或YUM 的rpm 文件。\n   - Release：运行Chart 的实例。同一集群Chart 可以安装多次，每次安装都会创建一个release（如一个MySQL Chart 安装两次，就会在服务器上产生两个release 版本的数据库）。\n   - Repository： 用于发布和存储Chart 的存储库。\n   - Helm 组件：Helm CLI 客户端工具、Tiller 服务端组件、Repository 存储库（HTTP协议访问）。\n- 控制台方式/YAML方式 部署、发布和监控应用\n\n#### 使用AHAS对应用进行高可用防护\n[https://help.aliyun.com/document_detail/193575.html](https://help.aliyun.com/document_detail/193575.html)\n\n\n### 六、组件\n#### 核心组件\n\n- 系统组件\n   - Kube API Server：集群总线和入口网关。\n   - Kube Controller Manager：集群内部资源管理器。\n   - Cloud Controller Manager：提供集群与Alicloud基础产品对接能力，如 CLB、VPC等。\n#### 应用管理\n\n- 可选组件\n   - appcenter：提供统一管理多集群应用部署和应用生命周期的应用中心组件。\n   - progressive-delivery-tool：提供应用渐进式灰度发布的组件。\n#### 日志与监控\n\n- 系统组件\n   - alicloud-monitor-controller：ACK提供对接云监控的系统组件。\n   - metrics-server：ACK基于社区开源监控组件进行改造和增强的监控采集和离线组件，并提供Metrics API进行数据消费，提供HPA的能力。\n- 可选组件\n   - ack-node-problem-detector：ACK基于社区开源项目进行改造和增强的集群节点异常事件监控组件，以及对接第三方监控平台功能的组件。\n   - ags-metrics-collector：为基因计算客户使用的监控服务组件，可以通过该组件监控基因工作流中各个节点资源使用的详细信息。\n   - ack-arms-prometheus：使用ARMS Prometheus实现容器服务集群监控。\n   - logtail-ds：使用日志服务采集Kubernetes容器日志。\n   - logtail-windows：ACK集群上使用的容器日志收集插件，用于在Alicloud上配合SLS服务对Windows容器进行日志收集。\n#### 存储\n\n- 可选组件\n   - csi-plugin：支持数据卷的挂载、卸载功能。创建集群时，如果选择CSI插件实现Alicloud存储的接入能力的话，默认安装该组件。\n   - csi-provisioner：支持数据卷的自动创建能力。创建集群时，如果选择CSI插件实现Alicloud存储的接入能力的话，默认安装该组件。\n   - storage-operator：用于管理存储组件的生命周期。\n   - alicloud-disk-controller：支持自动创建云盘卷。\n   - Flexvolume：社区较早实现的存储卷扩展机制。Flexvolume支持数据卷的挂载、卸载功能。创建集群时，如果选择Flexvolume插件实现Alicloud存储的接入能力的话，默认安装该组件。\n\n#### 网络\n\n- 系统组件\n   - CoreDNS：ACK集群中默认采用的DNS服务发现插件，其遵循Kubernetes DNS-Based Service Discovery规范。\n   - Nginx Ingress Controller：Nginx Ingress Controller解析Ingress的转发规则。Ingress Controller收到请求，匹配Ingress转发规则转发到后端Service。\n   - managed-kube-proxy-windows：ACK托管版集群上使用的容器化kube-proxy，用于管理Windows节点上Service的访问入口，包括集群内Pod到Service的访问和集群外访问Service。\n- 可选组件\n   - Terway :  Alicloud开源的基于专有网络VPC的容器网络接口CNI插件，支持基于Kubernetes标准的网络策略（NetworkPolicy）来定义容器间的访问策略。创建集群时，如果选择Terway网络插件实现集群内部网络互通的话，默认安装该组件。\n   - Flannel：容器网络接口CNI插件，在Alicloud上使用的Flannel网络模式采用AlicloudVPC模式。创建集群时，如果选择Flannel网络插件实现集群内部网络互通的话，默认安装该组件。\n   - ACK NodeLocal DNSCache：基于社区开源项目NodeLocal DNSCache的一套DNS本地缓存解决方案。\n   - kube-flannel-ds-windows：ACK托管版集群上使用的容器网络插件，用于构建适合Windows容器通讯的L2Bridge集群网络。\n\n{% asset_img k8s4.png %}\n\n#### [安全](https://help.aliyun.com/document_detail/277412.html#title-nq4-jps-k41)\n#### [其他](https://help.aliyun.com/document_detail/277412.html#title-iib-fx3-2hl)\n\n### 七、其他\n#### [Kubernetes 集群 NetworkPolicy 策略](https://yuque.antfin.com/kifo8h/nee5aa/bzg9vq)\n\n- Pod 和 Pod 通信通过三个标识符组合来辨识：\n\n1、其他被允许的 Pods（Pod 无法阻塞自身的访问）\n2、被允许的 namespace\n3、IP 组块 （Pod 本身所在的 Node 和 Pod  IP通信默认允许通信）\n\n- 默认情况下，Pod 非隔离。 被 NetworkPolicy 选中进入隔离状态。\n- NetworkPolicy 策略不会冲突，累积策略。多个策略作用于一个Pod时，Pod 的入站/出站策略取所有策略的并集\n- 两个 Pod 之间通信时，需要源端Pod上的出站（Egress）规则和目标端 Pod 上的入站（Ingress）规则都要允许该流量。\n- ACK只支持 Terway 网络模式，不支持 Flannel 网络模式\n\n","source":"_posts/k8s-ack-learn.md","raw":"---\ntitle: Kubernetes & ACK 学习记录\ncategories:\n  - CNCF\ntags:\n  - Kubernetes\n  - Alicloud\nabbrlink: 754e\ndate: 2022-05-31 23:04:28\n---\n### 一、ACK集群网络规划\n[https://help.aliyun.com/document_detail/86500.html](https://help.aliyun.com/document_detail/86500.html)\n\n### 二、RBAC授权\n[https://yuque.antfin.com/kifo8h/nee5aa/mvx5t5](https://yuque.antfin.com/kifo8h/nee5aa/mvx5t5)\n\n### 三、网络\n#### 容器网络CNI\n[https://help.aliyun.com/document_detail/195424.html](https://help.aliyun.com/document_detail/195424.html)\n\n<!--more-->\n\n#### Service：将一组容器暴露访问接入点，可负载均衡\n\n- **ClusterIP**：在集群内部IP上公开服务。选择此值使服务只能从集群中访问。（默认创建的 ServiceType）\n\n- **NodePort**：在每个Node的IP上公开静态端口（NodePort）服务。将自动创建NodePort服务到ClusterIP服务的路由。可以通过请求：来从群集外部请求NodePort服务。\n\n- **LoadBalancer**：使用云提供商的负载均衡器在外部公开服务。将自动创建外部负载均衡器到NodePort和ClusterIP服务的路由\n\n- **Headless Service**：在Service属性中指定clusterIP字段为None类型。采用Headless Service类型后，Service将没有固定的虚拟IP地址，客户端访问Service的域名时会通过DNS返回所有的后端Pod实例的IP地址，客户端需要采用DNS负载均衡来实现对后端的负载均衡\n\n- **ExternalName**：将集群外部的域名映射到集群内部的Service上，例如将外部的数据库域名映射到集群内部的Service名，那么就能在集群内部通过Service名直接访问。\n\n> **集群信息：**\n> - 集群CIDR（Master、Node ECS实例IP）：172.16.0.0/16 \n> - Pod CIDR：10.16.0.0/12\n> - Service CIDR：10.32.0.0/16\n> \n> **Service信息：**\n> - 暴露ClusterIP：10.32.230.55\n> - 内部端点：reos-app-file-base-svc:80 TCP\n> \n**Pod 信息（两个副本）：**\n> - IP：10.16.1.41、10.16.3.227\n> - 容器内部启动端口：8080\n> \n**NodePort信息（两个Node节点、使用ClusterIP模式时没有该信息）：**\n> - NodeIP：172.16.9.150、172.16.9.64\n> - 公开的静态端口：30152、30144\n> \n**LoadBanlancer 信息（公网或私网）：**\n> - 暴露公网IP：112.124.13.114\n> - 外部端点：112.124.13.114:80\n> \n> **此时，可通过四种方式进行应用的请求（最终流量到达一致，都会到容器内部）：**\n> 1. 集群内部请求 ServiceIP：10.32.230.55:80 或 reos-app-file-base-svc:80（解析需Coredns组件）\n> 1. 集群内部请求 PodIP（随时变化，一般不使用）：10.16.1.41:8080 或 10.16.3.227:8080\n> 1. 集群内部或外部请求 NodeIP：172.16.9.150:30152 或 172.16.9.64:30144\n> 1. 集群内部或外部请求 SLB IP：112.124.13.114:80 （注意集群内部访问时要修改外部策略 local --> Cluster）\n> \n> **查看端点信息：kubectl get endpoints/xxxxx -owide**\n{% asset_img k8s1.png %}\n\n\n#### Ingress：将集群内的 Service 对外暴露7层的访问接入点\n如：前后端使用 /static/ 、 /apis/ 的不同 URL ，使用 Ingress 匹配规则并进行对应后端的反向代理\n{% asset_img k8s2.png %}\n\n#### Coredns：服务发现DNS，实现不同部署环境访问同样的访问入口\n\n   - 通过 Service 的服务名解析出 ClusterIP\n   - 通过 StatefulSet 的 Pod 名解析出 Pod 的 IP\n\n#### 其他\n\n- 相关Alicloud资源：[VPC](https://help.aliyun.com/product/27706.html)、[SLB](https://help.aliyun.com/product/27537.html)\n- [Terway 与 Flannel对比](https://help.aliyun.com/document_detail/97467.html)\n\n### 四、存储\n{% asset_img k8s3.png %}\n#### 容器存储接口CSI-Plugin 组件\n\n- 云盘存储卷\n- 容器网络文件系统\n- NAS 存储卷\n- OSS 存储卷\n- CPFS 存储卷\n- 本地存储卷\n- 容器存储监控&运维\n\n#### 存储FlexVolume 组件\n\n- 云盘存储卷\n- NAS 存储卷\n- OSS 存储卷\n- CPFS 存储卷\n- 持久化存储卷声明\n\n### 五、应用\n#### 工作负载\n\n- 无状态工作 Deployment\n- 有状态工作 StatefulSet\n   - 特性：Pod 一致性、稳定的持久化存储、稳定的网络标志（hostname）、稳定的次序（副本的数字序号）\n- 守护进程集 DaemenSet\n   - 保证每个节点上都运行一个容器副本\n   - 部署集群日志、监控或其他系统管理应用\n- 任务 Job\n   - 仅执行一次性任务，保证批处理任务一个或多个 Pod 成功结束\n   - 支持的Job类型：非并行、固定结束次数、工作队列并行Job、固定结束次数的并行Job\n- 定时任务 CronJob\n   - 执行周期性和重复性任务（如备份操作或发送邮件），通过时间调度\n- 容器组\n   - Pod：最小部署单元，由单个容器（实际docker 容器）或几个紧耦合的容器组成\n- 自定义资源\n   - 自定义资源定义拓展 Kubernetes API\n   - 查看集群中所有API 组和包含的资源类型\n\n#### 镜像（ACR仓库）\n\n- 镜像签名组件：kritis-validation-hook\n- 镜像免密拉取组件：aliyun-acr-credential-helper \n\n#### 配置项 Configmap 与保密字典 Secret\n\n- 配置项管理和使用\n   - 控制台/YAML  创建管理Configmap 资源\n   - 使用：设置Pod 环境变量、设置命令行参数、数据卷中使用\n- 保密字典管理和使用\n   - 控制台/YAML 创建管理Secret 资源\n   - 使用：设置Pod 环境变量、数据卷中使用\n\n#### 应用调度与部署\n\n- 调度应用Pod 至指定节点：通过设置节点**标签**，配置nodeSelector 强制约束Pod 调度到指定节点（控制台给节点添加标签，然后Pod 启动的YAML 模板 spec --> nodeSelector --> gourp 配置为新增的标签名）\n- Descheduler 组件对集群Pod 调度优化（通过策略设置）\n   - 删除重复Pod，确保只有一个Pod 与同一节点运行的ReplicaSet、Replication Controller、StatefulSet、Job 关联\n   - 删除违反Pod 间反亲和性的Pod\n   - 驱逐其他节点Pod 到未充分利用的节点\n   - 删除重启次数过多的Pod\n- 应用触发器重新部署应用：控制台生成触发器URL，通过请求URL 触发重新部署（可通过curl 或集成开发语言）\n- Helm 应用部署\n   - Chart：Helm包，包含运行应用所需的镜像、依赖和资源定义、集群中服务定义，类似APT 的dpkg 或YUM 的rpm 文件。\n   - Release：运行Chart 的实例。同一集群Chart 可以安装多次，每次安装都会创建一个release（如一个MySQL Chart 安装两次，就会在服务器上产生两个release 版本的数据库）。\n   - Repository： 用于发布和存储Chart 的存储库。\n   - Helm 组件：Helm CLI 客户端工具、Tiller 服务端组件、Repository 存储库（HTTP协议访问）。\n- 控制台方式/YAML方式 部署、发布和监控应用\n\n#### 使用AHAS对应用进行高可用防护\n[https://help.aliyun.com/document_detail/193575.html](https://help.aliyun.com/document_detail/193575.html)\n\n\n### 六、组件\n#### 核心组件\n\n- 系统组件\n   - Kube API Server：集群总线和入口网关。\n   - Kube Controller Manager：集群内部资源管理器。\n   - Cloud Controller Manager：提供集群与Alicloud基础产品对接能力，如 CLB、VPC等。\n#### 应用管理\n\n- 可选组件\n   - appcenter：提供统一管理多集群应用部署和应用生命周期的应用中心组件。\n   - progressive-delivery-tool：提供应用渐进式灰度发布的组件。\n#### 日志与监控\n\n- 系统组件\n   - alicloud-monitor-controller：ACK提供对接云监控的系统组件。\n   - metrics-server：ACK基于社区开源监控组件进行改造和增强的监控采集和离线组件，并提供Metrics API进行数据消费，提供HPA的能力。\n- 可选组件\n   - ack-node-problem-detector：ACK基于社区开源项目进行改造和增强的集群节点异常事件监控组件，以及对接第三方监控平台功能的组件。\n   - ags-metrics-collector：为基因计算客户使用的监控服务组件，可以通过该组件监控基因工作流中各个节点资源使用的详细信息。\n   - ack-arms-prometheus：使用ARMS Prometheus实现容器服务集群监控。\n   - logtail-ds：使用日志服务采集Kubernetes容器日志。\n   - logtail-windows：ACK集群上使用的容器日志收集插件，用于在Alicloud上配合SLS服务对Windows容器进行日志收集。\n#### 存储\n\n- 可选组件\n   - csi-plugin：支持数据卷的挂载、卸载功能。创建集群时，如果选择CSI插件实现Alicloud存储的接入能力的话，默认安装该组件。\n   - csi-provisioner：支持数据卷的自动创建能力。创建集群时，如果选择CSI插件实现Alicloud存储的接入能力的话，默认安装该组件。\n   - storage-operator：用于管理存储组件的生命周期。\n   - alicloud-disk-controller：支持自动创建云盘卷。\n   - Flexvolume：社区较早实现的存储卷扩展机制。Flexvolume支持数据卷的挂载、卸载功能。创建集群时，如果选择Flexvolume插件实现Alicloud存储的接入能力的话，默认安装该组件。\n\n#### 网络\n\n- 系统组件\n   - CoreDNS：ACK集群中默认采用的DNS服务发现插件，其遵循Kubernetes DNS-Based Service Discovery规范。\n   - Nginx Ingress Controller：Nginx Ingress Controller解析Ingress的转发规则。Ingress Controller收到请求，匹配Ingress转发规则转发到后端Service。\n   - managed-kube-proxy-windows：ACK托管版集群上使用的容器化kube-proxy，用于管理Windows节点上Service的访问入口，包括集群内Pod到Service的访问和集群外访问Service。\n- 可选组件\n   - Terway :  Alicloud开源的基于专有网络VPC的容器网络接口CNI插件，支持基于Kubernetes标准的网络策略（NetworkPolicy）来定义容器间的访问策略。创建集群时，如果选择Terway网络插件实现集群内部网络互通的话，默认安装该组件。\n   - Flannel：容器网络接口CNI插件，在Alicloud上使用的Flannel网络模式采用AlicloudVPC模式。创建集群时，如果选择Flannel网络插件实现集群内部网络互通的话，默认安装该组件。\n   - ACK NodeLocal DNSCache：基于社区开源项目NodeLocal DNSCache的一套DNS本地缓存解决方案。\n   - kube-flannel-ds-windows：ACK托管版集群上使用的容器网络插件，用于构建适合Windows容器通讯的L2Bridge集群网络。\n\n{% asset_img k8s4.png %}\n\n#### [安全](https://help.aliyun.com/document_detail/277412.html#title-nq4-jps-k41)\n#### [其他](https://help.aliyun.com/document_detail/277412.html#title-iib-fx3-2hl)\n\n### 七、其他\n#### [Kubernetes 集群 NetworkPolicy 策略](https://yuque.antfin.com/kifo8h/nee5aa/bzg9vq)\n\n- Pod 和 Pod 通信通过三个标识符组合来辨识：\n\n1、其他被允许的 Pods（Pod 无法阻塞自身的访问）\n2、被允许的 namespace\n3、IP 组块 （Pod 本身所在的 Node 和 Pod  IP通信默认允许通信）\n\n- 默认情况下，Pod 非隔离。 被 NetworkPolicy 选中进入隔离状态。\n- NetworkPolicy 策略不会冲突，累积策略。多个策略作用于一个Pod时，Pod 的入站/出站策略取所有策略的并集\n- 两个 Pod 之间通信时，需要源端Pod上的出站（Egress）规则和目标端 Pod 上的入站（Ingress）规则都要允许该流量。\n- ACK只支持 Terway 网络模式，不支持 Flannel 网络模式\n\n","slug":"k8s-ack-learn","published":1,"updated":"2024-01-21T15:28:43.153Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm0fat8zm000ms0njbhzpcuxw","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"一、ACK集群网络规划\"><a href=\"#一、ACK集群网络规划\" class=\"headerlink\" title=\"一、ACK集群网络规划\"></a>一、ACK集群网络规划</h3><p><a href=\"https://help.aliyun.com/document_detail/86500.html\">https://help.aliyun.com/document_detail&#x2F;86500.html</a></p>\n<h3 id=\"二、RBAC授权\"><a href=\"#二、RBAC授权\" class=\"headerlink\" title=\"二、RBAC授权\"></a>二、RBAC授权</h3><p><a href=\"https://yuque.antfin.com/kifo8h/nee5aa/mvx5t5\">https://yuque.antfin.com/kifo8h/nee5aa/mvx5t5</a></p>\n<h3 id=\"三、网络\"><a href=\"#三、网络\" class=\"headerlink\" title=\"三、网络\"></a>三、网络</h3><h4 id=\"容器网络CNI\"><a href=\"#容器网络CNI\" class=\"headerlink\" title=\"容器网络CNI\"></a>容器网络CNI</h4><p><a href=\"https://help.aliyun.com/document_detail/195424.html\">https://help.aliyun.com/document_detail&#x2F;195424.html</a></p>\n<span id=\"more\"></span>\n\n<h4 id=\"Service：将一组容器暴露访问接入点，可负载均衡\"><a href=\"#Service：将一组容器暴露访问接入点，可负载均衡\" class=\"headerlink\" title=\"Service：将一组容器暴露访问接入点，可负载均衡\"></a>Service：将一组容器暴露访问接入点，可负载均衡</h4><ul>\n<li><p><strong>ClusterIP</strong>：在集群内部IP上公开服务。选择此值使服务只能从集群中访问。（默认创建的 ServiceType）</p>\n</li>\n<li><p><strong>NodePort</strong>：在每个Node的IP上公开静态端口（NodePort）服务。将自动创建NodePort服务到ClusterIP服务的路由。可以通过请求：来从群集外部请求NodePort服务。</p>\n</li>\n<li><p><strong>LoadBalancer</strong>：使用云提供商的负载均衡器在外部公开服务。将自动创建外部负载均衡器到NodePort和ClusterIP服务的路由</p>\n</li>\n<li><p><strong>Headless Service</strong>：在Service属性中指定clusterIP字段为None类型。采用Headless Service类型后，Service将没有固定的虚拟IP地址，客户端访问Service的域名时会通过DNS返回所有的后端Pod实例的IP地址，客户端需要采用DNS负载均衡来实现对后端的负载均衡</p>\n</li>\n<li><p><strong>ExternalName</strong>：将集群外部的域名映射到集群内部的Service上，例如将外部的数据库域名映射到集群内部的Service名，那么就能在集群内部通过Service名直接访问。</p>\n</li>\n</ul>\n<blockquote>\n<p><strong>集群信息：</strong></p>\n<ul>\n<li>集群CIDR（Master、Node ECS实例IP）：172.16.0.0&#x2F;16 </li>\n<li>Pod CIDR：10.16.0.0&#x2F;12</li>\n<li>Service CIDR：10.32.0.0&#x2F;16</li>\n</ul>\n<p><strong>Service信息：</strong></p>\n<ul>\n<li>暴露ClusterIP：10.32.230.55</li>\n<li>内部端点：reos-app-file-base-svc:80 TCP</li>\n</ul>\n</blockquote>\n<p><strong>Pod 信息（两个副本）：</strong></p>\n<blockquote>\n<ul>\n<li>IP：10.16.1.41、10.16.3.227</li>\n<li>容器内部启动端口：8080</li>\n</ul>\n</blockquote>\n<p><strong>NodePort信息（两个Node节点、使用ClusterIP模式时没有该信息）：</strong></p>\n<blockquote>\n<ul>\n<li>NodeIP：172.16.9.150、172.16.9.64</li>\n<li>公开的静态端口：30152、30144</li>\n</ul>\n</blockquote>\n<p><strong>LoadBanlancer 信息（公网或私网）：</strong></p>\n<blockquote>\n<ul>\n<li>暴露公网IP：112.124.13.114</li>\n<li>外部端点：112.124.13.114:80</li>\n</ul>\n<p><strong>此时，可通过四种方式进行应用的请求（最终流量到达一致，都会到容器内部）：</strong></p>\n<ol>\n<li>集群内部请求 ServiceIP：10.32.230.55:80 或 reos-app-file-base-svc:80（解析需Coredns组件）</li>\n<li>集群内部请求 PodIP（随时变化，一般不使用）：10.16.1.41:8080 或 10.16.3.227:8080</li>\n<li>集群内部或外部请求 NodeIP：172.16.9.150:30152 或 172.16.9.64:30144</li>\n<li>集群内部或外部请求 SLB IP：112.124.13.114:80 （注意集群内部访问时要修改外部策略 local –&gt; Cluster）</li>\n</ol>\n<p><strong>查看端点信息：kubectl get endpoints&#x2F;xxxxx -owide</strong></p>\n</blockquote>\n<img data-src=\"/posts/754e/k8s1.png\" class>\n\n\n<h4 id=\"Ingress：将集群内的-Service-对外暴露7层的访问接入点\"><a href=\"#Ingress：将集群内的-Service-对外暴露7层的访问接入点\" class=\"headerlink\" title=\"Ingress：将集群内的 Service 对外暴露7层的访问接入点\"></a>Ingress：将集群内的 Service 对外暴露7层的访问接入点</h4><p>如：前后端使用 &#x2F;static&#x2F; 、 &#x2F;apis&#x2F; 的不同 URL ，使用 Ingress 匹配规则并进行对应后端的反向代理</p>\n<img data-src=\"/posts/754e/k8s2.png\" class>\n\n<h4 id=\"Coredns：服务发现DNS，实现不同部署环境访问同样的访问入口\"><a href=\"#Coredns：服务发现DNS，实现不同部署环境访问同样的访问入口\" class=\"headerlink\" title=\"Coredns：服务发现DNS，实现不同部署环境访问同样的访问入口\"></a>Coredns：服务发现DNS，实现不同部署环境访问同样的访问入口</h4><ul>\n<li>通过 Service 的服务名解析出 ClusterIP</li>\n<li>通过 StatefulSet 的 Pod 名解析出 Pod 的 IP</li>\n</ul>\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><ul>\n<li>相关Alicloud资源：<a href=\"https://help.aliyun.com/product/27706.html\">VPC</a>、<a href=\"https://help.aliyun.com/product/27537.html\">SLB</a></li>\n<li><a href=\"https://help.aliyun.com/document_detail/97467.html\">Terway 与 Flannel对比</a></li>\n</ul>\n<h3 id=\"四、存储\"><a href=\"#四、存储\" class=\"headerlink\" title=\"四、存储\"></a>四、存储</h3><img data-src=\"/posts/754e/k8s3.png\" class>\n<h4 id=\"容器存储接口CSI-Plugin-组件\"><a href=\"#容器存储接口CSI-Plugin-组件\" class=\"headerlink\" title=\"容器存储接口CSI-Plugin 组件\"></a>容器存储接口CSI-Plugin 组件</h4><ul>\n<li>云盘存储卷</li>\n<li>容器网络文件系统</li>\n<li>NAS 存储卷</li>\n<li>OSS 存储卷</li>\n<li>CPFS 存储卷</li>\n<li>本地存储卷</li>\n<li>容器存储监控&amp;运维</li>\n</ul>\n<h4 id=\"存储FlexVolume-组件\"><a href=\"#存储FlexVolume-组件\" class=\"headerlink\" title=\"存储FlexVolume 组件\"></a>存储FlexVolume 组件</h4><ul>\n<li>云盘存储卷</li>\n<li>NAS 存储卷</li>\n<li>OSS 存储卷</li>\n<li>CPFS 存储卷</li>\n<li>持久化存储卷声明</li>\n</ul>\n<h3 id=\"五、应用\"><a href=\"#五、应用\" class=\"headerlink\" title=\"五、应用\"></a>五、应用</h3><h4 id=\"工作负载\"><a href=\"#工作负载\" class=\"headerlink\" title=\"工作负载\"></a>工作负载</h4><ul>\n<li>无状态工作 Deployment</li>\n<li>有状态工作 StatefulSet<ul>\n<li>特性：Pod 一致性、稳定的持久化存储、稳定的网络标志（hostname）、稳定的次序（副本的数字序号）</li>\n</ul>\n</li>\n<li>守护进程集 DaemenSet<ul>\n<li>保证每个节点上都运行一个容器副本</li>\n<li>部署集群日志、监控或其他系统管理应用</li>\n</ul>\n</li>\n<li>任务 Job<ul>\n<li>仅执行一次性任务，保证批处理任务一个或多个 Pod 成功结束</li>\n<li>支持的Job类型：非并行、固定结束次数、工作队列并行Job、固定结束次数的并行Job</li>\n</ul>\n</li>\n<li>定时任务 CronJob<ul>\n<li>执行周期性和重复性任务（如备份操作或发送邮件），通过时间调度</li>\n</ul>\n</li>\n<li>容器组<ul>\n<li>Pod：最小部署单元，由单个容器（实际docker 容器）或几个紧耦合的容器组成</li>\n</ul>\n</li>\n<li>自定义资源<ul>\n<li>自定义资源定义拓展 Kubernetes API</li>\n<li>查看集群中所有API 组和包含的资源类型</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"镜像（ACR仓库）\"><a href=\"#镜像（ACR仓库）\" class=\"headerlink\" title=\"镜像（ACR仓库）\"></a>镜像（ACR仓库）</h4><ul>\n<li>镜像签名组件：kritis-validation-hook</li>\n<li>镜像免密拉取组件：aliyun-acr-credential-helper</li>\n</ul>\n<h4 id=\"配置项-Configmap-与保密字典-Secret\"><a href=\"#配置项-Configmap-与保密字典-Secret\" class=\"headerlink\" title=\"配置项 Configmap 与保密字典 Secret\"></a>配置项 Configmap 与保密字典 Secret</h4><ul>\n<li>配置项管理和使用<ul>\n<li>控制台&#x2F;YAML  创建管理Configmap 资源</li>\n<li>使用：设置Pod 环境变量、设置命令行参数、数据卷中使用</li>\n</ul>\n</li>\n<li>保密字典管理和使用<ul>\n<li>控制台&#x2F;YAML 创建管理Secret 资源</li>\n<li>使用：设置Pod 环境变量、数据卷中使用</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"应用调度与部署\"><a href=\"#应用调度与部署\" class=\"headerlink\" title=\"应用调度与部署\"></a>应用调度与部署</h4><ul>\n<li>调度应用Pod 至指定节点：通过设置节点<strong>标签</strong>，配置nodeSelector 强制约束Pod 调度到指定节点（控制台给节点添加标签，然后Pod 启动的YAML 模板 spec –&gt; nodeSelector –&gt; gourp 配置为新增的标签名）</li>\n<li>Descheduler 组件对集群Pod 调度优化（通过策略设置）<ul>\n<li>删除重复Pod，确保只有一个Pod 与同一节点运行的ReplicaSet、Replication Controller、StatefulSet、Job 关联</li>\n<li>删除违反Pod 间反亲和性的Pod</li>\n<li>驱逐其他节点Pod 到未充分利用的节点</li>\n<li>删除重启次数过多的Pod</li>\n</ul>\n</li>\n<li>应用触发器重新部署应用：控制台生成触发器URL，通过请求URL 触发重新部署（可通过curl 或集成开发语言）</li>\n<li>Helm 应用部署<ul>\n<li>Chart：Helm包，包含运行应用所需的镜像、依赖和资源定义、集群中服务定义，类似APT 的dpkg 或YUM 的rpm 文件。</li>\n<li>Release：运行Chart 的实例。同一集群Chart 可以安装多次，每次安装都会创建一个release（如一个MySQL Chart 安装两次，就会在服务器上产生两个release 版本的数据库）。</li>\n<li>Repository： 用于发布和存储Chart 的存储库。</li>\n<li>Helm 组件：Helm CLI 客户端工具、Tiller 服务端组件、Repository 存储库（HTTP协议访问）。</li>\n</ul>\n</li>\n<li>控制台方式&#x2F;YAML方式 部署、发布和监控应用</li>\n</ul>\n<h4 id=\"使用AHAS对应用进行高可用防护\"><a href=\"#使用AHAS对应用进行高可用防护\" class=\"headerlink\" title=\"使用AHAS对应用进行高可用防护\"></a>使用AHAS对应用进行高可用防护</h4><p><a href=\"https://help.aliyun.com/document_detail/193575.html\">https://help.aliyun.com/document_detail&#x2F;193575.html</a></p>\n<h3 id=\"六、组件\"><a href=\"#六、组件\" class=\"headerlink\" title=\"六、组件\"></a>六、组件</h3><h4 id=\"核心组件\"><a href=\"#核心组件\" class=\"headerlink\" title=\"核心组件\"></a>核心组件</h4><ul>\n<li><p>系统组件</p>\n<ul>\n<li>Kube API Server：集群总线和入口网关。</li>\n<li>Kube Controller Manager：集群内部资源管理器。</li>\n<li>Cloud Controller Manager：提供集群与Alicloud基础产品对接能力，如 CLB、VPC等。<h4 id=\"应用管理\"><a href=\"#应用管理\" class=\"headerlink\" title=\"应用管理\"></a>应用管理</h4></li>\n</ul>\n</li>\n<li><p>可选组件</p>\n<ul>\n<li>appcenter：提供统一管理多集群应用部署和应用生命周期的应用中心组件。</li>\n<li>progressive-delivery-tool：提供应用渐进式灰度发布的组件。<h4 id=\"日志与监控\"><a href=\"#日志与监控\" class=\"headerlink\" title=\"日志与监控\"></a>日志与监控</h4></li>\n</ul>\n</li>\n<li><p>系统组件</p>\n<ul>\n<li>alicloud-monitor-controller：ACK提供对接云监控的系统组件。</li>\n<li>metrics-server：ACK基于社区开源监控组件进行改造和增强的监控采集和离线组件，并提供Metrics API进行数据消费，提供HPA的能力。</li>\n</ul>\n</li>\n<li><p>可选组件</p>\n<ul>\n<li>ack-node-problem-detector：ACK基于社区开源项目进行改造和增强的集群节点异常事件监控组件，以及对接第三方监控平台功能的组件。</li>\n<li>ags-metrics-collector：为基因计算客户使用的监控服务组件，可以通过该组件监控基因工作流中各个节点资源使用的详细信息。</li>\n<li>ack-arms-prometheus：使用ARMS Prometheus实现容器服务集群监控。</li>\n<li>logtail-ds：使用日志服务采集Kubernetes容器日志。</li>\n<li>logtail-windows：ACK集群上使用的容器日志收集插件，用于在Alicloud上配合SLS服务对Windows容器进行日志收集。<h4 id=\"存储\"><a href=\"#存储\" class=\"headerlink\" title=\"存储\"></a>存储</h4></li>\n</ul>\n</li>\n<li><p>可选组件</p>\n<ul>\n<li>csi-plugin：支持数据卷的挂载、卸载功能。创建集群时，如果选择CSI插件实现Alicloud存储的接入能力的话，默认安装该组件。</li>\n<li>csi-provisioner：支持数据卷的自动创建能力。创建集群时，如果选择CSI插件实现Alicloud存储的接入能力的话，默认安装该组件。</li>\n<li>storage-operator：用于管理存储组件的生命周期。</li>\n<li>alicloud-disk-controller：支持自动创建云盘卷。</li>\n<li>Flexvolume：社区较早实现的存储卷扩展机制。Flexvolume支持数据卷的挂载、卸载功能。创建集群时，如果选择Flexvolume插件实现Alicloud存储的接入能力的话，默认安装该组件。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h4><ul>\n<li>系统组件<ul>\n<li>CoreDNS：ACK集群中默认采用的DNS服务发现插件，其遵循Kubernetes DNS-Based Service Discovery规范。</li>\n<li>Nginx Ingress Controller：Nginx Ingress Controller解析Ingress的转发规则。Ingress Controller收到请求，匹配Ingress转发规则转发到后端Service。</li>\n<li>managed-kube-proxy-windows：ACK托管版集群上使用的容器化kube-proxy，用于管理Windows节点上Service的访问入口，包括集群内Pod到Service的访问和集群外访问Service。</li>\n</ul>\n</li>\n<li>可选组件<ul>\n<li>Terway :  Alicloud开源的基于专有网络VPC的容器网络接口CNI插件，支持基于Kubernetes标准的网络策略（NetworkPolicy）来定义容器间的访问策略。创建集群时，如果选择Terway网络插件实现集群内部网络互通的话，默认安装该组件。</li>\n<li>Flannel：容器网络接口CNI插件，在Alicloud上使用的Flannel网络模式采用AlicloudVPC模式。创建集群时，如果选择Flannel网络插件实现集群内部网络互通的话，默认安装该组件。</li>\n<li>ACK NodeLocal DNSCache：基于社区开源项目NodeLocal DNSCache的一套DNS本地缓存解决方案。</li>\n<li>kube-flannel-ds-windows：ACK托管版集群上使用的容器网络插件，用于构建适合Windows容器通讯的L2Bridge集群网络。</li>\n</ul>\n</li>\n</ul>\n<img data-src=\"/posts/754e/k8s4.png\" class>\n\n<h4 id=\"安全\"><a href=\"#安全\" class=\"headerlink\" title=\"安全\"></a><a href=\"https://help.aliyun.com/document_detail/277412.html#title-nq4-jps-k41\">安全</a></h4><h4 id=\"其他-1\"><a href=\"#其他-1\" class=\"headerlink\" title=\"其他\"></a><a href=\"https://help.aliyun.com/document_detail/277412.html#title-iib-fx3-2hl\">其他</a></h4><h3 id=\"七、其他\"><a href=\"#七、其他\" class=\"headerlink\" title=\"七、其他\"></a>七、其他</h3><h4 id=\"Kubernetes-集群-NetworkPolicy-策略\"><a href=\"#Kubernetes-集群-NetworkPolicy-策略\" class=\"headerlink\" title=\"Kubernetes 集群 NetworkPolicy 策略\"></a><a href=\"https://yuque.antfin.com/kifo8h/nee5aa/bzg9vq\">Kubernetes 集群 NetworkPolicy 策略</a></h4><ul>\n<li>Pod 和 Pod 通信通过三个标识符组合来辨识：</li>\n</ul>\n<p>1、其他被允许的 Pods（Pod 无法阻塞自身的访问）<br>2、被允许的 namespace<br>3、IP 组块 （Pod 本身所在的 Node 和 Pod  IP通信默认允许通信）</p>\n<ul>\n<li>默认情况下，Pod 非隔离。 被 NetworkPolicy 选中进入隔离状态。</li>\n<li>NetworkPolicy 策略不会冲突，累积策略。多个策略作用于一个Pod时，Pod 的入站&#x2F;出站策略取所有策略的并集</li>\n<li>两个 Pod 之间通信时，需要源端Pod上的出站（Egress）规则和目标端 Pod 上的入站（Ingress）规则都要允许该流量。</li>\n<li>ACK只支持 Terway 网络模式，不支持 Flannel 网络模式</li>\n</ul>\n","site":{"data":{"footer":"","styles":".post {\n  margin-top: 50px;\n  margin-bottom: 50px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n.headband {\n  display: none;\n}\nbody {\n  background: url(\"/images/background.jpeg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\n.post-block.page {\n  margin-top: 40px;\n}\n.category-all-page {\n  box-shadow: 0px 0px 10px 0px rgba(0,0,0,0.5);\n  background-color: #797d7f;\n  padding: 20px 30px 60px 30px;\n  border-radius: 25px 25px 25px 25px;\n}\n.category-all-title {\n  font-family: Impact;\n  font-size: 24px;\n  color: #0ff;\n}\n.category-list {\n  overflow: auto;\n}\n.category-list li {\n  height: 100%;\n  float: left;\n  border-right: 3px solid #222;\n  padding: 0 20px;\n}\n.category-all ul li {\n  list-style: none !important;\n}\n.category-list li:last-child {\n  border-right: none;\n}\n.category-list li a {\n  font-size: 16px;\n  text-decoration: none;\n  color: #7fff00;\n  font-family: Helvetica, Verdana, sans-serif;\n  -webkit-transition: all 0.5s ease;\n  -moz-transition: all 0.5s ease;\n  -o-transition: all 0.5s ease;\n  -ms-transition: all 0.5s ease;\n  transition: all 0.5s ease;\n}\n.category-list li a:hover {\n  color: #000;\n}\n.category-list li.active a {\n  font-weight: bold;\n  color: #000;\n}\n.tag-cloud a {\n  box-shadow: 0 1px 3px #6f42c1, 0 1px 2px #d9534f;\n  padding: 2px 10px;\n  margin: 8px;\n  background: rgba(193,66,92,0);\n  border-bottom: none;\n  border-radius: 20px;\n}\ncode {\n  background: #555;\n  color: #fff;\n}\n","variables":""}},"length":4901,"excerpt":"<h3 id=\"一、ACK集群网络规划\"><a href=\"#一、ACK集群网络规划\" class=\"headerlink\" title=\"一、ACK集群网络规划\"></a>一、ACK集群网络规划</h3><p><a href=\"https://help.aliyun.com/document_detail/86500.html\">https://help.aliyun.com/document_detail&#x2F;86500.html</a></p>\n<h3 id=\"二、RBAC授权\"><a href=\"#二、RBAC授权\" class=\"headerlink\" title=\"二、RBAC授权\"></a>二、RBAC授权</h3><p><a href=\"https://yuque.antfin.com/kifo8h/nee5aa/mvx5t5\">https://yuque.antfin.com/kifo8h/nee5aa/mvx5t5</a></p>\n<h3 id=\"三、网络\"><a href=\"#三、网络\" class=\"headerlink\" title=\"三、网络\"></a>三、网络</h3><h4 id=\"容器网络CNI\"><a href=\"#容器网络CNI\" class=\"headerlink\" title=\"容器网络CNI\"></a>容器网络CNI</h4><p><a href=\"https://help.aliyun.com/document_detail/195424.html\">https://help.aliyun.com/document_detail&#x2F;195424.html</a></p>","more":"<h4 id=\"Service：将一组容器暴露访问接入点，可负载均衡\"><a href=\"#Service：将一组容器暴露访问接入点，可负载均衡\" class=\"headerlink\" title=\"Service：将一组容器暴露访问接入点，可负载均衡\"></a>Service：将一组容器暴露访问接入点，可负载均衡</h4><ul>\n<li><p><strong>ClusterIP</strong>：在集群内部IP上公开服务。选择此值使服务只能从集群中访问。（默认创建的 ServiceType）</p>\n</li>\n<li><p><strong>NodePort</strong>：在每个Node的IP上公开静态端口（NodePort）服务。将自动创建NodePort服务到ClusterIP服务的路由。可以通过请求：来从群集外部请求NodePort服务。</p>\n</li>\n<li><p><strong>LoadBalancer</strong>：使用云提供商的负载均衡器在外部公开服务。将自动创建外部负载均衡器到NodePort和ClusterIP服务的路由</p>\n</li>\n<li><p><strong>Headless Service</strong>：在Service属性中指定clusterIP字段为None类型。采用Headless Service类型后，Service将没有固定的虚拟IP地址，客户端访问Service的域名时会通过DNS返回所有的后端Pod实例的IP地址，客户端需要采用DNS负载均衡来实现对后端的负载均衡</p>\n</li>\n<li><p><strong>ExternalName</strong>：将集群外部的域名映射到集群内部的Service上，例如将外部的数据库域名映射到集群内部的Service名，那么就能在集群内部通过Service名直接访问。</p>\n</li>\n</ul>\n<blockquote>\n<p><strong>集群信息：</strong></p>\n<ul>\n<li>集群CIDR（Master、Node ECS实例IP）：172.16.0.0&#x2F;16 </li>\n<li>Pod CIDR：10.16.0.0&#x2F;12</li>\n<li>Service CIDR：10.32.0.0&#x2F;16</li>\n</ul>\n<p><strong>Service信息：</strong></p>\n<ul>\n<li>暴露ClusterIP：10.32.230.55</li>\n<li>内部端点：reos-app-file-base-svc:80 TCP</li>\n</ul>\n</blockquote>\n<p><strong>Pod 信息（两个副本）：</strong></p>\n<blockquote>\n<ul>\n<li>IP：10.16.1.41、10.16.3.227</li>\n<li>容器内部启动端口：8080</li>\n</ul>\n</blockquote>\n<p><strong>NodePort信息（两个Node节点、使用ClusterIP模式时没有该信息）：</strong></p>\n<blockquote>\n<ul>\n<li>NodeIP：172.16.9.150、172.16.9.64</li>\n<li>公开的静态端口：30152、30144</li>\n</ul>\n</blockquote>\n<p><strong>LoadBanlancer 信息（公网或私网）：</strong></p>\n<blockquote>\n<ul>\n<li>暴露公网IP：112.124.13.114</li>\n<li>外部端点：112.124.13.114:80</li>\n</ul>\n<p><strong>此时，可通过四种方式进行应用的请求（最终流量到达一致，都会到容器内部）：</strong></p>\n<ol>\n<li>集群内部请求 ServiceIP：10.32.230.55:80 或 reos-app-file-base-svc:80（解析需Coredns组件）</li>\n<li>集群内部请求 PodIP（随时变化，一般不使用）：10.16.1.41:8080 或 10.16.3.227:8080</li>\n<li>集群内部或外部请求 NodeIP：172.16.9.150:30152 或 172.16.9.64:30144</li>\n<li>集群内部或外部请求 SLB IP：112.124.13.114:80 （注意集群内部访问时要修改外部策略 local –&gt; Cluster）</li>\n</ol>\n<p><strong>查看端点信息：kubectl get endpoints&#x2F;xxxxx -owide</strong></p>\n</blockquote>\n<img data-src=\"/posts/754e/k8s1.png\" class>\n\n\n<h4 id=\"Ingress：将集群内的-Service-对外暴露7层的访问接入点\"><a href=\"#Ingress：将集群内的-Service-对外暴露7层的访问接入点\" class=\"headerlink\" title=\"Ingress：将集群内的 Service 对外暴露7层的访问接入点\"></a>Ingress：将集群内的 Service 对外暴露7层的访问接入点</h4><p>如：前后端使用 &#x2F;static&#x2F; 、 &#x2F;apis&#x2F; 的不同 URL ，使用 Ingress 匹配规则并进行对应后端的反向代理</p>\n<img data-src=\"/posts/754e/k8s2.png\" class>\n\n<h4 id=\"Coredns：服务发现DNS，实现不同部署环境访问同样的访问入口\"><a href=\"#Coredns：服务发现DNS，实现不同部署环境访问同样的访问入口\" class=\"headerlink\" title=\"Coredns：服务发现DNS，实现不同部署环境访问同样的访问入口\"></a>Coredns：服务发现DNS，实现不同部署环境访问同样的访问入口</h4><ul>\n<li>通过 Service 的服务名解析出 ClusterIP</li>\n<li>通过 StatefulSet 的 Pod 名解析出 Pod 的 IP</li>\n</ul>\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><ul>\n<li>相关Alicloud资源：<a href=\"https://help.aliyun.com/product/27706.html\">VPC</a>、<a href=\"https://help.aliyun.com/product/27537.html\">SLB</a></li>\n<li><a href=\"https://help.aliyun.com/document_detail/97467.html\">Terway 与 Flannel对比</a></li>\n</ul>\n<h3 id=\"四、存储\"><a href=\"#四、存储\" class=\"headerlink\" title=\"四、存储\"></a>四、存储</h3><img data-src=\"/posts/754e/k8s3.png\" class>\n<h4 id=\"容器存储接口CSI-Plugin-组件\"><a href=\"#容器存储接口CSI-Plugin-组件\" class=\"headerlink\" title=\"容器存储接口CSI-Plugin 组件\"></a>容器存储接口CSI-Plugin 组件</h4><ul>\n<li>云盘存储卷</li>\n<li>容器网络文件系统</li>\n<li>NAS 存储卷</li>\n<li>OSS 存储卷</li>\n<li>CPFS 存储卷</li>\n<li>本地存储卷</li>\n<li>容器存储监控&amp;运维</li>\n</ul>\n<h4 id=\"存储FlexVolume-组件\"><a href=\"#存储FlexVolume-组件\" class=\"headerlink\" title=\"存储FlexVolume 组件\"></a>存储FlexVolume 组件</h4><ul>\n<li>云盘存储卷</li>\n<li>NAS 存储卷</li>\n<li>OSS 存储卷</li>\n<li>CPFS 存储卷</li>\n<li>持久化存储卷声明</li>\n</ul>\n<h3 id=\"五、应用\"><a href=\"#五、应用\" class=\"headerlink\" title=\"五、应用\"></a>五、应用</h3><h4 id=\"工作负载\"><a href=\"#工作负载\" class=\"headerlink\" title=\"工作负载\"></a>工作负载</h4><ul>\n<li>无状态工作 Deployment</li>\n<li>有状态工作 StatefulSet<ul>\n<li>特性：Pod 一致性、稳定的持久化存储、稳定的网络标志（hostname）、稳定的次序（副本的数字序号）</li>\n</ul>\n</li>\n<li>守护进程集 DaemenSet<ul>\n<li>保证每个节点上都运行一个容器副本</li>\n<li>部署集群日志、监控或其他系统管理应用</li>\n</ul>\n</li>\n<li>任务 Job<ul>\n<li>仅执行一次性任务，保证批处理任务一个或多个 Pod 成功结束</li>\n<li>支持的Job类型：非并行、固定结束次数、工作队列并行Job、固定结束次数的并行Job</li>\n</ul>\n</li>\n<li>定时任务 CronJob<ul>\n<li>执行周期性和重复性任务（如备份操作或发送邮件），通过时间调度</li>\n</ul>\n</li>\n<li>容器组<ul>\n<li>Pod：最小部署单元，由单个容器（实际docker 容器）或几个紧耦合的容器组成</li>\n</ul>\n</li>\n<li>自定义资源<ul>\n<li>自定义资源定义拓展 Kubernetes API</li>\n<li>查看集群中所有API 组和包含的资源类型</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"镜像（ACR仓库）\"><a href=\"#镜像（ACR仓库）\" class=\"headerlink\" title=\"镜像（ACR仓库）\"></a>镜像（ACR仓库）</h4><ul>\n<li>镜像签名组件：kritis-validation-hook</li>\n<li>镜像免密拉取组件：aliyun-acr-credential-helper</li>\n</ul>\n<h4 id=\"配置项-Configmap-与保密字典-Secret\"><a href=\"#配置项-Configmap-与保密字典-Secret\" class=\"headerlink\" title=\"配置项 Configmap 与保密字典 Secret\"></a>配置项 Configmap 与保密字典 Secret</h4><ul>\n<li>配置项管理和使用<ul>\n<li>控制台&#x2F;YAML  创建管理Configmap 资源</li>\n<li>使用：设置Pod 环境变量、设置命令行参数、数据卷中使用</li>\n</ul>\n</li>\n<li>保密字典管理和使用<ul>\n<li>控制台&#x2F;YAML 创建管理Secret 资源</li>\n<li>使用：设置Pod 环境变量、数据卷中使用</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"应用调度与部署\"><a href=\"#应用调度与部署\" class=\"headerlink\" title=\"应用调度与部署\"></a>应用调度与部署</h4><ul>\n<li>调度应用Pod 至指定节点：通过设置节点<strong>标签</strong>，配置nodeSelector 强制约束Pod 调度到指定节点（控制台给节点添加标签，然后Pod 启动的YAML 模板 spec –&gt; nodeSelector –&gt; gourp 配置为新增的标签名）</li>\n<li>Descheduler 组件对集群Pod 调度优化（通过策略设置）<ul>\n<li>删除重复Pod，确保只有一个Pod 与同一节点运行的ReplicaSet、Replication Controller、StatefulSet、Job 关联</li>\n<li>删除违反Pod 间反亲和性的Pod</li>\n<li>驱逐其他节点Pod 到未充分利用的节点</li>\n<li>删除重启次数过多的Pod</li>\n</ul>\n</li>\n<li>应用触发器重新部署应用：控制台生成触发器URL，通过请求URL 触发重新部署（可通过curl 或集成开发语言）</li>\n<li>Helm 应用部署<ul>\n<li>Chart：Helm包，包含运行应用所需的镜像、依赖和资源定义、集群中服务定义，类似APT 的dpkg 或YUM 的rpm 文件。</li>\n<li>Release：运行Chart 的实例。同一集群Chart 可以安装多次，每次安装都会创建一个release（如一个MySQL Chart 安装两次，就会在服务器上产生两个release 版本的数据库）。</li>\n<li>Repository： 用于发布和存储Chart 的存储库。</li>\n<li>Helm 组件：Helm CLI 客户端工具、Tiller 服务端组件、Repository 存储库（HTTP协议访问）。</li>\n</ul>\n</li>\n<li>控制台方式&#x2F;YAML方式 部署、发布和监控应用</li>\n</ul>\n<h4 id=\"使用AHAS对应用进行高可用防护\"><a href=\"#使用AHAS对应用进行高可用防护\" class=\"headerlink\" title=\"使用AHAS对应用进行高可用防护\"></a>使用AHAS对应用进行高可用防护</h4><p><a href=\"https://help.aliyun.com/document_detail/193575.html\">https://help.aliyun.com/document_detail&#x2F;193575.html</a></p>\n<h3 id=\"六、组件\"><a href=\"#六、组件\" class=\"headerlink\" title=\"六、组件\"></a>六、组件</h3><h4 id=\"核心组件\"><a href=\"#核心组件\" class=\"headerlink\" title=\"核心组件\"></a>核心组件</h4><ul>\n<li><p>系统组件</p>\n<ul>\n<li>Kube API Server：集群总线和入口网关。</li>\n<li>Kube Controller Manager：集群内部资源管理器。</li>\n<li>Cloud Controller Manager：提供集群与Alicloud基础产品对接能力，如 CLB、VPC等。<h4 id=\"应用管理\"><a href=\"#应用管理\" class=\"headerlink\" title=\"应用管理\"></a>应用管理</h4></li>\n</ul>\n</li>\n<li><p>可选组件</p>\n<ul>\n<li>appcenter：提供统一管理多集群应用部署和应用生命周期的应用中心组件。</li>\n<li>progressive-delivery-tool：提供应用渐进式灰度发布的组件。<h4 id=\"日志与监控\"><a href=\"#日志与监控\" class=\"headerlink\" title=\"日志与监控\"></a>日志与监控</h4></li>\n</ul>\n</li>\n<li><p>系统组件</p>\n<ul>\n<li>alicloud-monitor-controller：ACK提供对接云监控的系统组件。</li>\n<li>metrics-server：ACK基于社区开源监控组件进行改造和增强的监控采集和离线组件，并提供Metrics API进行数据消费，提供HPA的能力。</li>\n</ul>\n</li>\n<li><p>可选组件</p>\n<ul>\n<li>ack-node-problem-detector：ACK基于社区开源项目进行改造和增强的集群节点异常事件监控组件，以及对接第三方监控平台功能的组件。</li>\n<li>ags-metrics-collector：为基因计算客户使用的监控服务组件，可以通过该组件监控基因工作流中各个节点资源使用的详细信息。</li>\n<li>ack-arms-prometheus：使用ARMS Prometheus实现容器服务集群监控。</li>\n<li>logtail-ds：使用日志服务采集Kubernetes容器日志。</li>\n<li>logtail-windows：ACK集群上使用的容器日志收集插件，用于在Alicloud上配合SLS服务对Windows容器进行日志收集。<h4 id=\"存储\"><a href=\"#存储\" class=\"headerlink\" title=\"存储\"></a>存储</h4></li>\n</ul>\n</li>\n<li><p>可选组件</p>\n<ul>\n<li>csi-plugin：支持数据卷的挂载、卸载功能。创建集群时，如果选择CSI插件实现Alicloud存储的接入能力的话，默认安装该组件。</li>\n<li>csi-provisioner：支持数据卷的自动创建能力。创建集群时，如果选择CSI插件实现Alicloud存储的接入能力的话，默认安装该组件。</li>\n<li>storage-operator：用于管理存储组件的生命周期。</li>\n<li>alicloud-disk-controller：支持自动创建云盘卷。</li>\n<li>Flexvolume：社区较早实现的存储卷扩展机制。Flexvolume支持数据卷的挂载、卸载功能。创建集群时，如果选择Flexvolume插件实现Alicloud存储的接入能力的话，默认安装该组件。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h4><ul>\n<li>系统组件<ul>\n<li>CoreDNS：ACK集群中默认采用的DNS服务发现插件，其遵循Kubernetes DNS-Based Service Discovery规范。</li>\n<li>Nginx Ingress Controller：Nginx Ingress Controller解析Ingress的转发规则。Ingress Controller收到请求，匹配Ingress转发规则转发到后端Service。</li>\n<li>managed-kube-proxy-windows：ACK托管版集群上使用的容器化kube-proxy，用于管理Windows节点上Service的访问入口，包括集群内Pod到Service的访问和集群外访问Service。</li>\n</ul>\n</li>\n<li>可选组件<ul>\n<li>Terway :  Alicloud开源的基于专有网络VPC的容器网络接口CNI插件，支持基于Kubernetes标准的网络策略（NetworkPolicy）来定义容器间的访问策略。创建集群时，如果选择Terway网络插件实现集群内部网络互通的话，默认安装该组件。</li>\n<li>Flannel：容器网络接口CNI插件，在Alicloud上使用的Flannel网络模式采用AlicloudVPC模式。创建集群时，如果选择Flannel网络插件实现集群内部网络互通的话，默认安装该组件。</li>\n<li>ACK NodeLocal DNSCache：基于社区开源项目NodeLocal DNSCache的一套DNS本地缓存解决方案。</li>\n<li>kube-flannel-ds-windows：ACK托管版集群上使用的容器网络插件，用于构建适合Windows容器通讯的L2Bridge集群网络。</li>\n</ul>\n</li>\n</ul>\n<img data-src=\"/posts/754e/k8s4.png\" class>\n\n<h4 id=\"安全\"><a href=\"#安全\" class=\"headerlink\" title=\"安全\"></a><a href=\"https://help.aliyun.com/document_detail/277412.html#title-nq4-jps-k41\">安全</a></h4><h4 id=\"其他-1\"><a href=\"#其他-1\" class=\"headerlink\" title=\"其他\"></a><a href=\"https://help.aliyun.com/document_detail/277412.html#title-iib-fx3-2hl\">其他</a></h4><h3 id=\"七、其他\"><a href=\"#七、其他\" class=\"headerlink\" title=\"七、其他\"></a>七、其他</h3><h4 id=\"Kubernetes-集群-NetworkPolicy-策略\"><a href=\"#Kubernetes-集群-NetworkPolicy-策略\" class=\"headerlink\" title=\"Kubernetes 集群 NetworkPolicy 策略\"></a><a href=\"https://yuque.antfin.com/kifo8h/nee5aa/bzg9vq\">Kubernetes 集群 NetworkPolicy 策略</a></h4><ul>\n<li>Pod 和 Pod 通信通过三个标识符组合来辨识：</li>\n</ul>\n<p>1、其他被允许的 Pods（Pod 无法阻塞自身的访问）<br>2、被允许的 namespace<br>3、IP 组块 （Pod 本身所在的 Node 和 Pod  IP通信默认允许通信）</p>\n<ul>\n<li>默认情况下，Pod 非隔离。 被 NetworkPolicy 选中进入隔离状态。</li>\n<li>NetworkPolicy 策略不会冲突，累积策略。多个策略作用于一个Pod时，Pod 的入站&#x2F;出站策略取所有策略的并集</li>\n<li>两个 Pod 之间通信时，需要源端Pod上的出站（Egress）规则和目标端 Pod 上的入站（Ingress）规则都要允许该流量。</li>\n<li>ACK只支持 Terway 网络模式，不支持 Flannel 网络模式</li>\n</ul>"},{"title":"NetworkPolicy 隔离策略","abbrlink":"8aa0","date":"2022-03-07T14:01:06.000Z","_content":"### 一、背景\n> 一次对当前业务使用ACK 集群的业务调研与改造：针对NetworkPolicy 策略的调研，主要用于新建ACK 集群的网络规划与网络隔离\n#### 1）当前云环境ACK 集群使用现状和痛点\n1. UAT/线上 环境应用较多，且应用没有做集群内隔离，所有应用全部都在ACK 集群的default namespace 中。没有做到逻辑网络隔离。\n\n2. 集群通过暴露公网SLB 方式进行集群调用，存在浪费资源、管理混乱、安全风险等问题。通过namespace 隔离 + NetworkPolicy 策略通信的方式可以实现集群内部应用自行调用，和VPC 打通之后使用NetworkPolicy 的IP 块策略还可实现跨集群的应用内网调用。\n\n#### 2）实现隔离策略价值\n1. 降低成本：可以通过网络逻辑隔离的方式将应用已namespace 方式进行隔离，减少冗余的物理设备降低成本。\n\n2. 增加效能：避免复杂且多余的网络设计，使应用之间的调用简单且易于排查。\n\n<!--more-->\n问题点：\n- 应用SLB 暴露公网方式，白名单管理方式存在多人修改不同步且随意添加白名单带来风险问题。多个SLB 带来的白名单、监听等也存在管理记录困难问题。\n- 通过namespace 隔离，网络规划便于设计（同一VPC 下天然可以通信）。应用间调用完全可以通过集群内部策略实现通信，减少因为网络造成的应用通信异常。\n\n{% asset_img 7b70de99e5f7.png %}\n\n### 二、概念理解\n#### 1）CNI 插件\nk8s 本身没有对容器之间的通信网络进行实现，而是通过 CNI 定义了容器网络的接口的形式，让其他组件实现CNI来实现容器间的网络通信，CNI主要解决什么问题？\n\n- 第一，如何保证每个Pod拥有一个集群内唯一的IP地址？\n- 第二，如何保证不同节点的IP地址划分不会重复？\n- 第三，如何保证跨节点的Pod可以互相通信？\n- 第四，如何保证不同节点的Pod可以与跨节点的主机互相通信？\n\n常见的CNI 插件：Calico、Flannel、Terway、Weave Net、 以及 Contiv\n\n\n#### 2）Terway与Flannel对比\n在创建集群时，ACK提供Terway和Flannel两种网络插件：\n\n- Terway：是Alicloud容器服务ACK自研的网络插件。Terway将Alicloud的弹性网卡分配给容器，支持基于Kubernetes标准的网络策略来定义容器间的访问策略，支持对单个容器做带宽的限流。Terway拥有更为灵活的IPAM（容器地址分配）策略，避免地址浪费。如果您不需要使用网络策略（Network Policy），可以选择Flannel，其他情况建议选择Terway。\n- Flannel：使用的是简单稳定的社区Flannel CNI插件。配合Alicloud的VPC的高速网络，能给集群高性能和稳定的容器网络体验。Flannel功能偏简单，支持的特性少。例如，不支持基于Kubernetes标准的网络策略（Network Policy）。更多信息，请参见[Flannel](https://github.com/coreos/flannel)。\n\n\n\n#### 3）NetworkPolicy 实现方式\n\n1. 前置条件：集群安装 CNI（container network interface）插件，Alicloud支持两种插件：Flannel（不支持NetworkPolicy）、Terway\n2. ACK 集群开启NetworkPolicy 方式：\n- 控制台方式操作（简易操作）：需通过Alicloud提工单申请\n- 命令行方式操作（kubectl 方式）：无需申请可直接操作。开启方式：\n   - 创建Terway集群时可选中** NetworkPolicy支持** 直接开启\n{% asset_img 2afdc3d69fa9.png %}\n\n   - 通过修改ConfigMap --> eni-config 文件开启\n{% asset_img 6bbe6aab7201.png %}\n\n\n3. 具体实现\n- NetworkPolicy 支持三种方式进行网络隔离：namespace、ipBlock（CIDR）、Pods\n- 默认情况下非隔离接受任何流量。使用NetworkPolicy 资源配置选中Pod 进入隔离状态（白名单规则），隔离规则有入站（ingress）和出站（egress）规则指定（与iptables概念类似，但不同的是 网络策略是并集累积的规则）\n\n- 示例配置：\n```yaml\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: test-network-policy\n  # 为namespace 为data的应用设置策略，默认隔离所有流量\n  namespace: data\nspec:\n  # pod选择器-必需\n  podSelector:\n    matchLabels:\n      role: \"data_centerevent\"\n      # role: \"\"  role分组标签配置为空时表示匹配当前namespace所有pod\n  policyTypes:\n  - Ingress\n  - Egress\n  ingress:\n  - from:\n    # 允许 172.17.0.0/16网段，排除 172.17.1.0/24\n    - ipBlock:\n        cidr: 172.17.0.0/16\n        except:\n        - 172.17.1.0/24\n    # 允许所有namespace带有\"project=apps_project\" 标签的所有namesapce Pod流量\n    - namespaceSelector:\n        matchLabels:\n          project: apps_project\n    # 允许data这个namespace下带有\"role=apps\" 标签的所有Pod流量\n    - podSelector:\n        matchLabels:\n          role: apps\n    ports:\n    - protocol: TCP\n      port: 8080\n  egress:\n  # 允许data这个namespace下，带有\"role=data_centerevent\"的所有Pod到以下CIDR的流出流量\n  - to:\n    - ipBlock:\n        cidr: 10.0.0.0/24\n    ports:\n    - protocol: TCP\n      port: 6379\n```\n\n\n### 三、实现方案与难点\n#### 实现难点\n\n- ACK 集群都为托管版，无法通过自行修改配置更改CNI 插件。且更改CNI 插件可能会导致当前网络模型变动造成未知异常\n- AlicloudACK 集群有两种CNI 网络插件：Flannel、Terway。Alicloud的ACK 集群上面只有Terway 集群支持NetworkPolicy。\n- 已有网络插件无法平滑进行切换，只能通过删除集群重建物理层的方式重新改为 Terway 集群。\n\n\n#### 迁移可行性方案思考\n\n- 由于当前集群网络规划冲突且复杂，建议使用重建集群方式。新建一个全新规划的集群然后将应用进行迁移：\n   - 无状态应用且无外部调用需求类应用，直接进行部署迁移\n   - 部分无依赖/弱依赖 应用，使用打包应用群组的方式在新集群进行部署，且新建全新SLB接入新集群应用，通过切换域名解析/修改IP 方式将流量切入新集群应用。\n\n\n#### 参考：\n1. Kubernetes 官网：[https://kubernetes.io/zh/docs/concepts/services-networking/network-policies/](https://kubernetes.io/zh/docs/concepts/services-networking/network-policies/)\n2. Alicloud官网：[https://help.aliyun.com/document_detail/97621.html](https://help.aliyun.com/document_detail/97621.html)\n3. NetworkPolicy 支持的CNI 插件：[https://www.qikqiak.com/k8strain/network/networkpolicy/](https://www.qikqiak.com/k8strain/network/networkpolicy/)\n4. Alicloud官网（Terway 集群网络规划策略）：[https://help.aliyun.com/document_detail/86500.html](https://help.aliyun.com/document_detail/86500.html)\n","source":"_posts/k8s-networkpolicy.md","raw":"---\ntitle: NetworkPolicy 隔离策略\nabbrlink: 8aa0\ndate: 2022-03-07 22:01:06\ncategories:\n  - Alicloud\n  - CNCF\ntags:\n  - Kubernetes\n---\n### 一、背景\n> 一次对当前业务使用ACK 集群的业务调研与改造：针对NetworkPolicy 策略的调研，主要用于新建ACK 集群的网络规划与网络隔离\n#### 1）当前云环境ACK 集群使用现状和痛点\n1. UAT/线上 环境应用较多，且应用没有做集群内隔离，所有应用全部都在ACK 集群的default namespace 中。没有做到逻辑网络隔离。\n\n2. 集群通过暴露公网SLB 方式进行集群调用，存在浪费资源、管理混乱、安全风险等问题。通过namespace 隔离 + NetworkPolicy 策略通信的方式可以实现集群内部应用自行调用，和VPC 打通之后使用NetworkPolicy 的IP 块策略还可实现跨集群的应用内网调用。\n\n#### 2）实现隔离策略价值\n1. 降低成本：可以通过网络逻辑隔离的方式将应用已namespace 方式进行隔离，减少冗余的物理设备降低成本。\n\n2. 增加效能：避免复杂且多余的网络设计，使应用之间的调用简单且易于排查。\n\n<!--more-->\n问题点：\n- 应用SLB 暴露公网方式，白名单管理方式存在多人修改不同步且随意添加白名单带来风险问题。多个SLB 带来的白名单、监听等也存在管理记录困难问题。\n- 通过namespace 隔离，网络规划便于设计（同一VPC 下天然可以通信）。应用间调用完全可以通过集群内部策略实现通信，减少因为网络造成的应用通信异常。\n\n{% asset_img 7b70de99e5f7.png %}\n\n### 二、概念理解\n#### 1）CNI 插件\nk8s 本身没有对容器之间的通信网络进行实现，而是通过 CNI 定义了容器网络的接口的形式，让其他组件实现CNI来实现容器间的网络通信，CNI主要解决什么问题？\n\n- 第一，如何保证每个Pod拥有一个集群内唯一的IP地址？\n- 第二，如何保证不同节点的IP地址划分不会重复？\n- 第三，如何保证跨节点的Pod可以互相通信？\n- 第四，如何保证不同节点的Pod可以与跨节点的主机互相通信？\n\n常见的CNI 插件：Calico、Flannel、Terway、Weave Net、 以及 Contiv\n\n\n#### 2）Terway与Flannel对比\n在创建集群时，ACK提供Terway和Flannel两种网络插件：\n\n- Terway：是Alicloud容器服务ACK自研的网络插件。Terway将Alicloud的弹性网卡分配给容器，支持基于Kubernetes标准的网络策略来定义容器间的访问策略，支持对单个容器做带宽的限流。Terway拥有更为灵活的IPAM（容器地址分配）策略，避免地址浪费。如果您不需要使用网络策略（Network Policy），可以选择Flannel，其他情况建议选择Terway。\n- Flannel：使用的是简单稳定的社区Flannel CNI插件。配合Alicloud的VPC的高速网络，能给集群高性能和稳定的容器网络体验。Flannel功能偏简单，支持的特性少。例如，不支持基于Kubernetes标准的网络策略（Network Policy）。更多信息，请参见[Flannel](https://github.com/coreos/flannel)。\n\n\n\n#### 3）NetworkPolicy 实现方式\n\n1. 前置条件：集群安装 CNI（container network interface）插件，Alicloud支持两种插件：Flannel（不支持NetworkPolicy）、Terway\n2. ACK 集群开启NetworkPolicy 方式：\n- 控制台方式操作（简易操作）：需通过Alicloud提工单申请\n- 命令行方式操作（kubectl 方式）：无需申请可直接操作。开启方式：\n   - 创建Terway集群时可选中** NetworkPolicy支持** 直接开启\n{% asset_img 2afdc3d69fa9.png %}\n\n   - 通过修改ConfigMap --> eni-config 文件开启\n{% asset_img 6bbe6aab7201.png %}\n\n\n3. 具体实现\n- NetworkPolicy 支持三种方式进行网络隔离：namespace、ipBlock（CIDR）、Pods\n- 默认情况下非隔离接受任何流量。使用NetworkPolicy 资源配置选中Pod 进入隔离状态（白名单规则），隔离规则有入站（ingress）和出站（egress）规则指定（与iptables概念类似，但不同的是 网络策略是并集累积的规则）\n\n- 示例配置：\n```yaml\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: test-network-policy\n  # 为namespace 为data的应用设置策略，默认隔离所有流量\n  namespace: data\nspec:\n  # pod选择器-必需\n  podSelector:\n    matchLabels:\n      role: \"data_centerevent\"\n      # role: \"\"  role分组标签配置为空时表示匹配当前namespace所有pod\n  policyTypes:\n  - Ingress\n  - Egress\n  ingress:\n  - from:\n    # 允许 172.17.0.0/16网段，排除 172.17.1.0/24\n    - ipBlock:\n        cidr: 172.17.0.0/16\n        except:\n        - 172.17.1.0/24\n    # 允许所有namespace带有\"project=apps_project\" 标签的所有namesapce Pod流量\n    - namespaceSelector:\n        matchLabels:\n          project: apps_project\n    # 允许data这个namespace下带有\"role=apps\" 标签的所有Pod流量\n    - podSelector:\n        matchLabels:\n          role: apps\n    ports:\n    - protocol: TCP\n      port: 8080\n  egress:\n  # 允许data这个namespace下，带有\"role=data_centerevent\"的所有Pod到以下CIDR的流出流量\n  - to:\n    - ipBlock:\n        cidr: 10.0.0.0/24\n    ports:\n    - protocol: TCP\n      port: 6379\n```\n\n\n### 三、实现方案与难点\n#### 实现难点\n\n- ACK 集群都为托管版，无法通过自行修改配置更改CNI 插件。且更改CNI 插件可能会导致当前网络模型变动造成未知异常\n- AlicloudACK 集群有两种CNI 网络插件：Flannel、Terway。Alicloud的ACK 集群上面只有Terway 集群支持NetworkPolicy。\n- 已有网络插件无法平滑进行切换，只能通过删除集群重建物理层的方式重新改为 Terway 集群。\n\n\n#### 迁移可行性方案思考\n\n- 由于当前集群网络规划冲突且复杂，建议使用重建集群方式。新建一个全新规划的集群然后将应用进行迁移：\n   - 无状态应用且无外部调用需求类应用，直接进行部署迁移\n   - 部分无依赖/弱依赖 应用，使用打包应用群组的方式在新集群进行部署，且新建全新SLB接入新集群应用，通过切换域名解析/修改IP 方式将流量切入新集群应用。\n\n\n#### 参考：\n1. Kubernetes 官网：[https://kubernetes.io/zh/docs/concepts/services-networking/network-policies/](https://kubernetes.io/zh/docs/concepts/services-networking/network-policies/)\n2. Alicloud官网：[https://help.aliyun.com/document_detail/97621.html](https://help.aliyun.com/document_detail/97621.html)\n3. NetworkPolicy 支持的CNI 插件：[https://www.qikqiak.com/k8strain/network/networkpolicy/](https://www.qikqiak.com/k8strain/network/networkpolicy/)\n4. Alicloud官网（Terway 集群网络规划策略）：[https://help.aliyun.com/document_detail/86500.html](https://help.aliyun.com/document_detail/86500.html)\n","slug":"k8s-networkpolicy","published":1,"updated":"2024-01-21T15:30:00.082Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm0fat8zn000qs0nj1nkr7p0e","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"一、背景\"><a href=\"#一、背景\" class=\"headerlink\" title=\"一、背景\"></a>一、背景</h3><blockquote>\n<p>一次对当前业务使用ACK 集群的业务调研与改造：针对NetworkPolicy 策略的调研，主要用于新建ACK 集群的网络规划与网络隔离</p>\n</blockquote>\n<h4 id=\"1）当前云环境ACK-集群使用现状和痛点\"><a href=\"#1）当前云环境ACK-集群使用现状和痛点\" class=\"headerlink\" title=\"1）当前云环境ACK 集群使用现状和痛点\"></a>1）当前云环境ACK 集群使用现状和痛点</h4><ol>\n<li><p>UAT&#x2F;线上 环境应用较多，且应用没有做集群内隔离，所有应用全部都在ACK 集群的default namespace 中。没有做到逻辑网络隔离。</p>\n</li>\n<li><p>集群通过暴露公网SLB 方式进行集群调用，存在浪费资源、管理混乱、安全风险等问题。通过namespace 隔离 + NetworkPolicy 策略通信的方式可以实现集群内部应用自行调用，和VPC 打通之后使用NetworkPolicy 的IP 块策略还可实现跨集群的应用内网调用。</p>\n</li>\n</ol>\n<h4 id=\"2）实现隔离策略价值\"><a href=\"#2）实现隔离策略价值\" class=\"headerlink\" title=\"2）实现隔离策略价值\"></a>2）实现隔离策略价值</h4><ol>\n<li><p>降低成本：可以通过网络逻辑隔离的方式将应用已namespace 方式进行隔离，减少冗余的物理设备降低成本。</p>\n</li>\n<li><p>增加效能：避免复杂且多余的网络设计，使应用之间的调用简单且易于排查。</p>\n</li>\n</ol>\n<span id=\"more\"></span>\n<p>问题点：</p>\n<ul>\n<li>应用SLB 暴露公网方式，白名单管理方式存在多人修改不同步且随意添加白名单带来风险问题。多个SLB 带来的白名单、监听等也存在管理记录困难问题。</li>\n<li>通过namespace 隔离，网络规划便于设计（同一VPC 下天然可以通信）。应用间调用完全可以通过集群内部策略实现通信，减少因为网络造成的应用通信异常。</li>\n</ul>\n<img data-src=\"/posts/8aa0/7b70de99e5f7.png\" class>\n\n<h3 id=\"二、概念理解\"><a href=\"#二、概念理解\" class=\"headerlink\" title=\"二、概念理解\"></a>二、概念理解</h3><h4 id=\"1）CNI-插件\"><a href=\"#1）CNI-插件\" class=\"headerlink\" title=\"1）CNI 插件\"></a>1）CNI 插件</h4><p>k8s 本身没有对容器之间的通信网络进行实现，而是通过 CNI 定义了容器网络的接口的形式，让其他组件实现CNI来实现容器间的网络通信，CNI主要解决什么问题？</p>\n<ul>\n<li>第一，如何保证每个Pod拥有一个集群内唯一的IP地址？</li>\n<li>第二，如何保证不同节点的IP地址划分不会重复？</li>\n<li>第三，如何保证跨节点的Pod可以互相通信？</li>\n<li>第四，如何保证不同节点的Pod可以与跨节点的主机互相通信？</li>\n</ul>\n<p>常见的CNI 插件：Calico、Flannel、Terway、Weave Net、 以及 Contiv</p>\n<h4 id=\"2）Terway与Flannel对比\"><a href=\"#2）Terway与Flannel对比\" class=\"headerlink\" title=\"2）Terway与Flannel对比\"></a>2）Terway与Flannel对比</h4><p>在创建集群时，ACK提供Terway和Flannel两种网络插件：</p>\n<ul>\n<li>Terway：是Alicloud容器服务ACK自研的网络插件。Terway将Alicloud的弹性网卡分配给容器，支持基于Kubernetes标准的网络策略来定义容器间的访问策略，支持对单个容器做带宽的限流。Terway拥有更为灵活的IPAM（容器地址分配）策略，避免地址浪费。如果您不需要使用网络策略（Network Policy），可以选择Flannel，其他情况建议选择Terway。</li>\n<li>Flannel：使用的是简单稳定的社区Flannel CNI插件。配合Alicloud的VPC的高速网络，能给集群高性能和稳定的容器网络体验。Flannel功能偏简单，支持的特性少。例如，不支持基于Kubernetes标准的网络策略（Network Policy）。更多信息，请参见<a href=\"https://github.com/coreos/flannel\">Flannel</a>。</li>\n</ul>\n<h4 id=\"3）NetworkPolicy-实现方式\"><a href=\"#3）NetworkPolicy-实现方式\" class=\"headerlink\" title=\"3）NetworkPolicy 实现方式\"></a>3）NetworkPolicy 实现方式</h4><ol>\n<li>前置条件：集群安装 CNI（container network interface）插件，Alicloud支持两种插件：Flannel（不支持NetworkPolicy）、Terway</li>\n<li>ACK 集群开启NetworkPolicy 方式：</li>\n</ol>\n<ul>\n<li>控制台方式操作（简易操作）：需通过Alicloud提工单申请</li>\n<li>命令行方式操作（kubectl 方式）：无需申请可直接操作。开启方式：<ul>\n<li><p>创建Terway集群时可选中** NetworkPolicy支持** 直接开启</p>\n<img data-src=\"/posts/8aa0/2afdc3d69fa9.png\" class>\n</li>\n<li><p>通过修改ConfigMap –&gt; eni-config 文件开启</p>\n</li>\n</ul>\n</li>\n</ul>\n<img data-src=\"/posts/8aa0/6bbe6aab7201.png\" class>\n\n\n<ol start=\"3\">\n<li>具体实现</li>\n</ol>\n<ul>\n<li><p>NetworkPolicy 支持三种方式进行网络隔离：namespace、ipBlock（CIDR）、Pods</p>\n</li>\n<li><p>默认情况下非隔离接受任何流量。使用NetworkPolicy 资源配置选中Pod 进入隔离状态（白名单规则），隔离规则有入站（ingress）和出站（egress）规则指定（与iptables概念类似，但不同的是 网络策略是并集累积的规则）</p>\n</li>\n<li><p>示例配置：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">networking.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">NetworkPolicy</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">test-network-policy</span></span><br><span class=\"line\">  <span class=\"comment\"># 为namespace 为data的应用设置策略，默认隔离所有流量</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">data</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"comment\"># pod选择器-必需</span></span><br><span class=\"line\">  <span class=\"attr\">podSelector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">role:</span> <span class=\"string\">&quot;data_centerevent&quot;</span></span><br><span class=\"line\">      <span class=\"comment\"># role: &quot;&quot;  role分组标签配置为空时表示匹配当前namespace所有pod</span></span><br><span class=\"line\">  <span class=\"attr\">policyTypes:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">Ingress</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">Egress</span></span><br><span class=\"line\">  <span class=\"attr\">ingress:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">from:</span></span><br><span class=\"line\">    <span class=\"comment\"># 允许 172.17.0.0/16网段，排除 172.17.1.0/24</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">ipBlock:</span></span><br><span class=\"line\">        <span class=\"attr\">cidr:</span> <span class=\"number\">172.17</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">/16</span></span><br><span class=\"line\">        <span class=\"attr\">except:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"number\">172.17</span><span class=\"number\">.1</span><span class=\"number\">.0</span><span class=\"string\">/24</span></span><br><span class=\"line\">    <span class=\"comment\"># 允许所有namespace带有&quot;project=apps_project&quot; 标签的所有namesapce Pod流量</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">namespaceSelector:</span></span><br><span class=\"line\">        <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">          <span class=\"attr\">project:</span> <span class=\"string\">apps_project</span></span><br><span class=\"line\">    <span class=\"comment\"># 允许data这个namespace下带有&quot;role=apps&quot; 标签的所有Pod流量</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">podSelector:</span></span><br><span class=\"line\">        <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">          <span class=\"attr\">role:</span> <span class=\"string\">apps</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">  <span class=\"attr\">egress:</span></span><br><span class=\"line\">  <span class=\"comment\"># 允许data这个namespace下，带有&quot;role=data_centerevent&quot;的所有Pod到以下CIDR的流出流量</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">to:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">ipBlock:</span></span><br><span class=\"line\">        <span class=\"attr\">cidr:</span> <span class=\"number\">10.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">/24</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">6379</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"三、实现方案与难点\"><a href=\"#三、实现方案与难点\" class=\"headerlink\" title=\"三、实现方案与难点\"></a>三、实现方案与难点</h3><h4 id=\"实现难点\"><a href=\"#实现难点\" class=\"headerlink\" title=\"实现难点\"></a>实现难点</h4><ul>\n<li>ACK 集群都为托管版，无法通过自行修改配置更改CNI 插件。且更改CNI 插件可能会导致当前网络模型变动造成未知异常</li>\n<li>AlicloudACK 集群有两种CNI 网络插件：Flannel、Terway。Alicloud的ACK 集群上面只有Terway 集群支持NetworkPolicy。</li>\n<li>已有网络插件无法平滑进行切换，只能通过删除集群重建物理层的方式重新改为 Terway 集群。</li>\n</ul>\n<h4 id=\"迁移可行性方案思考\"><a href=\"#迁移可行性方案思考\" class=\"headerlink\" title=\"迁移可行性方案思考\"></a>迁移可行性方案思考</h4><ul>\n<li>由于当前集群网络规划冲突且复杂，建议使用重建集群方式。新建一个全新规划的集群然后将应用进行迁移：<ul>\n<li>无状态应用且无外部调用需求类应用，直接进行部署迁移</li>\n<li>部分无依赖&#x2F;弱依赖 应用，使用打包应用群组的方式在新集群进行部署，且新建全新SLB接入新集群应用，通过切换域名解析&#x2F;修改IP 方式将流量切入新集群应用。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h4><ol>\n<li>Kubernetes 官网：<a href=\"https://kubernetes.io/zh/docs/concepts/services-networking/network-policies/\">https://kubernetes.io/zh/docs/concepts/services-networking/network-policies/</a></li>\n<li>Alicloud官网：<a href=\"https://help.aliyun.com/document_detail/97621.html\">https://help.aliyun.com/document_detail&#x2F;97621.html</a></li>\n<li>NetworkPolicy 支持的CNI 插件：<a href=\"https://www.qikqiak.com/k8strain/network/networkpolicy/\">https://www.qikqiak.com/k8strain/network/networkpolicy/</a></li>\n<li>Alicloud官网（Terway 集群网络规划策略）：<a href=\"https://help.aliyun.com/document_detail/86500.html\">https://help.aliyun.com/document_detail&#x2F;86500.html</a></li>\n</ol>\n","site":{"data":{"footer":"","styles":".post {\n  margin-top: 50px;\n  margin-bottom: 50px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n.headband {\n  display: none;\n}\nbody {\n  background: url(\"/images/background.jpeg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\n.post-block.page {\n  margin-top: 40px;\n}\n.category-all-page {\n  box-shadow: 0px 0px 10px 0px rgba(0,0,0,0.5);\n  background-color: #797d7f;\n  padding: 20px 30px 60px 30px;\n  border-radius: 25px 25px 25px 25px;\n}\n.category-all-title {\n  font-family: Impact;\n  font-size: 24px;\n  color: #0ff;\n}\n.category-list {\n  overflow: auto;\n}\n.category-list li {\n  height: 100%;\n  float: left;\n  border-right: 3px solid #222;\n  padding: 0 20px;\n}\n.category-all ul li {\n  list-style: none !important;\n}\n.category-list li:last-child {\n  border-right: none;\n}\n.category-list li a {\n  font-size: 16px;\n  text-decoration: none;\n  color: #7fff00;\n  font-family: Helvetica, Verdana, sans-serif;\n  -webkit-transition: all 0.5s ease;\n  -moz-transition: all 0.5s ease;\n  -o-transition: all 0.5s ease;\n  -ms-transition: all 0.5s ease;\n  transition: all 0.5s ease;\n}\n.category-list li a:hover {\n  color: #000;\n}\n.category-list li.active a {\n  font-weight: bold;\n  color: #000;\n}\n.tag-cloud a {\n  box-shadow: 0 1px 3px #6f42c1, 0 1px 2px #d9534f;\n  padding: 2px 10px;\n  margin: 8px;\n  background: rgba(193,66,92,0);\n  border-bottom: none;\n  border-radius: 20px;\n}\ncode {\n  background: #555;\n  color: #fff;\n}\n","variables":""}},"length":3106,"excerpt":"<h3 id=\"一、背景\"><a href=\"#一、背景\" class=\"headerlink\" title=\"一、背景\"></a>一、背景</h3><blockquote>\n<p>一次对当前业务使用ACK 集群的业务调研与改造：针对NetworkPolicy 策略的调研，主要用于新建ACK 集群的网络规划与网络隔离</p>\n</blockquote>\n<h4 id=\"1）当前云环境ACK-集群使用现状和痛点\"><a href=\"#1）当前云环境ACK-集群使用现状和痛点\" class=\"headerlink\" title=\"1）当前云环境ACK 集群使用现状和痛点\"></a>1）当前云环境ACK 集群使用现状和痛点</h4><ol>\n<li><p>UAT&#x2F;线上 环境应用较多，且应用没有做集群内隔离，所有应用全部都在ACK 集群的default namespace 中。没有做到逻辑网络隔离。</p>\n</li>\n<li><p>集群通过暴露公网SLB 方式进行集群调用，存在浪费资源、管理混乱、安全风险等问题。通过namespace 隔离 + NetworkPolicy 策略通信的方式可以实现集群内部应用自行调用，和VPC 打通之后使用NetworkPolicy 的IP 块策略还可实现跨集群的应用内网调用。</p>\n</li>\n</ol>\n<h4 id=\"2）实现隔离策略价值\"><a href=\"#2）实现隔离策略价值\" class=\"headerlink\" title=\"2）实现隔离策略价值\"></a>2）实现隔离策略价值</h4><ol>\n<li><p>降低成本：可以通过网络逻辑隔离的方式将应用已namespace 方式进行隔离，减少冗余的物理设备降低成本。</p>\n</li>\n<li><p>增加效能：避免复杂且多余的网络设计，使应用之间的调用简单且易于排查。</p>\n</li>\n</ol>","more":"<p>问题点：</p>\n<ul>\n<li>应用SLB 暴露公网方式，白名单管理方式存在多人修改不同步且随意添加白名单带来风险问题。多个SLB 带来的白名单、监听等也存在管理记录困难问题。</li>\n<li>通过namespace 隔离，网络规划便于设计（同一VPC 下天然可以通信）。应用间调用完全可以通过集群内部策略实现通信，减少因为网络造成的应用通信异常。</li>\n</ul>\n<img data-src=\"/posts/8aa0/7b70de99e5f7.png\" class>\n\n<h3 id=\"二、概念理解\"><a href=\"#二、概念理解\" class=\"headerlink\" title=\"二、概念理解\"></a>二、概念理解</h3><h4 id=\"1）CNI-插件\"><a href=\"#1）CNI-插件\" class=\"headerlink\" title=\"1）CNI 插件\"></a>1）CNI 插件</h4><p>k8s 本身没有对容器之间的通信网络进行实现，而是通过 CNI 定义了容器网络的接口的形式，让其他组件实现CNI来实现容器间的网络通信，CNI主要解决什么问题？</p>\n<ul>\n<li>第一，如何保证每个Pod拥有一个集群内唯一的IP地址？</li>\n<li>第二，如何保证不同节点的IP地址划分不会重复？</li>\n<li>第三，如何保证跨节点的Pod可以互相通信？</li>\n<li>第四，如何保证不同节点的Pod可以与跨节点的主机互相通信？</li>\n</ul>\n<p>常见的CNI 插件：Calico、Flannel、Terway、Weave Net、 以及 Contiv</p>\n<h4 id=\"2）Terway与Flannel对比\"><a href=\"#2）Terway与Flannel对比\" class=\"headerlink\" title=\"2）Terway与Flannel对比\"></a>2）Terway与Flannel对比</h4><p>在创建集群时，ACK提供Terway和Flannel两种网络插件：</p>\n<ul>\n<li>Terway：是Alicloud容器服务ACK自研的网络插件。Terway将Alicloud的弹性网卡分配给容器，支持基于Kubernetes标准的网络策略来定义容器间的访问策略，支持对单个容器做带宽的限流。Terway拥有更为灵活的IPAM（容器地址分配）策略，避免地址浪费。如果您不需要使用网络策略（Network Policy），可以选择Flannel，其他情况建议选择Terway。</li>\n<li>Flannel：使用的是简单稳定的社区Flannel CNI插件。配合Alicloud的VPC的高速网络，能给集群高性能和稳定的容器网络体验。Flannel功能偏简单，支持的特性少。例如，不支持基于Kubernetes标准的网络策略（Network Policy）。更多信息，请参见<a href=\"https://github.com/coreos/flannel\">Flannel</a>。</li>\n</ul>\n<h4 id=\"3）NetworkPolicy-实现方式\"><a href=\"#3）NetworkPolicy-实现方式\" class=\"headerlink\" title=\"3）NetworkPolicy 实现方式\"></a>3）NetworkPolicy 实现方式</h4><ol>\n<li>前置条件：集群安装 CNI（container network interface）插件，Alicloud支持两种插件：Flannel（不支持NetworkPolicy）、Terway</li>\n<li>ACK 集群开启NetworkPolicy 方式：</li>\n</ol>\n<ul>\n<li>控制台方式操作（简易操作）：需通过Alicloud提工单申请</li>\n<li>命令行方式操作（kubectl 方式）：无需申请可直接操作。开启方式：<ul>\n<li><p>创建Terway集群时可选中** NetworkPolicy支持** 直接开启</p>\n<img data-src=\"/posts/8aa0/2afdc3d69fa9.png\" class>\n</li>\n<li><p>通过修改ConfigMap –&gt; eni-config 文件开启</p>\n</li>\n</ul>\n</li>\n</ul>\n<img data-src=\"/posts/8aa0/6bbe6aab7201.png\" class>\n\n\n<ol start=\"3\">\n<li>具体实现</li>\n</ol>\n<ul>\n<li><p>NetworkPolicy 支持三种方式进行网络隔离：namespace、ipBlock（CIDR）、Pods</p>\n</li>\n<li><p>默认情况下非隔离接受任何流量。使用NetworkPolicy 资源配置选中Pod 进入隔离状态（白名单规则），隔离规则有入站（ingress）和出站（egress）规则指定（与iptables概念类似，但不同的是 网络策略是并集累积的规则）</p>\n</li>\n<li><p>示例配置：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">networking.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">NetworkPolicy</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">test-network-policy</span></span><br><span class=\"line\">  <span class=\"comment\"># 为namespace 为data的应用设置策略，默认隔离所有流量</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">data</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"comment\"># pod选择器-必需</span></span><br><span class=\"line\">  <span class=\"attr\">podSelector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">role:</span> <span class=\"string\">&quot;data_centerevent&quot;</span></span><br><span class=\"line\">      <span class=\"comment\"># role: &quot;&quot;  role分组标签配置为空时表示匹配当前namespace所有pod</span></span><br><span class=\"line\">  <span class=\"attr\">policyTypes:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">Ingress</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">Egress</span></span><br><span class=\"line\">  <span class=\"attr\">ingress:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">from:</span></span><br><span class=\"line\">    <span class=\"comment\"># 允许 172.17.0.0/16网段，排除 172.17.1.0/24</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">ipBlock:</span></span><br><span class=\"line\">        <span class=\"attr\">cidr:</span> <span class=\"number\">172.17</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">/16</span></span><br><span class=\"line\">        <span class=\"attr\">except:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"number\">172.17</span><span class=\"number\">.1</span><span class=\"number\">.0</span><span class=\"string\">/24</span></span><br><span class=\"line\">    <span class=\"comment\"># 允许所有namespace带有&quot;project=apps_project&quot; 标签的所有namesapce Pod流量</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">namespaceSelector:</span></span><br><span class=\"line\">        <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">          <span class=\"attr\">project:</span> <span class=\"string\">apps_project</span></span><br><span class=\"line\">    <span class=\"comment\"># 允许data这个namespace下带有&quot;role=apps&quot; 标签的所有Pod流量</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">podSelector:</span></span><br><span class=\"line\">        <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">          <span class=\"attr\">role:</span> <span class=\"string\">apps</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">  <span class=\"attr\">egress:</span></span><br><span class=\"line\">  <span class=\"comment\"># 允许data这个namespace下，带有&quot;role=data_centerevent&quot;的所有Pod到以下CIDR的流出流量</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">to:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">ipBlock:</span></span><br><span class=\"line\">        <span class=\"attr\">cidr:</span> <span class=\"number\">10.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">/24</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">6379</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"三、实现方案与难点\"><a href=\"#三、实现方案与难点\" class=\"headerlink\" title=\"三、实现方案与难点\"></a>三、实现方案与难点</h3><h4 id=\"实现难点\"><a href=\"#实现难点\" class=\"headerlink\" title=\"实现难点\"></a>实现难点</h4><ul>\n<li>ACK 集群都为托管版，无法通过自行修改配置更改CNI 插件。且更改CNI 插件可能会导致当前网络模型变动造成未知异常</li>\n<li>AlicloudACK 集群有两种CNI 网络插件：Flannel、Terway。Alicloud的ACK 集群上面只有Terway 集群支持NetworkPolicy。</li>\n<li>已有网络插件无法平滑进行切换，只能通过删除集群重建物理层的方式重新改为 Terway 集群。</li>\n</ul>\n<h4 id=\"迁移可行性方案思考\"><a href=\"#迁移可行性方案思考\" class=\"headerlink\" title=\"迁移可行性方案思考\"></a>迁移可行性方案思考</h4><ul>\n<li>由于当前集群网络规划冲突且复杂，建议使用重建集群方式。新建一个全新规划的集群然后将应用进行迁移：<ul>\n<li>无状态应用且无外部调用需求类应用，直接进行部署迁移</li>\n<li>部分无依赖&#x2F;弱依赖 应用，使用打包应用群组的方式在新集群进行部署，且新建全新SLB接入新集群应用，通过切换域名解析&#x2F;修改IP 方式将流量切入新集群应用。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h4><ol>\n<li>Kubernetes 官网：<a href=\"https://kubernetes.io/zh/docs/concepts/services-networking/network-policies/\">https://kubernetes.io/zh/docs/concepts/services-networking/network-policies/</a></li>\n<li>Alicloud官网：<a href=\"https://help.aliyun.com/document_detail/97621.html\">https://help.aliyun.com/document_detail&#x2F;97621.html</a></li>\n<li>NetworkPolicy 支持的CNI 插件：<a href=\"https://www.qikqiak.com/k8strain/network/networkpolicy/\">https://www.qikqiak.com/k8strain/network/networkpolicy/</a></li>\n<li>Alicloud官网（Terway 集群网络规划策略）：<a href=\"https://help.aliyun.com/document_detail/86500.html\">https://help.aliyun.com/document_detail&#x2F;86500.html</a></li>\n</ol>"},{"title":"Kubernetes-网络","abbrlink":"5d90","date":"2023-02-08T15:20:49.000Z","_content":"### 一、简介\n#### 1）容器网络基本概念\n\n- Linux Network Namespace\n   - linux 网络设备：network interface device，loopback device，bridge device，veth device，tun/tap device，vxlan device，ip tunnel device 等等可完成网络数据包收发，提供额外修改数据包功能设备\n   - linux 路由表（三层 ip 包路由寻址功能），arp 表（提供 ip 对应的 mac 信息），fdb（提供基于 mac 转发功能中 mac 地址对应的网络接口） 等\n   - linux 协议栈：对网络协议包的封装与解析，如二层 ethernet 包，三层 ip icmp包，四层 tcp/udp 包等\n   - linux iptable：基于内核模块 netfilter 完成对 linux 的 firewall 管理，例如控制 ingress 与 engress，nat 地址转换，端口映射等\n<!--more-->\n\n{% asset_img k8s-nw1.png %}\n> linux 不仅仅只有 network namespace 用来进行网络隔离，还有 pid namespace 用来隔离进程，user namespace 用来隔离用户，mount namespace 用来隔离挂载点，ipc namespace 用来隔离信号量和共享内存等，uts namespace 用来隔离主机名和域名。\n> 配合 cgroup 控制组，限制 cpu，memory，io 等资源。构成容器的底层实现\n\n- Linux Bridge Device\n\nlinux 网桥设备，可以附加 attach 多个 linux 从设备。类似于一个内部虚拟二层交换机，可以进行二层数据包广播。但是注意的是linux bridge设备可以有自己的ip地址。也就是说，多个linux网络设备attach到一个bridge上，那么这些网络设备的ip地址将会失效(只有二层功能)，当一个设备收到数据包的时候，bridge会把数据包转发到其它所有attach到bridge上的从设备，从而实现广播的效果。\n{% asset_img k8s-nw2.png %}\n\n- Linux Veth Device\n\n总是成对出现，一对 peer 两个端点，数据包从一个 peer 流入并流出到另一个 peer。veth pair 可以跨 network namespace。\n{% asset_img k8s-nw3.png %}\n\n#### 2）k8s 集群容器网络通讯方式\n\n- 网络负载方式\n\nkube-proxy 组件启动参数控制（--proxy-module=ipvs）\niptables：默认\nipvs：v1.11 版本及之后\n\n- 网络通讯方式\n\nunderlay：flannel host-gw，calico bgp 等（需开启 ip_forword 内核参数）\noverlay：flannel vxlan，calico ipip，flannel udp（一般不使用） 等\n\n#### 3）测试环境主机信息\n| 宿主机 IP | 角色 | 容器 CIDR | CNI 网卡地址 | Flannel.1 vtep 设备 |\n| --- | --- | --- | --- | --- |\n| 192.168.205.4 | master | 10.42.0.0/24 | 10.42.0.1 | 10.42.0.0\n| 192.168.205.3 | node1 | 10.42.1.0/24 | 10.42.1.1 | 10.42.1.0\n| 192.168.205.5 | node2 | 10.42.2.0/24 | 10.42.2.1 | 10.42.2.0\n\n\n### 二、宿主机内网络\n#### 1）docker 容器的四种网络类型\n\n- bridge 模式（默认）：--net=bridge\n\n宿主机创建 docker0 网卡，使用独立 IP 段，为每个容器分配改网段 IP，容器之间通过该网桥进行通信（类似二层交换机）\n> {% asset_img k8s-nw4.png %}\n> 自定义 bridge 网络：宿主机范围创建独立的 network namespace \n> {% asset_img k8s-nw5.png %}\n\n\n- host 模式：--net=host\n\n共享宿主机网络，容器暴露端口时占用宿主机端口。网络模式简单，性能较好，一般用于单容器服务。\n{% asset_img k8s-nw6.png %}\n\n- contaniner 模式：--net=container:name or id\n\n指定新创建的容器共享已存在的容器 Network namespace（k8s 中 pod 即为多个容器共享 network namespace）。除了网络，文件系统 进程等都为隔离，容器间进程可以通过 lo 网卡通信\n{% asset_img k8s-nw7.png %}\n\n- none 模式：容器有独立的 Network namespace ，但没有任何网络配置，可自定义进行网络配置。一般用于 CPU 密集型任务，计算完成保留磁盘无需对外网络\n\n#### 2）docker 宿主环境中容器网络\n\n- 每一个container都有一个network namespace，然后拥有container自己的网络设备，路由表，arp表，协议栈，iptable等，各个container的network namespace相互隔离。\n- 在宿主的default netwok nemespace中会有一个linux bridge设备，一般名称为docker0。\n- 每一个container对应一个veth pair设备，这个设备的一端在container的network namespace里，另一端attach到宿主networkwork namespace的docker0 linux bridge上。\n- 这样在宿主环境里，就好像有一个二层交换机(docker0 bridge)，把宿主内的所有container连接起来。所以，在宿主内的container都是可以直接相互访问的，而且是直连的方式\n\n{% asset_img k8s-nw8.png %}\n\n```shell\n## 相关命令\n#查看 bridge 网桥信息\n#k8s pod 伴生 infrastructure 容器，与基础容器共用 network namespace 与 veth pair\nbrctl show\n\n#查看 veth pair 设备信息\nip addr\nip -d link show\n\n#查看路由表\nroute -n\n\n#查看 docker 容器信息\ndocker ps/inspect/container\n```\n\n### 三、Service：cluster ip 实现原理\n#### 1）cluster ip 如何访问\nk8s 集群中服务需要相互访问，一般为之创建相应的 service，集群内部访问时一般使用 cluster ip。一个 cluster ip 后面会关联多个 endpoints（实际的 pod 地址）。对于 cluster ip 的访问，也就是实现了对 cluster ip 关联的多个 endpoints 负载均衡访问（负载方式为 iptables 或 ipvs）\n\n#### 2）iptables 方式\n\n- 查看 service 信息：cluster ip 以及关联的 endpoints ip\n```shell\n# kubectl describe service nginx-test\nName:              nginx-test\nNamespace:         default\nLabels:            app=nginx-test\nAnnotations:       <none>\nSelector:          app=nginx-test\nType:              ClusterIP\nIP Family Policy:  SingleStack\nIP Families:       IPv4\nIP:                10.43.6.58\nIPs:               10.43.6.58\nPort:              80-80  80/TCP\nTargetPort:        80/TCP\nEndpoints:         10.42.1.6:80,10.42.2.6:80\n```\n\n- 查看宿主机 iptables \n```shell\n# iptables -nvL -t nat |head\nChain PREROUTING (policy ACCEPT 0 packets, 0 bytes)\npkts bytes target     prot opt in     out     source               destination\n298 19090 KUBE-SERVICES  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* kubernetes service portals */\n202 12456 CNI-HOSTPORT-DNAT  all  --  *      *       0.0.0.0/0            0.0.0.0/0            ADDRTYPE match dst-type LOCAL\n```\n对于 PREROUTING chain 中，所有的流量都走到了 KUBE-SERVICES 这个 target 中。请注意 PREROUTING chain 是流量到达之后的第一个入口。如果在 pod 里运行命令 curl http://10.43.6.58，根据容器内部路由表，数据包应该是这样的流动：\n\n   - 在pod中，根据路由表发现cluster ip(**10.43.6.58**)走默认路由，选择了默认网关。\n   - 在pod中，默认网关的ip地址就是宿主netwok namespace的 **docker0 或 cni0** 的ip地址，并且默认网关为直连路由。\n   - 在pod中，根据路由表，使用eth0 device发送数据，eth0本质是veth pair在pod network namespace的一端，另一端attach在宿主netwok namespace的 **docker0 或 cni0** bridge上。\n   - veth pair，数据从pod network namespace的一端发出，进入到了attached到**docker0 或 cni0** bridge上的另一端。\n   - **docker0 或 cni0** bridge收到数据之后，自然就来到了host network namesapce 的 PREROUTING chain\n\n- 查看 KUBE-SERVICES target\n```shell\n# iptables -nvL -t nat | grep 10.43.6.58\n0     0 KUBE-SVC-7CWUT4JBGBRVUN2L  tcp  --  *      *       0.0.0.0/0            10.43.6.58           /* default/nginx-test:80-80 cluster IP */ tcp dpt:80\n\n# iptables -nvL -t nat | grep KUBE-SVC-7CWUT4JBGBRVUN2L -A 5\nChain KUBE-SVC-7CWUT4JBGBRVUN2L (1 references)\npkts bytes target     prot opt in     out     source               destination\n0     0 KUBE-SEP-U2YYZT2C3O6VM4EV  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* default/nginx-test:80-80 -> 10.42.1.6:80 */ statistic mode random probability 0.50000000000\n0     0 KUBE-SEP-GWUIQWA2TNZI4ESX  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* default/nginx-test:80-80 -> 10.42.2.6:80 */\n```\n在 KUBE-SERVICES target中我们可以看到目标地址为cluster ip 10.43.6.58 的匹配target 为 KUBE-SVC-7CWUT4JBGBRVUN2L。\n**KUBE-SVC-7CWUT4JBGBRVUN2L 链信息：**\n\n   - 存在两个target （对应两个 Pod ）KUBE-SEP-U2YYZT2C3O6VM4EV 和 KUBE-SEP-GWUIQWA2TNZI4ESX \n   - 在 KUBE-SEP-U2YYZT2C3O6VM4EV 中有statistic mode random probability 0.5。0.5 利用了iptable内核随机模块，随机比率为0.5，也就是50%\n   - 由于一半随机比率进入 KUBE-SEP-U2YYZT2C3O6VM4EV target， 因此另一个 target 的随机比率也为50%，实现负载均衡\n\n- 查看 KUBE-SEP-U2YYZT2C3O6VM4EV 和 KUBE-SEP-GWUIQWA2TNZI4ESX \n```shell\n# iptables -nvL -t nat | grep KUBE-SEP-U2YYZT2C3O6VM4EV -A 3\nChain KUBE-SEP-U2YYZT2C3O6VM4EV (1 references)\npkts bytes target     prot opt in     out     source               destination\n0     0 KUBE-MARK-MASQ  all  --  *      *       10.42.1.6            0.0.0.0/0            /* default/nginx-test:80-80 */\n0     0 DNAT       tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            /* default/nginx-test:80-80 */ tcp to:10.42.1.6:80\n\n# iptables -nvL -t nat | grep KUBE-SEP-GWUIQWA2TNZI4ESX -A 3\nChain KUBE-SEP-GWUIQWA2TNZI4ESX (1 references)\npkts bytes target     prot opt in     out     source               destination\n0     0 KUBE-MARK-MASQ  all  --  *      *       10.42.2.6            0.0.0.0/0            /* default/nginx-test:80-80 */\n0     0 DNAT       tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            /* default/nginx-test:80-80 */ tcp to:10.42.2.6:80\n```\n在这2个target中我们可以看到：\n\n   - 分别做了MASQ操作，这个应该是出站engress流量(限定了source ip)，不是我们的入站ingress流量。\n   - 做了DNAT操作，把原来的cluster ip给DANT转换成了pod的ip 10.42.1.6和10.42.2.6。把原来的port转换成了80 port\n   - 经过这个一系列iptable的target我们的原始请求10.42.1.6:80就变成了10.42.1.6:80或者10.42.2.6:80，而且两者转变的机率各是50%。\n   - 根据iptable，经过PREROUTING chain发现DNAT之后的10.42.1.6或者10.42.2.6不是本地的ip(这两个ip是pod的ip，当然不会在host network namespace里)。所以就走到了Forwarding chain中，根据host network namespace的路由表来决定下一跳地址\n```shell\n# 查看路由表信息\n# ip route\ndefault via 192.168.205.1 dev enp0s1 proto dhcp src 192.168.205.4 metric 100\n10.42.0.0/24 dev cni0 proto kernel scope link src 10.42.0.1\n10.42.1.0/24 via 10.42.1.0 dev flannel.1 onlink\n10.42.2.0/24 via 10.42.2.0 dev flannel.1 onlink\n192.168.205.0/24 dev enp0s1 proto kernel scope link src 192.168.205.4 metric 100\n192.168.205.1 dev enp0s1 proto dhcp scope link src 192.168.205.4 metric 100\n\n# 根据路由表规则10.42.1.6和10.42.2.6走 flannel.1 vtep 设备跨主机通信 node 节点上的 pod\n```\n\n- clusterip 类型 service 总结\n   - 流量从pod network namespace中走到host netwok namespace的docker0中。\n   - 在host netwok namespace的**PREROUTING chain**中会经过一系列target。\n   - 在这些target里根据iptable内核随机模块来实现匹配endpoint target，随机比率为均匀分配，实现均匀的负载均衡。内核实现负载均衡，无法自定义负载均衡算法。\n   - 在endpoint target里实现了DNAT，也就是将目标地址cluster ip转化为实际的pod的ip。\n   - cluster ip是虚拟ip，不会和任何device绑定。\n   - 需要host开启路由转发功能(net.ipv4.ip_forward = 1)。\n   - 数据包在host netwok namespace中经过转换以及DNAT之后，由host network namespace的路由表来决定下一跳地址\n\n#### 3）ipvs 方式\n\n- [https://mp.weixin.qq.com/s?__biz=MzI0MDE3MjAzMg==&mid=2648393263&idx=1&sn=d6f27c502a007aa8be7e75b17afac42f&chksm=f1310b40c64682563cfbfd0688deb0fc9569eca3b13dc721bfe0ad7992183cabfba354e02050&scene=178&cur_album_id=2123526506718003213#rd](https://mp.weixin.qq.com/s?__biz=MzI0MDE3MjAzMg==&mid=2648393263&idx=1&sn=d6f27c502a007aa8be7e75b17afac42f&chksm=f1310b40c64682563cfbfd0688deb0fc9569eca3b13dc721bfe0ad7992183cabfba354e02050&scene=178&cur_album_id=2123526506718003213#rd)\n- [https://icloudnative.io/posts/ipvs-how-kubernetes-services-direct-traffic-to-pods/](https://icloudnative.io/posts/ipvs-how-kubernetes-services-direct-traffic-to-pods/)\n\n### 四、Service：nodeport 实现原理\n#### 1）nodeport ip 如何访问\n通过访问宿主机端口 --> cluster ip 路径（端口范围：30000-32767）\n\n#### 2）iptables 方式\n\n- 查看 service 信息\n```shell\n# kubectl describe service nginx-test\nName:                     nginx-test\nNamespace:                default\nLabels:                   app=nginx-test\nAnnotations:              <none>\nSelector:                 app=nginx-test\nType:                     NodePort\nIP Family Policy:         SingleStack\nIP Families:              IPv4\nIP:                       10.43.6.58\nIPs:                      10.43.6.58\nPort:                     80-80  80/TCP\nTargetPort:               80/TCP\nNodePort:                 80-80  32506/TCP\nEndpoints:                10.42.1.6:80,10.42.2.6:80\nSession Affinity:         None\nExternal Traffic Policy:  Cluster\nEvents:                   <none>\n```\n对node port类型的service来说，访问host的port就访问到了这个服务。所以从host网络角度来看，当host收到数据包的时候应该是进入host network namespace的PREROUTING chain中，查看host network namespace的PREROUTING chain。\n\n- 查看宿主机 iptables\n```shell\n# iptables -nvL -t nat |head\nChain PREROUTING (policy ACCEPT 0 packets, 0 bytes)\npkts bytes target     prot opt in     out     source               destination\n323 20898 KUBE-SERVICES  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* kubernetes service portals */\n```\n根据规则，对于PREROUTING chain中，所有的流量都走到了KUBE-SERVICES这个target中。\n\n- 查看 KUBE-SERVICES target\n```shell\n# iptables -nvL -t nat |grep KUBE-SERVICES -A 10\nChain KUBE-SERVICES (2 references)\npkts bytes target     prot opt in     out     source               destination\n0     0 KUBE-SVC-7CWUT4JBGBRVUN2L  tcp  --  *      *       0.0.0.0/0            10.43.6.58           /* default/nginx-test:80-80 cluster IP */ tcp dpt:80\n```\n在KUBE-SERVICES target中当访问 nginx-test-service 在host上的 32506 时候，根据规则匹配到了 KUBE-NODEPORTS 这个target。\n```shell\n# iptables -nvL -t nat |grep KUBE-NODEPORTS -A 3\nChain KUBE-NODEPORTS (1 references)\npkts bytes target     prot opt in     out     source               destination\n2   124 KUBE-EXT-7CWUT4JBGBRVUN2L  tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            /* default/nginx-test:80-80 */ tcp dpt:32506\n```\n在KUBE-NODEPORTS target中可以看到当访问 32506 端口时到 KUBE-EXT-7CWUT4JBGBRVUN2L 这个 target \n\n- 查看 KUBE-EXT-7CWUT4JBGBRVUN2L  target\n```shell\n# iptables -nvL -t nat |grep KUBE-EXT-7CWUT4JBGBRVUN2L -A 5\nChain KUBE-EXT-7CWUT4JBGBRVUN2L (1 references)\n pkts bytes target     prot opt in     out     source               destination\n    2   124 KUBE-MARK-MASQ  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* masquerade traffic for default/nginx-test:80-80 external destinations */\n    2   124 KUBE-SVC-7CWUT4JBGBRVUN2L  all  --  *      *       0.0.0.0/0            0.0.0.0/0\n\n# iptables -nvL -t nat |grep KUBE-MARK-MASQ -A 3\nChain KUBE-MARK-MASQ (20 references)\n pkts bytes target     prot opt in     out     source               destination\n    2   124 MARK       all  --  *      *       0.0.0.0/0            0.0.0.0/0            MARK or 0x4000\n\n# iptables -nvL -t nat |grep KUBE-SVC-7CWUT4JBGBRVUN2L -A 5\nChain KUBE-SVC-7CWUT4JBGBRVUN2L (2 references)\n pkts bytes target     prot opt in     out     source               destination\n    0     0 KUBE-MARK-MASQ  tcp  --  *      *      !10.42.0.0/16         10.43.6.58           /* default/nginx-test:80-80 cluster IP */ tcp dpt:80\n    1    64 KUBE-SEP-U2YYZT2C3O6VM4EV  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* default/nginx-test:80-80 -> 10.42.1.6:80 */ statistic mode random probability 0.50000000000\n    1    60 KUBE-SEP-GWUIQWA2TNZI4ESX  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* default/nginx-test:80-80 -> 10.42.2.6:80 */\n```\n在 KUBE-EXT-7CWUT4JBGBRVUN2L 中可以看到两个 target\n\n   - KUBE-MARK-MASQ 打标记，无 nat target\n   - KUBE-SVC-7CWUT4JBGBRVUN2L target 进入 cluster ip 规则，重复第三部分规则，最终流量进入 Pod\n\n- nodeport 类型 service 总结：\n   - 在host netwok namespace的PREROUTING chain中会匹配KUBE-SERVICES target。\n   - 在KUBE-SERVICES target会匹配KUBE-NODEPORTS target\n   - 在KUBE-NODEPORTS target会根据prot来匹配KUBE-SVC-XXX target\n   - KUBE-SVC-XXX target就和第三部分中的cluster-ip类型service一样，最终流量进入到 Pod 中\n\n#### 3）ipvs 方式\n\n- [https://mp.weixin.qq.com/s?__biz=MzI0MDE3MjAzMg==&mid=2648393266&idx=1&sn=34d2a21b06d6e9ef4f4f7415f2cad567&chksm=f1310b5dc646824b45cbfc8cf25b0f2449f7223006b684da06ba58d95a2be7a3f0ad7aa6c4b9&scene=178&cur_album_id=2123526506718003213#rd](https://mp.weixin.qq.com/s?__biz=MzI0MDE3MjAzMg==&mid=2648393266&idx=1&sn=34d2a21b06d6e9ef4f4f7415f2cad567&chksm=f1310b5dc646824b45cbfc8cf25b0f2449f7223006b684da06ba58d95a2be7a3f0ad7aa6c4b9&scene=178&cur_album_id=2123526506718003213#rd)\n- [https://icloudnative.io/posts/ipvs-how-kubernetes-services-direct-traffic-to-pods/](https://icloudnative.io/posts/ipvs-how-kubernetes-services-direct-traffic-to-pods/)\n\n\n### 五、Service：ipvs 与 iptables 对比\n> 基于 ipvs 的 k8s 网络负载要求：\n> - linux 内核高于2.4.x\n> - 在 kube-proxy 网络组件中启动参数加入--proxy-mode=ipvs\n> - 安装 ipvsadm 工具（可选），用于操作管理 ipvs 规则\n\n\n- 两者都是采用linux内核模块完成负载均衡和endpoint的映射，所有操作都在内核空间完成，没有在应用程序的用户空间。\n- iptable方式依赖于linux netfilter/iptable内核模块。\n- ipvs方式依赖linux netfilter/iptable模块，ipset模块，ipvs模块。\n- iptable方式中，host宿主中ipatble的entry数目会随着service和对应endpoints的数目增多而增多。举个例子，比如有10个cluster ip类型的service，每个service有6个endpoints。那么在KUBE-SERVICES target中至少有10个entries(KUBE-SVC-XXX)与10个service对应，每个KUBE-SVC-XXX target中会有6个KUBE-SEP-XXX与6个endpoints来对应，每个KUBE-SEP-XXX会有2个enrties来分别做mark masq和DNAT，这样算起来至少有10*6*2=120个entries在iptable中。试想如果application中service和endpoints数目巨大，iptable entries也是非常庞大的，在一定情况下有可能带来性能上的问题。\n- ipvs方式中host宿主中iptable的entry数目是固定的，因为iptable做匹配的时候会利用ipset(KUBE-CLUSTER-IP或者KUBE-NODE-PORT-TCP)来匹配，service的数目决定了ipset的大小，并不会影响iptable的大小。这样就解决了iptable模式下，entries随着service和endpoints的增多而增多的问题。\n- 对于负载均衡，iptable方式采用random模块来完成负载均衡，ipvs方式支持多种负载均衡，例如round-robin，least connection，source hash等（可参考http://www.linuxvirtualserver.org/），并且由kubelet启动参数--ipvs-scheduler控制。\n- 对于目标地址的映射，iptable方式采用linux原生的DNAT，ipvs方式则利用ipvs模块完成。\n- ipvs方式会在host netwok namespace中创建网络设备kube-ipvs0，并且绑定了所有的cluster ip，这样保证了cluster-ip类型的service数据进入INPUT chain，从而让ipvs来完成负载均衡和目标地址的映射。\n- iptable方式不会在host netwok namespace中创建额外的网络设备。\n- iptable方式数据在host network namespace的chain中的路径是：PREROUTING-->FORWARDING-->POSTROUTING 在PREROUTING chain中完成负载均衡，mark masq和目标地址映射。\n\n- ipvs方式数据在host network namespace的chain中的路径是：PREROUTING-->INPUT-->POSTROUTING 在PREROUTING chain中完成mark masq SNAT，在INPUT chain利用ipvs完成负载均衡和目标地址映射。\n- iptable和ipvs方式在完成负载均衡和目标地址映射后都会根据host network namespace的路由表做下一跳路由选择。\n\n### 六、跨主机网络通信：flannel 组件\n#### 1）flannel underlay 网络：host-gw 方式\n**underlay 网络概念与配置**\n\n- 概念：underlay 网络在通讯过程没有额外封包，通过将容器的宿主机作为路由实现数据包转包\n\n- 配置方式：略\n\n**service 与 Pod 对应信息**\n```shell\n# kubectl describe service nginx-test\nName:              nginx-test\nNamespace:         default\nLabels:            app=nginx-test\nAnnotations:       <none>\nSelector:          app=nginx-test\nType:              ClusterIP\nIP Family Policy:  SingleStack\nIP Families:       IPv4\nIP:                10.43.6.58\nIPs:               10.43.6.58\nPort:              80-80  80/TCP\nTargetPort:        80/TCP\nEndpoints:         10.42.0.65:80,10.42.1.9:80\nSession Affinity:  None\nEvents:            <none>\n\n# kubectl get pod -owide\nNAME                          READY   STATUS    RESTARTS      AGE   IP           NODE     NOMINATED NODE   READINESS GATES\nnginx-test-7646687cc4-n8s9s   1/1     Running   6 (60m ago)   26d   10.42.0.65   master   <none>           <none>\nnginx-test-7646687cc4-z8xnq   1/1     Running   0             47s   10.42.1.9    node1    <none>           <none>\n```\n\n**数据包走向分析，从10.42.0.65请求10.42.1.9**\n\n- 数据包从源 pod 到宿主机\n\n当在pod **10.42.0.65**里向pod **10.42.1.9**里发送数据包的时候，pod **10.42.0.65**的网卡是veth的一个端点。根据pod network namespace中的路由规则，数据一定是发送到**10.42.0.1**，也就是宿主network namespace的cni0 linux bridge设备。由于pod **10.42.0.65**网卡veth另一个端点attach在cni0 bridge设备上，所以数据被cni0 bride接收，也就是数据从pod的network namesapce流动到了host的network namespace里。\n\n- 数据包在源 pod 宿主机中的路由\n\n由于数据包的目标ip地址是**10.42.1.9**，而源pod **10.42.0.65**的宿主ip是**192.168.205.4**。宿主机上开启了转发功能(net.ipv4.ip_forward = 1)，所以主机发现目标ip **10.42.1.9**不是自己的ip时候，就对这个数据包做路由转发。查看宿主**192.168.205.4**的路由表\n```shell\n# ip addr |grep 192.168.205.4\n    inet 192.168.205.4/24 metric 100 brd 192.168.205.255 scope global dynamic enp0s1\n\n# ip route\n10.42.1.0/24 via 192.168.205.3 enp0s1 ...\n```\n在路由表里发现**10.42.1.0/24**网段的数据下一跳是**192.168.205.3**，也就是目标pod **10.42.1.9**的宿主机器。所以进行arp目标mac地址封包，将数据发往**192.168.205.3**。注意目标pod的下一跳地址是目标pod所在的host，也就是说数据会从原始pod所在的host通过下一跳发往目标pod所在的host。即是原始pod的host必须和目标pod的host在同一个二层网络里，因为只有这样才可以下一跳路由可达。这个也是flannel的underlay网络host gw方式的限制，既要求所有的k8s worker node节点都在同一个二层网络里(可以认为是在同一个ip子网)。\n\n- 数据包在目标 pod 宿主机中的路由\n\n当数据包路由到目标pod **10.42.1.9**的host **192.168.205.3**的时候(通过二层交换)，目标pod宿主机上开启了转发功能(net.ipv4.ip_forward = 1)，所以主机发现目标ip **10.42.1.9 **不是自己的ip时候，就对这个数据包做路由转发。查看宿主**192.168.205.3**的路由表\n```shell\n# ip addr |grep 192.168.205.3\n    inet 192.168.205.3/24 metric 100 brd 192.168.205.255 scope global dynamic enp0s1\n\n# ip route\n10.42.1.0/24 dev cni0 proto kernel scope link src 10.42.1.1\n```\n在路由表里发现**10.42.1.0/24**网段的数据下一跳是直连路由，由设备cni0 网卡转发。cni 网卡 **10.42.1.1** 作为linux bridge，会把数据通过veth pair从host network namespace发送到目标pod的**10.42.1.9**的network namespace里。然后由内核交给应用程序处理，从而完成了pod到pod的通讯。可以使用 kubectl debug 查看路由经过节点\n```shell\n# kubectl debug -it nginx-test-7646687cc4-z8xnq --image=busybox -- /bin/sh\n\n# ip addr\n# traceroute 10.42.1.9\n```\n\n**flannel underlay（host-gw 方式）总结**\n\n- 从源pod的network namespace到host network namespace的cni0 linux bridge上。\n- 在源pod所在的host里做三层路由选择，下一跳地址为目标pod所在的host。\n- 数据包从源pod所在的host发送到目标pod所在的host。（二层 mac 封装数据包）\n- 在目标pod所在的host里做三层路由选择，本地直连路由到目标pod里。\n- 要求所有的节点必须开启路由转发功能(net.ipv4.ip_forward = 1)\n- 要求所有的节点都在同一个二层网络里，来完成目标pod所在host的下一跳路由\n\n#### 2）flannel overlay 网络：vxlan 方式\n**overlay 网络概念与配置**\n\n- 概念\n\nvxlan 是一种overlay 网络技术，意在利用在三层网络之上构建二层网络。对于二层网络一般采用 vlan 技术来隔离，不过 vlan 在数据包里总共4个字节，有12bit用来标识不同的二层网络，这样总共可以有4000多个 vlan。而 vxlan header有8个字节，有24bit用来标识不同的二层网络，这样总共是1600多万个 vxlan。[vxlan详解](https://tools.ietf.org/html/rfc7348)\n\n- 配置方式：[参考](https://mp.weixin.qq.com/s?__biz=MzI0MDE3MjAzMg==&mid=2648393268&idx=1&sn=ea7df945f11a57619a81df8599bcbe99&chksm=f1310b5bc646824daaf9ac6cb2dec4b8c8f54fdf4753b5379db991c88e4e5951ec928b9da2d9&scene=178&cur_album_id=2123526506718003213#rd)\n\n1.使用 vxlan 配置集群时，因为 vxlan 利用 udp 包的 payload 封装二层 eth 包，mtu 值从1500变为1450。\n2.vxlan 利用 udp 封包，etcd 配置 udp 使用8472端口接收数据，需要在所有节点放行8472 udp port 。\n\n**service 与 Pod 对应信息**\n```shell\n# kubectl describe service nginx-test\nName:              nginx-test\nNamespace:         default\nLabels:            app=nginx-test\nAnnotations:       <none>\nSelector:          app=nginx-test\nType:              ClusterIP\nIP Family Policy:  SingleStack\nIP Families:       IPv4\nIP:                10.43.6.58\nIPs:               10.43.6.58\nPort:              80-80  80/TCP\nTargetPort:        80/TCP\nEndpoints:         10.42.0.65:80,10.42.1.9:80\nSession Affinity:  None\nEvents:            <none>\n\n# kubectl get pod -owide\nNAME                          READY   STATUS    RESTARTS      AGE   IP           NODE     NOMINATED NODE   READINESS GATES\nnginx-test-7646687cc4-n8s9s   1/1     Running   6 (60m ago)   26d   10.42.0.65   master   <none>           <none>\nnginx-test-7646687cc4-z8xnq   1/1     Running   0             47s   10.42.1.9    node1    <none>           <none>\n```\n\n**kubectl debug 查看路由走向与网络，进入 pod 10.42.0.65**\n```shell\n#kubectl debug -it nginx-test-7646687cc4-n8s9s --image=busybox -- /bin/sh\n/ # ping -c 3 10.42.1.9\nPING 10.42.1.9 (10.42.1.9): 56 data bytes\n64 bytes from 10.42.1.9: seq=0 ttl=62 time=1.447 ms\n64 bytes from 10.42.1.9: seq=1 ttl=62 time=2.732 ms\n64 bytes from 10.42.1.9: seq=2 ttl=62 time=0.880 ms\n/ # traceroute -n 10.42.1.9\ntraceroute to 10.42.1.9 (10.42.1.9), 30 hops max, 46 byte packets\n 1  10.42.0.1  0.027 ms  0.012 ms  0.009 ms\n 2  10.42.1.0  1.761 ms  1.440 ms  1.085 ms\n 3  10.42.1.9  1.453 ms  0.979 ms  0.976 ms\n```\n\n**数据包走向分析，从10.42.0.65请求10.42.1.9**\n\n- 数据在 pod namespace network 中路由\n\nip为**10.42.0.65**的pod从自己的network namespace访问pod **10.42.1.9**，根据**10.42.0.65** pod network namespace的路由表，数据进入了**10.42.0.65** pod的宿主**192.168.205.4**的network namespace中的linux bridge cni0。查看宿主机路由信息\n```shell\n# ip addr |grep 192.168.205.4\n    inet 192.168.205.4/24 metric 100 brd 192.168.205.255 scope global dynamic enp0s1\n\n# ip route\n10.42.1.0/24 via 10.42.1.0 dev flannel.1 onlink\n```\n**10.42.1.0/24**网段的访问下一跳ip地址是**10.42.1.0**，用flannel.1设备发送。flannel.1设备就是 flannel 启动的时候根据vxlan类型网络在宿主上创建的，它属于vxlan设备，会完成对二层eth以太数据包到udp数据包的封装与拆封。其中的\".1\"代表vxlan这个二层网络id号为1，也对应了vxlan网络在etcd里的配置。这个时候数据包源ip为**10.42.0.65**，目标ip为**10.42.1.9**，源mac为pod **10.42.0.65** network namespace中veth设备mac，目标mac为下一跳ip **10.42.1.0/32 **的mac。\n\n- 查看 vtep 端点 mac 地址以及转发接口信息\n\n查看 mac 地址信息：在pod **10.42.0.65**的宿主**192.168.205.4**上通过arp表查询**10.42.1.0/32**的mac地址为 62:c8:a9:ce:ca:4e\n```shell\n# ip addr |grep 192.168.205.4\n    inet 192.168.205.4/24 metric 100 brd 192.168.205.255 scope global dynamic enp0s1\n\n# ip neighbo |grep 10.42.1.0\n10.42.1.0 dev flannel.1 lladdr 62:c8:a9:ce:ca:4e PERMANENT\n\n# ip neighbo show dev flannel.1\n10.42.1.0 lladdr 62:c8:a9:ce:ca:4e PERMANENT\n10.42.2.0 lladdr ca:cb:1f:99:10:97 PERMANENT\n```\n查看 mac 地址转发信息：由于flannel.1设备是vxlan设备，会有转发接口与它的mac对应，继续在pod **10.42.0.65**的宿主**192.168.205.4**上查询flannel.1设备的mac转发接口。\n```shell\n# ip addr |grep 192.168.205.4\n    inet 192.168.205.4/24 metric 100 brd 192.168.205.255 scope global dynamic enp0s1\n\n# bridge fdb show |grep 62:c8:a9:ce:ca:4e\n62:c8:a9:ce:ca:4e dev flannel.1 dst 192.168.205.3 self permanent\n\n# bridge fdb show dev flannel.1\n62:c8:a9:ce:ca:4e dst 192.168.205.3 self permanent\nee:87:b2:4a:fd:62 dst 192.168.205.5 self permanent\n```\n可以看到 flannel.1设备mac地址 **62:c8:a9:ce:ca:4e** 对应的转发接口为 **192.168.205.3**，代表flannel.1设备将会把原始二层数据包(源ip为**10.42.0.65**，目标ip为**10.42.1.9**，源mac为 pod **10.42.0.65** network namespace中veth设备mac，目标mac为**10.42.1.0/32** mac)做为 upd 的 payload 发给 **192.168.205.3 **的 **8472 **端口。目标pod **10.42.1.9 **的宿主机确实是 **192.168.205.3**，而且其上的flannel.1设备同样会对8472端口的数据进行upd解包。\n\n- flannel.1 设备处理 udp 封包与解包\n```shell\n# ip addr |grep 192.168.205.4\n    inet 192.168.205.4/24 metric 100 brd 192.168.205.255 scope global dynamic enp0s1\n\n# route -n\nKernel IP routing table\nDestination     Gateway         Genmask         Flags Metric Ref    Use Iface\n0.0.0.0         192.168.205.1   0.0.0.0         UG    100    0        0 enp0s1\n192.168.205.0   0.0.0.0         255.255.255.0   U     100    0        0 enp0s1\n192.168.205.1   0.0.0.0         255.255.255.255 UH    100    0        0 enp0s1\n```\nflannel.1 设备 udp 封包：从pod **10.42.0.65 **的宿主 **192.168.205.4** 的路由表得知发往 **192.168.205.0/24** 网段为直连路由，使用宿主网络设备 enp0s1 发送。所以对于：\n\n   - 外层udp包：源ip为**192.168.205.4**，目标ip为**192.168.205.3**，源mac为**192.168.205.4** mac，目标mac为**192.168.205.3** mac。目标端口为8472，vxlan id为1.\n   - 内层二层以太包：源ip为**10.42.0.65**，目标ip为**10.42.1.9**，源mac为pod **10.42.0.65** network namespace中veth设备mac，目标mac为**10.42.1.0/32** mac\n   - 完成封包以后根据宿主路由表发向目标节点 **192.168.205.3**\n\nflannel.1 设备 udp 解包：宿主机 **192.168.205.3 **接收到数据包后\n\n   - 目标节点**192.168.205.3**的8472端口接收到udp包之后，发现数据包里有vxlan id标识为1。由于linux内核支持vxlan，所以协议栈可以通过vxlan id判断这是一个vxlan数据报文，并且vxlan为1。然后找到宿主机器上vxlan id为1的vxlan设备处理，就是**192.168.205.3**上的flannel.1设备。\n   - flannel.1收到数据之后开始对vxlan udp报文拆包，去掉upd报文的ip，port，mac信息后得到内部的payload，发现是一个二层报文。\n   - 对于这个二层报文继续拆包，得到里面的源ip是**10.42.0.65**，目标ip是**10.42.1.9**。\n   - 根据**192.168.205.3**上路由表，将数据由linux bridge cni0做本地转发，cni0 作为 linux bridge 利用 veth pair 将数据转发到目标 pod **10.42.1.9**\n```shell\n# ip addr |grep 192.168.205.3\n    inet 192.168.205.3/24 metric 100 brd 192.168.205.255 scope global dynamic enp0s1\n\n# route -n\nDestination     Gateway         Genmask         Flags Metric Ref    Use Iface\n10.42.1.0       0.0.0.0         255.255.255.0   U     0      0        0 cni0\n```\n\n- 宿主host的路由表的写入 与 flannel.1设备mac转发接口表的写入（fdb 转发）\n\n因为所有的host都运行flannel服务，而flannel连接etcd存储中心，所以每个host就知道自己的子网地址cidr是什么，也知道在这个cidr中自己的flannel.1设备ip地址和mac地址，同时也知道了其它host的子网cidr以及flannel.1设备ip地址和mac地址。而知道了这些信息，就可以在flannel启动的时候写入到路由表和fdb中了，以 **192.168.205.4 **宿主为例：\n```shell\n~# ip addr |grep 192.168.205.4\n    inet 192.168.205.4/24 metric 100 brd 192.168.205.255 scope global dynamic enp0s1\n\n# bridge fdb show dev flannel.1\n62:c8:a9:ce:ca:4e dst 192.168.205.3 self permanent\nee:87:b2:4a:fd:62 dst 192.168.205.5 self permanent\n\n# etcdctl ....\n```\n\n**flannel overlay（vxlan 方式）总结**\n\n- 每个宿主都有名字为flannel.x的vxlan网络设备来完成对于vxlan数据的udp封包与拆包，upd数据在宿主的8472端口上(端口值可配置)处理。\n- 数据从pod的network namespace进入到host的network namespace中。\n- 根据host network namespace中的路由表，下一跳ip为目标vxlan设备的ip，并且由当前host的flannel.x设备发送。\n- 根据host network namespace中的apr表找到下一跳ip的mac地址。\n- 根据host network namespace中fbd找到下一跳ip的mac地址对应的转发ip。\n- 当前host的flannel.x设备根据下一跳ip的mac地址对应的转发ip和本地路由表进行upd封包，这个时候：\n   - 外层udp包：源ip为当前host ip，目标ip为mac转发表中匹配的ip，源mac为前host ip的mac，目标mac为fdb中匹配ip的mac。目标端口为8472(可配置)，vxlan id为1(可配置).\n   - 内层二层以太帧包：源ip为源pod ip，目标ip为目标pod ip，源mac为源pod mac，目标mac为host network namespace中路由表里下一跳ip的mac(一般为目标pod对应的host中flannel.x设备ip)。\n- 数据包由当前host路由到目标节点host。\n- 目标节点host的8472端口接收到udp包之后，发现数据包里有vxlan id标识.。然后根据linux vxlan协议，在目标宿主机器上找到与数据报文中vxlan id对应的vxlan设备，将数据交由其处理。\n- vxlan设备收到数据之后开始对vxlan udp报文拆包，去掉upd报文的ip，port，mac信息后得到内部的payload，发现是一个二层报文。然后继续对这个二层报文拆包，得到里面的源pod ip和目标pod ip。\n- 根据目标节点host上路由表，将数据由linux bridge cni0做本地转发。\n- 数据由linux bridge cni0利用veth pair转发到目标pod。\n- 每个宿主host的flannel服务启动的时候读取etcd中的vxlan配置信息，在宿主host的路由表和mac转发接口表fdb里写入相应数据。\n\n#### 3）flannel underlay 与 overlay 网络对比\n\n- 都要求host宿主开启网络转发功能(net.ipv4.ip_forward = 1)。\n- flannel underlay网络没有数据包的额外封包与拆包，效率会更高一些。\n- 对于flannel underlay网络要求所有的worker node都在同一个二层网络里，从而完成目标pod的下一跳路由。即underlay网络worker node不能跨子网。\n- flannel vxlan overlay 网络有封包与拆包，并且外层包都是 udp 包。因此 worker node只要三层路由可达就好，支持worker node能跨子网。\n- flannel vxlan overlay网络内层包是二层以太包，基于linux vxlan设备\n- flannel underlay网络和flannel vxlan overlay网络所有数据包都由操作系统内核空间处理，没有用户空间的应用程序参与。\n\n> #### 参考\n> 1、k8s 集群网络：\n> [https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzI0MDE3MjAzMg==&action=getalbum&album_id=2123526506718003213&scene=173&from_msgid=2648393229&from_itemidx=1&count=3&nolastread=1#wechat_redirect](https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzI0MDE3MjAzMg==&action=getalbum&album_id=2123526506718003213&scene=173&from_msgid=2648393229&from_itemidx=1&count=3&nolastread=1#wechat_redirect)\n> 2、iptables 详解：\n> [https://lixiangyun.gitbook.io/iptables_doc_zh_cn/](https://lixiangyun.gitbook.io/iptables_doc_zh_cn/)\n> [https://www.jianshu.com/p/ee4ee15d3658](https://www.jianshu.com/p/ee4ee15d3658)\n> 3、Docker 网络类型：[https://developer.aliyun.com/article/974008#slide-4](https://developer.aliyun.com/article/974008#slide-4)\n> 4、ipvs 工作模式原理：[https://icloudnative.io/posts/ipvs-how-kubernetes-services-direct-traffic-to-pods/](https://icloudnative.io/posts/ipvs-how-kubernetes-services-direct-traffic-to-pods/)\n\n\n","source":"_posts/k8s-network.md","raw":"---\ntitle: Kubernetes-网络\ncategories:\n  - CNCF\ntags:\n  - Kubernetes\nabbrlink: 5d90\ndate: 2023-02-08 23:20:49\n---\n### 一、简介\n#### 1）容器网络基本概念\n\n- Linux Network Namespace\n   - linux 网络设备：network interface device，loopback device，bridge device，veth device，tun/tap device，vxlan device，ip tunnel device 等等可完成网络数据包收发，提供额外修改数据包功能设备\n   - linux 路由表（三层 ip 包路由寻址功能），arp 表（提供 ip 对应的 mac 信息），fdb（提供基于 mac 转发功能中 mac 地址对应的网络接口） 等\n   - linux 协议栈：对网络协议包的封装与解析，如二层 ethernet 包，三层 ip icmp包，四层 tcp/udp 包等\n   - linux iptable：基于内核模块 netfilter 完成对 linux 的 firewall 管理，例如控制 ingress 与 engress，nat 地址转换，端口映射等\n<!--more-->\n\n{% asset_img k8s-nw1.png %}\n> linux 不仅仅只有 network namespace 用来进行网络隔离，还有 pid namespace 用来隔离进程，user namespace 用来隔离用户，mount namespace 用来隔离挂载点，ipc namespace 用来隔离信号量和共享内存等，uts namespace 用来隔离主机名和域名。\n> 配合 cgroup 控制组，限制 cpu，memory，io 等资源。构成容器的底层实现\n\n- Linux Bridge Device\n\nlinux 网桥设备，可以附加 attach 多个 linux 从设备。类似于一个内部虚拟二层交换机，可以进行二层数据包广播。但是注意的是linux bridge设备可以有自己的ip地址。也就是说，多个linux网络设备attach到一个bridge上，那么这些网络设备的ip地址将会失效(只有二层功能)，当一个设备收到数据包的时候，bridge会把数据包转发到其它所有attach到bridge上的从设备，从而实现广播的效果。\n{% asset_img k8s-nw2.png %}\n\n- Linux Veth Device\n\n总是成对出现，一对 peer 两个端点，数据包从一个 peer 流入并流出到另一个 peer。veth pair 可以跨 network namespace。\n{% asset_img k8s-nw3.png %}\n\n#### 2）k8s 集群容器网络通讯方式\n\n- 网络负载方式\n\nkube-proxy 组件启动参数控制（--proxy-module=ipvs）\niptables：默认\nipvs：v1.11 版本及之后\n\n- 网络通讯方式\n\nunderlay：flannel host-gw，calico bgp 等（需开启 ip_forword 内核参数）\noverlay：flannel vxlan，calico ipip，flannel udp（一般不使用） 等\n\n#### 3）测试环境主机信息\n| 宿主机 IP | 角色 | 容器 CIDR | CNI 网卡地址 | Flannel.1 vtep 设备 |\n| --- | --- | --- | --- | --- |\n| 192.168.205.4 | master | 10.42.0.0/24 | 10.42.0.1 | 10.42.0.0\n| 192.168.205.3 | node1 | 10.42.1.0/24 | 10.42.1.1 | 10.42.1.0\n| 192.168.205.5 | node2 | 10.42.2.0/24 | 10.42.2.1 | 10.42.2.0\n\n\n### 二、宿主机内网络\n#### 1）docker 容器的四种网络类型\n\n- bridge 模式（默认）：--net=bridge\n\n宿主机创建 docker0 网卡，使用独立 IP 段，为每个容器分配改网段 IP，容器之间通过该网桥进行通信（类似二层交换机）\n> {% asset_img k8s-nw4.png %}\n> 自定义 bridge 网络：宿主机范围创建独立的 network namespace \n> {% asset_img k8s-nw5.png %}\n\n\n- host 模式：--net=host\n\n共享宿主机网络，容器暴露端口时占用宿主机端口。网络模式简单，性能较好，一般用于单容器服务。\n{% asset_img k8s-nw6.png %}\n\n- contaniner 模式：--net=container:name or id\n\n指定新创建的容器共享已存在的容器 Network namespace（k8s 中 pod 即为多个容器共享 network namespace）。除了网络，文件系统 进程等都为隔离，容器间进程可以通过 lo 网卡通信\n{% asset_img k8s-nw7.png %}\n\n- none 模式：容器有独立的 Network namespace ，但没有任何网络配置，可自定义进行网络配置。一般用于 CPU 密集型任务，计算完成保留磁盘无需对外网络\n\n#### 2）docker 宿主环境中容器网络\n\n- 每一个container都有一个network namespace，然后拥有container自己的网络设备，路由表，arp表，协议栈，iptable等，各个container的network namespace相互隔离。\n- 在宿主的default netwok nemespace中会有一个linux bridge设备，一般名称为docker0。\n- 每一个container对应一个veth pair设备，这个设备的一端在container的network namespace里，另一端attach到宿主networkwork namespace的docker0 linux bridge上。\n- 这样在宿主环境里，就好像有一个二层交换机(docker0 bridge)，把宿主内的所有container连接起来。所以，在宿主内的container都是可以直接相互访问的，而且是直连的方式\n\n{% asset_img k8s-nw8.png %}\n\n```shell\n## 相关命令\n#查看 bridge 网桥信息\n#k8s pod 伴生 infrastructure 容器，与基础容器共用 network namespace 与 veth pair\nbrctl show\n\n#查看 veth pair 设备信息\nip addr\nip -d link show\n\n#查看路由表\nroute -n\n\n#查看 docker 容器信息\ndocker ps/inspect/container\n```\n\n### 三、Service：cluster ip 实现原理\n#### 1）cluster ip 如何访问\nk8s 集群中服务需要相互访问，一般为之创建相应的 service，集群内部访问时一般使用 cluster ip。一个 cluster ip 后面会关联多个 endpoints（实际的 pod 地址）。对于 cluster ip 的访问，也就是实现了对 cluster ip 关联的多个 endpoints 负载均衡访问（负载方式为 iptables 或 ipvs）\n\n#### 2）iptables 方式\n\n- 查看 service 信息：cluster ip 以及关联的 endpoints ip\n```shell\n# kubectl describe service nginx-test\nName:              nginx-test\nNamespace:         default\nLabels:            app=nginx-test\nAnnotations:       <none>\nSelector:          app=nginx-test\nType:              ClusterIP\nIP Family Policy:  SingleStack\nIP Families:       IPv4\nIP:                10.43.6.58\nIPs:               10.43.6.58\nPort:              80-80  80/TCP\nTargetPort:        80/TCP\nEndpoints:         10.42.1.6:80,10.42.2.6:80\n```\n\n- 查看宿主机 iptables \n```shell\n# iptables -nvL -t nat |head\nChain PREROUTING (policy ACCEPT 0 packets, 0 bytes)\npkts bytes target     prot opt in     out     source               destination\n298 19090 KUBE-SERVICES  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* kubernetes service portals */\n202 12456 CNI-HOSTPORT-DNAT  all  --  *      *       0.0.0.0/0            0.0.0.0/0            ADDRTYPE match dst-type LOCAL\n```\n对于 PREROUTING chain 中，所有的流量都走到了 KUBE-SERVICES 这个 target 中。请注意 PREROUTING chain 是流量到达之后的第一个入口。如果在 pod 里运行命令 curl http://10.43.6.58，根据容器内部路由表，数据包应该是这样的流动：\n\n   - 在pod中，根据路由表发现cluster ip(**10.43.6.58**)走默认路由，选择了默认网关。\n   - 在pod中，默认网关的ip地址就是宿主netwok namespace的 **docker0 或 cni0** 的ip地址，并且默认网关为直连路由。\n   - 在pod中，根据路由表，使用eth0 device发送数据，eth0本质是veth pair在pod network namespace的一端，另一端attach在宿主netwok namespace的 **docker0 或 cni0** bridge上。\n   - veth pair，数据从pod network namespace的一端发出，进入到了attached到**docker0 或 cni0** bridge上的另一端。\n   - **docker0 或 cni0** bridge收到数据之后，自然就来到了host network namesapce 的 PREROUTING chain\n\n- 查看 KUBE-SERVICES target\n```shell\n# iptables -nvL -t nat | grep 10.43.6.58\n0     0 KUBE-SVC-7CWUT4JBGBRVUN2L  tcp  --  *      *       0.0.0.0/0            10.43.6.58           /* default/nginx-test:80-80 cluster IP */ tcp dpt:80\n\n# iptables -nvL -t nat | grep KUBE-SVC-7CWUT4JBGBRVUN2L -A 5\nChain KUBE-SVC-7CWUT4JBGBRVUN2L (1 references)\npkts bytes target     prot opt in     out     source               destination\n0     0 KUBE-SEP-U2YYZT2C3O6VM4EV  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* default/nginx-test:80-80 -> 10.42.1.6:80 */ statistic mode random probability 0.50000000000\n0     0 KUBE-SEP-GWUIQWA2TNZI4ESX  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* default/nginx-test:80-80 -> 10.42.2.6:80 */\n```\n在 KUBE-SERVICES target中我们可以看到目标地址为cluster ip 10.43.6.58 的匹配target 为 KUBE-SVC-7CWUT4JBGBRVUN2L。\n**KUBE-SVC-7CWUT4JBGBRVUN2L 链信息：**\n\n   - 存在两个target （对应两个 Pod ）KUBE-SEP-U2YYZT2C3O6VM4EV 和 KUBE-SEP-GWUIQWA2TNZI4ESX \n   - 在 KUBE-SEP-U2YYZT2C3O6VM4EV 中有statistic mode random probability 0.5。0.5 利用了iptable内核随机模块，随机比率为0.5，也就是50%\n   - 由于一半随机比率进入 KUBE-SEP-U2YYZT2C3O6VM4EV target， 因此另一个 target 的随机比率也为50%，实现负载均衡\n\n- 查看 KUBE-SEP-U2YYZT2C3O6VM4EV 和 KUBE-SEP-GWUIQWA2TNZI4ESX \n```shell\n# iptables -nvL -t nat | grep KUBE-SEP-U2YYZT2C3O6VM4EV -A 3\nChain KUBE-SEP-U2YYZT2C3O6VM4EV (1 references)\npkts bytes target     prot opt in     out     source               destination\n0     0 KUBE-MARK-MASQ  all  --  *      *       10.42.1.6            0.0.0.0/0            /* default/nginx-test:80-80 */\n0     0 DNAT       tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            /* default/nginx-test:80-80 */ tcp to:10.42.1.6:80\n\n# iptables -nvL -t nat | grep KUBE-SEP-GWUIQWA2TNZI4ESX -A 3\nChain KUBE-SEP-GWUIQWA2TNZI4ESX (1 references)\npkts bytes target     prot opt in     out     source               destination\n0     0 KUBE-MARK-MASQ  all  --  *      *       10.42.2.6            0.0.0.0/0            /* default/nginx-test:80-80 */\n0     0 DNAT       tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            /* default/nginx-test:80-80 */ tcp to:10.42.2.6:80\n```\n在这2个target中我们可以看到：\n\n   - 分别做了MASQ操作，这个应该是出站engress流量(限定了source ip)，不是我们的入站ingress流量。\n   - 做了DNAT操作，把原来的cluster ip给DANT转换成了pod的ip 10.42.1.6和10.42.2.6。把原来的port转换成了80 port\n   - 经过这个一系列iptable的target我们的原始请求10.42.1.6:80就变成了10.42.1.6:80或者10.42.2.6:80，而且两者转变的机率各是50%。\n   - 根据iptable，经过PREROUTING chain发现DNAT之后的10.42.1.6或者10.42.2.6不是本地的ip(这两个ip是pod的ip，当然不会在host network namespace里)。所以就走到了Forwarding chain中，根据host network namespace的路由表来决定下一跳地址\n```shell\n# 查看路由表信息\n# ip route\ndefault via 192.168.205.1 dev enp0s1 proto dhcp src 192.168.205.4 metric 100\n10.42.0.0/24 dev cni0 proto kernel scope link src 10.42.0.1\n10.42.1.0/24 via 10.42.1.0 dev flannel.1 onlink\n10.42.2.0/24 via 10.42.2.0 dev flannel.1 onlink\n192.168.205.0/24 dev enp0s1 proto kernel scope link src 192.168.205.4 metric 100\n192.168.205.1 dev enp0s1 proto dhcp scope link src 192.168.205.4 metric 100\n\n# 根据路由表规则10.42.1.6和10.42.2.6走 flannel.1 vtep 设备跨主机通信 node 节点上的 pod\n```\n\n- clusterip 类型 service 总结\n   - 流量从pod network namespace中走到host netwok namespace的docker0中。\n   - 在host netwok namespace的**PREROUTING chain**中会经过一系列target。\n   - 在这些target里根据iptable内核随机模块来实现匹配endpoint target，随机比率为均匀分配，实现均匀的负载均衡。内核实现负载均衡，无法自定义负载均衡算法。\n   - 在endpoint target里实现了DNAT，也就是将目标地址cluster ip转化为实际的pod的ip。\n   - cluster ip是虚拟ip，不会和任何device绑定。\n   - 需要host开启路由转发功能(net.ipv4.ip_forward = 1)。\n   - 数据包在host netwok namespace中经过转换以及DNAT之后，由host network namespace的路由表来决定下一跳地址\n\n#### 3）ipvs 方式\n\n- [https://mp.weixin.qq.com/s?__biz=MzI0MDE3MjAzMg==&mid=2648393263&idx=1&sn=d6f27c502a007aa8be7e75b17afac42f&chksm=f1310b40c64682563cfbfd0688deb0fc9569eca3b13dc721bfe0ad7992183cabfba354e02050&scene=178&cur_album_id=2123526506718003213#rd](https://mp.weixin.qq.com/s?__biz=MzI0MDE3MjAzMg==&mid=2648393263&idx=1&sn=d6f27c502a007aa8be7e75b17afac42f&chksm=f1310b40c64682563cfbfd0688deb0fc9569eca3b13dc721bfe0ad7992183cabfba354e02050&scene=178&cur_album_id=2123526506718003213#rd)\n- [https://icloudnative.io/posts/ipvs-how-kubernetes-services-direct-traffic-to-pods/](https://icloudnative.io/posts/ipvs-how-kubernetes-services-direct-traffic-to-pods/)\n\n### 四、Service：nodeport 实现原理\n#### 1）nodeport ip 如何访问\n通过访问宿主机端口 --> cluster ip 路径（端口范围：30000-32767）\n\n#### 2）iptables 方式\n\n- 查看 service 信息\n```shell\n# kubectl describe service nginx-test\nName:                     nginx-test\nNamespace:                default\nLabels:                   app=nginx-test\nAnnotations:              <none>\nSelector:                 app=nginx-test\nType:                     NodePort\nIP Family Policy:         SingleStack\nIP Families:              IPv4\nIP:                       10.43.6.58\nIPs:                      10.43.6.58\nPort:                     80-80  80/TCP\nTargetPort:               80/TCP\nNodePort:                 80-80  32506/TCP\nEndpoints:                10.42.1.6:80,10.42.2.6:80\nSession Affinity:         None\nExternal Traffic Policy:  Cluster\nEvents:                   <none>\n```\n对node port类型的service来说，访问host的port就访问到了这个服务。所以从host网络角度来看，当host收到数据包的时候应该是进入host network namespace的PREROUTING chain中，查看host network namespace的PREROUTING chain。\n\n- 查看宿主机 iptables\n```shell\n# iptables -nvL -t nat |head\nChain PREROUTING (policy ACCEPT 0 packets, 0 bytes)\npkts bytes target     prot opt in     out     source               destination\n323 20898 KUBE-SERVICES  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* kubernetes service portals */\n```\n根据规则，对于PREROUTING chain中，所有的流量都走到了KUBE-SERVICES这个target中。\n\n- 查看 KUBE-SERVICES target\n```shell\n# iptables -nvL -t nat |grep KUBE-SERVICES -A 10\nChain KUBE-SERVICES (2 references)\npkts bytes target     prot opt in     out     source               destination\n0     0 KUBE-SVC-7CWUT4JBGBRVUN2L  tcp  --  *      *       0.0.0.0/0            10.43.6.58           /* default/nginx-test:80-80 cluster IP */ tcp dpt:80\n```\n在KUBE-SERVICES target中当访问 nginx-test-service 在host上的 32506 时候，根据规则匹配到了 KUBE-NODEPORTS 这个target。\n```shell\n# iptables -nvL -t nat |grep KUBE-NODEPORTS -A 3\nChain KUBE-NODEPORTS (1 references)\npkts bytes target     prot opt in     out     source               destination\n2   124 KUBE-EXT-7CWUT4JBGBRVUN2L  tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            /* default/nginx-test:80-80 */ tcp dpt:32506\n```\n在KUBE-NODEPORTS target中可以看到当访问 32506 端口时到 KUBE-EXT-7CWUT4JBGBRVUN2L 这个 target \n\n- 查看 KUBE-EXT-7CWUT4JBGBRVUN2L  target\n```shell\n# iptables -nvL -t nat |grep KUBE-EXT-7CWUT4JBGBRVUN2L -A 5\nChain KUBE-EXT-7CWUT4JBGBRVUN2L (1 references)\n pkts bytes target     prot opt in     out     source               destination\n    2   124 KUBE-MARK-MASQ  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* masquerade traffic for default/nginx-test:80-80 external destinations */\n    2   124 KUBE-SVC-7CWUT4JBGBRVUN2L  all  --  *      *       0.0.0.0/0            0.0.0.0/0\n\n# iptables -nvL -t nat |grep KUBE-MARK-MASQ -A 3\nChain KUBE-MARK-MASQ (20 references)\n pkts bytes target     prot opt in     out     source               destination\n    2   124 MARK       all  --  *      *       0.0.0.0/0            0.0.0.0/0            MARK or 0x4000\n\n# iptables -nvL -t nat |grep KUBE-SVC-7CWUT4JBGBRVUN2L -A 5\nChain KUBE-SVC-7CWUT4JBGBRVUN2L (2 references)\n pkts bytes target     prot opt in     out     source               destination\n    0     0 KUBE-MARK-MASQ  tcp  --  *      *      !10.42.0.0/16         10.43.6.58           /* default/nginx-test:80-80 cluster IP */ tcp dpt:80\n    1    64 KUBE-SEP-U2YYZT2C3O6VM4EV  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* default/nginx-test:80-80 -> 10.42.1.6:80 */ statistic mode random probability 0.50000000000\n    1    60 KUBE-SEP-GWUIQWA2TNZI4ESX  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* default/nginx-test:80-80 -> 10.42.2.6:80 */\n```\n在 KUBE-EXT-7CWUT4JBGBRVUN2L 中可以看到两个 target\n\n   - KUBE-MARK-MASQ 打标记，无 nat target\n   - KUBE-SVC-7CWUT4JBGBRVUN2L target 进入 cluster ip 规则，重复第三部分规则，最终流量进入 Pod\n\n- nodeport 类型 service 总结：\n   - 在host netwok namespace的PREROUTING chain中会匹配KUBE-SERVICES target。\n   - 在KUBE-SERVICES target会匹配KUBE-NODEPORTS target\n   - 在KUBE-NODEPORTS target会根据prot来匹配KUBE-SVC-XXX target\n   - KUBE-SVC-XXX target就和第三部分中的cluster-ip类型service一样，最终流量进入到 Pod 中\n\n#### 3）ipvs 方式\n\n- [https://mp.weixin.qq.com/s?__biz=MzI0MDE3MjAzMg==&mid=2648393266&idx=1&sn=34d2a21b06d6e9ef4f4f7415f2cad567&chksm=f1310b5dc646824b45cbfc8cf25b0f2449f7223006b684da06ba58d95a2be7a3f0ad7aa6c4b9&scene=178&cur_album_id=2123526506718003213#rd](https://mp.weixin.qq.com/s?__biz=MzI0MDE3MjAzMg==&mid=2648393266&idx=1&sn=34d2a21b06d6e9ef4f4f7415f2cad567&chksm=f1310b5dc646824b45cbfc8cf25b0f2449f7223006b684da06ba58d95a2be7a3f0ad7aa6c4b9&scene=178&cur_album_id=2123526506718003213#rd)\n- [https://icloudnative.io/posts/ipvs-how-kubernetes-services-direct-traffic-to-pods/](https://icloudnative.io/posts/ipvs-how-kubernetes-services-direct-traffic-to-pods/)\n\n\n### 五、Service：ipvs 与 iptables 对比\n> 基于 ipvs 的 k8s 网络负载要求：\n> - linux 内核高于2.4.x\n> - 在 kube-proxy 网络组件中启动参数加入--proxy-mode=ipvs\n> - 安装 ipvsadm 工具（可选），用于操作管理 ipvs 规则\n\n\n- 两者都是采用linux内核模块完成负载均衡和endpoint的映射，所有操作都在内核空间完成，没有在应用程序的用户空间。\n- iptable方式依赖于linux netfilter/iptable内核模块。\n- ipvs方式依赖linux netfilter/iptable模块，ipset模块，ipvs模块。\n- iptable方式中，host宿主中ipatble的entry数目会随着service和对应endpoints的数目增多而增多。举个例子，比如有10个cluster ip类型的service，每个service有6个endpoints。那么在KUBE-SERVICES target中至少有10个entries(KUBE-SVC-XXX)与10个service对应，每个KUBE-SVC-XXX target中会有6个KUBE-SEP-XXX与6个endpoints来对应，每个KUBE-SEP-XXX会有2个enrties来分别做mark masq和DNAT，这样算起来至少有10*6*2=120个entries在iptable中。试想如果application中service和endpoints数目巨大，iptable entries也是非常庞大的，在一定情况下有可能带来性能上的问题。\n- ipvs方式中host宿主中iptable的entry数目是固定的，因为iptable做匹配的时候会利用ipset(KUBE-CLUSTER-IP或者KUBE-NODE-PORT-TCP)来匹配，service的数目决定了ipset的大小，并不会影响iptable的大小。这样就解决了iptable模式下，entries随着service和endpoints的增多而增多的问题。\n- 对于负载均衡，iptable方式采用random模块来完成负载均衡，ipvs方式支持多种负载均衡，例如round-robin，least connection，source hash等（可参考http://www.linuxvirtualserver.org/），并且由kubelet启动参数--ipvs-scheduler控制。\n- 对于目标地址的映射，iptable方式采用linux原生的DNAT，ipvs方式则利用ipvs模块完成。\n- ipvs方式会在host netwok namespace中创建网络设备kube-ipvs0，并且绑定了所有的cluster ip，这样保证了cluster-ip类型的service数据进入INPUT chain，从而让ipvs来完成负载均衡和目标地址的映射。\n- iptable方式不会在host netwok namespace中创建额外的网络设备。\n- iptable方式数据在host network namespace的chain中的路径是：PREROUTING-->FORWARDING-->POSTROUTING 在PREROUTING chain中完成负载均衡，mark masq和目标地址映射。\n\n- ipvs方式数据在host network namespace的chain中的路径是：PREROUTING-->INPUT-->POSTROUTING 在PREROUTING chain中完成mark masq SNAT，在INPUT chain利用ipvs完成负载均衡和目标地址映射。\n- iptable和ipvs方式在完成负载均衡和目标地址映射后都会根据host network namespace的路由表做下一跳路由选择。\n\n### 六、跨主机网络通信：flannel 组件\n#### 1）flannel underlay 网络：host-gw 方式\n**underlay 网络概念与配置**\n\n- 概念：underlay 网络在通讯过程没有额外封包，通过将容器的宿主机作为路由实现数据包转包\n\n- 配置方式：略\n\n**service 与 Pod 对应信息**\n```shell\n# kubectl describe service nginx-test\nName:              nginx-test\nNamespace:         default\nLabels:            app=nginx-test\nAnnotations:       <none>\nSelector:          app=nginx-test\nType:              ClusterIP\nIP Family Policy:  SingleStack\nIP Families:       IPv4\nIP:                10.43.6.58\nIPs:               10.43.6.58\nPort:              80-80  80/TCP\nTargetPort:        80/TCP\nEndpoints:         10.42.0.65:80,10.42.1.9:80\nSession Affinity:  None\nEvents:            <none>\n\n# kubectl get pod -owide\nNAME                          READY   STATUS    RESTARTS      AGE   IP           NODE     NOMINATED NODE   READINESS GATES\nnginx-test-7646687cc4-n8s9s   1/1     Running   6 (60m ago)   26d   10.42.0.65   master   <none>           <none>\nnginx-test-7646687cc4-z8xnq   1/1     Running   0             47s   10.42.1.9    node1    <none>           <none>\n```\n\n**数据包走向分析，从10.42.0.65请求10.42.1.9**\n\n- 数据包从源 pod 到宿主机\n\n当在pod **10.42.0.65**里向pod **10.42.1.9**里发送数据包的时候，pod **10.42.0.65**的网卡是veth的一个端点。根据pod network namespace中的路由规则，数据一定是发送到**10.42.0.1**，也就是宿主network namespace的cni0 linux bridge设备。由于pod **10.42.0.65**网卡veth另一个端点attach在cni0 bridge设备上，所以数据被cni0 bride接收，也就是数据从pod的network namesapce流动到了host的network namespace里。\n\n- 数据包在源 pod 宿主机中的路由\n\n由于数据包的目标ip地址是**10.42.1.9**，而源pod **10.42.0.65**的宿主ip是**192.168.205.4**。宿主机上开启了转发功能(net.ipv4.ip_forward = 1)，所以主机发现目标ip **10.42.1.9**不是自己的ip时候，就对这个数据包做路由转发。查看宿主**192.168.205.4**的路由表\n```shell\n# ip addr |grep 192.168.205.4\n    inet 192.168.205.4/24 metric 100 brd 192.168.205.255 scope global dynamic enp0s1\n\n# ip route\n10.42.1.0/24 via 192.168.205.3 enp0s1 ...\n```\n在路由表里发现**10.42.1.0/24**网段的数据下一跳是**192.168.205.3**，也就是目标pod **10.42.1.9**的宿主机器。所以进行arp目标mac地址封包，将数据发往**192.168.205.3**。注意目标pod的下一跳地址是目标pod所在的host，也就是说数据会从原始pod所在的host通过下一跳发往目标pod所在的host。即是原始pod的host必须和目标pod的host在同一个二层网络里，因为只有这样才可以下一跳路由可达。这个也是flannel的underlay网络host gw方式的限制，既要求所有的k8s worker node节点都在同一个二层网络里(可以认为是在同一个ip子网)。\n\n- 数据包在目标 pod 宿主机中的路由\n\n当数据包路由到目标pod **10.42.1.9**的host **192.168.205.3**的时候(通过二层交换)，目标pod宿主机上开启了转发功能(net.ipv4.ip_forward = 1)，所以主机发现目标ip **10.42.1.9 **不是自己的ip时候，就对这个数据包做路由转发。查看宿主**192.168.205.3**的路由表\n```shell\n# ip addr |grep 192.168.205.3\n    inet 192.168.205.3/24 metric 100 brd 192.168.205.255 scope global dynamic enp0s1\n\n# ip route\n10.42.1.0/24 dev cni0 proto kernel scope link src 10.42.1.1\n```\n在路由表里发现**10.42.1.0/24**网段的数据下一跳是直连路由，由设备cni0 网卡转发。cni 网卡 **10.42.1.1** 作为linux bridge，会把数据通过veth pair从host network namespace发送到目标pod的**10.42.1.9**的network namespace里。然后由内核交给应用程序处理，从而完成了pod到pod的通讯。可以使用 kubectl debug 查看路由经过节点\n```shell\n# kubectl debug -it nginx-test-7646687cc4-z8xnq --image=busybox -- /bin/sh\n\n# ip addr\n# traceroute 10.42.1.9\n```\n\n**flannel underlay（host-gw 方式）总结**\n\n- 从源pod的network namespace到host network namespace的cni0 linux bridge上。\n- 在源pod所在的host里做三层路由选择，下一跳地址为目标pod所在的host。\n- 数据包从源pod所在的host发送到目标pod所在的host。（二层 mac 封装数据包）\n- 在目标pod所在的host里做三层路由选择，本地直连路由到目标pod里。\n- 要求所有的节点必须开启路由转发功能(net.ipv4.ip_forward = 1)\n- 要求所有的节点都在同一个二层网络里，来完成目标pod所在host的下一跳路由\n\n#### 2）flannel overlay 网络：vxlan 方式\n**overlay 网络概念与配置**\n\n- 概念\n\nvxlan 是一种overlay 网络技术，意在利用在三层网络之上构建二层网络。对于二层网络一般采用 vlan 技术来隔离，不过 vlan 在数据包里总共4个字节，有12bit用来标识不同的二层网络，这样总共可以有4000多个 vlan。而 vxlan header有8个字节，有24bit用来标识不同的二层网络，这样总共是1600多万个 vxlan。[vxlan详解](https://tools.ietf.org/html/rfc7348)\n\n- 配置方式：[参考](https://mp.weixin.qq.com/s?__biz=MzI0MDE3MjAzMg==&mid=2648393268&idx=1&sn=ea7df945f11a57619a81df8599bcbe99&chksm=f1310b5bc646824daaf9ac6cb2dec4b8c8f54fdf4753b5379db991c88e4e5951ec928b9da2d9&scene=178&cur_album_id=2123526506718003213#rd)\n\n1.使用 vxlan 配置集群时，因为 vxlan 利用 udp 包的 payload 封装二层 eth 包，mtu 值从1500变为1450。\n2.vxlan 利用 udp 封包，etcd 配置 udp 使用8472端口接收数据，需要在所有节点放行8472 udp port 。\n\n**service 与 Pod 对应信息**\n```shell\n# kubectl describe service nginx-test\nName:              nginx-test\nNamespace:         default\nLabels:            app=nginx-test\nAnnotations:       <none>\nSelector:          app=nginx-test\nType:              ClusterIP\nIP Family Policy:  SingleStack\nIP Families:       IPv4\nIP:                10.43.6.58\nIPs:               10.43.6.58\nPort:              80-80  80/TCP\nTargetPort:        80/TCP\nEndpoints:         10.42.0.65:80,10.42.1.9:80\nSession Affinity:  None\nEvents:            <none>\n\n# kubectl get pod -owide\nNAME                          READY   STATUS    RESTARTS      AGE   IP           NODE     NOMINATED NODE   READINESS GATES\nnginx-test-7646687cc4-n8s9s   1/1     Running   6 (60m ago)   26d   10.42.0.65   master   <none>           <none>\nnginx-test-7646687cc4-z8xnq   1/1     Running   0             47s   10.42.1.9    node1    <none>           <none>\n```\n\n**kubectl debug 查看路由走向与网络，进入 pod 10.42.0.65**\n```shell\n#kubectl debug -it nginx-test-7646687cc4-n8s9s --image=busybox -- /bin/sh\n/ # ping -c 3 10.42.1.9\nPING 10.42.1.9 (10.42.1.9): 56 data bytes\n64 bytes from 10.42.1.9: seq=0 ttl=62 time=1.447 ms\n64 bytes from 10.42.1.9: seq=1 ttl=62 time=2.732 ms\n64 bytes from 10.42.1.9: seq=2 ttl=62 time=0.880 ms\n/ # traceroute -n 10.42.1.9\ntraceroute to 10.42.1.9 (10.42.1.9), 30 hops max, 46 byte packets\n 1  10.42.0.1  0.027 ms  0.012 ms  0.009 ms\n 2  10.42.1.0  1.761 ms  1.440 ms  1.085 ms\n 3  10.42.1.9  1.453 ms  0.979 ms  0.976 ms\n```\n\n**数据包走向分析，从10.42.0.65请求10.42.1.9**\n\n- 数据在 pod namespace network 中路由\n\nip为**10.42.0.65**的pod从自己的network namespace访问pod **10.42.1.9**，根据**10.42.0.65** pod network namespace的路由表，数据进入了**10.42.0.65** pod的宿主**192.168.205.4**的network namespace中的linux bridge cni0。查看宿主机路由信息\n```shell\n# ip addr |grep 192.168.205.4\n    inet 192.168.205.4/24 metric 100 brd 192.168.205.255 scope global dynamic enp0s1\n\n# ip route\n10.42.1.0/24 via 10.42.1.0 dev flannel.1 onlink\n```\n**10.42.1.0/24**网段的访问下一跳ip地址是**10.42.1.0**，用flannel.1设备发送。flannel.1设备就是 flannel 启动的时候根据vxlan类型网络在宿主上创建的，它属于vxlan设备，会完成对二层eth以太数据包到udp数据包的封装与拆封。其中的\".1\"代表vxlan这个二层网络id号为1，也对应了vxlan网络在etcd里的配置。这个时候数据包源ip为**10.42.0.65**，目标ip为**10.42.1.9**，源mac为pod **10.42.0.65** network namespace中veth设备mac，目标mac为下一跳ip **10.42.1.0/32 **的mac。\n\n- 查看 vtep 端点 mac 地址以及转发接口信息\n\n查看 mac 地址信息：在pod **10.42.0.65**的宿主**192.168.205.4**上通过arp表查询**10.42.1.0/32**的mac地址为 62:c8:a9:ce:ca:4e\n```shell\n# ip addr |grep 192.168.205.4\n    inet 192.168.205.4/24 metric 100 brd 192.168.205.255 scope global dynamic enp0s1\n\n# ip neighbo |grep 10.42.1.0\n10.42.1.0 dev flannel.1 lladdr 62:c8:a9:ce:ca:4e PERMANENT\n\n# ip neighbo show dev flannel.1\n10.42.1.0 lladdr 62:c8:a9:ce:ca:4e PERMANENT\n10.42.2.0 lladdr ca:cb:1f:99:10:97 PERMANENT\n```\n查看 mac 地址转发信息：由于flannel.1设备是vxlan设备，会有转发接口与它的mac对应，继续在pod **10.42.0.65**的宿主**192.168.205.4**上查询flannel.1设备的mac转发接口。\n```shell\n# ip addr |grep 192.168.205.4\n    inet 192.168.205.4/24 metric 100 brd 192.168.205.255 scope global dynamic enp0s1\n\n# bridge fdb show |grep 62:c8:a9:ce:ca:4e\n62:c8:a9:ce:ca:4e dev flannel.1 dst 192.168.205.3 self permanent\n\n# bridge fdb show dev flannel.1\n62:c8:a9:ce:ca:4e dst 192.168.205.3 self permanent\nee:87:b2:4a:fd:62 dst 192.168.205.5 self permanent\n```\n可以看到 flannel.1设备mac地址 **62:c8:a9:ce:ca:4e** 对应的转发接口为 **192.168.205.3**，代表flannel.1设备将会把原始二层数据包(源ip为**10.42.0.65**，目标ip为**10.42.1.9**，源mac为 pod **10.42.0.65** network namespace中veth设备mac，目标mac为**10.42.1.0/32** mac)做为 upd 的 payload 发给 **192.168.205.3 **的 **8472 **端口。目标pod **10.42.1.9 **的宿主机确实是 **192.168.205.3**，而且其上的flannel.1设备同样会对8472端口的数据进行upd解包。\n\n- flannel.1 设备处理 udp 封包与解包\n```shell\n# ip addr |grep 192.168.205.4\n    inet 192.168.205.4/24 metric 100 brd 192.168.205.255 scope global dynamic enp0s1\n\n# route -n\nKernel IP routing table\nDestination     Gateway         Genmask         Flags Metric Ref    Use Iface\n0.0.0.0         192.168.205.1   0.0.0.0         UG    100    0        0 enp0s1\n192.168.205.0   0.0.0.0         255.255.255.0   U     100    0        0 enp0s1\n192.168.205.1   0.0.0.0         255.255.255.255 UH    100    0        0 enp0s1\n```\nflannel.1 设备 udp 封包：从pod **10.42.0.65 **的宿主 **192.168.205.4** 的路由表得知发往 **192.168.205.0/24** 网段为直连路由，使用宿主网络设备 enp0s1 发送。所以对于：\n\n   - 外层udp包：源ip为**192.168.205.4**，目标ip为**192.168.205.3**，源mac为**192.168.205.4** mac，目标mac为**192.168.205.3** mac。目标端口为8472，vxlan id为1.\n   - 内层二层以太包：源ip为**10.42.0.65**，目标ip为**10.42.1.9**，源mac为pod **10.42.0.65** network namespace中veth设备mac，目标mac为**10.42.1.0/32** mac\n   - 完成封包以后根据宿主路由表发向目标节点 **192.168.205.3**\n\nflannel.1 设备 udp 解包：宿主机 **192.168.205.3 **接收到数据包后\n\n   - 目标节点**192.168.205.3**的8472端口接收到udp包之后，发现数据包里有vxlan id标识为1。由于linux内核支持vxlan，所以协议栈可以通过vxlan id判断这是一个vxlan数据报文，并且vxlan为1。然后找到宿主机器上vxlan id为1的vxlan设备处理，就是**192.168.205.3**上的flannel.1设备。\n   - flannel.1收到数据之后开始对vxlan udp报文拆包，去掉upd报文的ip，port，mac信息后得到内部的payload，发现是一个二层报文。\n   - 对于这个二层报文继续拆包，得到里面的源ip是**10.42.0.65**，目标ip是**10.42.1.9**。\n   - 根据**192.168.205.3**上路由表，将数据由linux bridge cni0做本地转发，cni0 作为 linux bridge 利用 veth pair 将数据转发到目标 pod **10.42.1.9**\n```shell\n# ip addr |grep 192.168.205.3\n    inet 192.168.205.3/24 metric 100 brd 192.168.205.255 scope global dynamic enp0s1\n\n# route -n\nDestination     Gateway         Genmask         Flags Metric Ref    Use Iface\n10.42.1.0       0.0.0.0         255.255.255.0   U     0      0        0 cni0\n```\n\n- 宿主host的路由表的写入 与 flannel.1设备mac转发接口表的写入（fdb 转发）\n\n因为所有的host都运行flannel服务，而flannel连接etcd存储中心，所以每个host就知道自己的子网地址cidr是什么，也知道在这个cidr中自己的flannel.1设备ip地址和mac地址，同时也知道了其它host的子网cidr以及flannel.1设备ip地址和mac地址。而知道了这些信息，就可以在flannel启动的时候写入到路由表和fdb中了，以 **192.168.205.4 **宿主为例：\n```shell\n~# ip addr |grep 192.168.205.4\n    inet 192.168.205.4/24 metric 100 brd 192.168.205.255 scope global dynamic enp0s1\n\n# bridge fdb show dev flannel.1\n62:c8:a9:ce:ca:4e dst 192.168.205.3 self permanent\nee:87:b2:4a:fd:62 dst 192.168.205.5 self permanent\n\n# etcdctl ....\n```\n\n**flannel overlay（vxlan 方式）总结**\n\n- 每个宿主都有名字为flannel.x的vxlan网络设备来完成对于vxlan数据的udp封包与拆包，upd数据在宿主的8472端口上(端口值可配置)处理。\n- 数据从pod的network namespace进入到host的network namespace中。\n- 根据host network namespace中的路由表，下一跳ip为目标vxlan设备的ip，并且由当前host的flannel.x设备发送。\n- 根据host network namespace中的apr表找到下一跳ip的mac地址。\n- 根据host network namespace中fbd找到下一跳ip的mac地址对应的转发ip。\n- 当前host的flannel.x设备根据下一跳ip的mac地址对应的转发ip和本地路由表进行upd封包，这个时候：\n   - 外层udp包：源ip为当前host ip，目标ip为mac转发表中匹配的ip，源mac为前host ip的mac，目标mac为fdb中匹配ip的mac。目标端口为8472(可配置)，vxlan id为1(可配置).\n   - 内层二层以太帧包：源ip为源pod ip，目标ip为目标pod ip，源mac为源pod mac，目标mac为host network namespace中路由表里下一跳ip的mac(一般为目标pod对应的host中flannel.x设备ip)。\n- 数据包由当前host路由到目标节点host。\n- 目标节点host的8472端口接收到udp包之后，发现数据包里有vxlan id标识.。然后根据linux vxlan协议，在目标宿主机器上找到与数据报文中vxlan id对应的vxlan设备，将数据交由其处理。\n- vxlan设备收到数据之后开始对vxlan udp报文拆包，去掉upd报文的ip，port，mac信息后得到内部的payload，发现是一个二层报文。然后继续对这个二层报文拆包，得到里面的源pod ip和目标pod ip。\n- 根据目标节点host上路由表，将数据由linux bridge cni0做本地转发。\n- 数据由linux bridge cni0利用veth pair转发到目标pod。\n- 每个宿主host的flannel服务启动的时候读取etcd中的vxlan配置信息，在宿主host的路由表和mac转发接口表fdb里写入相应数据。\n\n#### 3）flannel underlay 与 overlay 网络对比\n\n- 都要求host宿主开启网络转发功能(net.ipv4.ip_forward = 1)。\n- flannel underlay网络没有数据包的额外封包与拆包，效率会更高一些。\n- 对于flannel underlay网络要求所有的worker node都在同一个二层网络里，从而完成目标pod的下一跳路由。即underlay网络worker node不能跨子网。\n- flannel vxlan overlay 网络有封包与拆包，并且外层包都是 udp 包。因此 worker node只要三层路由可达就好，支持worker node能跨子网。\n- flannel vxlan overlay网络内层包是二层以太包，基于linux vxlan设备\n- flannel underlay网络和flannel vxlan overlay网络所有数据包都由操作系统内核空间处理，没有用户空间的应用程序参与。\n\n> #### 参考\n> 1、k8s 集群网络：\n> [https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzI0MDE3MjAzMg==&action=getalbum&album_id=2123526506718003213&scene=173&from_msgid=2648393229&from_itemidx=1&count=3&nolastread=1#wechat_redirect](https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzI0MDE3MjAzMg==&action=getalbum&album_id=2123526506718003213&scene=173&from_msgid=2648393229&from_itemidx=1&count=3&nolastread=1#wechat_redirect)\n> 2、iptables 详解：\n> [https://lixiangyun.gitbook.io/iptables_doc_zh_cn/](https://lixiangyun.gitbook.io/iptables_doc_zh_cn/)\n> [https://www.jianshu.com/p/ee4ee15d3658](https://www.jianshu.com/p/ee4ee15d3658)\n> 3、Docker 网络类型：[https://developer.aliyun.com/article/974008#slide-4](https://developer.aliyun.com/article/974008#slide-4)\n> 4、ipvs 工作模式原理：[https://icloudnative.io/posts/ipvs-how-kubernetes-services-direct-traffic-to-pods/](https://icloudnative.io/posts/ipvs-how-kubernetes-services-direct-traffic-to-pods/)\n\n\n","slug":"k8s-network","published":1,"updated":"2024-01-21T15:28:43.154Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm0fat8zp001ms0nj1dyrabyk","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"一、简介\"><a href=\"#一、简介\" class=\"headerlink\" title=\"一、简介\"></a>一、简介</h3><h4 id=\"1）容器网络基本概念\"><a href=\"#1）容器网络基本概念\" class=\"headerlink\" title=\"1）容器网络基本概念\"></a>1）容器网络基本概念</h4><ul>\n<li>Linux Network Namespace<ul>\n<li>linux 网络设备：network interface device，loopback device，bridge device，veth device，tun&#x2F;tap device，vxlan device，ip tunnel device 等等可完成网络数据包收发，提供额外修改数据包功能设备</li>\n<li>linux 路由表（三层 ip 包路由寻址功能），arp 表（提供 ip 对应的 mac 信息），fdb（提供基于 mac 转发功能中 mac 地址对应的网络接口） 等</li>\n<li>linux 协议栈：对网络协议包的封装与解析，如二层 ethernet 包，三层 ip icmp包，四层 tcp&#x2F;udp 包等</li>\n<li>linux iptable：基于内核模块 netfilter 完成对 linux 的 firewall 管理，例如控制 ingress 与 engress，nat 地址转换，端口映射等<span id=\"more\"></span></li>\n</ul>\n</li>\n</ul>\n<img data-src=\"/posts/5d90/k8s-nw1.png\" class>\n<blockquote>\n<p>linux 不仅仅只有 network namespace 用来进行网络隔离，还有 pid namespace 用来隔离进程，user namespace 用来隔离用户，mount namespace 用来隔离挂载点，ipc namespace 用来隔离信号量和共享内存等，uts namespace 用来隔离主机名和域名。<br>配合 cgroup 控制组，限制 cpu，memory，io 等资源。构成容器的底层实现</p>\n</blockquote>\n<ul>\n<li>Linux Bridge Device</li>\n</ul>\n<p>linux 网桥设备，可以附加 attach 多个 linux 从设备。类似于一个内部虚拟二层交换机，可以进行二层数据包广播。但是注意的是linux bridge设备可以有自己的ip地址。也就是说，多个linux网络设备attach到一个bridge上，那么这些网络设备的ip地址将会失效(只有二层功能)，当一个设备收到数据包的时候，bridge会把数据包转发到其它所有attach到bridge上的从设备，从而实现广播的效果。</p>\n<img data-src=\"/posts/5d90/k8s-nw2.png\" class>\n\n<ul>\n<li>Linux Veth Device</li>\n</ul>\n<p>总是成对出现，一对 peer 两个端点，数据包从一个 peer 流入并流出到另一个 peer。veth pair 可以跨 network namespace。</p>\n<img data-src=\"/posts/5d90/k8s-nw3.png\" class>\n\n<h4 id=\"2）k8s-集群容器网络通讯方式\"><a href=\"#2）k8s-集群容器网络通讯方式\" class=\"headerlink\" title=\"2）k8s 集群容器网络通讯方式\"></a>2）k8s 集群容器网络通讯方式</h4><ul>\n<li>网络负载方式</li>\n</ul>\n<p>kube-proxy 组件启动参数控制（–proxy-module&#x3D;ipvs）<br>iptables：默认<br>ipvs：v1.11 版本及之后</p>\n<ul>\n<li>网络通讯方式</li>\n</ul>\n<p>underlay：flannel host-gw，calico bgp 等（需开启 ip_forword 内核参数）<br>overlay：flannel vxlan，calico ipip，flannel udp（一般不使用） 等</p>\n<h4 id=\"3）测试环境主机信息\"><a href=\"#3）测试环境主机信息\" class=\"headerlink\" title=\"3）测试环境主机信息\"></a>3）测试环境主机信息</h4><table>\n<thead>\n<tr>\n<th>宿主机 IP</th>\n<th>角色</th>\n<th>容器 CIDR</th>\n<th>CNI 网卡地址</th>\n<th>Flannel.1 vtep 设备</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>192.168.205.4</td>\n<td>master</td>\n<td>10.42.0.0&#x2F;24</td>\n<td>10.42.0.1</td>\n<td>10.42.0.0</td>\n</tr>\n<tr>\n<td>192.168.205.3</td>\n<td>node1</td>\n<td>10.42.1.0&#x2F;24</td>\n<td>10.42.1.1</td>\n<td>10.42.1.0</td>\n</tr>\n<tr>\n<td>192.168.205.5</td>\n<td>node2</td>\n<td>10.42.2.0&#x2F;24</td>\n<td>10.42.2.1</td>\n<td>10.42.2.0</td>\n</tr>\n</tbody></table>\n<h3 id=\"二、宿主机内网络\"><a href=\"#二、宿主机内网络\" class=\"headerlink\" title=\"二、宿主机内网络\"></a>二、宿主机内网络</h3><h4 id=\"1）docker-容器的四种网络类型\"><a href=\"#1）docker-容器的四种网络类型\" class=\"headerlink\" title=\"1）docker 容器的四种网络类型\"></a>1）docker 容器的四种网络类型</h4><ul>\n<li>bridge 模式（默认）：–net&#x3D;bridge</li>\n</ul>\n<p>宿主机创建 docker0 网卡，使用独立 IP 段，为每个容器分配改网段 IP，容器之间通过该网桥进行通信（类似二层交换机）</p>\n<blockquote>\n<img data-src=\"/posts/5d90/k8s-nw4.png\" class>\n<p>自定义 bridge 网络：宿主机范围创建独立的 network namespace </p>\n<img data-src=\"/posts/5d90/k8s-nw5.png\" class>\n</blockquote>\n<ul>\n<li>host 模式：–net&#x3D;host</li>\n</ul>\n<p>共享宿主机网络，容器暴露端口时占用宿主机端口。网络模式简单，性能较好，一般用于单容器服务。</p>\n<img data-src=\"/posts/5d90/k8s-nw6.png\" class>\n\n<ul>\n<li>contaniner 模式：–net&#x3D;container:name or id</li>\n</ul>\n<p>指定新创建的容器共享已存在的容器 Network namespace（k8s 中 pod 即为多个容器共享 network namespace）。除了网络，文件系统 进程等都为隔离，容器间进程可以通过 lo 网卡通信</p>\n<img data-src=\"/posts/5d90/k8s-nw7.png\" class>\n\n<ul>\n<li>none 模式：容器有独立的 Network namespace ，但没有任何网络配置，可自定义进行网络配置。一般用于 CPU 密集型任务，计算完成保留磁盘无需对外网络</li>\n</ul>\n<h4 id=\"2）docker-宿主环境中容器网络\"><a href=\"#2）docker-宿主环境中容器网络\" class=\"headerlink\" title=\"2）docker 宿主环境中容器网络\"></a>2）docker 宿主环境中容器网络</h4><ul>\n<li>每一个container都有一个network namespace，然后拥有container自己的网络设备，路由表，arp表，协议栈，iptable等，各个container的network namespace相互隔离。</li>\n<li>在宿主的default netwok nemespace中会有一个linux bridge设备，一般名称为docker0。</li>\n<li>每一个container对应一个veth pair设备，这个设备的一端在container的network namespace里，另一端attach到宿主networkwork namespace的docker0 linux bridge上。</li>\n<li>这样在宿主环境里，就好像有一个二层交换机(docker0 bridge)，把宿主内的所有container连接起来。所以，在宿主内的container都是可以直接相互访问的，而且是直连的方式</li>\n</ul>\n<img data-src=\"/posts/5d90/k8s-nw8.png\" class>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 相关命令</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">查看 bridge 网桥信息</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">k8s pod 伴生 infrastructure 容器，与基础容器共用 network namespace 与 veth pair</span></span><br><span class=\"line\">brctl show</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">查看 veth pair 设备信息</span></span><br><span class=\"line\">ip addr</span><br><span class=\"line\">ip -d link show</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">查看路由表</span></span><br><span class=\"line\">route -n</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">查看 docker 容器信息</span></span><br><span class=\"line\">docker ps/inspect/container</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"三、Service：cluster-ip-实现原理\"><a href=\"#三、Service：cluster-ip-实现原理\" class=\"headerlink\" title=\"三、Service：cluster ip 实现原理\"></a>三、Service：cluster ip 实现原理</h3><h4 id=\"1）cluster-ip-如何访问\"><a href=\"#1）cluster-ip-如何访问\" class=\"headerlink\" title=\"1）cluster ip 如何访问\"></a>1）cluster ip 如何访问</h4><p>k8s 集群中服务需要相互访问，一般为之创建相应的 service，集群内部访问时一般使用 cluster ip。一个 cluster ip 后面会关联多个 endpoints（实际的 pod 地址）。对于 cluster ip 的访问，也就是实现了对 cluster ip 关联的多个 endpoints 负载均衡访问（负载方式为 iptables 或 ipvs）</p>\n<h4 id=\"2）iptables-方式\"><a href=\"#2）iptables-方式\" class=\"headerlink\" title=\"2）iptables 方式\"></a>2）iptables 方式</h4><ul>\n<li><p>查看 service 信息：cluster ip 以及关联的 endpoints ip</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">kubectl describe service nginx-test</span></span><br><span class=\"line\">Name:              nginx-test</span><br><span class=\"line\">Namespace:         default</span><br><span class=\"line\">Labels:            app=nginx-test</span><br><span class=\"line\">Annotations:       &lt;none&gt;</span><br><span class=\"line\">Selector:          app=nginx-test</span><br><span class=\"line\">Type:              ClusterIP</span><br><span class=\"line\">IP Family Policy:  SingleStack</span><br><span class=\"line\">IP Families:       IPv4</span><br><span class=\"line\">IP:                10.43.6.58</span><br><span class=\"line\">IPs:               10.43.6.58</span><br><span class=\"line\">Port:              80-80  80/TCP</span><br><span class=\"line\">TargetPort:        80/TCP</span><br><span class=\"line\">Endpoints:         10.42.1.6:80,10.42.2.6:80</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看宿主机 iptables </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">iptables -nvL -t nat |<span class=\"built_in\">head</span></span></span><br><span class=\"line\">Chain PREROUTING (policy ACCEPT 0 packets, 0 bytes)</span><br><span class=\"line\">pkts bytes target     prot opt in     out     source               destination</span><br><span class=\"line\">298 19090 KUBE-SERVICES  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* kubernetes service portals */</span><br><span class=\"line\">202 12456 CNI-HOSTPORT-DNAT  all  --  *      *       0.0.0.0/0            0.0.0.0/0            ADDRTYPE match dst-type LOCAL</span><br></pre></td></tr></table></figure>\n<p>对于 PREROUTING chain 中，所有的流量都走到了 KUBE-SERVICES 这个 target 中。请注意 PREROUTING chain 是流量到达之后的第一个入口。如果在 pod 里运行命令 curl <a href=\"http://10.43.6.58，根据容器内部路由表，数据包应该是这样的流动：\">http://10.43.6.58，根据容器内部路由表，数据包应该是这样的流动：</a></p>\n<ul>\n<li>在pod中，根据路由表发现cluster ip(<strong>10.43.6.58</strong>)走默认路由，选择了默认网关。</li>\n<li>在pod中，默认网关的ip地址就是宿主netwok namespace的 <strong>docker0 或 cni0</strong> 的ip地址，并且默认网关为直连路由。</li>\n<li>在pod中，根据路由表，使用eth0 device发送数据，eth0本质是veth pair在pod network namespace的一端，另一端attach在宿主netwok namespace的 <strong>docker0 或 cni0</strong> bridge上。</li>\n<li>veth pair，数据从pod network namespace的一端发出，进入到了attached到<strong>docker0 或 cni0</strong> bridge上的另一端。</li>\n<li><strong>docker0 或 cni0</strong> bridge收到数据之后，自然就来到了host network namesapce 的 PREROUTING chain</li>\n</ul>\n</li>\n<li><p>查看 KUBE-SERVICES target</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">iptables -nvL -t nat | grep 10.43.6.58</span></span><br><span class=\"line\">0     0 KUBE-SVC-7CWUT4JBGBRVUN2L  tcp  --  *      *       0.0.0.0/0            10.43.6.58           /* default/nginx-test:80-80 cluster IP */ tcp dpt:80</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">iptables -nvL -t nat | grep KUBE-SVC-7CWUT4JBGBRVUN2L -A 5</span></span><br><span class=\"line\">Chain KUBE-SVC-7CWUT4JBGBRVUN2L (1 references)</span><br><span class=\"line\">pkts bytes target     prot opt in     out     source               destination</span><br><span class=\"line\">0     0 KUBE-SEP-U2YYZT2C3O6VM4EV  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* default/nginx-test:80-80 -&gt; 10.42.1.6:80 */ statistic mode random probability 0.50000000000</span><br><span class=\"line\">0     0 KUBE-SEP-GWUIQWA2TNZI4ESX  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* default/nginx-test:80-80 -&gt; 10.42.2.6:80 */</span><br></pre></td></tr></table></figure>\n<p>在 KUBE-SERVICES target中我们可以看到目标地址为cluster ip 10.43.6.58 的匹配target 为 KUBE-SVC-7CWUT4JBGBRVUN2L。<br><strong>KUBE-SVC-7CWUT4JBGBRVUN2L 链信息：</strong></p>\n<ul>\n<li>存在两个target （对应两个 Pod ）KUBE-SEP-U2YYZT2C3O6VM4EV 和 KUBE-SEP-GWUIQWA2TNZI4ESX </li>\n<li>在 KUBE-SEP-U2YYZT2C3O6VM4EV 中有statistic mode random probability 0.5。0.5 利用了iptable内核随机模块，随机比率为0.5，也就是50%</li>\n<li>由于一半随机比率进入 KUBE-SEP-U2YYZT2C3O6VM4EV target， 因此另一个 target 的随机比率也为50%，实现负载均衡</li>\n</ul>\n</li>\n<li><p>查看 KUBE-SEP-U2YYZT2C3O6VM4EV 和 KUBE-SEP-GWUIQWA2TNZI4ESX </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">iptables -nvL -t nat | grep KUBE-SEP-U2YYZT2C3O6VM4EV -A 3</span></span><br><span class=\"line\">Chain KUBE-SEP-U2YYZT2C3O6VM4EV (1 references)</span><br><span class=\"line\">pkts bytes target     prot opt in     out     source               destination</span><br><span class=\"line\">0     0 KUBE-MARK-MASQ  all  --  *      *       10.42.1.6            0.0.0.0/0            /* default/nginx-test:80-80 */</span><br><span class=\"line\">0     0 DNAT       tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            /* default/nginx-test:80-80 */ tcp to:10.42.1.6:80</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">iptables -nvL -t nat | grep KUBE-SEP-GWUIQWA2TNZI4ESX -A 3</span></span><br><span class=\"line\">Chain KUBE-SEP-GWUIQWA2TNZI4ESX (1 references)</span><br><span class=\"line\">pkts bytes target     prot opt in     out     source               destination</span><br><span class=\"line\">0     0 KUBE-MARK-MASQ  all  --  *      *       10.42.2.6            0.0.0.0/0            /* default/nginx-test:80-80 */</span><br><span class=\"line\">0     0 DNAT       tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            /* default/nginx-test:80-80 */ tcp to:10.42.2.6:80</span><br></pre></td></tr></table></figure>\n<p>在这2个target中我们可以看到：</p>\n<ul>\n<li>分别做了MASQ操作，这个应该是出站engress流量(限定了source ip)，不是我们的入站ingress流量。</li>\n<li>做了DNAT操作，把原来的cluster ip给DANT转换成了pod的ip 10.42.1.6和10.42.2.6。把原来的port转换成了80 port</li>\n<li>经过这个一系列iptable的target我们的原始请求10.42.1.6:80就变成了10.42.1.6:80或者10.42.2.6:80，而且两者转变的机率各是50%。</li>\n<li>根据iptable，经过PREROUTING chain发现DNAT之后的10.42.1.6或者10.42.2.6不是本地的ip(这两个ip是pod的ip，当然不会在host network namespace里)。所以就走到了Forwarding chain中，根据host network namespace的路由表来决定下一跳地址</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看路由表信息</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ip route</span></span><br><span class=\"line\">default via 192.168.205.1 dev enp0s1 proto dhcp src 192.168.205.4 metric 100</span><br><span class=\"line\">10.42.0.0/24 dev cni0 proto kernel scope link src 10.42.0.1</span><br><span class=\"line\">10.42.1.0/24 via 10.42.1.0 dev flannel.1 onlink</span><br><span class=\"line\">10.42.2.0/24 via 10.42.2.0 dev flannel.1 onlink</span><br><span class=\"line\">192.168.205.0/24 dev enp0s1 proto kernel scope link src 192.168.205.4 metric 100</span><br><span class=\"line\">192.168.205.1 dev enp0s1 proto dhcp scope link src 192.168.205.4 metric 100</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">根据路由表规则10.42.1.6和10.42.2.6走 flannel.1 vtep 设备跨主机通信 node 节点上的 pod</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>clusterip 类型 service 总结<ul>\n<li>流量从pod network namespace中走到host netwok namespace的docker0中。</li>\n<li>在host netwok namespace的<strong>PREROUTING chain</strong>中会经过一系列target。</li>\n<li>在这些target里根据iptable内核随机模块来实现匹配endpoint target，随机比率为均匀分配，实现均匀的负载均衡。内核实现负载均衡，无法自定义负载均衡算法。</li>\n<li>在endpoint target里实现了DNAT，也就是将目标地址cluster ip转化为实际的pod的ip。</li>\n<li>cluster ip是虚拟ip，不会和任何device绑定。</li>\n<li>需要host开启路由转发功能(net.ipv4.ip_forward &#x3D; 1)。</li>\n<li>数据包在host netwok namespace中经过转换以及DNAT之后，由host network namespace的路由表来决定下一跳地址</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3）ipvs-方式\"><a href=\"#3）ipvs-方式\" class=\"headerlink\" title=\"3）ipvs 方式\"></a>3）ipvs 方式</h4><ul>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzI0MDE3MjAzMg==&mid=2648393263&idx=1&sn=d6f27c502a007aa8be7e75b17afac42f&chksm=f1310b40c64682563cfbfd0688deb0fc9569eca3b13dc721bfe0ad7992183cabfba354e02050&scene=178&cur_album_id=2123526506718003213#rd\">https://mp.weixin.qq.com/s?__biz&#x3D;MzI0MDE3MjAzMg&#x3D;&#x3D;&amp;mid&#x3D;2648393263&amp;idx&#x3D;1&amp;sn&#x3D;d6f27c502a007aa8be7e75b17afac42f&amp;chksm&#x3D;f1310b40c64682563cfbfd0688deb0fc9569eca3b13dc721bfe0ad7992183cabfba354e02050&amp;scene&#x3D;178&amp;cur_album_id&#x3D;2123526506718003213#rd</a></li>\n<li><a href=\"https://icloudnative.io/posts/ipvs-how-kubernetes-services-direct-traffic-to-pods/\">https://icloudnative.io/posts/ipvs-how-kubernetes-services-direct-traffic-to-pods/</a></li>\n</ul>\n<h3 id=\"四、Service：nodeport-实现原理\"><a href=\"#四、Service：nodeport-实现原理\" class=\"headerlink\" title=\"四、Service：nodeport 实现原理\"></a>四、Service：nodeport 实现原理</h3><h4 id=\"1）nodeport-ip-如何访问\"><a href=\"#1）nodeport-ip-如何访问\" class=\"headerlink\" title=\"1）nodeport ip 如何访问\"></a>1）nodeport ip 如何访问</h4><p>通过访问宿主机端口 –&gt; cluster ip 路径（端口范围：30000-32767）</p>\n<h4 id=\"2）iptables-方式-1\"><a href=\"#2）iptables-方式-1\" class=\"headerlink\" title=\"2）iptables 方式\"></a>2）iptables 方式</h4><ul>\n<li><p>查看 service 信息</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">kubectl describe service nginx-test</span></span><br><span class=\"line\">Name:                     nginx-test</span><br><span class=\"line\">Namespace:                default</span><br><span class=\"line\">Labels:                   app=nginx-test</span><br><span class=\"line\">Annotations:              &lt;none&gt;</span><br><span class=\"line\">Selector:                 app=nginx-test</span><br><span class=\"line\">Type:                     NodePort</span><br><span class=\"line\">IP Family Policy:         SingleStack</span><br><span class=\"line\">IP Families:              IPv4</span><br><span class=\"line\">IP:                       10.43.6.58</span><br><span class=\"line\">IPs:                      10.43.6.58</span><br><span class=\"line\">Port:                     80-80  80/TCP</span><br><span class=\"line\">TargetPort:               80/TCP</span><br><span class=\"line\">NodePort:                 80-80  32506/TCP</span><br><span class=\"line\">Endpoints:                10.42.1.6:80,10.42.2.6:80</span><br><span class=\"line\">Session Affinity:         None</span><br><span class=\"line\">External Traffic Policy:  Cluster</span><br><span class=\"line\">Events:                   &lt;none&gt;</span><br></pre></td></tr></table></figure>\n<p>对node port类型的service来说，访问host的port就访问到了这个服务。所以从host网络角度来看，当host收到数据包的时候应该是进入host network namespace的PREROUTING chain中，查看host network namespace的PREROUTING chain。</p>\n</li>\n<li><p>查看宿主机 iptables</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">iptables -nvL -t nat |<span class=\"built_in\">head</span></span></span><br><span class=\"line\">Chain PREROUTING (policy ACCEPT 0 packets, 0 bytes)</span><br><span class=\"line\">pkts bytes target     prot opt in     out     source               destination</span><br><span class=\"line\">323 20898 KUBE-SERVICES  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* kubernetes service portals */</span><br></pre></td></tr></table></figure>\n<p>根据规则，对于PREROUTING chain中，所有的流量都走到了KUBE-SERVICES这个target中。</p>\n</li>\n<li><p>查看 KUBE-SERVICES target</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">iptables -nvL -t nat |grep KUBE-SERVICES -A 10</span></span><br><span class=\"line\">Chain KUBE-SERVICES (2 references)</span><br><span class=\"line\">pkts bytes target     prot opt in     out     source               destination</span><br><span class=\"line\">0     0 KUBE-SVC-7CWUT4JBGBRVUN2L  tcp  --  *      *       0.0.0.0/0            10.43.6.58           /* default/nginx-test:80-80 cluster IP */ tcp dpt:80</span><br></pre></td></tr></table></figure>\n<p>在KUBE-SERVICES target中当访问 nginx-test-service 在host上的 32506 时候，根据规则匹配到了 KUBE-NODEPORTS 这个target。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">iptables -nvL -t nat |grep KUBE-NODEPORTS -A 3</span></span><br><span class=\"line\">Chain KUBE-NODEPORTS (1 references)</span><br><span class=\"line\">pkts bytes target     prot opt in     out     source               destination</span><br><span class=\"line\">2   124 KUBE-EXT-7CWUT4JBGBRVUN2L  tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            /* default/nginx-test:80-80 */ tcp dpt:32506</span><br></pre></td></tr></table></figure>\n<p>在KUBE-NODEPORTS target中可以看到当访问 32506 端口时到 KUBE-EXT-7CWUT4JBGBRVUN2L 这个 target </p>\n</li>\n<li><p>查看 KUBE-EXT-7CWUT4JBGBRVUN2L  target</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">iptables -nvL -t nat |grep KUBE-EXT-7CWUT4JBGBRVUN2L -A 5</span></span><br><span class=\"line\">Chain KUBE-EXT-7CWUT4JBGBRVUN2L (1 references)</span><br><span class=\"line\"> pkts bytes target     prot opt in     out     source               destination</span><br><span class=\"line\">    2   124 KUBE-MARK-MASQ  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* masquerade traffic for default/nginx-test:80-80 external destinations */</span><br><span class=\"line\">    2   124 KUBE-SVC-7CWUT4JBGBRVUN2L  all  --  *      *       0.0.0.0/0            0.0.0.0/0</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">iptables -nvL -t nat |grep KUBE-MARK-MASQ -A 3</span></span><br><span class=\"line\">Chain KUBE-MARK-MASQ (20 references)</span><br><span class=\"line\"> pkts bytes target     prot opt in     out     source               destination</span><br><span class=\"line\">    2   124 MARK       all  --  *      *       0.0.0.0/0            0.0.0.0/0            MARK or 0x4000</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">iptables -nvL -t nat |grep KUBE-SVC-7CWUT4JBGBRVUN2L -A 5</span></span><br><span class=\"line\">Chain KUBE-SVC-7CWUT4JBGBRVUN2L (2 references)</span><br><span class=\"line\"> pkts bytes target     prot opt in     out     source               destination</span><br><span class=\"line\">    0     0 KUBE-MARK-MASQ  tcp  --  *      *      !10.42.0.0/16         10.43.6.58           /* default/nginx-test:80-80 cluster IP */ tcp dpt:80</span><br><span class=\"line\">    1    64 KUBE-SEP-U2YYZT2C3O6VM4EV  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* default/nginx-test:80-80 -&gt; 10.42.1.6:80 */ statistic mode random probability 0.50000000000</span><br><span class=\"line\">    1    60 KUBE-SEP-GWUIQWA2TNZI4ESX  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* default/nginx-test:80-80 -&gt; 10.42.2.6:80 */</span><br></pre></td></tr></table></figure>\n<p>在 KUBE-EXT-7CWUT4JBGBRVUN2L 中可以看到两个 target</p>\n<ul>\n<li>KUBE-MARK-MASQ 打标记，无 nat target</li>\n<li>KUBE-SVC-7CWUT4JBGBRVUN2L target 进入 cluster ip 规则，重复第三部分规则，最终流量进入 Pod</li>\n</ul>\n</li>\n<li><p>nodeport 类型 service 总结：</p>\n<ul>\n<li>在host netwok namespace的PREROUTING chain中会匹配KUBE-SERVICES target。</li>\n<li>在KUBE-SERVICES target会匹配KUBE-NODEPORTS target</li>\n<li>在KUBE-NODEPORTS target会根据prot来匹配KUBE-SVC-XXX target</li>\n<li>KUBE-SVC-XXX target就和第三部分中的cluster-ip类型service一样，最终流量进入到 Pod 中</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3）ipvs-方式-1\"><a href=\"#3）ipvs-方式-1\" class=\"headerlink\" title=\"3）ipvs 方式\"></a>3）ipvs 方式</h4><ul>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzI0MDE3MjAzMg==&mid=2648393266&idx=1&sn=34d2a21b06d6e9ef4f4f7415f2cad567&chksm=f1310b5dc646824b45cbfc8cf25b0f2449f7223006b684da06ba58d95a2be7a3f0ad7aa6c4b9&scene=178&cur_album_id=2123526506718003213#rd\">https://mp.weixin.qq.com/s?__biz&#x3D;MzI0MDE3MjAzMg&#x3D;&#x3D;&amp;mid&#x3D;2648393266&amp;idx&#x3D;1&amp;sn&#x3D;34d2a21b06d6e9ef4f4f7415f2cad567&amp;chksm&#x3D;f1310b5dc646824b45cbfc8cf25b0f2449f7223006b684da06ba58d95a2be7a3f0ad7aa6c4b9&amp;scene&#x3D;178&amp;cur_album_id&#x3D;2123526506718003213#rd</a></li>\n<li><a href=\"https://icloudnative.io/posts/ipvs-how-kubernetes-services-direct-traffic-to-pods/\">https://icloudnative.io/posts/ipvs-how-kubernetes-services-direct-traffic-to-pods/</a></li>\n</ul>\n<h3 id=\"五、Service：ipvs-与-iptables-对比\"><a href=\"#五、Service：ipvs-与-iptables-对比\" class=\"headerlink\" title=\"五、Service：ipvs 与 iptables 对比\"></a>五、Service：ipvs 与 iptables 对比</h3><blockquote>\n<p>基于 ipvs 的 k8s 网络负载要求：</p>\n<ul>\n<li>linux 内核高于2.4.x</li>\n<li>在 kube-proxy 网络组件中启动参数加入–proxy-mode&#x3D;ipvs</li>\n<li>安装 ipvsadm 工具（可选），用于操作管理 ipvs 规则</li>\n</ul>\n</blockquote>\n<ul>\n<li><p>两者都是采用linux内核模块完成负载均衡和endpoint的映射，所有操作都在内核空间完成，没有在应用程序的用户空间。</p>\n</li>\n<li><p>iptable方式依赖于linux netfilter&#x2F;iptable内核模块。</p>\n</li>\n<li><p>ipvs方式依赖linux netfilter&#x2F;iptable模块，ipset模块，ipvs模块。</p>\n</li>\n<li><p>iptable方式中，host宿主中ipatble的entry数目会随着service和对应endpoints的数目增多而增多。举个例子，比如有10个cluster ip类型的service，每个service有6个endpoints。那么在KUBE-SERVICES target中至少有10个entries(KUBE-SVC-XXX)与10个service对应，每个KUBE-SVC-XXX target中会有6个KUBE-SEP-XXX与6个endpoints来对应，每个KUBE-SEP-XXX会有2个enrties来分别做mark masq和DNAT，这样算起来至少有10<em>6</em>2&#x3D;120个entries在iptable中。试想如果application中service和endpoints数目巨大，iptable entries也是非常庞大的，在一定情况下有可能带来性能上的问题。</p>\n</li>\n<li><p>ipvs方式中host宿主中iptable的entry数目是固定的，因为iptable做匹配的时候会利用ipset(KUBE-CLUSTER-IP或者KUBE-NODE-PORT-TCP)来匹配，service的数目决定了ipset的大小，并不会影响iptable的大小。这样就解决了iptable模式下，entries随着service和endpoints的增多而增多的问题。</p>\n</li>\n<li><p>对于负载均衡，iptable方式采用random模块来完成负载均衡，ipvs方式支持多种负载均衡，例如round-robin，least connection，source hash等（可参考<a href=\"http://www.linuxvirtualserver.org/%EF%BC%89%EF%BC%8C%E5%B9%B6%E4%B8%94%E7%94%B1kubelet%E5%90%AF%E5%8A%A8%E5%8F%82%E6%95%B0--ipvs-scheduler%E6%8E%A7%E5%88%B6%E3%80%82\">http://www.linuxvirtualserver.org/），并且由kubelet启动参数--ipvs-scheduler控制。</a></p>\n</li>\n<li><p>对于目标地址的映射，iptable方式采用linux原生的DNAT，ipvs方式则利用ipvs模块完成。</p>\n</li>\n<li><p>ipvs方式会在host netwok namespace中创建网络设备kube-ipvs0，并且绑定了所有的cluster ip，这样保证了cluster-ip类型的service数据进入INPUT chain，从而让ipvs来完成负载均衡和目标地址的映射。</p>\n</li>\n<li><p>iptable方式不会在host netwok namespace中创建额外的网络设备。</p>\n</li>\n<li><p>iptable方式数据在host network namespace的chain中的路径是：PREROUTING–&gt;FORWARDING–&gt;POSTROUTING 在PREROUTING chain中完成负载均衡，mark masq和目标地址映射。</p>\n</li>\n<li><p>ipvs方式数据在host network namespace的chain中的路径是：PREROUTING–&gt;INPUT–&gt;POSTROUTING 在PREROUTING chain中完成mark masq SNAT，在INPUT chain利用ipvs完成负载均衡和目标地址映射。</p>\n</li>\n<li><p>iptable和ipvs方式在完成负载均衡和目标地址映射后都会根据host network namespace的路由表做下一跳路由选择。</p>\n</li>\n</ul>\n<h3 id=\"六、跨主机网络通信：flannel-组件\"><a href=\"#六、跨主机网络通信：flannel-组件\" class=\"headerlink\" title=\"六、跨主机网络通信：flannel 组件\"></a>六、跨主机网络通信：flannel 组件</h3><h4 id=\"1）flannel-underlay-网络：host-gw-方式\"><a href=\"#1）flannel-underlay-网络：host-gw-方式\" class=\"headerlink\" title=\"1）flannel underlay 网络：host-gw 方式\"></a>1）flannel underlay 网络：host-gw 方式</h4><p><strong>underlay 网络概念与配置</strong></p>\n<ul>\n<li><p>概念：underlay 网络在通讯过程没有额外封包，通过将容器的宿主机作为路由实现数据包转包</p>\n</li>\n<li><p>配置方式：略</p>\n</li>\n</ul>\n<p><strong>service 与 Pod 对应信息</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">kubectl describe service nginx-test</span></span><br><span class=\"line\">Name:              nginx-test</span><br><span class=\"line\">Namespace:         default</span><br><span class=\"line\">Labels:            app=nginx-test</span><br><span class=\"line\">Annotations:       &lt;none&gt;</span><br><span class=\"line\">Selector:          app=nginx-test</span><br><span class=\"line\">Type:              ClusterIP</span><br><span class=\"line\">IP Family Policy:  SingleStack</span><br><span class=\"line\">IP Families:       IPv4</span><br><span class=\"line\">IP:                10.43.6.58</span><br><span class=\"line\">IPs:               10.43.6.58</span><br><span class=\"line\">Port:              80-80  80/TCP</span><br><span class=\"line\">TargetPort:        80/TCP</span><br><span class=\"line\">Endpoints:         10.42.0.65:80,10.42.1.9:80</span><br><span class=\"line\">Session Affinity:  None</span><br><span class=\"line\">Events:            &lt;none&gt;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">kubectl get pod -owide</span></span><br><span class=\"line\">NAME                          READY   STATUS    RESTARTS      AGE   IP           NODE     NOMINATED NODE   READINESS GATES</span><br><span class=\"line\">nginx-test-7646687cc4-n8s9s   1/1     Running   6 (60m ago)   26d   10.42.0.65   master   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">nginx-test-7646687cc4-z8xnq   1/1     Running   0             47s   10.42.1.9    node1    &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>数据包走向分析，从10.42.0.65请求10.42.1.9</strong></p>\n<ul>\n<li>数据包从源 pod 到宿主机</li>\n</ul>\n<p>当在pod <strong>10.42.0.65</strong>里向pod <strong>10.42.1.9</strong>里发送数据包的时候，pod <strong>10.42.0.65</strong>的网卡是veth的一个端点。根据pod network namespace中的路由规则，数据一定是发送到<strong>10.42.0.1</strong>，也就是宿主network namespace的cni0 linux bridge设备。由于pod <strong>10.42.0.65</strong>网卡veth另一个端点attach在cni0 bridge设备上，所以数据被cni0 bride接收，也就是数据从pod的network namesapce流动到了host的network namespace里。</p>\n<ul>\n<li>数据包在源 pod 宿主机中的路由</li>\n</ul>\n<p>由于数据包的目标ip地址是<strong>10.42.1.9</strong>，而源pod <strong>10.42.0.65</strong>的宿主ip是<strong>192.168.205.4</strong>。宿主机上开启了转发功能(net.ipv4.ip_forward &#x3D; 1)，所以主机发现目标ip <strong>10.42.1.9</strong>不是自己的ip时候，就对这个数据包做路由转发。查看宿主<strong>192.168.205.4</strong>的路由表</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ip addr |grep 192.168.205.4</span></span><br><span class=\"line\">    inet 192.168.205.4/24 metric 100 brd 192.168.205.255 scope global dynamic enp0s1</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ip route</span></span><br><span class=\"line\">10.42.1.0/24 via 192.168.205.3 enp0s1 ...</span><br></pre></td></tr></table></figure>\n<p>在路由表里发现<strong>10.42.1.0&#x2F;24</strong>网段的数据下一跳是<strong>192.168.205.3</strong>，也就是目标pod <strong>10.42.1.9</strong>的宿主机器。所以进行arp目标mac地址封包，将数据发往<strong>192.168.205.3</strong>。注意目标pod的下一跳地址是目标pod所在的host，也就是说数据会从原始pod所在的host通过下一跳发往目标pod所在的host。即是原始pod的host必须和目标pod的host在同一个二层网络里，因为只有这样才可以下一跳路由可达。这个也是flannel的underlay网络host gw方式的限制，既要求所有的k8s worker node节点都在同一个二层网络里(可以认为是在同一个ip子网)。</p>\n<ul>\n<li>数据包在目标 pod 宿主机中的路由</li>\n</ul>\n<p>当数据包路由到目标pod <strong>10.42.1.9</strong>的host <strong>192.168.205.3</strong>的时候(通过二层交换)，目标pod宿主机上开启了转发功能(net.ipv4.ip_forward &#x3D; 1)，所以主机发现目标ip <strong>10.42.1.9 <strong>不是自己的ip时候，就对这个数据包做路由转发。查看宿主</strong>192.168.205.3</strong>的路由表</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ip addr |grep 192.168.205.3</span></span><br><span class=\"line\">    inet 192.168.205.3/24 metric 100 brd 192.168.205.255 scope global dynamic enp0s1</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ip route</span></span><br><span class=\"line\">10.42.1.0/24 dev cni0 proto kernel scope link src 10.42.1.1</span><br></pre></td></tr></table></figure>\n<p>在路由表里发现<strong>10.42.1.0&#x2F;24</strong>网段的数据下一跳是直连路由，由设备cni0 网卡转发。cni 网卡 <strong>10.42.1.1</strong> 作为linux bridge，会把数据通过veth pair从host network namespace发送到目标pod的<strong>10.42.1.9</strong>的network namespace里。然后由内核交给应用程序处理，从而完成了pod到pod的通讯。可以使用 kubectl debug 查看路由经过节点</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">kubectl debug -it nginx-test-7646687cc4-z8xnq --image=busybox -- /bin/sh</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ip addr</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">traceroute 10.42.1.9</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>flannel underlay（host-gw 方式）总结</strong></p>\n<ul>\n<li>从源pod的network namespace到host network namespace的cni0 linux bridge上。</li>\n<li>在源pod所在的host里做三层路由选择，下一跳地址为目标pod所在的host。</li>\n<li>数据包从源pod所在的host发送到目标pod所在的host。（二层 mac 封装数据包）</li>\n<li>在目标pod所在的host里做三层路由选择，本地直连路由到目标pod里。</li>\n<li>要求所有的节点必须开启路由转发功能(net.ipv4.ip_forward &#x3D; 1)</li>\n<li>要求所有的节点都在同一个二层网络里，来完成目标pod所在host的下一跳路由</li>\n</ul>\n<h4 id=\"2）flannel-overlay-网络：vxlan-方式\"><a href=\"#2）flannel-overlay-网络：vxlan-方式\" class=\"headerlink\" title=\"2）flannel overlay 网络：vxlan 方式\"></a>2）flannel overlay 网络：vxlan 方式</h4><p><strong>overlay 网络概念与配置</strong></p>\n<ul>\n<li>概念</li>\n</ul>\n<p>vxlan 是一种overlay 网络技术，意在利用在三层网络之上构建二层网络。对于二层网络一般采用 vlan 技术来隔离，不过 vlan 在数据包里总共4个字节，有12bit用来标识不同的二层网络，这样总共可以有4000多个 vlan。而 vxlan header有8个字节，有24bit用来标识不同的二层网络，这样总共是1600多万个 vxlan。<a href=\"https://tools.ietf.org/html/rfc7348\">vxlan详解</a></p>\n<ul>\n<li>配置方式：<a href=\"https://mp.weixin.qq.com/s?__biz=MzI0MDE3MjAzMg==&mid=2648393268&idx=1&sn=ea7df945f11a57619a81df8599bcbe99&chksm=f1310b5bc646824daaf9ac6cb2dec4b8c8f54fdf4753b5379db991c88e4e5951ec928b9da2d9&scene=178&cur_album_id=2123526506718003213#rd\">参考</a></li>\n</ul>\n<p>1.使用 vxlan 配置集群时，因为 vxlan 利用 udp 包的 payload 封装二层 eth 包，mtu 值从1500变为1450。<br>2.vxlan 利用 udp 封包，etcd 配置 udp 使用8472端口接收数据，需要在所有节点放行8472 udp port 。</p>\n<p><strong>service 与 Pod 对应信息</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">kubectl describe service nginx-test</span></span><br><span class=\"line\">Name:              nginx-test</span><br><span class=\"line\">Namespace:         default</span><br><span class=\"line\">Labels:            app=nginx-test</span><br><span class=\"line\">Annotations:       &lt;none&gt;</span><br><span class=\"line\">Selector:          app=nginx-test</span><br><span class=\"line\">Type:              ClusterIP</span><br><span class=\"line\">IP Family Policy:  SingleStack</span><br><span class=\"line\">IP Families:       IPv4</span><br><span class=\"line\">IP:                10.43.6.58</span><br><span class=\"line\">IPs:               10.43.6.58</span><br><span class=\"line\">Port:              80-80  80/TCP</span><br><span class=\"line\">TargetPort:        80/TCP</span><br><span class=\"line\">Endpoints:         10.42.0.65:80,10.42.1.9:80</span><br><span class=\"line\">Session Affinity:  None</span><br><span class=\"line\">Events:            &lt;none&gt;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">kubectl get pod -owide</span></span><br><span class=\"line\">NAME                          READY   STATUS    RESTARTS      AGE   IP           NODE     NOMINATED NODE   READINESS GATES</span><br><span class=\"line\">nginx-test-7646687cc4-n8s9s   1/1     Running   6 (60m ago)   26d   10.42.0.65   master   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">nginx-test-7646687cc4-z8xnq   1/1     Running   0             47s   10.42.1.9    node1    &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>kubectl debug 查看路由走向与网络，进入 pod 10.42.0.65</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">kubectl debug -it nginx-test-7646687cc4-n8s9s --image=busybox -- /bin/sh</span></span><br><span class=\"line\">/ # ping -c 3 10.42.1.9</span><br><span class=\"line\">PING 10.42.1.9 (10.42.1.9): 56 data bytes</span><br><span class=\"line\">64 bytes from 10.42.1.9: seq=0 ttl=62 time=1.447 ms</span><br><span class=\"line\">64 bytes from 10.42.1.9: seq=1 ttl=62 time=2.732 ms</span><br><span class=\"line\">64 bytes from 10.42.1.9: seq=2 ttl=62 time=0.880 ms</span><br><span class=\"line\">/ # traceroute -n 10.42.1.9</span><br><span class=\"line\">traceroute to 10.42.1.9 (10.42.1.9), 30 hops max, 46 byte packets</span><br><span class=\"line\"> 1  10.42.0.1  0.027 ms  0.012 ms  0.009 ms</span><br><span class=\"line\"> 2  10.42.1.0  1.761 ms  1.440 ms  1.085 ms</span><br><span class=\"line\"> 3  10.42.1.9  1.453 ms  0.979 ms  0.976 ms</span><br></pre></td></tr></table></figure>\n\n<p><strong>数据包走向分析，从10.42.0.65请求10.42.1.9</strong></p>\n<ul>\n<li>数据在 pod namespace network 中路由</li>\n</ul>\n<p>ip为<strong>10.42.0.65</strong>的pod从自己的network namespace访问pod <strong>10.42.1.9</strong>，根据<strong>10.42.0.65</strong> pod network namespace的路由表，数据进入了<strong>10.42.0.65</strong> pod的宿主<strong>192.168.205.4</strong>的network namespace中的linux bridge cni0。查看宿主机路由信息</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ip addr |grep 192.168.205.4</span></span><br><span class=\"line\">    inet 192.168.205.4/24 metric 100 brd 192.168.205.255 scope global dynamic enp0s1</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ip route</span></span><br><span class=\"line\">10.42.1.0/24 via 10.42.1.0 dev flannel.1 onlink</span><br></pre></td></tr></table></figure>\n<p><strong>10.42.1.0&#x2F;24</strong>网段的访问下一跳ip地址是<strong>10.42.1.0</strong>，用flannel.1设备发送。flannel.1设备就是 flannel 启动的时候根据vxlan类型网络在宿主上创建的，它属于vxlan设备，会完成对二层eth以太数据包到udp数据包的封装与拆封。其中的”.1”代表vxlan这个二层网络id号为1，也对应了vxlan网络在etcd里的配置。这个时候数据包源ip为<strong>10.42.0.65</strong>，目标ip为<strong>10.42.1.9</strong>，源mac为pod <strong>10.42.0.65</strong> network namespace中veth设备mac，目标mac为下一跳ip **10.42.1.0&#x2F;32 **的mac。</p>\n<ul>\n<li>查看 vtep 端点 mac 地址以及转发接口信息</li>\n</ul>\n<p>查看 mac 地址信息：在pod <strong>10.42.0.65</strong>的宿主<strong>192.168.205.4</strong>上通过arp表查询<strong>10.42.1.0&#x2F;32</strong>的mac地址为 62:c8:a9:ce:ca:4e</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ip addr |grep 192.168.205.4</span></span><br><span class=\"line\">    inet 192.168.205.4/24 metric 100 brd 192.168.205.255 scope global dynamic enp0s1</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ip neighbo |grep 10.42.1.0</span></span><br><span class=\"line\">10.42.1.0 dev flannel.1 lladdr 62:c8:a9:ce:ca:4e PERMANENT</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ip neighbo show dev flannel.1</span></span><br><span class=\"line\">10.42.1.0 lladdr 62:c8:a9:ce:ca:4e PERMANENT</span><br><span class=\"line\">10.42.2.0 lladdr ca:cb:1f:99:10:97 PERMANENT</span><br></pre></td></tr></table></figure>\n<p>查看 mac 地址转发信息：由于flannel.1设备是vxlan设备，会有转发接口与它的mac对应，继续在pod <strong>10.42.0.65</strong>的宿主<strong>192.168.205.4</strong>上查询flannel.1设备的mac转发接口。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ip addr |grep 192.168.205.4</span></span><br><span class=\"line\">    inet 192.168.205.4/24 metric 100 brd 192.168.205.255 scope global dynamic enp0s1</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">bridge fdb show |grep 62:c8:a9:ce:ca:4e</span></span><br><span class=\"line\">62:c8:a9:ce:ca:4e dev flannel.1 dst 192.168.205.3 self permanent</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">bridge fdb show dev flannel.1</span></span><br><span class=\"line\">62:c8:a9:ce:ca:4e dst 192.168.205.3 self permanent</span><br><span class=\"line\">ee:87:b2:4a:fd:62 dst 192.168.205.5 self permanent</span><br></pre></td></tr></table></figure>\n<p>可以看到 flannel.1设备mac地址 <strong>62:c8:a9:ce:ca:4e</strong> 对应的转发接口为 <strong>192.168.205.3</strong>，代表flannel.1设备将会把原始二层数据包(源ip为<strong>10.42.0.65</strong>，目标ip为<strong>10.42.1.9</strong>，源mac为 pod <strong>10.42.0.65</strong> network namespace中veth设备mac，目标mac为<strong>10.42.1.0&#x2F;32</strong> mac)做为 upd 的 payload 发给 **192.168.205.3 **的 **8472 **端口。目标pod **10.42.1.9 **的宿主机确实是 <strong>192.168.205.3</strong>，而且其上的flannel.1设备同样会对8472端口的数据进行upd解包。</p>\n<ul>\n<li><p>flannel.1 设备处理 udp 封包与解包</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ip addr |grep 192.168.205.4</span></span><br><span class=\"line\">    inet 192.168.205.4/24 metric 100 brd 192.168.205.255 scope global dynamic enp0s1</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">route -n</span></span><br><span class=\"line\">Kernel IP routing table</span><br><span class=\"line\">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class=\"line\">0.0.0.0         192.168.205.1   0.0.0.0         UG    100    0        0 enp0s1</span><br><span class=\"line\">192.168.205.0   0.0.0.0         255.255.255.0   U     100    0        0 enp0s1</span><br><span class=\"line\">192.168.205.1   0.0.0.0         255.255.255.255 UH    100    0        0 enp0s1</span><br></pre></td></tr></table></figure>\n<p>flannel.1 设备 udp 封包：从pod **10.42.0.65 **的宿主 <strong>192.168.205.4</strong> 的路由表得知发往 <strong>192.168.205.0&#x2F;24</strong> 网段为直连路由，使用宿主网络设备 enp0s1 发送。所以对于：</p>\n<ul>\n<li>外层udp包：源ip为<strong>192.168.205.4</strong>，目标ip为<strong>192.168.205.3</strong>，源mac为<strong>192.168.205.4</strong> mac，目标mac为<strong>192.168.205.3</strong> mac。目标端口为8472，vxlan id为1.</li>\n<li>内层二层以太包：源ip为<strong>10.42.0.65</strong>，目标ip为<strong>10.42.1.9</strong>，源mac为pod <strong>10.42.0.65</strong> network namespace中veth设备mac，目标mac为<strong>10.42.1.0&#x2F;32</strong> mac</li>\n<li>完成封包以后根据宿主路由表发向目标节点 <strong>192.168.205.3</strong></li>\n</ul>\n</li>\n</ul>\n<p>flannel.1 设备 udp 解包：宿主机 **192.168.205.3 **接收到数据包后</p>\n<ul>\n<li><p>目标节点<strong>192.168.205.3</strong>的8472端口接收到udp包之后，发现数据包里有vxlan id标识为1。由于linux内核支持vxlan，所以协议栈可以通过vxlan id判断这是一个vxlan数据报文，并且vxlan为1。然后找到宿主机器上vxlan id为1的vxlan设备处理，就是<strong>192.168.205.3</strong>上的flannel.1设备。</p>\n</li>\n<li><p>flannel.1收到数据之后开始对vxlan udp报文拆包，去掉upd报文的ip，port，mac信息后得到内部的payload，发现是一个二层报文。</p>\n</li>\n<li><p>对于这个二层报文继续拆包，得到里面的源ip是<strong>10.42.0.65</strong>，目标ip是<strong>10.42.1.9</strong>。</p>\n</li>\n<li><p>根据<strong>192.168.205.3</strong>上路由表，将数据由linux bridge cni0做本地转发，cni0 作为 linux bridge 利用 veth pair 将数据转发到目标 pod <strong>10.42.1.9</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ip addr |grep 192.168.205.3</span></span><br><span class=\"line\">    inet 192.168.205.3/24 metric 100 brd 192.168.205.255 scope global dynamic enp0s1</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">route -n</span></span><br><span class=\"line\">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class=\"line\">10.42.1.0       0.0.0.0         255.255.255.0   U     0      0        0 cni0</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>宿主host的路由表的写入 与 flannel.1设备mac转发接口表的写入（fdb 转发）</p>\n</li>\n</ul>\n<p>因为所有的host都运行flannel服务，而flannel连接etcd存储中心，所以每个host就知道自己的子网地址cidr是什么，也知道在这个cidr中自己的flannel.1设备ip地址和mac地址，同时也知道了其它host的子网cidr以及flannel.1设备ip地址和mac地址。而知道了这些信息，就可以在flannel启动的时候写入到路由表和fdb中了，以 **192.168.205.4 **宿主为例：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">~# </span><span class=\"language-bash\">ip addr |grep 192.168.205.4</span></span><br><span class=\"line\">    inet 192.168.205.4/24 metric 100 brd 192.168.205.255 scope global dynamic enp0s1</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">bridge fdb show dev flannel.1</span></span><br><span class=\"line\">62:c8:a9:ce:ca:4e dst 192.168.205.3 self permanent</span><br><span class=\"line\">ee:87:b2:4a:fd:62 dst 192.168.205.5 self permanent</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">etcdctl ....</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>flannel overlay（vxlan 方式）总结</strong></p>\n<ul>\n<li>每个宿主都有名字为flannel.x的vxlan网络设备来完成对于vxlan数据的udp封包与拆包，upd数据在宿主的8472端口上(端口值可配置)处理。</li>\n<li>数据从pod的network namespace进入到host的network namespace中。</li>\n<li>根据host network namespace中的路由表，下一跳ip为目标vxlan设备的ip，并且由当前host的flannel.x设备发送。</li>\n<li>根据host network namespace中的apr表找到下一跳ip的mac地址。</li>\n<li>根据host network namespace中fbd找到下一跳ip的mac地址对应的转发ip。</li>\n<li>当前host的flannel.x设备根据下一跳ip的mac地址对应的转发ip和本地路由表进行upd封包，这个时候：<ul>\n<li>外层udp包：源ip为当前host ip，目标ip为mac转发表中匹配的ip，源mac为前host ip的mac，目标mac为fdb中匹配ip的mac。目标端口为8472(可配置)，vxlan id为1(可配置).</li>\n<li>内层二层以太帧包：源ip为源pod ip，目标ip为目标pod ip，源mac为源pod mac，目标mac为host network namespace中路由表里下一跳ip的mac(一般为目标pod对应的host中flannel.x设备ip)。</li>\n</ul>\n</li>\n<li>数据包由当前host路由到目标节点host。</li>\n<li>目标节点host的8472端口接收到udp包之后，发现数据包里有vxlan id标识.。然后根据linux vxlan协议，在目标宿主机器上找到与数据报文中vxlan id对应的vxlan设备，将数据交由其处理。</li>\n<li>vxlan设备收到数据之后开始对vxlan udp报文拆包，去掉upd报文的ip，port，mac信息后得到内部的payload，发现是一个二层报文。然后继续对这个二层报文拆包，得到里面的源pod ip和目标pod ip。</li>\n<li>根据目标节点host上路由表，将数据由linux bridge cni0做本地转发。</li>\n<li>数据由linux bridge cni0利用veth pair转发到目标pod。</li>\n<li>每个宿主host的flannel服务启动的时候读取etcd中的vxlan配置信息，在宿主host的路由表和mac转发接口表fdb里写入相应数据。</li>\n</ul>\n<h4 id=\"3）flannel-underlay-与-overlay-网络对比\"><a href=\"#3）flannel-underlay-与-overlay-网络对比\" class=\"headerlink\" title=\"3）flannel underlay 与 overlay 网络对比\"></a>3）flannel underlay 与 overlay 网络对比</h4><ul>\n<li>都要求host宿主开启网络转发功能(net.ipv4.ip_forward &#x3D; 1)。</li>\n<li>flannel underlay网络没有数据包的额外封包与拆包，效率会更高一些。</li>\n<li>对于flannel underlay网络要求所有的worker node都在同一个二层网络里，从而完成目标pod的下一跳路由。即underlay网络worker node不能跨子网。</li>\n<li>flannel vxlan overlay 网络有封包与拆包，并且外层包都是 udp 包。因此 worker node只要三层路由可达就好，支持worker node能跨子网。</li>\n<li>flannel vxlan overlay网络内层包是二层以太包，基于linux vxlan设备</li>\n<li>flannel underlay网络和flannel vxlan overlay网络所有数据包都由操作系统内核空间处理，没有用户空间的应用程序参与。</li>\n</ul>\n<blockquote>\n<h4 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h4><p>1、k8s 集群网络：<br><a href=\"https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzI0MDE3MjAzMg==&action=getalbum&album_id=2123526506718003213&scene=173&from_msgid=2648393229&from_itemidx=1&count=3&nolastread=1#wechat_redirect\">https://mp.weixin.qq.com/mp/appmsgalbum?__biz&#x3D;MzI0MDE3MjAzMg&#x3D;&#x3D;&amp;action&#x3D;getalbum&amp;album_id&#x3D;2123526506718003213&amp;scene&#x3D;173&amp;from_msgid&#x3D;2648393229&amp;from_itemidx&#x3D;1&amp;count&#x3D;3&amp;nolastread&#x3D;1#wechat_redirect</a><br>2、iptables 详解：<br><a href=\"https://lixiangyun.gitbook.io/iptables_doc_zh_cn/\">https://lixiangyun.gitbook.io/iptables_doc_zh_cn&#x2F;</a><br><a href=\"https://www.jianshu.com/p/ee4ee15d3658\">https://www.jianshu.com/p/ee4ee15d3658</a><br>3、Docker 网络类型：<a href=\"https://developer.aliyun.com/article/974008#slide-4\">https://developer.aliyun.com/article/974008#slide-4</a><br>4、ipvs 工作模式原理：<a href=\"https://icloudnative.io/posts/ipvs-how-kubernetes-services-direct-traffic-to-pods/\">https://icloudnative.io/posts/ipvs-how-kubernetes-services-direct-traffic-to-pods/</a></p>\n</blockquote>\n","site":{"data":{"footer":"","styles":".post {\n  margin-top: 50px;\n  margin-bottom: 50px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n.headband {\n  display: none;\n}\nbody {\n  background: url(\"/images/background.jpeg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\n.post-block.page {\n  margin-top: 40px;\n}\n.category-all-page {\n  box-shadow: 0px 0px 10px 0px rgba(0,0,0,0.5);\n  background-color: #797d7f;\n  padding: 20px 30px 60px 30px;\n  border-radius: 25px 25px 25px 25px;\n}\n.category-all-title {\n  font-family: Impact;\n  font-size: 24px;\n  color: #0ff;\n}\n.category-list {\n  overflow: auto;\n}\n.category-list li {\n  height: 100%;\n  float: left;\n  border-right: 3px solid #222;\n  padding: 0 20px;\n}\n.category-all ul li {\n  list-style: none !important;\n}\n.category-list li:last-child {\n  border-right: none;\n}\n.category-list li a {\n  font-size: 16px;\n  text-decoration: none;\n  color: #7fff00;\n  font-family: Helvetica, Verdana, sans-serif;\n  -webkit-transition: all 0.5s ease;\n  -moz-transition: all 0.5s ease;\n  -o-transition: all 0.5s ease;\n  -ms-transition: all 0.5s ease;\n  transition: all 0.5s ease;\n}\n.category-list li a:hover {\n  color: #000;\n}\n.category-list li.active a {\n  font-weight: bold;\n  color: #000;\n}\n.tag-cloud a {\n  box-shadow: 0 1px 3px #6f42c1, 0 1px 2px #d9534f;\n  padding: 2px 10px;\n  margin: 8px;\n  background: rgba(193,66,92,0);\n  border-bottom: none;\n  border-radius: 20px;\n}\ncode {\n  background: #555;\n  color: #fff;\n}\n","variables":""}},"length":21199,"excerpt":"<h3 id=\"一、简介\"><a href=\"#一、简介\" class=\"headerlink\" title=\"一、简介\"></a>一、简介</h3><h4 id=\"1）容器网络基本概念\"><a href=\"#1）容器网络基本概念\" class=\"headerlink\" title=\"1）容器网络基本概念\"></a>1）容器网络基本概念</h4><ul>\n<li>Linux Network Namespace<ul>\n<li>linux 网络设备：network interface device，loopback device，bridge device，veth device，tun&#x2F;tap device，vxlan device，ip tunnel device 等等可完成网络数据包收发，提供额外修改数据包功能设备</li>\n<li>linux 路由表（三层 ip 包路由寻址功能），arp 表（提供 ip 对应的 mac 信息），fdb（提供基于 mac 转发功能中 mac 地址对应的网络接口） 等</li>\n<li>linux 协议栈：对网络协议包的封装与解析，如二层 ethernet 包，三层 ip icmp包，四层 tcp&#x2F;udp 包等</li>\n<li>linux iptable：基于内核模块 netfilter 完成对 linux 的 firewall 管理，例如控制 ingress 与 engress，nat 地址转换，端口映射等</li></ul></li></ul>","more":"\n\n\n\n<img data-src=\"/posts/5d90/k8s-nw1.png\" class>\n<blockquote>\n<p>linux 不仅仅只有 network namespace 用来进行网络隔离，还有 pid namespace 用来隔离进程，user namespace 用来隔离用户，mount namespace 用来隔离挂载点，ipc namespace 用来隔离信号量和共享内存等，uts namespace 用来隔离主机名和域名。<br>配合 cgroup 控制组，限制 cpu，memory，io 等资源。构成容器的底层实现</p>\n</blockquote>\n<ul>\n<li>Linux Bridge Device</li>\n</ul>\n<p>linux 网桥设备，可以附加 attach 多个 linux 从设备。类似于一个内部虚拟二层交换机，可以进行二层数据包广播。但是注意的是linux bridge设备可以有自己的ip地址。也就是说，多个linux网络设备attach到一个bridge上，那么这些网络设备的ip地址将会失效(只有二层功能)，当一个设备收到数据包的时候，bridge会把数据包转发到其它所有attach到bridge上的从设备，从而实现广播的效果。</p>\n<img data-src=\"/posts/5d90/k8s-nw2.png\" class>\n\n<ul>\n<li>Linux Veth Device</li>\n</ul>\n<p>总是成对出现，一对 peer 两个端点，数据包从一个 peer 流入并流出到另一个 peer。veth pair 可以跨 network namespace。</p>\n<img data-src=\"/posts/5d90/k8s-nw3.png\" class>\n\n<h4 id=\"2）k8s-集群容器网络通讯方式\"><a href=\"#2）k8s-集群容器网络通讯方式\" class=\"headerlink\" title=\"2）k8s 集群容器网络通讯方式\"></a>2）k8s 集群容器网络通讯方式</h4><ul>\n<li>网络负载方式</li>\n</ul>\n<p>kube-proxy 组件启动参数控制（–proxy-module&#x3D;ipvs）<br>iptables：默认<br>ipvs：v1.11 版本及之后</p>\n<ul>\n<li>网络通讯方式</li>\n</ul>\n<p>underlay：flannel host-gw，calico bgp 等（需开启 ip_forword 内核参数）<br>overlay：flannel vxlan，calico ipip，flannel udp（一般不使用） 等</p>\n<h4 id=\"3）测试环境主机信息\"><a href=\"#3）测试环境主机信息\" class=\"headerlink\" title=\"3）测试环境主机信息\"></a>3）测试环境主机信息</h4><table>\n<thead>\n<tr>\n<th>宿主机 IP</th>\n<th>角色</th>\n<th>容器 CIDR</th>\n<th>CNI 网卡地址</th>\n<th>Flannel.1 vtep 设备</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>192.168.205.4</td>\n<td>master</td>\n<td>10.42.0.0&#x2F;24</td>\n<td>10.42.0.1</td>\n<td>10.42.0.0</td>\n</tr>\n<tr>\n<td>192.168.205.3</td>\n<td>node1</td>\n<td>10.42.1.0&#x2F;24</td>\n<td>10.42.1.1</td>\n<td>10.42.1.0</td>\n</tr>\n<tr>\n<td>192.168.205.5</td>\n<td>node2</td>\n<td>10.42.2.0&#x2F;24</td>\n<td>10.42.2.1</td>\n<td>10.42.2.0</td>\n</tr>\n</tbody></table>\n<h3 id=\"二、宿主机内网络\"><a href=\"#二、宿主机内网络\" class=\"headerlink\" title=\"二、宿主机内网络\"></a>二、宿主机内网络</h3><h4 id=\"1）docker-容器的四种网络类型\"><a href=\"#1）docker-容器的四种网络类型\" class=\"headerlink\" title=\"1）docker 容器的四种网络类型\"></a>1）docker 容器的四种网络类型</h4><ul>\n<li>bridge 模式（默认）：–net&#x3D;bridge</li>\n</ul>\n<p>宿主机创建 docker0 网卡，使用独立 IP 段，为每个容器分配改网段 IP，容器之间通过该网桥进行通信（类似二层交换机）</p>\n<blockquote>\n<img data-src=\"/posts/5d90/k8s-nw4.png\" class>\n<p>自定义 bridge 网络：宿主机范围创建独立的 network namespace </p>\n<img data-src=\"/posts/5d90/k8s-nw5.png\" class>\n</blockquote>\n<ul>\n<li>host 模式：–net&#x3D;host</li>\n</ul>\n<p>共享宿主机网络，容器暴露端口时占用宿主机端口。网络模式简单，性能较好，一般用于单容器服务。</p>\n<img data-src=\"/posts/5d90/k8s-nw6.png\" class>\n\n<ul>\n<li>contaniner 模式：–net&#x3D;container:name or id</li>\n</ul>\n<p>指定新创建的容器共享已存在的容器 Network namespace（k8s 中 pod 即为多个容器共享 network namespace）。除了网络，文件系统 进程等都为隔离，容器间进程可以通过 lo 网卡通信</p>\n<img data-src=\"/posts/5d90/k8s-nw7.png\" class>\n\n<ul>\n<li>none 模式：容器有独立的 Network namespace ，但没有任何网络配置，可自定义进行网络配置。一般用于 CPU 密集型任务，计算完成保留磁盘无需对外网络</li>\n</ul>\n<h4 id=\"2）docker-宿主环境中容器网络\"><a href=\"#2）docker-宿主环境中容器网络\" class=\"headerlink\" title=\"2）docker 宿主环境中容器网络\"></a>2）docker 宿主环境中容器网络</h4><ul>\n<li>每一个container都有一个network namespace，然后拥有container自己的网络设备，路由表，arp表，协议栈，iptable等，各个container的network namespace相互隔离。</li>\n<li>在宿主的default netwok nemespace中会有一个linux bridge设备，一般名称为docker0。</li>\n<li>每一个container对应一个veth pair设备，这个设备的一端在container的network namespace里，另一端attach到宿主networkwork namespace的docker0 linux bridge上。</li>\n<li>这样在宿主环境里，就好像有一个二层交换机(docker0 bridge)，把宿主内的所有container连接起来。所以，在宿主内的container都是可以直接相互访问的，而且是直连的方式</li>\n</ul>\n<img data-src=\"/posts/5d90/k8s-nw8.png\" class>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 相关命令</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">查看 bridge 网桥信息</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">k8s pod 伴生 infrastructure 容器，与基础容器共用 network namespace 与 veth pair</span></span><br><span class=\"line\">brctl show</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">查看 veth pair 设备信息</span></span><br><span class=\"line\">ip addr</span><br><span class=\"line\">ip -d link show</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">查看路由表</span></span><br><span class=\"line\">route -n</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">查看 docker 容器信息</span></span><br><span class=\"line\">docker ps/inspect/container</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"三、Service：cluster-ip-实现原理\"><a href=\"#三、Service：cluster-ip-实现原理\" class=\"headerlink\" title=\"三、Service：cluster ip 实现原理\"></a>三、Service：cluster ip 实现原理</h3><h4 id=\"1）cluster-ip-如何访问\"><a href=\"#1）cluster-ip-如何访问\" class=\"headerlink\" title=\"1）cluster ip 如何访问\"></a>1）cluster ip 如何访问</h4><p>k8s 集群中服务需要相互访问，一般为之创建相应的 service，集群内部访问时一般使用 cluster ip。一个 cluster ip 后面会关联多个 endpoints（实际的 pod 地址）。对于 cluster ip 的访问，也就是实现了对 cluster ip 关联的多个 endpoints 负载均衡访问（负载方式为 iptables 或 ipvs）</p>\n<h4 id=\"2）iptables-方式\"><a href=\"#2）iptables-方式\" class=\"headerlink\" title=\"2）iptables 方式\"></a>2）iptables 方式</h4><ul>\n<li><p>查看 service 信息：cluster ip 以及关联的 endpoints ip</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">kubectl describe service nginx-test</span></span><br><span class=\"line\">Name:              nginx-test</span><br><span class=\"line\">Namespace:         default</span><br><span class=\"line\">Labels:            app=nginx-test</span><br><span class=\"line\">Annotations:       &lt;none&gt;</span><br><span class=\"line\">Selector:          app=nginx-test</span><br><span class=\"line\">Type:              ClusterIP</span><br><span class=\"line\">IP Family Policy:  SingleStack</span><br><span class=\"line\">IP Families:       IPv4</span><br><span class=\"line\">IP:                10.43.6.58</span><br><span class=\"line\">IPs:               10.43.6.58</span><br><span class=\"line\">Port:              80-80  80/TCP</span><br><span class=\"line\">TargetPort:        80/TCP</span><br><span class=\"line\">Endpoints:         10.42.1.6:80,10.42.2.6:80</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看宿主机 iptables </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">iptables -nvL -t nat |<span class=\"built_in\">head</span></span></span><br><span class=\"line\">Chain PREROUTING (policy ACCEPT 0 packets, 0 bytes)</span><br><span class=\"line\">pkts bytes target     prot opt in     out     source               destination</span><br><span class=\"line\">298 19090 KUBE-SERVICES  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* kubernetes service portals */</span><br><span class=\"line\">202 12456 CNI-HOSTPORT-DNAT  all  --  *      *       0.0.0.0/0            0.0.0.0/0            ADDRTYPE match dst-type LOCAL</span><br></pre></td></tr></table></figure>\n<p>对于 PREROUTING chain 中，所有的流量都走到了 KUBE-SERVICES 这个 target 中。请注意 PREROUTING chain 是流量到达之后的第一个入口。如果在 pod 里运行命令 curl <a href=\"http://10.43.6.58，根据容器内部路由表，数据包应该是这样的流动：\">http://10.43.6.58，根据容器内部路由表，数据包应该是这样的流动：</a></p>\n<ul>\n<li>在pod中，根据路由表发现cluster ip(<strong>10.43.6.58</strong>)走默认路由，选择了默认网关。</li>\n<li>在pod中，默认网关的ip地址就是宿主netwok namespace的 <strong>docker0 或 cni0</strong> 的ip地址，并且默认网关为直连路由。</li>\n<li>在pod中，根据路由表，使用eth0 device发送数据，eth0本质是veth pair在pod network namespace的一端，另一端attach在宿主netwok namespace的 <strong>docker0 或 cni0</strong> bridge上。</li>\n<li>veth pair，数据从pod network namespace的一端发出，进入到了attached到<strong>docker0 或 cni0</strong> bridge上的另一端。</li>\n<li><strong>docker0 或 cni0</strong> bridge收到数据之后，自然就来到了host network namesapce 的 PREROUTING chain</li>\n</ul>\n</li>\n<li><p>查看 KUBE-SERVICES target</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">iptables -nvL -t nat | grep 10.43.6.58</span></span><br><span class=\"line\">0     0 KUBE-SVC-7CWUT4JBGBRVUN2L  tcp  --  *      *       0.0.0.0/0            10.43.6.58           /* default/nginx-test:80-80 cluster IP */ tcp dpt:80</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">iptables -nvL -t nat | grep KUBE-SVC-7CWUT4JBGBRVUN2L -A 5</span></span><br><span class=\"line\">Chain KUBE-SVC-7CWUT4JBGBRVUN2L (1 references)</span><br><span class=\"line\">pkts bytes target     prot opt in     out     source               destination</span><br><span class=\"line\">0     0 KUBE-SEP-U2YYZT2C3O6VM4EV  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* default/nginx-test:80-80 -&gt; 10.42.1.6:80 */ statistic mode random probability 0.50000000000</span><br><span class=\"line\">0     0 KUBE-SEP-GWUIQWA2TNZI4ESX  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* default/nginx-test:80-80 -&gt; 10.42.2.6:80 */</span><br></pre></td></tr></table></figure>\n<p>在 KUBE-SERVICES target中我们可以看到目标地址为cluster ip 10.43.6.58 的匹配target 为 KUBE-SVC-7CWUT4JBGBRVUN2L。<br><strong>KUBE-SVC-7CWUT4JBGBRVUN2L 链信息：</strong></p>\n<ul>\n<li>存在两个target （对应两个 Pod ）KUBE-SEP-U2YYZT2C3O6VM4EV 和 KUBE-SEP-GWUIQWA2TNZI4ESX </li>\n<li>在 KUBE-SEP-U2YYZT2C3O6VM4EV 中有statistic mode random probability 0.5。0.5 利用了iptable内核随机模块，随机比率为0.5，也就是50%</li>\n<li>由于一半随机比率进入 KUBE-SEP-U2YYZT2C3O6VM4EV target， 因此另一个 target 的随机比率也为50%，实现负载均衡</li>\n</ul>\n</li>\n<li><p>查看 KUBE-SEP-U2YYZT2C3O6VM4EV 和 KUBE-SEP-GWUIQWA2TNZI4ESX </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">iptables -nvL -t nat | grep KUBE-SEP-U2YYZT2C3O6VM4EV -A 3</span></span><br><span class=\"line\">Chain KUBE-SEP-U2YYZT2C3O6VM4EV (1 references)</span><br><span class=\"line\">pkts bytes target     prot opt in     out     source               destination</span><br><span class=\"line\">0     0 KUBE-MARK-MASQ  all  --  *      *       10.42.1.6            0.0.0.0/0            /* default/nginx-test:80-80 */</span><br><span class=\"line\">0     0 DNAT       tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            /* default/nginx-test:80-80 */ tcp to:10.42.1.6:80</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">iptables -nvL -t nat | grep KUBE-SEP-GWUIQWA2TNZI4ESX -A 3</span></span><br><span class=\"line\">Chain KUBE-SEP-GWUIQWA2TNZI4ESX (1 references)</span><br><span class=\"line\">pkts bytes target     prot opt in     out     source               destination</span><br><span class=\"line\">0     0 KUBE-MARK-MASQ  all  --  *      *       10.42.2.6            0.0.0.0/0            /* default/nginx-test:80-80 */</span><br><span class=\"line\">0     0 DNAT       tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            /* default/nginx-test:80-80 */ tcp to:10.42.2.6:80</span><br></pre></td></tr></table></figure>\n<p>在这2个target中我们可以看到：</p>\n<ul>\n<li>分别做了MASQ操作，这个应该是出站engress流量(限定了source ip)，不是我们的入站ingress流量。</li>\n<li>做了DNAT操作，把原来的cluster ip给DANT转换成了pod的ip 10.42.1.6和10.42.2.6。把原来的port转换成了80 port</li>\n<li>经过这个一系列iptable的target我们的原始请求10.42.1.6:80就变成了10.42.1.6:80或者10.42.2.6:80，而且两者转变的机率各是50%。</li>\n<li>根据iptable，经过PREROUTING chain发现DNAT之后的10.42.1.6或者10.42.2.6不是本地的ip(这两个ip是pod的ip，当然不会在host network namespace里)。所以就走到了Forwarding chain中，根据host network namespace的路由表来决定下一跳地址</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看路由表信息</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ip route</span></span><br><span class=\"line\">default via 192.168.205.1 dev enp0s1 proto dhcp src 192.168.205.4 metric 100</span><br><span class=\"line\">10.42.0.0/24 dev cni0 proto kernel scope link src 10.42.0.1</span><br><span class=\"line\">10.42.1.0/24 via 10.42.1.0 dev flannel.1 onlink</span><br><span class=\"line\">10.42.2.0/24 via 10.42.2.0 dev flannel.1 onlink</span><br><span class=\"line\">192.168.205.0/24 dev enp0s1 proto kernel scope link src 192.168.205.4 metric 100</span><br><span class=\"line\">192.168.205.1 dev enp0s1 proto dhcp scope link src 192.168.205.4 metric 100</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">根据路由表规则10.42.1.6和10.42.2.6走 flannel.1 vtep 设备跨主机通信 node 节点上的 pod</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>clusterip 类型 service 总结<ul>\n<li>流量从pod network namespace中走到host netwok namespace的docker0中。</li>\n<li>在host netwok namespace的<strong>PREROUTING chain</strong>中会经过一系列target。</li>\n<li>在这些target里根据iptable内核随机模块来实现匹配endpoint target，随机比率为均匀分配，实现均匀的负载均衡。内核实现负载均衡，无法自定义负载均衡算法。</li>\n<li>在endpoint target里实现了DNAT，也就是将目标地址cluster ip转化为实际的pod的ip。</li>\n<li>cluster ip是虚拟ip，不会和任何device绑定。</li>\n<li>需要host开启路由转发功能(net.ipv4.ip_forward &#x3D; 1)。</li>\n<li>数据包在host netwok namespace中经过转换以及DNAT之后，由host network namespace的路由表来决定下一跳地址</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3）ipvs-方式\"><a href=\"#3）ipvs-方式\" class=\"headerlink\" title=\"3）ipvs 方式\"></a>3）ipvs 方式</h4><ul>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzI0MDE3MjAzMg==&mid=2648393263&idx=1&sn=d6f27c502a007aa8be7e75b17afac42f&chksm=f1310b40c64682563cfbfd0688deb0fc9569eca3b13dc721bfe0ad7992183cabfba354e02050&scene=178&cur_album_id=2123526506718003213#rd\">https://mp.weixin.qq.com/s?__biz&#x3D;MzI0MDE3MjAzMg&#x3D;&#x3D;&amp;mid&#x3D;2648393263&amp;idx&#x3D;1&amp;sn&#x3D;d6f27c502a007aa8be7e75b17afac42f&amp;chksm&#x3D;f1310b40c64682563cfbfd0688deb0fc9569eca3b13dc721bfe0ad7992183cabfba354e02050&amp;scene&#x3D;178&amp;cur_album_id&#x3D;2123526506718003213#rd</a></li>\n<li><a href=\"https://icloudnative.io/posts/ipvs-how-kubernetes-services-direct-traffic-to-pods/\">https://icloudnative.io/posts/ipvs-how-kubernetes-services-direct-traffic-to-pods/</a></li>\n</ul>\n<h3 id=\"四、Service：nodeport-实现原理\"><a href=\"#四、Service：nodeport-实现原理\" class=\"headerlink\" title=\"四、Service：nodeport 实现原理\"></a>四、Service：nodeport 实现原理</h3><h4 id=\"1）nodeport-ip-如何访问\"><a href=\"#1）nodeport-ip-如何访问\" class=\"headerlink\" title=\"1）nodeport ip 如何访问\"></a>1）nodeport ip 如何访问</h4><p>通过访问宿主机端口 –&gt; cluster ip 路径（端口范围：30000-32767）</p>\n<h4 id=\"2）iptables-方式-1\"><a href=\"#2）iptables-方式-1\" class=\"headerlink\" title=\"2）iptables 方式\"></a>2）iptables 方式</h4><ul>\n<li><p>查看 service 信息</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">kubectl describe service nginx-test</span></span><br><span class=\"line\">Name:                     nginx-test</span><br><span class=\"line\">Namespace:                default</span><br><span class=\"line\">Labels:                   app=nginx-test</span><br><span class=\"line\">Annotations:              &lt;none&gt;</span><br><span class=\"line\">Selector:                 app=nginx-test</span><br><span class=\"line\">Type:                     NodePort</span><br><span class=\"line\">IP Family Policy:         SingleStack</span><br><span class=\"line\">IP Families:              IPv4</span><br><span class=\"line\">IP:                       10.43.6.58</span><br><span class=\"line\">IPs:                      10.43.6.58</span><br><span class=\"line\">Port:                     80-80  80/TCP</span><br><span class=\"line\">TargetPort:               80/TCP</span><br><span class=\"line\">NodePort:                 80-80  32506/TCP</span><br><span class=\"line\">Endpoints:                10.42.1.6:80,10.42.2.6:80</span><br><span class=\"line\">Session Affinity:         None</span><br><span class=\"line\">External Traffic Policy:  Cluster</span><br><span class=\"line\">Events:                   &lt;none&gt;</span><br></pre></td></tr></table></figure>\n<p>对node port类型的service来说，访问host的port就访问到了这个服务。所以从host网络角度来看，当host收到数据包的时候应该是进入host network namespace的PREROUTING chain中，查看host network namespace的PREROUTING chain。</p>\n</li>\n<li><p>查看宿主机 iptables</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">iptables -nvL -t nat |<span class=\"built_in\">head</span></span></span><br><span class=\"line\">Chain PREROUTING (policy ACCEPT 0 packets, 0 bytes)</span><br><span class=\"line\">pkts bytes target     prot opt in     out     source               destination</span><br><span class=\"line\">323 20898 KUBE-SERVICES  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* kubernetes service portals */</span><br></pre></td></tr></table></figure>\n<p>根据规则，对于PREROUTING chain中，所有的流量都走到了KUBE-SERVICES这个target中。</p>\n</li>\n<li><p>查看 KUBE-SERVICES target</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">iptables -nvL -t nat |grep KUBE-SERVICES -A 10</span></span><br><span class=\"line\">Chain KUBE-SERVICES (2 references)</span><br><span class=\"line\">pkts bytes target     prot opt in     out     source               destination</span><br><span class=\"line\">0     0 KUBE-SVC-7CWUT4JBGBRVUN2L  tcp  --  *      *       0.0.0.0/0            10.43.6.58           /* default/nginx-test:80-80 cluster IP */ tcp dpt:80</span><br></pre></td></tr></table></figure>\n<p>在KUBE-SERVICES target中当访问 nginx-test-service 在host上的 32506 时候，根据规则匹配到了 KUBE-NODEPORTS 这个target。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">iptables -nvL -t nat |grep KUBE-NODEPORTS -A 3</span></span><br><span class=\"line\">Chain KUBE-NODEPORTS (1 references)</span><br><span class=\"line\">pkts bytes target     prot opt in     out     source               destination</span><br><span class=\"line\">2   124 KUBE-EXT-7CWUT4JBGBRVUN2L  tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            /* default/nginx-test:80-80 */ tcp dpt:32506</span><br></pre></td></tr></table></figure>\n<p>在KUBE-NODEPORTS target中可以看到当访问 32506 端口时到 KUBE-EXT-7CWUT4JBGBRVUN2L 这个 target </p>\n</li>\n<li><p>查看 KUBE-EXT-7CWUT4JBGBRVUN2L  target</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">iptables -nvL -t nat |grep KUBE-EXT-7CWUT4JBGBRVUN2L -A 5</span></span><br><span class=\"line\">Chain KUBE-EXT-7CWUT4JBGBRVUN2L (1 references)</span><br><span class=\"line\"> pkts bytes target     prot opt in     out     source               destination</span><br><span class=\"line\">    2   124 KUBE-MARK-MASQ  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* masquerade traffic for default/nginx-test:80-80 external destinations */</span><br><span class=\"line\">    2   124 KUBE-SVC-7CWUT4JBGBRVUN2L  all  --  *      *       0.0.0.0/0            0.0.0.0/0</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">iptables -nvL -t nat |grep KUBE-MARK-MASQ -A 3</span></span><br><span class=\"line\">Chain KUBE-MARK-MASQ (20 references)</span><br><span class=\"line\"> pkts bytes target     prot opt in     out     source               destination</span><br><span class=\"line\">    2   124 MARK       all  --  *      *       0.0.0.0/0            0.0.0.0/0            MARK or 0x4000</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">iptables -nvL -t nat |grep KUBE-SVC-7CWUT4JBGBRVUN2L -A 5</span></span><br><span class=\"line\">Chain KUBE-SVC-7CWUT4JBGBRVUN2L (2 references)</span><br><span class=\"line\"> pkts bytes target     prot opt in     out     source               destination</span><br><span class=\"line\">    0     0 KUBE-MARK-MASQ  tcp  --  *      *      !10.42.0.0/16         10.43.6.58           /* default/nginx-test:80-80 cluster IP */ tcp dpt:80</span><br><span class=\"line\">    1    64 KUBE-SEP-U2YYZT2C3O6VM4EV  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* default/nginx-test:80-80 -&gt; 10.42.1.6:80 */ statistic mode random probability 0.50000000000</span><br><span class=\"line\">    1    60 KUBE-SEP-GWUIQWA2TNZI4ESX  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* default/nginx-test:80-80 -&gt; 10.42.2.6:80 */</span><br></pre></td></tr></table></figure>\n<p>在 KUBE-EXT-7CWUT4JBGBRVUN2L 中可以看到两个 target</p>\n<ul>\n<li>KUBE-MARK-MASQ 打标记，无 nat target</li>\n<li>KUBE-SVC-7CWUT4JBGBRVUN2L target 进入 cluster ip 规则，重复第三部分规则，最终流量进入 Pod</li>\n</ul>\n</li>\n<li><p>nodeport 类型 service 总结：</p>\n<ul>\n<li>在host netwok namespace的PREROUTING chain中会匹配KUBE-SERVICES target。</li>\n<li>在KUBE-SERVICES target会匹配KUBE-NODEPORTS target</li>\n<li>在KUBE-NODEPORTS target会根据prot来匹配KUBE-SVC-XXX target</li>\n<li>KUBE-SVC-XXX target就和第三部分中的cluster-ip类型service一样，最终流量进入到 Pod 中</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3）ipvs-方式-1\"><a href=\"#3）ipvs-方式-1\" class=\"headerlink\" title=\"3）ipvs 方式\"></a>3）ipvs 方式</h4><ul>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzI0MDE3MjAzMg==&mid=2648393266&idx=1&sn=34d2a21b06d6e9ef4f4f7415f2cad567&chksm=f1310b5dc646824b45cbfc8cf25b0f2449f7223006b684da06ba58d95a2be7a3f0ad7aa6c4b9&scene=178&cur_album_id=2123526506718003213#rd\">https://mp.weixin.qq.com/s?__biz&#x3D;MzI0MDE3MjAzMg&#x3D;&#x3D;&amp;mid&#x3D;2648393266&amp;idx&#x3D;1&amp;sn&#x3D;34d2a21b06d6e9ef4f4f7415f2cad567&amp;chksm&#x3D;f1310b5dc646824b45cbfc8cf25b0f2449f7223006b684da06ba58d95a2be7a3f0ad7aa6c4b9&amp;scene&#x3D;178&amp;cur_album_id&#x3D;2123526506718003213#rd</a></li>\n<li><a href=\"https://icloudnative.io/posts/ipvs-how-kubernetes-services-direct-traffic-to-pods/\">https://icloudnative.io/posts/ipvs-how-kubernetes-services-direct-traffic-to-pods/</a></li>\n</ul>\n<h3 id=\"五、Service：ipvs-与-iptables-对比\"><a href=\"#五、Service：ipvs-与-iptables-对比\" class=\"headerlink\" title=\"五、Service：ipvs 与 iptables 对比\"></a>五、Service：ipvs 与 iptables 对比</h3><blockquote>\n<p>基于 ipvs 的 k8s 网络负载要求：</p>\n<ul>\n<li>linux 内核高于2.4.x</li>\n<li>在 kube-proxy 网络组件中启动参数加入–proxy-mode&#x3D;ipvs</li>\n<li>安装 ipvsadm 工具（可选），用于操作管理 ipvs 规则</li>\n</ul>\n</blockquote>\n<ul>\n<li><p>两者都是采用linux内核模块完成负载均衡和endpoint的映射，所有操作都在内核空间完成，没有在应用程序的用户空间。</p>\n</li>\n<li><p>iptable方式依赖于linux netfilter&#x2F;iptable内核模块。</p>\n</li>\n<li><p>ipvs方式依赖linux netfilter&#x2F;iptable模块，ipset模块，ipvs模块。</p>\n</li>\n<li><p>iptable方式中，host宿主中ipatble的entry数目会随着service和对应endpoints的数目增多而增多。举个例子，比如有10个cluster ip类型的service，每个service有6个endpoints。那么在KUBE-SERVICES target中至少有10个entries(KUBE-SVC-XXX)与10个service对应，每个KUBE-SVC-XXX target中会有6个KUBE-SEP-XXX与6个endpoints来对应，每个KUBE-SEP-XXX会有2个enrties来分别做mark masq和DNAT，这样算起来至少有10<em>6</em>2&#x3D;120个entries在iptable中。试想如果application中service和endpoints数目巨大，iptable entries也是非常庞大的，在一定情况下有可能带来性能上的问题。</p>\n</li>\n<li><p>ipvs方式中host宿主中iptable的entry数目是固定的，因为iptable做匹配的时候会利用ipset(KUBE-CLUSTER-IP或者KUBE-NODE-PORT-TCP)来匹配，service的数目决定了ipset的大小，并不会影响iptable的大小。这样就解决了iptable模式下，entries随着service和endpoints的增多而增多的问题。</p>\n</li>\n<li><p>对于负载均衡，iptable方式采用random模块来完成负载均衡，ipvs方式支持多种负载均衡，例如round-robin，least connection，source hash等（可参考<a href=\"http://www.linuxvirtualserver.org/%EF%BC%89%EF%BC%8C%E5%B9%B6%E4%B8%94%E7%94%B1kubelet%E5%90%AF%E5%8A%A8%E5%8F%82%E6%95%B0--ipvs-scheduler%E6%8E%A7%E5%88%B6%E3%80%82\">http://www.linuxvirtualserver.org/），并且由kubelet启动参数--ipvs-scheduler控制。</a></p>\n</li>\n<li><p>对于目标地址的映射，iptable方式采用linux原生的DNAT，ipvs方式则利用ipvs模块完成。</p>\n</li>\n<li><p>ipvs方式会在host netwok namespace中创建网络设备kube-ipvs0，并且绑定了所有的cluster ip，这样保证了cluster-ip类型的service数据进入INPUT chain，从而让ipvs来完成负载均衡和目标地址的映射。</p>\n</li>\n<li><p>iptable方式不会在host netwok namespace中创建额外的网络设备。</p>\n</li>\n<li><p>iptable方式数据在host network namespace的chain中的路径是：PREROUTING–&gt;FORWARDING–&gt;POSTROUTING 在PREROUTING chain中完成负载均衡，mark masq和目标地址映射。</p>\n</li>\n<li><p>ipvs方式数据在host network namespace的chain中的路径是：PREROUTING–&gt;INPUT–&gt;POSTROUTING 在PREROUTING chain中完成mark masq SNAT，在INPUT chain利用ipvs完成负载均衡和目标地址映射。</p>\n</li>\n<li><p>iptable和ipvs方式在完成负载均衡和目标地址映射后都会根据host network namespace的路由表做下一跳路由选择。</p>\n</li>\n</ul>\n<h3 id=\"六、跨主机网络通信：flannel-组件\"><a href=\"#六、跨主机网络通信：flannel-组件\" class=\"headerlink\" title=\"六、跨主机网络通信：flannel 组件\"></a>六、跨主机网络通信：flannel 组件</h3><h4 id=\"1）flannel-underlay-网络：host-gw-方式\"><a href=\"#1）flannel-underlay-网络：host-gw-方式\" class=\"headerlink\" title=\"1）flannel underlay 网络：host-gw 方式\"></a>1）flannel underlay 网络：host-gw 方式</h4><p><strong>underlay 网络概念与配置</strong></p>\n<ul>\n<li><p>概念：underlay 网络在通讯过程没有额外封包，通过将容器的宿主机作为路由实现数据包转包</p>\n</li>\n<li><p>配置方式：略</p>\n</li>\n</ul>\n<p><strong>service 与 Pod 对应信息</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">kubectl describe service nginx-test</span></span><br><span class=\"line\">Name:              nginx-test</span><br><span class=\"line\">Namespace:         default</span><br><span class=\"line\">Labels:            app=nginx-test</span><br><span class=\"line\">Annotations:       &lt;none&gt;</span><br><span class=\"line\">Selector:          app=nginx-test</span><br><span class=\"line\">Type:              ClusterIP</span><br><span class=\"line\">IP Family Policy:  SingleStack</span><br><span class=\"line\">IP Families:       IPv4</span><br><span class=\"line\">IP:                10.43.6.58</span><br><span class=\"line\">IPs:               10.43.6.58</span><br><span class=\"line\">Port:              80-80  80/TCP</span><br><span class=\"line\">TargetPort:        80/TCP</span><br><span class=\"line\">Endpoints:         10.42.0.65:80,10.42.1.9:80</span><br><span class=\"line\">Session Affinity:  None</span><br><span class=\"line\">Events:            &lt;none&gt;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">kubectl get pod -owide</span></span><br><span class=\"line\">NAME                          READY   STATUS    RESTARTS      AGE   IP           NODE     NOMINATED NODE   READINESS GATES</span><br><span class=\"line\">nginx-test-7646687cc4-n8s9s   1/1     Running   6 (60m ago)   26d   10.42.0.65   master   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">nginx-test-7646687cc4-z8xnq   1/1     Running   0             47s   10.42.1.9    node1    &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>数据包走向分析，从10.42.0.65请求10.42.1.9</strong></p>\n<ul>\n<li>数据包从源 pod 到宿主机</li>\n</ul>\n<p>当在pod <strong>10.42.0.65</strong>里向pod <strong>10.42.1.9</strong>里发送数据包的时候，pod <strong>10.42.0.65</strong>的网卡是veth的一个端点。根据pod network namespace中的路由规则，数据一定是发送到<strong>10.42.0.1</strong>，也就是宿主network namespace的cni0 linux bridge设备。由于pod <strong>10.42.0.65</strong>网卡veth另一个端点attach在cni0 bridge设备上，所以数据被cni0 bride接收，也就是数据从pod的network namesapce流动到了host的network namespace里。</p>\n<ul>\n<li>数据包在源 pod 宿主机中的路由</li>\n</ul>\n<p>由于数据包的目标ip地址是<strong>10.42.1.9</strong>，而源pod <strong>10.42.0.65</strong>的宿主ip是<strong>192.168.205.4</strong>。宿主机上开启了转发功能(net.ipv4.ip_forward &#x3D; 1)，所以主机发现目标ip <strong>10.42.1.9</strong>不是自己的ip时候，就对这个数据包做路由转发。查看宿主<strong>192.168.205.4</strong>的路由表</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ip addr |grep 192.168.205.4</span></span><br><span class=\"line\">    inet 192.168.205.4/24 metric 100 brd 192.168.205.255 scope global dynamic enp0s1</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ip route</span></span><br><span class=\"line\">10.42.1.0/24 via 192.168.205.3 enp0s1 ...</span><br></pre></td></tr></table></figure>\n<p>在路由表里发现<strong>10.42.1.0&#x2F;24</strong>网段的数据下一跳是<strong>192.168.205.3</strong>，也就是目标pod <strong>10.42.1.9</strong>的宿主机器。所以进行arp目标mac地址封包，将数据发往<strong>192.168.205.3</strong>。注意目标pod的下一跳地址是目标pod所在的host，也就是说数据会从原始pod所在的host通过下一跳发往目标pod所在的host。即是原始pod的host必须和目标pod的host在同一个二层网络里，因为只有这样才可以下一跳路由可达。这个也是flannel的underlay网络host gw方式的限制，既要求所有的k8s worker node节点都在同一个二层网络里(可以认为是在同一个ip子网)。</p>\n<ul>\n<li>数据包在目标 pod 宿主机中的路由</li>\n</ul>\n<p>当数据包路由到目标pod <strong>10.42.1.9</strong>的host <strong>192.168.205.3</strong>的时候(通过二层交换)，目标pod宿主机上开启了转发功能(net.ipv4.ip_forward &#x3D; 1)，所以主机发现目标ip <strong>10.42.1.9 <strong>不是自己的ip时候，就对这个数据包做路由转发。查看宿主</strong>192.168.205.3</strong>的路由表</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ip addr |grep 192.168.205.3</span></span><br><span class=\"line\">    inet 192.168.205.3/24 metric 100 brd 192.168.205.255 scope global dynamic enp0s1</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ip route</span></span><br><span class=\"line\">10.42.1.0/24 dev cni0 proto kernel scope link src 10.42.1.1</span><br></pre></td></tr></table></figure>\n<p>在路由表里发现<strong>10.42.1.0&#x2F;24</strong>网段的数据下一跳是直连路由，由设备cni0 网卡转发。cni 网卡 <strong>10.42.1.1</strong> 作为linux bridge，会把数据通过veth pair从host network namespace发送到目标pod的<strong>10.42.1.9</strong>的network namespace里。然后由内核交给应用程序处理，从而完成了pod到pod的通讯。可以使用 kubectl debug 查看路由经过节点</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">kubectl debug -it nginx-test-7646687cc4-z8xnq --image=busybox -- /bin/sh</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ip addr</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">traceroute 10.42.1.9</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>flannel underlay（host-gw 方式）总结</strong></p>\n<ul>\n<li>从源pod的network namespace到host network namespace的cni0 linux bridge上。</li>\n<li>在源pod所在的host里做三层路由选择，下一跳地址为目标pod所在的host。</li>\n<li>数据包从源pod所在的host发送到目标pod所在的host。（二层 mac 封装数据包）</li>\n<li>在目标pod所在的host里做三层路由选择，本地直连路由到目标pod里。</li>\n<li>要求所有的节点必须开启路由转发功能(net.ipv4.ip_forward &#x3D; 1)</li>\n<li>要求所有的节点都在同一个二层网络里，来完成目标pod所在host的下一跳路由</li>\n</ul>\n<h4 id=\"2）flannel-overlay-网络：vxlan-方式\"><a href=\"#2）flannel-overlay-网络：vxlan-方式\" class=\"headerlink\" title=\"2）flannel overlay 网络：vxlan 方式\"></a>2）flannel overlay 网络：vxlan 方式</h4><p><strong>overlay 网络概念与配置</strong></p>\n<ul>\n<li>概念</li>\n</ul>\n<p>vxlan 是一种overlay 网络技术，意在利用在三层网络之上构建二层网络。对于二层网络一般采用 vlan 技术来隔离，不过 vlan 在数据包里总共4个字节，有12bit用来标识不同的二层网络，这样总共可以有4000多个 vlan。而 vxlan header有8个字节，有24bit用来标识不同的二层网络，这样总共是1600多万个 vxlan。<a href=\"https://tools.ietf.org/html/rfc7348\">vxlan详解</a></p>\n<ul>\n<li>配置方式：<a href=\"https://mp.weixin.qq.com/s?__biz=MzI0MDE3MjAzMg==&mid=2648393268&idx=1&sn=ea7df945f11a57619a81df8599bcbe99&chksm=f1310b5bc646824daaf9ac6cb2dec4b8c8f54fdf4753b5379db991c88e4e5951ec928b9da2d9&scene=178&cur_album_id=2123526506718003213#rd\">参考</a></li>\n</ul>\n<p>1.使用 vxlan 配置集群时，因为 vxlan 利用 udp 包的 payload 封装二层 eth 包，mtu 值从1500变为1450。<br>2.vxlan 利用 udp 封包，etcd 配置 udp 使用8472端口接收数据，需要在所有节点放行8472 udp port 。</p>\n<p><strong>service 与 Pod 对应信息</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">kubectl describe service nginx-test</span></span><br><span class=\"line\">Name:              nginx-test</span><br><span class=\"line\">Namespace:         default</span><br><span class=\"line\">Labels:            app=nginx-test</span><br><span class=\"line\">Annotations:       &lt;none&gt;</span><br><span class=\"line\">Selector:          app=nginx-test</span><br><span class=\"line\">Type:              ClusterIP</span><br><span class=\"line\">IP Family Policy:  SingleStack</span><br><span class=\"line\">IP Families:       IPv4</span><br><span class=\"line\">IP:                10.43.6.58</span><br><span class=\"line\">IPs:               10.43.6.58</span><br><span class=\"line\">Port:              80-80  80/TCP</span><br><span class=\"line\">TargetPort:        80/TCP</span><br><span class=\"line\">Endpoints:         10.42.0.65:80,10.42.1.9:80</span><br><span class=\"line\">Session Affinity:  None</span><br><span class=\"line\">Events:            &lt;none&gt;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">kubectl get pod -owide</span></span><br><span class=\"line\">NAME                          READY   STATUS    RESTARTS      AGE   IP           NODE     NOMINATED NODE   READINESS GATES</span><br><span class=\"line\">nginx-test-7646687cc4-n8s9s   1/1     Running   6 (60m ago)   26d   10.42.0.65   master   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">nginx-test-7646687cc4-z8xnq   1/1     Running   0             47s   10.42.1.9    node1    &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>kubectl debug 查看路由走向与网络，进入 pod 10.42.0.65</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">kubectl debug -it nginx-test-7646687cc4-n8s9s --image=busybox -- /bin/sh</span></span><br><span class=\"line\">/ # ping -c 3 10.42.1.9</span><br><span class=\"line\">PING 10.42.1.9 (10.42.1.9): 56 data bytes</span><br><span class=\"line\">64 bytes from 10.42.1.9: seq=0 ttl=62 time=1.447 ms</span><br><span class=\"line\">64 bytes from 10.42.1.9: seq=1 ttl=62 time=2.732 ms</span><br><span class=\"line\">64 bytes from 10.42.1.9: seq=2 ttl=62 time=0.880 ms</span><br><span class=\"line\">/ # traceroute -n 10.42.1.9</span><br><span class=\"line\">traceroute to 10.42.1.9 (10.42.1.9), 30 hops max, 46 byte packets</span><br><span class=\"line\"> 1  10.42.0.1  0.027 ms  0.012 ms  0.009 ms</span><br><span class=\"line\"> 2  10.42.1.0  1.761 ms  1.440 ms  1.085 ms</span><br><span class=\"line\"> 3  10.42.1.9  1.453 ms  0.979 ms  0.976 ms</span><br></pre></td></tr></table></figure>\n\n<p><strong>数据包走向分析，从10.42.0.65请求10.42.1.9</strong></p>\n<ul>\n<li>数据在 pod namespace network 中路由</li>\n</ul>\n<p>ip为<strong>10.42.0.65</strong>的pod从自己的network namespace访问pod <strong>10.42.1.9</strong>，根据<strong>10.42.0.65</strong> pod network namespace的路由表，数据进入了<strong>10.42.0.65</strong> pod的宿主<strong>192.168.205.4</strong>的network namespace中的linux bridge cni0。查看宿主机路由信息</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ip addr |grep 192.168.205.4</span></span><br><span class=\"line\">    inet 192.168.205.4/24 metric 100 brd 192.168.205.255 scope global dynamic enp0s1</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ip route</span></span><br><span class=\"line\">10.42.1.0/24 via 10.42.1.0 dev flannel.1 onlink</span><br></pre></td></tr></table></figure>\n<p><strong>10.42.1.0&#x2F;24</strong>网段的访问下一跳ip地址是<strong>10.42.1.0</strong>，用flannel.1设备发送。flannel.1设备就是 flannel 启动的时候根据vxlan类型网络在宿主上创建的，它属于vxlan设备，会完成对二层eth以太数据包到udp数据包的封装与拆封。其中的”.1”代表vxlan这个二层网络id号为1，也对应了vxlan网络在etcd里的配置。这个时候数据包源ip为<strong>10.42.0.65</strong>，目标ip为<strong>10.42.1.9</strong>，源mac为pod <strong>10.42.0.65</strong> network namespace中veth设备mac，目标mac为下一跳ip **10.42.1.0&#x2F;32 **的mac。</p>\n<ul>\n<li>查看 vtep 端点 mac 地址以及转发接口信息</li>\n</ul>\n<p>查看 mac 地址信息：在pod <strong>10.42.0.65</strong>的宿主<strong>192.168.205.4</strong>上通过arp表查询<strong>10.42.1.0&#x2F;32</strong>的mac地址为 62:c8:a9:ce:ca:4e</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ip addr |grep 192.168.205.4</span></span><br><span class=\"line\">    inet 192.168.205.4/24 metric 100 brd 192.168.205.255 scope global dynamic enp0s1</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ip neighbo |grep 10.42.1.0</span></span><br><span class=\"line\">10.42.1.0 dev flannel.1 lladdr 62:c8:a9:ce:ca:4e PERMANENT</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ip neighbo show dev flannel.1</span></span><br><span class=\"line\">10.42.1.0 lladdr 62:c8:a9:ce:ca:4e PERMANENT</span><br><span class=\"line\">10.42.2.0 lladdr ca:cb:1f:99:10:97 PERMANENT</span><br></pre></td></tr></table></figure>\n<p>查看 mac 地址转发信息：由于flannel.1设备是vxlan设备，会有转发接口与它的mac对应，继续在pod <strong>10.42.0.65</strong>的宿主<strong>192.168.205.4</strong>上查询flannel.1设备的mac转发接口。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ip addr |grep 192.168.205.4</span></span><br><span class=\"line\">    inet 192.168.205.4/24 metric 100 brd 192.168.205.255 scope global dynamic enp0s1</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">bridge fdb show |grep 62:c8:a9:ce:ca:4e</span></span><br><span class=\"line\">62:c8:a9:ce:ca:4e dev flannel.1 dst 192.168.205.3 self permanent</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">bridge fdb show dev flannel.1</span></span><br><span class=\"line\">62:c8:a9:ce:ca:4e dst 192.168.205.3 self permanent</span><br><span class=\"line\">ee:87:b2:4a:fd:62 dst 192.168.205.5 self permanent</span><br></pre></td></tr></table></figure>\n<p>可以看到 flannel.1设备mac地址 <strong>62:c8:a9:ce:ca:4e</strong> 对应的转发接口为 <strong>192.168.205.3</strong>，代表flannel.1设备将会把原始二层数据包(源ip为<strong>10.42.0.65</strong>，目标ip为<strong>10.42.1.9</strong>，源mac为 pod <strong>10.42.0.65</strong> network namespace中veth设备mac，目标mac为<strong>10.42.1.0&#x2F;32</strong> mac)做为 upd 的 payload 发给 **192.168.205.3 **的 **8472 **端口。目标pod **10.42.1.9 **的宿主机确实是 <strong>192.168.205.3</strong>，而且其上的flannel.1设备同样会对8472端口的数据进行upd解包。</p>\n<ul>\n<li><p>flannel.1 设备处理 udp 封包与解包</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ip addr |grep 192.168.205.4</span></span><br><span class=\"line\">    inet 192.168.205.4/24 metric 100 brd 192.168.205.255 scope global dynamic enp0s1</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">route -n</span></span><br><span class=\"line\">Kernel IP routing table</span><br><span class=\"line\">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class=\"line\">0.0.0.0         192.168.205.1   0.0.0.0         UG    100    0        0 enp0s1</span><br><span class=\"line\">192.168.205.0   0.0.0.0         255.255.255.0   U     100    0        0 enp0s1</span><br><span class=\"line\">192.168.205.1   0.0.0.0         255.255.255.255 UH    100    0        0 enp0s1</span><br></pre></td></tr></table></figure>\n<p>flannel.1 设备 udp 封包：从pod **10.42.0.65 **的宿主 <strong>192.168.205.4</strong> 的路由表得知发往 <strong>192.168.205.0&#x2F;24</strong> 网段为直连路由，使用宿主网络设备 enp0s1 发送。所以对于：</p>\n<ul>\n<li>外层udp包：源ip为<strong>192.168.205.4</strong>，目标ip为<strong>192.168.205.3</strong>，源mac为<strong>192.168.205.4</strong> mac，目标mac为<strong>192.168.205.3</strong> mac。目标端口为8472，vxlan id为1.</li>\n<li>内层二层以太包：源ip为<strong>10.42.0.65</strong>，目标ip为<strong>10.42.1.9</strong>，源mac为pod <strong>10.42.0.65</strong> network namespace中veth设备mac，目标mac为<strong>10.42.1.0&#x2F;32</strong> mac</li>\n<li>完成封包以后根据宿主路由表发向目标节点 <strong>192.168.205.3</strong></li>\n</ul>\n</li>\n</ul>\n<p>flannel.1 设备 udp 解包：宿主机 **192.168.205.3 **接收到数据包后</p>\n<ul>\n<li><p>目标节点<strong>192.168.205.3</strong>的8472端口接收到udp包之后，发现数据包里有vxlan id标识为1。由于linux内核支持vxlan，所以协议栈可以通过vxlan id判断这是一个vxlan数据报文，并且vxlan为1。然后找到宿主机器上vxlan id为1的vxlan设备处理，就是<strong>192.168.205.3</strong>上的flannel.1设备。</p>\n</li>\n<li><p>flannel.1收到数据之后开始对vxlan udp报文拆包，去掉upd报文的ip，port，mac信息后得到内部的payload，发现是一个二层报文。</p>\n</li>\n<li><p>对于这个二层报文继续拆包，得到里面的源ip是<strong>10.42.0.65</strong>，目标ip是<strong>10.42.1.9</strong>。</p>\n</li>\n<li><p>根据<strong>192.168.205.3</strong>上路由表，将数据由linux bridge cni0做本地转发，cni0 作为 linux bridge 利用 veth pair 将数据转发到目标 pod <strong>10.42.1.9</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ip addr |grep 192.168.205.3</span></span><br><span class=\"line\">    inet 192.168.205.3/24 metric 100 brd 192.168.205.255 scope global dynamic enp0s1</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">route -n</span></span><br><span class=\"line\">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class=\"line\">10.42.1.0       0.0.0.0         255.255.255.0   U     0      0        0 cni0</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>宿主host的路由表的写入 与 flannel.1设备mac转发接口表的写入（fdb 转发）</p>\n</li>\n</ul>\n<p>因为所有的host都运行flannel服务，而flannel连接etcd存储中心，所以每个host就知道自己的子网地址cidr是什么，也知道在这个cidr中自己的flannel.1设备ip地址和mac地址，同时也知道了其它host的子网cidr以及flannel.1设备ip地址和mac地址。而知道了这些信息，就可以在flannel启动的时候写入到路由表和fdb中了，以 **192.168.205.4 **宿主为例：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">~# </span><span class=\"language-bash\">ip addr |grep 192.168.205.4</span></span><br><span class=\"line\">    inet 192.168.205.4/24 metric 100 brd 192.168.205.255 scope global dynamic enp0s1</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">bridge fdb show dev flannel.1</span></span><br><span class=\"line\">62:c8:a9:ce:ca:4e dst 192.168.205.3 self permanent</span><br><span class=\"line\">ee:87:b2:4a:fd:62 dst 192.168.205.5 self permanent</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">etcdctl ....</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>flannel overlay（vxlan 方式）总结</strong></p>\n<ul>\n<li>每个宿主都有名字为flannel.x的vxlan网络设备来完成对于vxlan数据的udp封包与拆包，upd数据在宿主的8472端口上(端口值可配置)处理。</li>\n<li>数据从pod的network namespace进入到host的network namespace中。</li>\n<li>根据host network namespace中的路由表，下一跳ip为目标vxlan设备的ip，并且由当前host的flannel.x设备发送。</li>\n<li>根据host network namespace中的apr表找到下一跳ip的mac地址。</li>\n<li>根据host network namespace中fbd找到下一跳ip的mac地址对应的转发ip。</li>\n<li>当前host的flannel.x设备根据下一跳ip的mac地址对应的转发ip和本地路由表进行upd封包，这个时候：<ul>\n<li>外层udp包：源ip为当前host ip，目标ip为mac转发表中匹配的ip，源mac为前host ip的mac，目标mac为fdb中匹配ip的mac。目标端口为8472(可配置)，vxlan id为1(可配置).</li>\n<li>内层二层以太帧包：源ip为源pod ip，目标ip为目标pod ip，源mac为源pod mac，目标mac为host network namespace中路由表里下一跳ip的mac(一般为目标pod对应的host中flannel.x设备ip)。</li>\n</ul>\n</li>\n<li>数据包由当前host路由到目标节点host。</li>\n<li>目标节点host的8472端口接收到udp包之后，发现数据包里有vxlan id标识.。然后根据linux vxlan协议，在目标宿主机器上找到与数据报文中vxlan id对应的vxlan设备，将数据交由其处理。</li>\n<li>vxlan设备收到数据之后开始对vxlan udp报文拆包，去掉upd报文的ip，port，mac信息后得到内部的payload，发现是一个二层报文。然后继续对这个二层报文拆包，得到里面的源pod ip和目标pod ip。</li>\n<li>根据目标节点host上路由表，将数据由linux bridge cni0做本地转发。</li>\n<li>数据由linux bridge cni0利用veth pair转发到目标pod。</li>\n<li>每个宿主host的flannel服务启动的时候读取etcd中的vxlan配置信息，在宿主host的路由表和mac转发接口表fdb里写入相应数据。</li>\n</ul>\n<h4 id=\"3）flannel-underlay-与-overlay-网络对比\"><a href=\"#3）flannel-underlay-与-overlay-网络对比\" class=\"headerlink\" title=\"3）flannel underlay 与 overlay 网络对比\"></a>3）flannel underlay 与 overlay 网络对比</h4><ul>\n<li>都要求host宿主开启网络转发功能(net.ipv4.ip_forward &#x3D; 1)。</li>\n<li>flannel underlay网络没有数据包的额外封包与拆包，效率会更高一些。</li>\n<li>对于flannel underlay网络要求所有的worker node都在同一个二层网络里，从而完成目标pod的下一跳路由。即underlay网络worker node不能跨子网。</li>\n<li>flannel vxlan overlay 网络有封包与拆包，并且外层包都是 udp 包。因此 worker node只要三层路由可达就好，支持worker node能跨子网。</li>\n<li>flannel vxlan overlay网络内层包是二层以太包，基于linux vxlan设备</li>\n<li>flannel underlay网络和flannel vxlan overlay网络所有数据包都由操作系统内核空间处理，没有用户空间的应用程序参与。</li>\n</ul>\n<blockquote>\n<h4 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h4><p>1、k8s 集群网络：<br><a href=\"https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzI0MDE3MjAzMg==&action=getalbum&album_id=2123526506718003213&scene=173&from_msgid=2648393229&from_itemidx=1&count=3&nolastread=1#wechat_redirect\">https://mp.weixin.qq.com/mp/appmsgalbum?__biz&#x3D;MzI0MDE3MjAzMg&#x3D;&#x3D;&amp;action&#x3D;getalbum&amp;album_id&#x3D;2123526506718003213&amp;scene&#x3D;173&amp;from_msgid&#x3D;2648393229&amp;from_itemidx&#x3D;1&amp;count&#x3D;3&amp;nolastread&#x3D;1#wechat_redirect</a><br>2、iptables 详解：<br><a href=\"https://lixiangyun.gitbook.io/iptables_doc_zh_cn/\">https://lixiangyun.gitbook.io/iptables_doc_zh_cn&#x2F;</a><br><a href=\"https://www.jianshu.com/p/ee4ee15d3658\">https://www.jianshu.com/p/ee4ee15d3658</a><br>3、Docker 网络类型：<a href=\"https://developer.aliyun.com/article/974008#slide-4\">https://developer.aliyun.com/article/974008#slide-4</a><br>4、ipvs 工作模式原理：<a href=\"https://icloudnative.io/posts/ipvs-how-kubernetes-services-direct-traffic-to-pods/\">https://icloudnative.io/posts/ipvs-how-kubernetes-services-direct-traffic-to-pods/</a></p>\n</blockquote>"},{"title":"Kubernetes-RBAC 权限控制","abbrlink":"fa45","date":"2022-03-01T15:55:02.000Z","_content":"### 一、RBAC简易概述\n{% asset_img gaisu.png %}\n#### 1) RBAC 四种 API 对象\n\n- Role：一组权限的集合，在一个命名空间中，可以用其来定义一个角色，只能对命名空间内的资源进行授权。如果是集群级别的资源，则需要使用ClusterRole。例如：定义一个角色用来读取Pod的权限\n- ClusterRole：具有和角色一致的命名空间资源的管理能力，还可用于以下特殊元素的授权\n   - 集群范围的资源，例如Node\n   - 非资源型的路径，例如：/healthz\n   - 包含全部命名空间的资源，例如Pods\n> 例如：定义一个集群角色可让用户访问任意secrets\n- RoleBinding：角色绑定\n- ClusterRoleBinding：集群角色绑定\n> 角色绑定和集群角色绑定用于把一个角色绑定在一个目标上，可以是User，Group，Service Account，使用RoleBinding为某个命名空间授权，使用ClusterRoleBinding为集群范围内授权。\n\n\n**Role和ClusterRole是权限规则的定义**\n- rules代表具体的授权规则，类似于AlicloudRAM中的权限策略Policy\n- Role和ClusterRole区别只在于一个是集群级别的资源控制\n\n<!--more-->\n\n**RoleBinding和ClusterRoleBinding是将User、Group、ServiceAccount绑定到Role或ClusterRole中（类似AlicloudRAM中将Policy赋权给RAM角色或RAM账号）**\n- User、Group、ServiceAccount 是 Kubernetes 集群中单独的概念，与系统级别不同。参考：[https://www.qikqiak.com/k8strain2/security/rbac/#%E5%88%9B%E5%BB%BA%E8%A7%92%E8%89%B2](https://www.qikqiak.com/k8strain2/security/rbac/#%E5%88%9B%E5%BB%BA%E8%A7%92%E8%89%B2)\n- RoleBinding 可以引用同一个 namespace 中的任何 Role ；或者一个 RoleBinding 可以引用某 ClusterRole 并将该 ClusterRole 绑定到 RoleBinding 所在的 namespace。\n- 如需 ClusterRole 绑定到集群中所有 namespace，必须要使用 ClusterRoleBinding\n- RoleBinding 对应可引用一个 ClusterRole 对象用于在 RoleBinding 所在的 namespace 内授予用户对所引用的 ClusterRole 中定义的 namespace 资源的访问权限。（在整个集群内定义一组通用角色，然后在不同 namespace 中复用这些角色）\n\n#### 2) 资源引用方式\n\n- 多数资源可以用其名称的字符串表示，也就是Endpoint中的URL相对路径，例如pod中的日志是GET /api/v1/namaspaces/{namespace}/pods/{podname}/log\n- 如果需要在一个RBAC对象中体现上下级资源，就需要使用“/”分割资源和下级资源。\n\n例如：若想授权让某个主体同时能够读取Pod和Pod log，则可以配置 resources为一个数组\n```yaml\nrules:\n- apiGroups: [\"\"]\n   resources: [\"pods\",\"pods/log\"]\n   verbs: [\"get\",\"list\"]\n```\n\n- 通过名称（ResourceName）进行引用，在指定ResourceName后，使用get、delete、update、patch请求，就会被限制在这个资源实例范围内\n\n例如，下面的声明让一个主体只能对名为my-configmap的ConFigmap进行get和update操作：\n```yaml\nrules:\n- apiGroups: [\"\"]\n   resources: [\"configmap\"]\n   resourceNames: [\"my-configmap\"]\n   verbs: [\"get\",\"update\"]\n```\n\n\n#### 3) rules 参数说明\n+ apiGroups：支持的API组列表，例如：\"apiVersion: batch/v1\"等\n+ resources：支持的资源对象列表，例如pods、deplayments、jobs等\n+ resourceNames: 指定resource的名称（可选）\n+ verbs：对资源对象的操作方法列表\n> api-resources：所有资源信息\n> apiGroups：api-resources下的分类分组\n>\n> [查看API GROUP分组信息](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#-strong-api-groups-strong-)\n> - 方式一：kubectl explain xxx ， xxx为 \"kubectl api-resources\" 输出结果的 NAME 值（输出结果的 VERSION 值为v1 则为默认的Core API 分组，默认以\"\" 表示，如 pods、services）\n> - 方式二：kubectl get --raw /apis/apps/v1\n> \n\n可通过 kubectl get --raw /apis/rbac.authorization.k8s.io/v1 可以获取到 RBAC 四个 API 资源对象的相关信息，如下图：\n{% asset_img c31775e8bbe3.png %}\n\n> 创建资源/信息的方式\n> - 方式一：kubectl create -f xxx.yaml       -->   文件方式创建\n> - 方式二：kubectl create --arg1=xxx --arg2=yyy     -->  参数方式创建（后续可通过kubectl edit方式继续编辑）\n\n\n### 二、ServiceAccount 测试\n#### 1) 创建 serviceaccount 账户并进行对应授权\n1. 创建 serviceaccount 账户 camel-sva （只需defalut namespace）\n执行命令：kubectl create serviceaccount camel-sva -n default\n{% asset_img 634be995b5bc.png %}\n\n2. 创建 role 角色 （授权Integration、Kamelet、KameletBinding 3种资源的 curd 权限）\n执行命令：kubectl create role camel-sva-role --verb=\\* --resource=integrations,kamelets,kameletbindings \n{% asset_img 21812e1bbfad.png %}\n\n3. 绑定集群权限\n命令：kubectl create rolebinding camel-sva-rolebinding --role=camel-sva-role --serviceaccount=default:camel-sva\n{% asset_img 7528aa1bf3da.png %}\n\n4. 查看账号 secret 信息\n命令：kubectl get secret/camel-sva-token-mdt28 -oyaml\n{% asset_img de3ebdd4f016.png %}\n将获取到的 token 值进行 base64 解码后即可用来调用 apiserver 接口，如下图（接口可通过 kubectl get --raw /apis/ 进行获取）：\n{% asset_img 1572c2ebc891.png %}\n\n#### 2) 创建用户认证的 kubeconfig 文件\n1. 创建集群配置文件\n命令：kubectl config set-cluster kubernetes --certificate-authority=/etc/kubernetes/pki/ca.crt --server=\"https://10.0.0.142:6443\" --embed-certs=true --kubeconfig=./camel-sva.conf\n\n2. 生成 token（base64编码）\n命令：D=$(kubectl get secret camel-sva-token-mdt28 -o jsonpath={.data.token}|base64 -d)\n\n3. 为配置文件添加 token 信息，设置一个用户条目\n命令：kubectl config set-credentials camel-sva --token=$D --kubeconfig=./camel-sva.conf\n\n4. 为配置文件添加权限信息，设置一个 content 条目\nkubectl config set-context camel-sva@kubernetes --cluster=kubernetes --user=camel-sva --kubeconfig=./camel-sva.conf\n\n5. 为配置文件添加权限信息，设置上下文\n命令：kubectl config use-context camel-sva@kubernetes --kubeconfig=./camel-sva.conf\n\n执行完上述命令后即在当前目录生成配置文件：camel-sva.conf，可 copy 到 kubeconfig对应目录，进行操作。\n{% asset_img d6da8c845c41.png %}\n使用该配置文件进行 kubectl 命令操作，即可验证用户只拥有对应资源的操作权限。\n{% asset_img de4222775e67.png %}\n\n#### 3) API 对象结构\n{% asset_img ab8f20ce2acc.png %}\n\n\n### 三、参考学习\n1. [https://kubernetes.io/zh/docs/reference/access-authn-authz/rbac/#service-account-permissions](https://kubernetes.io/zh/docs/reference/access-authn-authz/rbac/#service-account-permissions)\n2. [https://www.qikqiak.com/k8strain2/security/rbac/#%E5%88%9B%E5%BB%BA%E8%A7%92%E8%89%B2](https://www.qikqiak.com/k8strain2/security/rbac/#%E5%88%9B%E5%BB%BA%E8%A7%92%E8%89%B2)\n3. [https://zhuanlan.zhihu.com/p/97793056](https://zhuanlan.zhihu.com/p/97793056)\n","source":"_posts/k8s-rbac.md","raw":"---\ntitle: Kubernetes-RBAC 权限控制\ncategories:\n  - CNCF\ntags:\n  - Alicloud\n  - Kubernetes\nabbrlink: fa45\ndate: 2022-03-01 23:55:02\n---\n### 一、RBAC简易概述\n{% asset_img gaisu.png %}\n#### 1) RBAC 四种 API 对象\n\n- Role：一组权限的集合，在一个命名空间中，可以用其来定义一个角色，只能对命名空间内的资源进行授权。如果是集群级别的资源，则需要使用ClusterRole。例如：定义一个角色用来读取Pod的权限\n- ClusterRole：具有和角色一致的命名空间资源的管理能力，还可用于以下特殊元素的授权\n   - 集群范围的资源，例如Node\n   - 非资源型的路径，例如：/healthz\n   - 包含全部命名空间的资源，例如Pods\n> 例如：定义一个集群角色可让用户访问任意secrets\n- RoleBinding：角色绑定\n- ClusterRoleBinding：集群角色绑定\n> 角色绑定和集群角色绑定用于把一个角色绑定在一个目标上，可以是User，Group，Service Account，使用RoleBinding为某个命名空间授权，使用ClusterRoleBinding为集群范围内授权。\n\n\n**Role和ClusterRole是权限规则的定义**\n- rules代表具体的授权规则，类似于AlicloudRAM中的权限策略Policy\n- Role和ClusterRole区别只在于一个是集群级别的资源控制\n\n<!--more-->\n\n**RoleBinding和ClusterRoleBinding是将User、Group、ServiceAccount绑定到Role或ClusterRole中（类似AlicloudRAM中将Policy赋权给RAM角色或RAM账号）**\n- User、Group、ServiceAccount 是 Kubernetes 集群中单独的概念，与系统级别不同。参考：[https://www.qikqiak.com/k8strain2/security/rbac/#%E5%88%9B%E5%BB%BA%E8%A7%92%E8%89%B2](https://www.qikqiak.com/k8strain2/security/rbac/#%E5%88%9B%E5%BB%BA%E8%A7%92%E8%89%B2)\n- RoleBinding 可以引用同一个 namespace 中的任何 Role ；或者一个 RoleBinding 可以引用某 ClusterRole 并将该 ClusterRole 绑定到 RoleBinding 所在的 namespace。\n- 如需 ClusterRole 绑定到集群中所有 namespace，必须要使用 ClusterRoleBinding\n- RoleBinding 对应可引用一个 ClusterRole 对象用于在 RoleBinding 所在的 namespace 内授予用户对所引用的 ClusterRole 中定义的 namespace 资源的访问权限。（在整个集群内定义一组通用角色，然后在不同 namespace 中复用这些角色）\n\n#### 2) 资源引用方式\n\n- 多数资源可以用其名称的字符串表示，也就是Endpoint中的URL相对路径，例如pod中的日志是GET /api/v1/namaspaces/{namespace}/pods/{podname}/log\n- 如果需要在一个RBAC对象中体现上下级资源，就需要使用“/”分割资源和下级资源。\n\n例如：若想授权让某个主体同时能够读取Pod和Pod log，则可以配置 resources为一个数组\n```yaml\nrules:\n- apiGroups: [\"\"]\n   resources: [\"pods\",\"pods/log\"]\n   verbs: [\"get\",\"list\"]\n```\n\n- 通过名称（ResourceName）进行引用，在指定ResourceName后，使用get、delete、update、patch请求，就会被限制在这个资源实例范围内\n\n例如，下面的声明让一个主体只能对名为my-configmap的ConFigmap进行get和update操作：\n```yaml\nrules:\n- apiGroups: [\"\"]\n   resources: [\"configmap\"]\n   resourceNames: [\"my-configmap\"]\n   verbs: [\"get\",\"update\"]\n```\n\n\n#### 3) rules 参数说明\n+ apiGroups：支持的API组列表，例如：\"apiVersion: batch/v1\"等\n+ resources：支持的资源对象列表，例如pods、deplayments、jobs等\n+ resourceNames: 指定resource的名称（可选）\n+ verbs：对资源对象的操作方法列表\n> api-resources：所有资源信息\n> apiGroups：api-resources下的分类分组\n>\n> [查看API GROUP分组信息](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#-strong-api-groups-strong-)\n> - 方式一：kubectl explain xxx ， xxx为 \"kubectl api-resources\" 输出结果的 NAME 值（输出结果的 VERSION 值为v1 则为默认的Core API 分组，默认以\"\" 表示，如 pods、services）\n> - 方式二：kubectl get --raw /apis/apps/v1\n> \n\n可通过 kubectl get --raw /apis/rbac.authorization.k8s.io/v1 可以获取到 RBAC 四个 API 资源对象的相关信息，如下图：\n{% asset_img c31775e8bbe3.png %}\n\n> 创建资源/信息的方式\n> - 方式一：kubectl create -f xxx.yaml       -->   文件方式创建\n> - 方式二：kubectl create --arg1=xxx --arg2=yyy     -->  参数方式创建（后续可通过kubectl edit方式继续编辑）\n\n\n### 二、ServiceAccount 测试\n#### 1) 创建 serviceaccount 账户并进行对应授权\n1. 创建 serviceaccount 账户 camel-sva （只需defalut namespace）\n执行命令：kubectl create serviceaccount camel-sva -n default\n{% asset_img 634be995b5bc.png %}\n\n2. 创建 role 角色 （授权Integration、Kamelet、KameletBinding 3种资源的 curd 权限）\n执行命令：kubectl create role camel-sva-role --verb=\\* --resource=integrations,kamelets,kameletbindings \n{% asset_img 21812e1bbfad.png %}\n\n3. 绑定集群权限\n命令：kubectl create rolebinding camel-sva-rolebinding --role=camel-sva-role --serviceaccount=default:camel-sva\n{% asset_img 7528aa1bf3da.png %}\n\n4. 查看账号 secret 信息\n命令：kubectl get secret/camel-sva-token-mdt28 -oyaml\n{% asset_img de3ebdd4f016.png %}\n将获取到的 token 值进行 base64 解码后即可用来调用 apiserver 接口，如下图（接口可通过 kubectl get --raw /apis/ 进行获取）：\n{% asset_img 1572c2ebc891.png %}\n\n#### 2) 创建用户认证的 kubeconfig 文件\n1. 创建集群配置文件\n命令：kubectl config set-cluster kubernetes --certificate-authority=/etc/kubernetes/pki/ca.crt --server=\"https://10.0.0.142:6443\" --embed-certs=true --kubeconfig=./camel-sva.conf\n\n2. 生成 token（base64编码）\n命令：D=$(kubectl get secret camel-sva-token-mdt28 -o jsonpath={.data.token}|base64 -d)\n\n3. 为配置文件添加 token 信息，设置一个用户条目\n命令：kubectl config set-credentials camel-sva --token=$D --kubeconfig=./camel-sva.conf\n\n4. 为配置文件添加权限信息，设置一个 content 条目\nkubectl config set-context camel-sva@kubernetes --cluster=kubernetes --user=camel-sva --kubeconfig=./camel-sva.conf\n\n5. 为配置文件添加权限信息，设置上下文\n命令：kubectl config use-context camel-sva@kubernetes --kubeconfig=./camel-sva.conf\n\n执行完上述命令后即在当前目录生成配置文件：camel-sva.conf，可 copy 到 kubeconfig对应目录，进行操作。\n{% asset_img d6da8c845c41.png %}\n使用该配置文件进行 kubectl 命令操作，即可验证用户只拥有对应资源的操作权限。\n{% asset_img de4222775e67.png %}\n\n#### 3) API 对象结构\n{% asset_img ab8f20ce2acc.png %}\n\n\n### 三、参考学习\n1. [https://kubernetes.io/zh/docs/reference/access-authn-authz/rbac/#service-account-permissions](https://kubernetes.io/zh/docs/reference/access-authn-authz/rbac/#service-account-permissions)\n2. [https://www.qikqiak.com/k8strain2/security/rbac/#%E5%88%9B%E5%BB%BA%E8%A7%92%E8%89%B2](https://www.qikqiak.com/k8strain2/security/rbac/#%E5%88%9B%E5%BB%BA%E8%A7%92%E8%89%B2)\n3. [https://zhuanlan.zhihu.com/p/97793056](https://zhuanlan.zhihu.com/p/97793056)\n","slug":"k8s-rbac","published":1,"updated":"2024-01-21T15:28:43.155Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm0fat8zp001ns0nj9rlw9lar","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"一、RBAC简易概述\"><a href=\"#一、RBAC简易概述\" class=\"headerlink\" title=\"一、RBAC简易概述\"></a>一、RBAC简易概述</h3><img data-src=\"/posts/fa45/gaisu.png\" class>\n<h4 id=\"1-RBAC-四种-API-对象\"><a href=\"#1-RBAC-四种-API-对象\" class=\"headerlink\" title=\"1) RBAC 四种 API 对象\"></a>1) RBAC 四种 API 对象</h4><ul>\n<li>Role：一组权限的集合，在一个命名空间中，可以用其来定义一个角色，只能对命名空间内的资源进行授权。如果是集群级别的资源，则需要使用ClusterRole。例如：定义一个角色用来读取Pod的权限</li>\n<li>ClusterRole：具有和角色一致的命名空间资源的管理能力，还可用于以下特殊元素的授权<ul>\n<li>集群范围的资源，例如Node</li>\n<li>非资源型的路径，例如：&#x2F;healthz</li>\n<li>包含全部命名空间的资源，例如Pods<blockquote>\n<p>例如：定义一个集群角色可让用户访问任意secrets</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>RoleBinding：角色绑定</li>\n<li>ClusterRoleBinding：集群角色绑定<blockquote>\n<p>角色绑定和集群角色绑定用于把一个角色绑定在一个目标上，可以是User，Group，Service Account，使用RoleBinding为某个命名空间授权，使用ClusterRoleBinding为集群范围内授权。</p>\n</blockquote>\n</li>\n</ul>\n<p><strong>Role和ClusterRole是权限规则的定义</strong></p>\n<ul>\n<li>rules代表具体的授权规则，类似于AlicloudRAM中的权限策略Policy</li>\n<li>Role和ClusterRole区别只在于一个是集群级别的资源控制</li>\n</ul>\n<span id=\"more\"></span>\n\n<p><strong>RoleBinding和ClusterRoleBinding是将User、Group、ServiceAccount绑定到Role或ClusterRole中（类似AlicloudRAM中将Policy赋权给RAM角色或RAM账号）</strong></p>\n<ul>\n<li>User、Group、ServiceAccount 是 Kubernetes 集群中单独的概念，与系统级别不同。参考：<a href=\"https://www.qikqiak.com/k8strain2/security/rbac/#%E5%88%9B%E5%BB%BA%E8%A7%92%E8%89%B2\">https://www.qikqiak.com/k8strain2/security/rbac/#%E5%88%9B%E5%BB%BA%E8%A7%92%E8%89%B2</a></li>\n<li>RoleBinding 可以引用同一个 namespace 中的任何 Role ；或者一个 RoleBinding 可以引用某 ClusterRole 并将该 ClusterRole 绑定到 RoleBinding 所在的 namespace。</li>\n<li>如需 ClusterRole 绑定到集群中所有 namespace，必须要使用 ClusterRoleBinding</li>\n<li>RoleBinding 对应可引用一个 ClusterRole 对象用于在 RoleBinding 所在的 namespace 内授予用户对所引用的 ClusterRole 中定义的 namespace 资源的访问权限。（在整个集群内定义一组通用角色，然后在不同 namespace 中复用这些角色）</li>\n</ul>\n<h4 id=\"2-资源引用方式\"><a href=\"#2-资源引用方式\" class=\"headerlink\" title=\"2) 资源引用方式\"></a>2) 资源引用方式</h4><ul>\n<li>多数资源可以用其名称的字符串表示，也就是Endpoint中的URL相对路径，例如pod中的日志是GET &#x2F;api&#x2F;v1&#x2F;namaspaces&#x2F;{namespace}&#x2F;pods&#x2F;{podname}&#x2F;log</li>\n<li>如果需要在一个RBAC对象中体现上下级资源，就需要使用“&#x2F;”分割资源和下级资源。</li>\n</ul>\n<p>例如：若想授权让某个主体同时能够读取Pod和Pod log，则可以配置 resources为一个数组</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">rules:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> [<span class=\"string\">&quot;&quot;</span>]</span><br><span class=\"line\">   <span class=\"attr\">resources:</span> [<span class=\"string\">&quot;pods&quot;</span>,<span class=\"string\">&quot;pods/log&quot;</span>]</span><br><span class=\"line\">   <span class=\"attr\">verbs:</span> [<span class=\"string\">&quot;get&quot;</span>,<span class=\"string\">&quot;list&quot;</span>]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通过名称（ResourceName）进行引用，在指定ResourceName后，使用get、delete、update、patch请求，就会被限制在这个资源实例范围内</li>\n</ul>\n<p>例如，下面的声明让一个主体只能对名为my-configmap的ConFigmap进行get和update操作：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">rules:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> [<span class=\"string\">&quot;&quot;</span>]</span><br><span class=\"line\">   <span class=\"attr\">resources:</span> [<span class=\"string\">&quot;configmap&quot;</span>]</span><br><span class=\"line\">   <span class=\"attr\">resourceNames:</span> [<span class=\"string\">&quot;my-configmap&quot;</span>]</span><br><span class=\"line\">   <span class=\"attr\">verbs:</span> [<span class=\"string\">&quot;get&quot;</span>,<span class=\"string\">&quot;update&quot;</span>]</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"3-rules-参数说明\"><a href=\"#3-rules-参数说明\" class=\"headerlink\" title=\"3) rules 参数说明\"></a>3) rules 参数说明</h4><ul>\n<li>apiGroups：支持的API组列表，例如：”apiVersion: batch&#x2F;v1”等</li>\n<li>resources：支持的资源对象列表，例如pods、deplayments、jobs等</li>\n<li>resourceNames: 指定resource的名称（可选）</li>\n<li>verbs：对资源对象的操作方法列表<blockquote>\n<p>api-resources：所有资源信息<br>apiGroups：api-resources下的分类分组</p>\n<p><a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#-strong-api-groups-strong-\">查看API GROUP分组信息</a></p>\n<ul>\n<li>方式一：kubectl explain xxx ， xxx为 “kubectl api-resources” 输出结果的 NAME 值（输出结果的 VERSION 值为v1 则为默认的Core API 分组，默认以”” 表示，如 pods、services）</li>\n<li>方式二：kubectl get –raw &#x2F;apis&#x2F;apps&#x2F;v1</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<p>可通过 kubectl get –raw &#x2F;apis&#x2F;rbac.authorization.k8s.io&#x2F;v1 可以获取到 RBAC 四个 API 资源对象的相关信息，如下图：</p>\n<img data-src=\"/posts/fa45/c31775e8bbe3.png\" class>\n\n<blockquote>\n<p>创建资源&#x2F;信息的方式</p>\n<ul>\n<li>方式一：kubectl create -f xxx.yaml       –&gt;   文件方式创建</li>\n<li>方式二：kubectl create –arg1&#x3D;xxx –arg2&#x3D;yyy     –&gt;  参数方式创建（后续可通过kubectl edit方式继续编辑）</li>\n</ul>\n</blockquote>\n<h3 id=\"二、ServiceAccount-测试\"><a href=\"#二、ServiceAccount-测试\" class=\"headerlink\" title=\"二、ServiceAccount 测试\"></a>二、ServiceAccount 测试</h3><h4 id=\"1-创建-serviceaccount-账户并进行对应授权\"><a href=\"#1-创建-serviceaccount-账户并进行对应授权\" class=\"headerlink\" title=\"1) 创建 serviceaccount 账户并进行对应授权\"></a>1) 创建 serviceaccount 账户并进行对应授权</h4><ol>\n<li><p>创建 serviceaccount 账户 camel-sva （只需defalut namespace）<br>执行命令：kubectl create serviceaccount camel-sva -n default</p>\n<img data-src=\"/posts/fa45/634be995b5bc.png\" class>\n</li>\n<li><p>创建 role 角色 （授权Integration、Kamelet、KameletBinding 3种资源的 curd 权限）<br>执行命令：kubectl create role camel-sva-role –verb&#x3D;* –resource&#x3D;integrations,kamelets,kameletbindings </p>\n<img data-src=\"/posts/fa45/21812e1bbfad.png\" class>\n</li>\n<li><p>绑定集群权限<br>命令：kubectl create rolebinding camel-sva-rolebinding –role&#x3D;camel-sva-role –serviceaccount&#x3D;default:camel-sva</p>\n<img data-src=\"/posts/fa45/7528aa1bf3da.png\" class>\n</li>\n<li><p>查看账号 secret 信息<br>命令：kubectl get secret&#x2F;camel-sva-token-mdt28 -oyaml</p>\n<img data-src=\"/posts/fa45/de3ebdd4f016.png\" class>\n<p>将获取到的 token 值进行 base64 解码后即可用来调用 apiserver 接口，如下图（接口可通过 kubectl get –raw &#x2F;apis&#x2F; 进行获取）：</p>\n<img data-src=\"/posts/fa45/1572c2ebc891.png\" class></li>\n</ol>\n<h4 id=\"2-创建用户认证的-kubeconfig-文件\"><a href=\"#2-创建用户认证的-kubeconfig-文件\" class=\"headerlink\" title=\"2) 创建用户认证的 kubeconfig 文件\"></a>2) 创建用户认证的 kubeconfig 文件</h4><ol>\n<li><p>创建集群配置文件<br>命令：kubectl config set-cluster kubernetes –certificate-authority&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;ca.crt –server&#x3D;”<a href=\"https://10.0.0.142:6443&quot;\">https://10.0.0.142:6443&quot;</a> –embed-certs&#x3D;true –kubeconfig&#x3D;.&#x2F;camel-sva.conf</p>\n</li>\n<li><p>生成 token（base64编码）<br>命令：D&#x3D;$(kubectl get secret camel-sva-token-mdt28 -o jsonpath&#x3D;{.data.token}|base64 -d)</p>\n</li>\n<li><p>为配置文件添加 token 信息，设置一个用户条目<br>命令：kubectl config set-credentials camel-sva –token&#x3D;$D –kubeconfig&#x3D;.&#x2F;camel-sva.conf</p>\n</li>\n<li><p>为配置文件添加权限信息，设置一个 content 条目<br>kubectl config set-context camel-sva@kubernetes –cluster&#x3D;kubernetes –user&#x3D;camel-sva –kubeconfig&#x3D;.&#x2F;camel-sva.conf</p>\n</li>\n<li><p>为配置文件添加权限信息，设置上下文<br>命令：kubectl config use-context camel-sva@kubernetes –kubeconfig&#x3D;.&#x2F;camel-sva.conf</p>\n</li>\n</ol>\n<p>执行完上述命令后即在当前目录生成配置文件：camel-sva.conf，可 copy 到 kubeconfig对应目录，进行操作。</p>\n<img data-src=\"/posts/fa45/d6da8c845c41.png\" class>\n<p>使用该配置文件进行 kubectl 命令操作，即可验证用户只拥有对应资源的操作权限。</p>\n<img data-src=\"/posts/fa45/de4222775e67.png\" class>\n\n<h4 id=\"3-API-对象结构\"><a href=\"#3-API-对象结构\" class=\"headerlink\" title=\"3) API 对象结构\"></a>3) API 对象结构</h4><img data-src=\"/posts/fa45/ab8f20ce2acc.png\" class>\n\n\n<h3 id=\"三、参考学习\"><a href=\"#三、参考学习\" class=\"headerlink\" title=\"三、参考学习\"></a>三、参考学习</h3><ol>\n<li><a href=\"https://kubernetes.io/zh/docs/reference/access-authn-authz/rbac/#service-account-permissions\">https://kubernetes.io/zh/docs/reference/access-authn-authz/rbac/#service-account-permissions</a></li>\n<li><a href=\"https://www.qikqiak.com/k8strain2/security/rbac/#%E5%88%9B%E5%BB%BA%E8%A7%92%E8%89%B2\">https://www.qikqiak.com/k8strain2/security/rbac/#%E5%88%9B%E5%BB%BA%E8%A7%92%E8%89%B2</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/97793056\">https://zhuanlan.zhihu.com/p/97793056</a></li>\n</ol>\n","site":{"data":{"footer":"","styles":".post {\n  margin-top: 50px;\n  margin-bottom: 50px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n.headband {\n  display: none;\n}\nbody {\n  background: url(\"/images/background.jpeg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\n.post-block.page {\n  margin-top: 40px;\n}\n.category-all-page {\n  box-shadow: 0px 0px 10px 0px rgba(0,0,0,0.5);\n  background-color: #797d7f;\n  padding: 20px 30px 60px 30px;\n  border-radius: 25px 25px 25px 25px;\n}\n.category-all-title {\n  font-family: Impact;\n  font-size: 24px;\n  color: #0ff;\n}\n.category-list {\n  overflow: auto;\n}\n.category-list li {\n  height: 100%;\n  float: left;\n  border-right: 3px solid #222;\n  padding: 0 20px;\n}\n.category-all ul li {\n  list-style: none !important;\n}\n.category-list li:last-child {\n  border-right: none;\n}\n.category-list li a {\n  font-size: 16px;\n  text-decoration: none;\n  color: #7fff00;\n  font-family: Helvetica, Verdana, sans-serif;\n  -webkit-transition: all 0.5s ease;\n  -moz-transition: all 0.5s ease;\n  -o-transition: all 0.5s ease;\n  -ms-transition: all 0.5s ease;\n  transition: all 0.5s ease;\n}\n.category-list li a:hover {\n  color: #000;\n}\n.category-list li.active a {\n  font-weight: bold;\n  color: #000;\n}\n.tag-cloud a {\n  box-shadow: 0 1px 3px #6f42c1, 0 1px 2px #d9534f;\n  padding: 2px 10px;\n  margin: 8px;\n  background: rgba(193,66,92,0);\n  border-bottom: none;\n  border-radius: 20px;\n}\ncode {\n  background: #555;\n  color: #fff;\n}\n","variables":""}},"length":3912,"excerpt":"<h3 id=\"一、RBAC简易概述\"><a href=\"#一、RBAC简易概述\" class=\"headerlink\" title=\"一、RBAC简易概述\"></a>一、RBAC简易概述</h3><img data-src=\"/posts/fa45/gaisu.png\" class>\n<h4 id=\"1-RBAC-四种-API-对象\"><a href=\"#1-RBAC-四种-API-对象\" class=\"headerlink\" title=\"1) RBAC 四种 API 对象\"></a>1) RBAC 四种 API 对象</h4><ul>\n<li>Role：一组权限的集合，在一个命名空间中，可以用其来定义一个角色，只能对命名空间内的资源进行授权。如果是集群级别的资源，则需要使用ClusterRole。例如：定义一个角色用来读取Pod的权限</li>\n<li>ClusterRole：具有和角色一致的命名空间资源的管理能力，还可用于以下特殊元素的授权<ul>\n<li>集群范围的资源，例如Node</li>\n<li>非资源型的路径，例如：&#x2F;healthz</li>\n<li>包含全部命名空间的资源，例如Pods<blockquote>\n<p>例如：定义一个集群角色可让用户访问任意secrets</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>RoleBinding：角色绑定</li>\n<li>ClusterRoleBinding：集群角色绑定<blockquote>\n<p>角色绑定和集群角色绑定用于把一个角色绑定在一个目标上，可以是User，Group，Service Account，使用RoleBinding为某个命名空间授权，使用ClusterRoleBinding为集群范围内授权。</p>\n</blockquote>\n</li>\n</ul>\n<p><strong>Role和ClusterRole是权限规则的定义</strong></p>\n<ul>\n<li>rules代表具体的授权规则，类似于AlicloudRAM中的权限策略Policy</li>\n<li>Role和ClusterRole区别只在于一个是集群级别的资源控制</li>\n</ul>","more":"<p><strong>RoleBinding和ClusterRoleBinding是将User、Group、ServiceAccount绑定到Role或ClusterRole中（类似AlicloudRAM中将Policy赋权给RAM角色或RAM账号）</strong></p>\n<ul>\n<li>User、Group、ServiceAccount 是 Kubernetes 集群中单独的概念，与系统级别不同。参考：<a href=\"https://www.qikqiak.com/k8strain2/security/rbac/#%E5%88%9B%E5%BB%BA%E8%A7%92%E8%89%B2\">https://www.qikqiak.com/k8strain2/security/rbac/#%E5%88%9B%E5%BB%BA%E8%A7%92%E8%89%B2</a></li>\n<li>RoleBinding 可以引用同一个 namespace 中的任何 Role ；或者一个 RoleBinding 可以引用某 ClusterRole 并将该 ClusterRole 绑定到 RoleBinding 所在的 namespace。</li>\n<li>如需 ClusterRole 绑定到集群中所有 namespace，必须要使用 ClusterRoleBinding</li>\n<li>RoleBinding 对应可引用一个 ClusterRole 对象用于在 RoleBinding 所在的 namespace 内授予用户对所引用的 ClusterRole 中定义的 namespace 资源的访问权限。（在整个集群内定义一组通用角色，然后在不同 namespace 中复用这些角色）</li>\n</ul>\n<h4 id=\"2-资源引用方式\"><a href=\"#2-资源引用方式\" class=\"headerlink\" title=\"2) 资源引用方式\"></a>2) 资源引用方式</h4><ul>\n<li>多数资源可以用其名称的字符串表示，也就是Endpoint中的URL相对路径，例如pod中的日志是GET &#x2F;api&#x2F;v1&#x2F;namaspaces&#x2F;{namespace}&#x2F;pods&#x2F;{podname}&#x2F;log</li>\n<li>如果需要在一个RBAC对象中体现上下级资源，就需要使用“&#x2F;”分割资源和下级资源。</li>\n</ul>\n<p>例如：若想授权让某个主体同时能够读取Pod和Pod log，则可以配置 resources为一个数组</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">rules:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> [<span class=\"string\">&quot;&quot;</span>]</span><br><span class=\"line\">   <span class=\"attr\">resources:</span> [<span class=\"string\">&quot;pods&quot;</span>,<span class=\"string\">&quot;pods/log&quot;</span>]</span><br><span class=\"line\">   <span class=\"attr\">verbs:</span> [<span class=\"string\">&quot;get&quot;</span>,<span class=\"string\">&quot;list&quot;</span>]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通过名称（ResourceName）进行引用，在指定ResourceName后，使用get、delete、update、patch请求，就会被限制在这个资源实例范围内</li>\n</ul>\n<p>例如，下面的声明让一个主体只能对名为my-configmap的ConFigmap进行get和update操作：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">rules:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> [<span class=\"string\">&quot;&quot;</span>]</span><br><span class=\"line\">   <span class=\"attr\">resources:</span> [<span class=\"string\">&quot;configmap&quot;</span>]</span><br><span class=\"line\">   <span class=\"attr\">resourceNames:</span> [<span class=\"string\">&quot;my-configmap&quot;</span>]</span><br><span class=\"line\">   <span class=\"attr\">verbs:</span> [<span class=\"string\">&quot;get&quot;</span>,<span class=\"string\">&quot;update&quot;</span>]</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"3-rules-参数说明\"><a href=\"#3-rules-参数说明\" class=\"headerlink\" title=\"3) rules 参数说明\"></a>3) rules 参数说明</h4><ul>\n<li>apiGroups：支持的API组列表，例如：”apiVersion: batch&#x2F;v1”等</li>\n<li>resources：支持的资源对象列表，例如pods、deplayments、jobs等</li>\n<li>resourceNames: 指定resource的名称（可选）</li>\n<li>verbs：对资源对象的操作方法列表<blockquote>\n<p>api-resources：所有资源信息<br>apiGroups：api-resources下的分类分组</p>\n<p><a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#-strong-api-groups-strong-\">查看API GROUP分组信息</a></p>\n<ul>\n<li>方式一：kubectl explain xxx ， xxx为 “kubectl api-resources” 输出结果的 NAME 值（输出结果的 VERSION 值为v1 则为默认的Core API 分组，默认以”” 表示，如 pods、services）</li>\n<li>方式二：kubectl get –raw &#x2F;apis&#x2F;apps&#x2F;v1</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<p>可通过 kubectl get –raw &#x2F;apis&#x2F;rbac.authorization.k8s.io&#x2F;v1 可以获取到 RBAC 四个 API 资源对象的相关信息，如下图：</p>\n<img data-src=\"/posts/fa45/c31775e8bbe3.png\" class>\n\n<blockquote>\n<p>创建资源&#x2F;信息的方式</p>\n<ul>\n<li>方式一：kubectl create -f xxx.yaml       –&gt;   文件方式创建</li>\n<li>方式二：kubectl create –arg1&#x3D;xxx –arg2&#x3D;yyy     –&gt;  参数方式创建（后续可通过kubectl edit方式继续编辑）</li>\n</ul>\n</blockquote>\n<h3 id=\"二、ServiceAccount-测试\"><a href=\"#二、ServiceAccount-测试\" class=\"headerlink\" title=\"二、ServiceAccount 测试\"></a>二、ServiceAccount 测试</h3><h4 id=\"1-创建-serviceaccount-账户并进行对应授权\"><a href=\"#1-创建-serviceaccount-账户并进行对应授权\" class=\"headerlink\" title=\"1) 创建 serviceaccount 账户并进行对应授权\"></a>1) 创建 serviceaccount 账户并进行对应授权</h4><ol>\n<li><p>创建 serviceaccount 账户 camel-sva （只需defalut namespace）<br>执行命令：kubectl create serviceaccount camel-sva -n default</p>\n<img data-src=\"/posts/fa45/634be995b5bc.png\" class>\n</li>\n<li><p>创建 role 角色 （授权Integration、Kamelet、KameletBinding 3种资源的 curd 权限）<br>执行命令：kubectl create role camel-sva-role –verb&#x3D;* –resource&#x3D;integrations,kamelets,kameletbindings </p>\n<img data-src=\"/posts/fa45/21812e1bbfad.png\" class>\n</li>\n<li><p>绑定集群权限<br>命令：kubectl create rolebinding camel-sva-rolebinding –role&#x3D;camel-sva-role –serviceaccount&#x3D;default:camel-sva</p>\n<img data-src=\"/posts/fa45/7528aa1bf3da.png\" class>\n</li>\n<li><p>查看账号 secret 信息<br>命令：kubectl get secret&#x2F;camel-sva-token-mdt28 -oyaml</p>\n<img data-src=\"/posts/fa45/de3ebdd4f016.png\" class>\n<p>将获取到的 token 值进行 base64 解码后即可用来调用 apiserver 接口，如下图（接口可通过 kubectl get –raw &#x2F;apis&#x2F; 进行获取）：</p>\n<img data-src=\"/posts/fa45/1572c2ebc891.png\" class></li>\n</ol>\n<h4 id=\"2-创建用户认证的-kubeconfig-文件\"><a href=\"#2-创建用户认证的-kubeconfig-文件\" class=\"headerlink\" title=\"2) 创建用户认证的 kubeconfig 文件\"></a>2) 创建用户认证的 kubeconfig 文件</h4><ol>\n<li><p>创建集群配置文件<br>命令：kubectl config set-cluster kubernetes –certificate-authority&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;ca.crt –server&#x3D;”<a href=\"https://10.0.0.142:6443&quot;\">https://10.0.0.142:6443&quot;</a> –embed-certs&#x3D;true –kubeconfig&#x3D;.&#x2F;camel-sva.conf</p>\n</li>\n<li><p>生成 token（base64编码）<br>命令：D&#x3D;$(kubectl get secret camel-sva-token-mdt28 -o jsonpath&#x3D;{.data.token}|base64 -d)</p>\n</li>\n<li><p>为配置文件添加 token 信息，设置一个用户条目<br>命令：kubectl config set-credentials camel-sva –token&#x3D;$D –kubeconfig&#x3D;.&#x2F;camel-sva.conf</p>\n</li>\n<li><p>为配置文件添加权限信息，设置一个 content 条目<br>kubectl config set-context camel-sva@kubernetes –cluster&#x3D;kubernetes –user&#x3D;camel-sva –kubeconfig&#x3D;.&#x2F;camel-sva.conf</p>\n</li>\n<li><p>为配置文件添加权限信息，设置上下文<br>命令：kubectl config use-context camel-sva@kubernetes –kubeconfig&#x3D;.&#x2F;camel-sva.conf</p>\n</li>\n</ol>\n<p>执行完上述命令后即在当前目录生成配置文件：camel-sva.conf，可 copy 到 kubeconfig对应目录，进行操作。</p>\n<img data-src=\"/posts/fa45/d6da8c845c41.png\" class>\n<p>使用该配置文件进行 kubectl 命令操作，即可验证用户只拥有对应资源的操作权限。</p>\n<img data-src=\"/posts/fa45/de4222775e67.png\" class>\n\n<h4 id=\"3-API-对象结构\"><a href=\"#3-API-对象结构\" class=\"headerlink\" title=\"3) API 对象结构\"></a>3) API 对象结构</h4><img data-src=\"/posts/fa45/ab8f20ce2acc.png\" class>\n\n\n<h3 id=\"三、参考学习\"><a href=\"#三、参考学习\" class=\"headerlink\" title=\"三、参考学习\"></a>三、参考学习</h3><ol>\n<li><a href=\"https://kubernetes.io/zh/docs/reference/access-authn-authz/rbac/#service-account-permissions\">https://kubernetes.io/zh/docs/reference/access-authn-authz/rbac/#service-account-permissions</a></li>\n<li><a href=\"https://www.qikqiak.com/k8strain2/security/rbac/#%E5%88%9B%E5%BB%BA%E8%A7%92%E8%89%B2\">https://www.qikqiak.com/k8strain2/security/rbac/#%E5%88%9B%E5%BB%BA%E8%A7%92%E8%89%B2</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/97793056\">https://zhuanlan.zhihu.com/p/97793056</a></li>\n</ol>"},{"title":"可观测性-Fluentd 日志组件","abbrlink":"41fe","date":"2022-07-11T13:56:17.000Z","_content":"### 一、组件说明\n**Fluentd**\n负责从 Kubernetes 搜集日志，每个 node 节点上面的 fluentd 监控并收集该节点上面的系统+容器日志，并将处理过后的日志信息发送给 Elasticsearch。\n{% asset_img fluent1.png %}\n> fluentd 数据流逻辑：source --> parser --> filter --> output\n\n\n**Elasticsearch**\n搜索引擎，负责存储日志并提供查询接口。\n\n**Kibana** \n提供了一个 Web GUI，用户可以浏览和搜索存储在 Elasticsearch 中的日志。 \n\n> 主要的日志收集方案：\n> - 在节点上运行一个 agent 来收集日志（daemonSet）\n> - 在 Pod 中包含一个 sidecar 容器来收集应用日志\n> - 直接在应用程序中将日志信息推送到采集后端（一般不采用该方式）\n\n<!--more-->\n\n### 二、二进制方式 / 容器方式部署\n#### 二进制方式\n官网安装方式：[https://docs.fluentd.org/installation/before-install](https://docs.fluentd.org/installation/before-install)\n\n#### 容器方式\n仓库地址：[https://hub.docker.com/r/fluent/fluentd](https://hub.docker.com/r/fluent/fluentd)\n\n### 三、配置与使用\n> 数据流逻辑：fluentd 以 tag 值为基准，决定数据的流经哪些处理器。\n> 数据的流向：source -> parser -> filter -> output\n\n#### input 配置\n\n- **http：从 http 接口获取日志来源**\n```shell\n# 创建配置文件\nmkdir /tmp/fluentd && cd /tmp/fluentd\ncat > fluent.conf << EOF\n<source>\n  @type http\n  port 9880\n  bind 0.0.0.0\n</source>\n\n<match **>\n  @type stdout\n</match>\nEOF\n\n# 启动镜像，将 fluentd 目录挂载进容器，默认使用 fluent.conf 配置文件\ndocker run -p 9880:9880 --rm --name fluent -v /tmp/fluentd:/fluentd/etc fluent/fluentd\n\n# 测试请求 http 接口生成日志\ncurl -X POST 127.0.0.1:9880/yakir.test -d 'json={\"a\":\"aaa\"}'\n```\n\n- **tail：增量读取日志文件**\n```shell\ncat > fluent.conf << EOF\n<source>\n  @type tail\n  path /var/log/httpd-access.log\n  path_key tailed_path\n  pos_file /var/log/td-agent/httpd-access.log.pos\n  tag apache.access\n  <parse>\n    @type apache2\n  </parse>\n</source>\nEOF\n\n# 启动镜像并测试日志\ndocker run --rm --name fluent -v /tmp/fluentd:/fluentd/etc fluent/fluentd\n```\n\n- **exec：周期性执行命令，获取命令输出为 event**\n```shell\ncat > fluent.conf << EOF\n<source>\n  @type exec\n  tag yakir.test\n  command cat /proc/loadavg | cut -d ' ' -f 1,2,3\n  run_interval 10s\n\n  <parse>\n    @type tsv\n    keys avg1,avg5,avg15\n    delimiter \" \"\n  </parse>\n</source>\n\n<match **>\n  @type stdout\n</match>\nEOF\n\n# 启动镜像，验证日志\ndocker run --rm --name fluent -v /tmp/fluentd:/fluentd/etc fluent/fluentd\n2022-06-30 08:43:20.377146682 +0000 yakir.test: {\"avg1\":\"0.12\",\"avg5\":\"0.16\",\"avg15\":\"0.17\"}\n2022-06-30 08:43:30.347891525 +0000 yakir.test: {\"avg1\":\"0.10\",\"avg5\":\"0.15\",\"avg15\":\"0.17\"}\n```\n\n- **syslog：连接 rsyslog 系统日志，作为 rsyslog 接收端**\n```shell\ncat > fluent.conf << EOF\n<source>\n    @type syslog\n    port 5140\n    bind 0.0.0.0\n    tag system\n</source>\n\n<match **>\n  @type stdout\n</match>\nEOF\n\n# 启动镜像，转发 udp 端口\ndocker run -p 5140:5140/udp --rm --name fluent -v /tmp/fluentd:/fluentd/etc fluent/fluentd\n\n# 添加 rsyslog 配置，转发日志到 fluent\ncat >> /etc/rsyslog.d/50-default.conf << \"EOF\"\n*.* @127.0.0.1:5140\nEOF\n\n# logger 产生日志，验证日志生成\nlogger -p mail.info 'this is info message'\nlogger -p mail.warning 'this is warning message'\n2022-07-04 10:27:48.000000000 +0000 system.mail.info: {\"host\":\"minikube\",\"ident\":\"root\",\"message\":\"this is info message\"}\n2022-07-04 10:28:11.000000000 +0000 system.mail.warn: {\"host\":\"minikube\",\"ident\":\"root\",\"message\":\"this is warning message\"}\n```\n\n- **dummy：测试用数据源，周期生成假数据**\n```shell\ncat > fluent.conf << \"EOF\"\n<source>\n    @type dummy\n    dummy {\"foo\": \"bar\"}\n    size 3\n    rate 1\n    tag yakir.test\n    auto_increment_key primary_key\n    suspend true\n</source>\n\n<match **>\n  @type stdout\n</match>\nEOF\n\n#参数说明\nsize     #每次发送的 event 数量\nrate     #每秒产生多少个 event\nauto_increment_key   #自增键名\nsuspend              #重启后自增值是否重新开始\n\n# 启动镜像，验证日志\ndocker run --rm --name fluent -v /tmp/fluentd:/fluentd/etc fluent/fluentd\n2022-07-04 02:51:37.044796145 +0000 yakir.test: {\"foo\":\"bar\",\"primary_key\":0}\n2022-07-04 02:51:37.044834743 +0000 yakir.test: {\"foo\":\"bar\",\"primary_key\":1}\n```\n\n- **forward：接收其他 fluentd forward 的 event**\n```shell\n<source>\n  @type forward\n  port 24224\n  bind 0.0.0.0\n</source>\n```\n#### output 配置\n\n- **file：输出 event 为文件，默认每天输出一个日志文件**\n```shell\ncat > fluent.conf << \"EOF\"\n<source>\n  @type dummy\n  dummy {\"foo\": \"bar\"}\n  tag yakir.test\n  size 1\n  rate 1\n</source>\n\n<match yakir.**>\n  @type file\n  path /tmp/fluent/yakir\n  compress gzip\n  <buffer>\n    timekey 1d\n    timekey_use_utc true\n    timekey_wait 10m\n  </buffer>\n  \n  #@type file\n  #path /tmp/${tag[0]}/file.%Y-%m-%d-%H-%M-%S\n  #<buffer tag,time>\n  #  timekey 10\n  #  timekey_wait 10\n  #  timekey_use_utc true\n  #</buffer>\n</match>\nEOF\n\n# 参数说明\npath：支持 placeholder，可以在日志路径中嵌入时间，tag 和 record 中的字段值。例如：/path/to/${tag}/${key1}/file.%Y%m%d\nappend：flush 的 chuck 是否追加到已存在的文件后。默认为 false，便于文件的并行处理。\nformat 标签，用来规定文件内容的格式，默认值为 out_file。\ninject 标签，用来为 event 增加 time 和 tag 等字段。\nadd_path_suffix：是否增加 path 后缀\npath_suffix：path 后缀内容，默认为.log。\ncompress：采用什么压缩格式，默认不压缩。\nrecompress：是否在 buffer chunk 已经压缩的情况再次压缩，默认为 false。\n\n# 启动镜像验证日志\ndocker run --rm --name fluent -v /tmp/fluentd:/fluentd/etc fluent/fluentd\ndocker exec -it fluent /bin/sh\ntail -2 /tmp/fluent/yakir/buffer.b5e2f5e063d4389bd9304563cf7f07656.log\n2022-07-04T07:42:34+00:00\tyakir.test\t{\"foo\":\"bar\"}\n2022-07-04T07:42:35+00:00\tyakir.test\t{\"foo\":\"bar\"}\n```\n\n- **buffer 标签**\n```shell\n<buffer>\n  @type file\n</buffer>\n# @type 值：file（存文件）、memory（存内存，默认值）\n\n<buffer ARGUMENT_CHUNK_KEYS>\n  # ...\n</buffer>\n# buffer chunk keys（buffer 已 record 的什么字段分段存放），没有配置 chunk key，所有 event 写入同一个 chunk file 直到 buffer 滚动。\n# 使用 time 为 chunk key，按照时间对 buffer 进行分段。\n# timekey：时间跨度   timekey_wait：flush 延迟时间，用于等待迟到的数据\n\n# 常用参数\ntimekey_use_utc：使用国际标准时间还是当地时间，默认是使用当地时间。\ntimekey_zone：指定时区。\nchunk_limit_size：chunk 大小限制，默认 8MB。\nchunk_limit_records：chunk event 条数限制。\ntotal_limit_size：总 buffer 大小限制。\nchunk_full_threshold：chunk 大小超过 chunk_limit_size * chunk_full_threshold 时会自动 flush。\nqueued_chunks_limit_size：限制队列中的 chunk 数目，防止频繁 flush 产生过多的 chunk。\ncompress：压缩格式，可使用 text 或 gzip。默认为 text。\nflush_at_shutdown：关闭时候是否 flush。对于非持久化 buffer 默认值为 true，持久化 buffer 默认值为 false。\nflush_interval：多长时间 flush 一次。\nretry_timeout：重试 flush 的超时时间。在这个时间后不再会 retry。\nretry_forever：是否永远尝试 flush。如果设置为 true 会忽略 retry_timeout 的配置。\nretry_max_times：重试最大次数。\nretry_type：有两个配置值：retry 时间间隔，指数级增长或者是固定周期重试。\nretry_wait：每次重试等待时间。\nretry_exponential_backoff_base：retry 时间指数扩大倍数。\nretry_max_interval：最长 retry 时间间隔。\nretry_randomize：是否随机 retry 时间间隔。\n```\n\n- **format 标签**\n```shell\n<match>\n  ...\n  \n  <format>\n    @type json\n  </format>\n\n  <buffer>\n    ...\n  </buffer>\n  \n</match>\n\n```\n\n- **forward：转发 event 到其他 fluentd 节点。配置多个 fluentd 节点时，使用负载均衡方式发送。**\n```shell\n<match yakir.*>\n  @type forward\n  send_timeout 60s\n  recover_wait 10s\n  hard_timeout 60s\n\n  <server>\n    name myserver1\n    host 192.168.1.3\n    port 24224\n    weight 60\n  </server>\n  <server>\n    name myserver2\n    host 192.168.1.4\n    port 24224\n    weight 60\n  </server>\n  ...\n\n  <secondary>\n    @type file\n    path /var/log/fluent/forward-failed\n  </secondary>\n</match>\n\n#server 标签参数说明\nhost\nname\nport\nshared_key\nusername\npassword\nstandby 标记 server 为备用，只有其他 node 不可用的时候才会启用 standby 的 node\nweight 负载均衡的权重配置\n```\n\n- **copy：多路输出，复制 event 到多个输出端**\n```shell\ncat > fluent.conf << \"EOF\"\n<source>\n  @type dummy\n  dummy {\"foo\": \"bar\"}\n  tag yakir.test\n  size 1\n  rate 1\n</source>\n\n<match yakir.**>\n  @type copy\n  <store>\n    @type file\n    path /tmp/yakir/file.%Y%m%d\n    compress gzip\n  </store>\n  <store ignore_error>\n    @type stdout\n  </store>\n</match>\nEOF\n\n# 参数说明\ncopy_mode 复制模式可选值\n  no_copy：每路输出共享 event。\n  shallow：浅拷贝，如果不修改嵌套字段可以使用。\n  deep：深拷贝，使用msgpack-ruby方式。\n  marshal：深拷贝，使用marshal方式。\nstore 标签 ignore_error 参数：标记的 store 出现错误时，不影响其他\n\n```\n\n- **http：通过 http 请求方式发送 event，payload 格式由 format 标签决定。**\n```shell\n<match pattern>\n  @type http\n  endpoint http://logserver.com:9000/api\n  open_timeout 2\n\n  <format>\n    @type json\n  </format>\n  <buffer>\n    flush_interval 10s\n  </buffer>\n</match>\n\n# 使用 post 方式，连接超时2s，输出格式为 json，每10s 输出一次到 endpoint。（content-type 为 application/x-ndjson）\n```\n\n- **stdout：标准输出，后台运行时输出到 fluentd 日志。**\n```shell\n<source>\n  @type dummy\n  dummy {\"foo\": \"bar\"}\n  tag yakir.test\n  size 1\n  rate 1\n</source>\n\n<match yakir.**>\n  @type stdout\n</match>\n```\n\n- **第三方存储：Elasticsearch、Kafka**\n```shell\n# elasticsearch 关键配置\n<match yakir.logs>\n  @type elasticsearch\n  host localhost\n  port 9200\n  logstash_format true\n</match>\n# 参数\nhost：单个 elasticsearch 节点地址\nport：单个 elasticsearch 节点的端口号\nhosts：elasticsearch 集群地址。格式为 ip1:port1,ip2:port2...\nuser、password：elasticsearch 的认证信息\nscheme：使用 https 还是 http。默认为 http 模式\npath：REST 接口路径，默认为空\nindex_name：index 名称\nlogstash_format：index 是否使用 logstash 命名方式（logstash-%Y.%m.%d），默认不启用\nlogstash_prefix：logstash_format 启用的时候，index 命名前缀是什么。默认为logstash\n\n\n# kafka 关键配置\n<match pattern>\n  @type kafka2\n\n  # list of seed brokers\n  brokers <broker1_host>:<broker1_port>,<broker2_host>:<broker2_port>\n  use_event_time true\n\n  # buffer settings\n  <buffer topic>\n    @type file\n    path /var/log/td-agent/buffer/td\n    flush_interval 3s\n  </buffer>\n\n  # data type settings\n  <format>\n    @type json\n  </format>\n\n  # topic settings\n  topic_key topic\n  default_topic messages\n\n  # producer settings\n  required_acks -1\n  compression_codec gzip\n</match>\n# 参数\nbrokers：Kafka brokers 的地址和端口号\ntopic_key：record 中哪个 key 对应的值用作 Kafka 消息的 key\ndefault_topic：如果没有配置 topic_key，默认使用的 topic 名字\nformat 标签：确定发送的数据格式\nuse_event_time：是否使用 fluentd event 的时间作为 Kafka 消息的时间。默认为 false。意思为使用当前时间作为发送消息的时间\nrequired_acks：producer acks 的值\ncompression_codec：压缩编码方式\n```\n\n- **webhdfs：通过 REST 方式写入 event 到 HDFS（配合 Hadoop）**\n```shell\n  <store>\n    @type webhdfs\n    host 1.1.1.1\n    port 50070\n    path \"/history/access.log.%Y%m%d_%H.#{Socket.gethostname}.log\"\n    <buffer>\n        flush_interval 60s\n    </buffer>\n  </store>\n```\n\n#### parser 配置\n\n- **regexp：正则表达式解析信息，可通过 time_key 指定 event 的 time 字段**\n> 在线测试正则语法工具：[http://fluentular.herokuapp.com/](http://fluentular.herokuapp.com/)\n\n```shell\n# 关键配置\n<parse>\n  @type regexp\n  expression /^\\[(?<logtime>[^\\]]*)\\] (?<name>[^ ]*) (?<title>[^ ]*) (?<id>\\d*)$/\n  time_key logtime\n  time_format %Y-%m-%d %H:%M:%S %z\n  types id:integer\n</parse>\n\n# 数据解析\n#原日志\n[2013-02-28 12:00:00 +0900] alice engineer 1\n#解析后\ntime:\n1362020400 (2013-02-28 12:00:00 +0900)\n\nrecord:\n{\n  \"name\" : \"alice\",\n  \"title\": \"engineer\",\n  \"id\"   : 1\n}\n```\n\n#### filter 配置\n\n- **record_transformer：修改 event 结构，增加或修改字段**\n```shell\n# 新增字段，使用 ruby 表达式\ncat > fluent.conf << \"EOF\"\n<source>\n  @type dummy\n  dummy {\"foo\":\"bar\", \"id1\": 100, \"id2\": 50}\n  tag yakir.test\n  size 1\n  rate 1\n</source>\n\n<filter>\n  @type record_transformer\n  enable_ruby true\n  <record>\n    hostname \"#{Socket.gethostname}\"\n    tag ${tag}\n    avg ${record[\"id1\"] / record[\"id2\"]}\n  </record>\n</filter>\n\n<match yakir.**>\n  @type stdout\n</match>\nEOF\n# 启动镜像，验证日志\ndocker run --rm --name fluent -v /tmp/fluentd:/fluentd/etc fluent/fluentd\n2022-07-04 10:12:53.028623276 +0000 yakir.test: {\"foo\":\"bar\",\"id1\":100,\"id2\":50,\"hostname\":\"7d5e83c528c7\",\"tag\":\"yakir.test\",\"avg\":2}\n\n\n# 修改字段内容\n#关键配置\n<filter foo.bar>\n  @type record_transformer\n  <record>\n    message yay, ${record[\"message\"]}\n  </record>\n</filter>\n\n\n# 数据解析\n#原日志\n{ \"message\": \"hello world!\" }\n#解析后\ntime:\n{ \"message\": \"yay, hello world!\" }\n\n```\n\n- **record 标签**\n```shell\n# 配置\n<record>\n  NEW_FIELD NEW_VALUE\n</record>\n\n# 参数说明\nrecord：获取 record 中某些字段的内容。例如record[\"count\"]\ntag：获取 tag 的内容\ntime：获取日志的时间戳\nhostname：获取主机名字，和#{Socket.gethostname}作用一样\ntag_parts[N]：tag 以.分隔，获取 tag 的第 N 部分\ntag_prefix[N]：获取 tag 的 0-N 部分\ntag_suffix[N]：获取 tag 的 N-结尾部分\n```\n\n### 四、DaemonSet 方式部署\n{% asset_img fluent2.png %}\n#### 部署 Elasticsearch 和 Kibana\n```shell\n# 创建日志 namespace，方便清理\nkubectl create ns logging\n\n# 部署 Elasticsearch（StatefulSet 和 Service，service 资源使用无头服务）\ncat > elasticsearch.yaml << \"EOF\"\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: es\n  namespace: logging\nspec:\n  serviceName: elasticsearch\n  replicas: 1\n  selector:\n    matchLabels:\n      app: elasticsearch\n  template:\n    metadata:\n      labels:\n        app: elasticsearch\n    spec:\n      # 初始化容器，调整内核参数\n      initContainers:\n      - name: increase-vm-max-map\n        image: busybox\n        command: [\"sysctl\", \"-w\", \"vm.max_map_count=262144\"]\n        securityContext:\n          privileged: true\n      - name: increase-fd-ulimit\n        image: busybox\n        command: [\"sh\", \"-c\", \"ulimit -n 65536\"]\n        securityContext:\n          privileged: true\n      containers:\n      - name: elasticsearch\n        image: docker.elastic.co/elasticsearch/elasticsearch:7.6.2\n        resources:\n          limits:\n            cpu: 1000m\n          requests:\n            cpu: 100m\n        ports:\n        - containerPort: 9200\n          name: rest\n          protocol: TCP\n        - containerPort: 9300\n          name: inter-node\n          protocol: TCP\n        volumeMounts:\n        - name: data\n          mountPath: /usr/share/elasticsearch/data\n        env:\n          - name: cluster.name\n            value: k8s-logs\n          - name: node.name\n            valueFrom:\n              fieldRef:\n                fieldPath: metadata.name\n          #多 ES 节点时注意以下配置\n          - name: cluster.initial_master_nodes\n            value: \"es-0\"\n          - name: discovery.zen.minimum_master_nodes\n            value: \"1\"\n          - name: discovery.seed_hosts\n            value: \"elasticsearch\"\n          - name: ES_JAVA_OPTS\n            value: \"-Xms512m -Xmx512m\"\n          - name: network.host\n            value: \"0.0.0.0\"\n      # 持久化存储，线上环境建议使用 StorageClass 等存储资源对象\n      volumes:\n      - name: data\n        emptyDir: {}\n---\nkind: Service\napiVersion: v1\nmetadata:\n  name: elasticsearch\n  namespace: logging\n  labels:\n    app: elasticsearch\nspec:\n  selector:\n    app: elasticsearch\n  #使用无头服务，确保 StatefulSet 中 Pod 固定 DNS 地址，如 es-0.elasticsearch.logging.svc.cluster.local\n  clusterIP: None\n  ports:\n    - port: 9200\n      name: rest\n    - port: 9300\n      name: inter-node\nEOF\n\n# 部署 Kibana 资源\ncat > kibana.yaml << \"EOF\"\napiVersion: v1\nkind: Service\nmetadata:\n  name: kibana\n  namespace: logging\n  labels:\n    app: kibana\nspec:\n  selector:\n    app: kibana\n  ports:\n  - port: 5601\n  type: ClusterIP\n\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: kibana\n  namespace: logging\n  labels:\n    app: kibana\nspec:\n  selector:\n    matchLabels:\n      app: kibana\n  template:\n    metadata:\n      labels:\n        app: kibana\n    spec:\n      containers:\n      - name: kibana\n        image: docker.elastic.co/kibana/kibana:7.6.2\n        resources:\n          limits:\n            cpu: 1000m\n          requests:\n            cpu: 200m\n        env:\n        - name: ELASTICSEARCH_HOSTS\n          value: http://elasticsearch:9200\n        ports:\n        - containerPort: 5601\nEOF\n\n# 部署并查看部署结果\nkubectl apply -f elasticsearch.yaml\nkubectl apply -f kibana.yaml\nkubectl get pod,svc -n logging -owide\nNAME                          READY   STATUS    RESTARTS   AGE     IP           NODE       NOMINATED NODE   READINESS GATES\npod/es-0                      1/1     Running   0          4h54m   172.17.0.6   minikube   <none>           <none>\npod/kibana-6c84594848-mdp76   1/1     Running   0          158m    172.17.0.5   minikube   <none>           <none>\n\nNAME                    TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)             AGE     SELECTOR\nservice/elasticsearch   ClusterIP   None           <none>        9200/TCP,9300/TCP   4h50m   app=elasticsearch\nservice/kibana          ClusterIP   10.106.67.32   <none>        5601/TCP            158m    app=kibana\n\n# 访问验证\nkubectl port-forward services/elasticsearch -n logging --address 127.0.0.1 9200:9200\ncurl http://127.0.0.1:9200/_cluster/state?pretty\ncurl 10.106.67.32:5601/app/kibana -I\n```\n\n#### 部署 Fluentd\n```shell\n# 源码方式\n# git clone https://github.com/fluent/fluentd-kubernetes-daemonset.git\n\n# 自定义安装方式\n#Fluentd 配置文件\ncat > fluentd-cfg.yaml << \"EOF\"\nkind: ConfigMap\napiVersion: v1\nmetadata:\n  name: fluentd-config\n  namespace: logging\ndata:\n  system.conf: |-\n    <system>\n      root_dir /tmp/fluentd-buffers/\n    </system>\n  containers.input.conf: |-\n    <source>\n      @id fluentd-containers.log\n      @type tail                              # Fluentd 内置的输入方式，其原理是不停地从源文件中获取新的日志。\n      path /var/log/containers/*.log          # 挂载的服务器Docker容器日志地址\n      pos_file /var/log/es-containers.log.pos\n      tag raw.kubernetes.*                    # 设置日志标签\n      read_from_head true\n      <parse>                                 # 多行格式化成JSON\n        @type multi_format                    # 使用 multi-format-parser 解析器插件\n        <pattern>\n          format json                         # JSON解析器\n          time_key time                       # 指定事件时间的时间字段\n          time_format %Y-%m-%dT%H:%M:%S.%NZ   # 时间格式\n        </pattern>\n        <pattern>\n          format /^(?<time>.+) (?<stream>stdout|stderr) [^ ]* (?<log>.*)$/\n          time_format %Y-%m-%dT%H:%M:%S.%N%:z\n        </pattern>\n      </parse>\n    </source>\n    # 在日志输出中检测异常，并将其作为一条日志转发\n    # https://github.com/GoogleCloudPlatform/fluent-plugin-detect-exceptions\n    <match raw.kubernetes.**>           # 匹配tag为raw.kubernetes.**日志信息\n      @id raw.kubernetes\n      @type detect_exceptions           # 使用detect-exceptions插件处理异常栈信息\n      remove_tag_prefix raw             # 移除 raw 前缀\n      message log\n      stream stream\n      multiline_flush_interval 5\n      max_bytes 500000\n      max_lines 1000\n    </match>\n\n    <filter **>  # 拼接日志\n      @id filter_concat\n      @type concat                # Fluentd Filter 插件，用于连接多个事件中分隔的多行日志。\n      key message\n      multiline_end_regexp /\\n$/  # 以换行符“\\n”拼接\n      separator \"\"\n    </filter>\n\n    # 添加 Kubernetes metadata 数据\n    <filter kubernetes.**>\n      @id filter_kubernetes_metadata\n      @type kubernetes_metadata\n    </filter>\n\n    # 修复 ES 中的 JSON 字段\n    # 插件地址：https://github.com/repeatedly/fluent-plugin-multi-format-parser\n    <filter kubernetes.**>\n      @id filter_parser\n      @type parser                # multi-format-parser多格式解析器插件\n      key_name log                # 在要解析的记录中指定字段名称。\n      reserve_data true           # 在解析结果中保留原始键值对。\n      remove_key_name_field true  # key_name 解析成功后删除字段。\n      <parse>\n        @type multi_format\n        <pattern>\n          format json\n        </pattern>\n        <pattern>\n          format none\n        </pattern>\n      </parse>\n    </filter>\n\n    # 删除一些多余的属性\n    <filter kubernetes.**>\n      @type record_transformer\n      remove_keys $.docker.container_id,$.kubernetes.container_image_id,$.kubernetes.pod_id,$.kubernetes.namespace_id,$.kubernetes.master_url,$.kubernetes.labels.pod-template-hash\n    </filter>\n\n    # 只保留具有logging=true标签的Pod日志\n    <filter kubernetes.**>\n      @id filter_log\n      @type grep\n      <regexp>\n        key $.kubernetes.labels.logging\n        pattern ^true$\n      </regexp>\n    </filter>\n\n  ###### 监听配置，一般用于日志聚合用 ######\n  forward.input.conf: |-\n    # 监听通过TCP发送的消息\n    <source>\n      @id forward\n      @type forward\n    </source>\n\n  output.conf: |-\n    <match **>\n      @id elasticsearch\n      @type elasticsearch\n      @log_level info\n      include_tag_key true\n      host elasticsearch\n      port 9200\n      logstash_format true\n      logstash_prefix k8s  # 设置 index 前缀为 k8s\n      request_timeout    30s\n      <buffer>\n        @type file\n        path /var/log/fluentd-buffers/kubernetes.system.buffer\n        flush_mode interval\n        retry_type exponential_backoff\n        flush_thread_count 2\n        flush_interval 5s\n        retry_forever\n        retry_max_interval 30\n        chunk_limit_size 2M\n        queue_limit_length 8\n        overflow_action block\n      </buffer>\n    </match>\nEOF\n\n\ncat > fluentd-daemonset.yaml << \"EOF\"\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: fluentd-es\n  namespace: logging\n  labels:\n    k8s-app: fluentd-es\n    kubernetes.io/cluster-service: \"true\"\n    addonmanager.kubernetes.io/mode: Reconcile\n---\nkind: ClusterRole\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: fluentd-es\n  labels:\n    k8s-app: fluentd-es\n    kubernetes.io/cluster-service: \"true\"\n    addonmanager.kubernetes.io/mode: Reconcile\nrules:\n- apiGroups:\n  - \"\"\n  resources:\n  - \"namespaces\"\n  - \"pods\"\n  verbs:\n  - \"get\"\n  - \"watch\"\n  - \"list\"\n---\nkind: ClusterRoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: fluentd-es\n  labels:\n    k8s-app: fluentd-es\n    kubernetes.io/cluster-service: \"true\"\n    addonmanager.kubernetes.io/mode: Reconcile\nsubjects:\n- kind: ServiceAccount\n  name: fluentd-es\n  namespace: logging\n  apiGroup: \"\"\nroleRef:\n  kind: ClusterRole\n  name: fluentd-es\n  apiGroup: \"\"\n---\napiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  name: fluentd-es\n  namespace: logging\n  labels:\n    k8s-app: fluentd-es\n    kubernetes.io/cluster-service: \"true\"\n    addonmanager.kubernetes.io/mode: Reconcile\nspec:\n  selector:\n    matchLabels:\n      k8s-app: fluentd-es\n  template:\n    metadata:\n      labels:\n        k8s-app: fluentd-es\n        kubernetes.io/cluster-service: \"true\"\n      # 此注释确保如果节点被驱逐，fluentd不会被驱逐，支持关键的基于 pod 注释的优先级方案。\n      annotations:\n        priorityClassName: system-cluster-critical\n    spec:\n      serviceAccountName: fluentd-es\n      containers:\n      - name: fluentd-es\n        image: quay.io/fluentd_elasticsearch/fluentd:v3.0.1\n        #image: fluent/fluentd-kubernetes-daemonset:v1.14.6-debian-elasticsearch7-1.1\n        env:\n        - name: FLUENTD_ARGS\n          value: --no-supervisor -q\n        resources:\n          limits:\n            memory: 500Mi\n          requests:\n            cpu: 100m\n            memory: 200Mi\n        volumeMounts:\n        - name: varlog\n          mountPath: /var/log\n        - name: varlibdockercontainers\n          mountPath: /var/lib/docker/containers\n          readOnly: true\n        - name: config-volume\n          mountPath: /etc/fluent/config.d\n      # 打上 master 节点污点，收集 master 节点\n      tolerations:\n      - operator: Exists\n      terminationGracePeriodSeconds: 30\n      # 挂载需要收集日志的目录\n      volumes:\n      - name: varlog\n        hostPath:\n          path: /var/log\n      - name: varlibdockercontainers\n        hostPath:\n          path: /var/lib/docker/containers\n      - name: config-volume\n        configMap:\n          name: fluentd-config\nEOF\n\n# 部署并查看部署结果\nkubectl apply -f fluentd-cfg.yaml\nkubectl apply -f fluentd-daemonset.yaml\nkubectl get pod -n logging -owide\nNAME                          READY   STATUS    RESTARTS        AGE     IP           NODE       NOMINATED NODE   READINESS GATES\npod/fluentd-es-cfdcx          1/1     Running   0               91m     172.17.0.7   minikube   <none>           <none>\n\n```\n#### 部署测试应用，输出日志容器\n```shell\n# 直接标准输出日志容器\ncat > stdin.yaml << \"EOF\"\napiVersion: v1\nkind: Pod\nmetadata:\n  name: counter1\n  labels:\n    # 配置该标签，日志才能进行收集\n    logging: \"true\"\nspec:\n  containers:\n    - image: busybox\n      args: [\"/bin/sh\",\"-c\", 'i=0; while true; do echo \"$i: $(date)\"; i=$((i+1)); sleep 5; done']\n      name: counter\nEOF\n\n# sidecar 方式获取输出到文件的容器日志\ncat > sidecar.yaml << \"EOF\"\napiVersion: v1\nkind: Pod\nmetadata:\n  name: counter2\n  labels:\n    logging: \"true\"\nspec:\n  containers:\n  - name: counter2\n    image: busybox\n    args:\n    - /bin/sh\n    - -c\n    - >\n      i=0;\n      while true;\n      do\n        echo \"$i: $(date)\" >> /var/log/1.log;\n        echo \"$(date) INFO $i\" >> /var/log/2.log;\n        i=$((i+1));\n        sleep 3;\n      done\n    volumeMounts:\n    - name: varlog\n      mountPath: /var/log\n  - name: count-log-1\n    image: busybox\n    args: [/bin/sh, -c, 'tail -n 1 -f /var/log/1.log']\n    volumeMounts:\n    - name: varlog\n      mountPath: /var/log\n  - name: count-log-2\n    image: busybox\n    args: [/bin/sh, -c, 'tail -n 1 -f /var/log/2.log']\n    volumeMounts:\n    - name: varlog\n      mountPath: /var/log\n  restartPolicy: Never\n  volumes:\n  - name: varlog\n    emptyDir: {}\nEOF\n# 获取日志方式：kubectl logs counter2 count-log-2 -f --tail 3\n\n# 输出 JSON 格式日志，用于分析\ncat > dummylogs.yaml << \"EOF\"\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: dummylogs\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: dummylogs\n  template:\n    metadata:\n      labels:\n        app: dummylogs\n        logging: \"true\"  # 要采集日志需要加上该标签\n    spec:\n      containers:\n      - name: dummy\n        image: cnych/dummylogs:latest\n        args:\n        - msg-processor\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: dummylogs2\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: dummylogs2\n  template:\n    metadata:\n      labels:\n        app: dummylogs2\n        logging: \"true\"  # 要采集日志需要加上该标签\n    spec:\n      containers:\n      - name: dummy\n        image: cnych/dummylogs:latest\n        args:\n        - msg-receiver-api\nEOF\n\n# 部署\nkubectl apply -f counter.yaml\nkubectl apply -f dummylogs.yaml\n```\n#### Kibana  & Elasticsearch 查询数据验证\n\n- 暴露 Kibana  & Elasticsearch 服务\n```shell\nkubectl port-forward services/kibana -n logging --address 127.0.0.1 5601:5601\nkubectl port-forward services/elasticsearch -n logging --address 127.0.0.1 9200:9200\n```\n\n- 访问验证\n\n{% asset_img fluent3.png %}\n{% asset_img fluent4.png %}\n\n- Kibana 图表聚合展示\n#### 日志告警功能\n```shell\ncat > elastalert.yaml << \"EOF\"\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: elastalert-config\n  namespace: logging\n  labels:\n    app: elastalert\ndata:\n  elastalert_config: |-\n    ---\n    rules_folder: /opt/rules       # 指定规则的目录\n    scan_subdirectories: false\n    run_every:                     # 多久从 ES 中查询一次\n      minutes: 1\n    buffer_time:\n      minutes: 15\n    es_host: elasticsearch\n    es_port: 9200\n    writeback_index: elastalert\n    use_ssl: False\n    verify_certs: True\n    alert_time_limit:             # 失败重试限制\n      minutes: 720\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: elastalert-rules\n  namespace: logging\n  labels:\n    app: elastalert\ndata:\n  rule_config.yaml: |-\n    name: dummylogs error     # 规则名字，唯一值\n    es_host: elasticsearch\n    es_port: 9200\n    type: any                 # 报警类型\n    index: k8s-*              # es索引\n    filter:                   # 过滤\n    - query:\n        query_string:\n          query: \"LOGLEVEL:ERROR\"  # 报警条件\n    alert:                         # 报警类型\n    - \"email\"\n    smtp_host: 127.0.0.1\n    smtp_port: 587\n    smtp_auth_file: /opt/auth/smtp_auth_file.yaml\n    email_reply_to: xxx@gmail.com\n    from_addr: xxx@gmail.com\n    email:                  # 接受邮箱\n    - \"xxx@gmail.com\"\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: elastalert\n  namespace: logging\n  labels:\n    app: elastalert\nspec:\n  selector:\n    matchLabels:\n      app: elastalert\n  template:\n    metadata:\n      labels:\n        app: elastalert\n    spec:\n      containers:\n      - name: elastalert\n        image: jertel/elastalert-docker:0.2.4\n        imagePullPolicy: IfNotPresent\n        volumeMounts:\n        - name: config\n          mountPath: /opt/config\n        - name: rules\n          mountPath: /opt/rules\n        - name: auth\n          mountPath: /opt/auth\n        resources:\n          limits:\n            cpu: 50m\n            memory: 256Mi\n          requests:\n            cpu: 50m\n            memory: 256Mi\n      volumes:\n      - name: auth\n        secret:\n          secretName: smtp-auth\n      - name: rules\n        configMap:\n          name: elastalert-rules\n      - name: config\n        configMap:\n          name: elastalert-config\n          items:\n          - key: elastalert_config\n            path: elastalert_config.yaml\nEOF\n\n# 邮箱认证信息\ncat > smtp_auth_file.yaml << EOF\nuser: \"xxxxx@gmail.com\"\npassword: \"123xxx\"\nEOF\n\n# 部署验证\nkubectl create secret generic smtp-auth --from-file=smtp_auth_file.yaml -n logging\nkubectl apply -f elastalert.yaml\nkubectl get pods -n logging -l app=elastalert\n#查看 Kibana 是否生成对应索引\n```\n\n### 五、fluentd-operator 方式部署\n#### CRD 资源\n**fluentbit.fluent.io 资源**\n\n- FluentBit：定义 Fluent Bit 属性，如镜像版本、污点、亲和性等参数。\n- ClusterFluentBitConfig：定义 Fluent Bit 的配置文件。\n- ClusterInput：：定义 Fluent Bit 的 input 插件。\n- ClusterFilter：：定义 Fluent Bit 的 filter 插件。\n- ClusterParser：定义 Fluent Bit 的 parser 插件。\n- ClusterOutput：定义 Fluent Bit 的 output 插件。\n\n**fluentd.fluent.io 资源**\n\n- Fluentd：定义 Fluentd 属性，如镜像版本、污点、亲和性等参数。\n- FluentdConfig：定义 Fluentd namespace 级别配置文件。\n- ClusterFluentdConfig：定义 Fluentd 集群级别配置文件。\n- Filter：定义 Fluentd namespace 级别的 filter 插件。\n- ClusterFilter：定义 Fluentd 集群级别的 filter 插件。\n- Output：定义 Fluentd namespace 级别的 output 插件。\n- ClusterOutput：定义 Fluentd 集群级别的 output 插件。\n\n#### 部署 CRD 资源与 fluent-operator\n```shell\n# 下载源码，创建 CRD 资源与部署 fluent-operator\ngit clone https://github.com/fluent/fluent-operator\ncd fluent-operator && kubectl apply -f manifests/setup/setup.yaml\n\n# 验证资源\nkubectl get pod,crd -n fluent\nNAME                                   READY   STATUS    RESTARTS        AGE\npod/fluent-operator-86858cfc87-cg4ct   1/1     Running   1 (5h20m ago)   22h\n\nNAME                                                                                        CREATED AT\ncustomresourcedefinition.apiextensions.k8s.io/clusterfilters.fluentbit.fluent.io            2022-07-05T07:45:26Z\ncustomresourcedefinition.apiextensions.k8s.io/clusterfilters.fluentd.fluent.io              2022-07-05T07:45:26Z\ncustomresourcedefinition.apiextensions.k8s.io/clusterfluentbitconfigs.fluentbit.fluent.io   2022-07-05T07:45:26Z\ncustomresourcedefinition.apiextensions.k8s.io/clusterfluentdconfigs.fluentd.fluent.io       2022-07-05T07:45:26Z\ncustomresourcedefinition.apiextensions.k8s.io/clusterinputs.fluentbit.fluent.io             2022-07-05T07:45:26Z\ncustomresourcedefinition.apiextensions.k8s.io/clusteroutputs.fluentbit.fluent.io            2022-07-05T07:45:26Z\ncustomresourcedefinition.apiextensions.k8s.io/clusteroutputs.fluentd.fluent.io              2022-07-05T07:45:26Z\ncustomresourcedefinition.apiextensions.k8s.io/clusterparsers.fluentbit.fluent.io            2022-07-05T07:45:26Z\ncustomresourcedefinition.apiextensions.k8s.io/filters.fluentd.fluent.io                     2022-07-05T07:45:27Z\ncustomresourcedefinition.apiextensions.k8s.io/fluentbits.fluentbit.fluent.io                2022-07-05T07:45:27Z\ncustomresourcedefinition.apiextensions.k8s.io/fluentdconfigs.fluentd.fluent.io              2022-07-05T07:45:27Z\ncustomresourcedefinition.apiextensions.k8s.io/fluentds.fluentd.fluent.io                    2022-07-05T07:45:27Z\ncustomresourcedefinition.apiextensions.k8s.io/outputs.fluentd.fluent.io                     2022-07-05T07:45:28Z\n```\n\n#### Fluent Bit Only 模式\n```shell\n# 部署 Fluent Bit 收集日志\ncat > fluent-bit.yaml << \"EOF\"\napiVersion: fluentbit.fluent.io/v1alpha2\nkind: FluentBit\nmetadata:\n  name: fluent-bit\n  namespace: fluent\n  labels:\n    app.kubernetes.io/name: fluent-bit\nspec:\n  image: kubesphere/fluent-bit:v1.8.11\n  positionDB:\n    hostPath:\n      path: /var/lib/fluent-bit/\n  resources:\n    requests:\n      cpu: 10m\n      memory: 25Mi\n    limits:\n      cpu: 500m\n      memory: 200Mi\n  fluentBitConfigName: fluent-bit-config\n  tolerations:\n    - operator: Exists\n---\napiVersion: fluentbit.fluent.io/v1alpha2\nkind: ClusterFluentBitConfig\nmetadata:\n  name: fluent-bit-config\n  labels:\n    app.kubernetes.io/name: fluent-bit\nspec:\n  service:\n    parsersFile: parsers.conf\n  inputSelector:\n    matchLabels:\n      fluentbit.fluent.io/enabled: \"true\"\n      fluentbit.fluent.io/mode: \"k8s\"\n  filterSelector:\n    matchLabels:\n      fluentbit.fluent.io/enabled: \"true\"\n      fluentbit.fluent.io/mode: \"k8s\"\n  outputSelector:\n    matchLabels:\n      fluentbit.fluent.io/enabled: \"true\"\n      fluentbit.fluent.io/mode: \"k8s\"\n---\napiVersion: fluentbit.fluent.io/v1alpha2\nkind: ClusterInput\nmetadata:\n  name: tail\n  labels:\n    fluentbit.fluent.io/enabled: \"true\"\n    fluentbit.fluent.io/mode: \"k8s\"\nspec:\n  tail:\n    tag: kube.*\n    path: /var/log/containers/*.log\n    parser: docker\n    refreshIntervalSeconds: 10\n    memBufLimit: 5MB\n    skipLongLines: true\n    db: /fluent-bit/tail/pos.db\n    dbSync: Normal\n---\napiVersion: fluentbit.fluent.io/v1alpha2\nkind: ClusterOutput\nmetadata:\n  name: es\n  labels:\n    fluentbit.fluent.io/enabled: \"true\"\n    fluentbit.fluent.io/mode: \"k8s\"\nspec:\n  matchRegex: (?:kube|service)\\.(.*)\n  es:\n    host: elasticsearch\n    port: 9200\n    generateID: true\n    logstashPrefix: fluent-log-fb-only\n    logstashFormat: true\n    timeKey: \"@timestamp\"\nEOF\n# 需要先部署最后端日志 output 层 elasticsearch 资源\nkubectl apply -f elasticsearch.yaml\nkubectl apply -f fluent-bit.yaml\n\n# 查看部署资源\nkubectl get pod,svc -n fluent\nNAME                                   READY   STATUS    RESTARTS      AGE\npod/es-0                               1/1     Running   1 (56m ago)   17h\npod/fluent-bit-rjqsd                   1/1     Running   0             2m34s\npod/fluent-operator-86858cfc87-cg4ct   1/1     Running   1 (56m ago)   17h\nNAME                    TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)             AGE\nservice/elasticsearch   ClusterIP   None         <none>        9200/TCP,9300/TCP   17h\n\n# 请求 Elasticsearch 搜索验证日志内容\nkubectl port-forward services/elasticsearch -n fluent --address 127.0.0.1 9200:9200\n#查看所有索引\ncurl \"127.0.0.1:9200/_cat/indices?pretty\"\nyellow open fluent-log-fb-only-2022.07.06 lLmstFnwQLa89Jb7TFe-0Q 1 1 152 0 155.2kb 155.2kb \n#查看索引所有文档\ncurl \"127.0.0.1:9200/fluent-log-fb-only-2022.07.06/_search?pretty\"\n...\n#根据文档 ID 搜索具体日志\ncurl \"127.0.0.1:9200/fluent-log-fb-only-2022.07.06/_doc/b641529e-255c-f260-f911-f7d00d84e3fe?pretty\"\n{\n  \"_index\" : \"fluent-log-fb-only-2022.07.06\",\n  \"_type\" : \"_doc\",\n  \"_id\" : \"b641529e-255c-f260-f911-f7d00d84e3fe\",\n  \"_version\" : 1,\n  \"_seq_no\" : 94,\n  \"_primary_term\" : 1,\n  \"found\" : true,\n  \"_source\" : {\n    \"@timestamp\" : \"2022-07-06T02:57:38.035Z\",\n    \"log\" : \"[2022/07/06 02:57:38] [ info] [input:tail:tail.0] inotify_fs_add(): inode=2050771 watch_fd=3 name=/var/log/containers/dashboard-metrics-scraper-58549894f-q9lpg_kubernetes-dashboard_dashboard-metrics-scraper-51061ac5d9c2c7c2da734ab35b9252edb29f4101ade5679a22181d0d735dc364.log\\n\",\n    \"time\" : \"2022-07-06T02:57:38.035319145Z\",\n    \"kubernetes\" : {\n      \"pod_name\" : \"fluent-bit-8v2qn\",\n      \"namespace_name\" : \"fluent\",\n      \"container_name\" : \"fluent-bit\",\n      \"docker_id\" : \"098d8ac65b201686b7a2945df6ee1a919b7220b637aea4de6490d92569c9c455\",\n      \"container_image\" : \"kubesphere/fluent-bit:v1.8.11\"\n    }\n  }\n}\n```\n\n#### Fluent Bit + Fluentd 模式\n```shell\n# 修改 Fluent Bit output 资源配置，启用 forward 插件，转发到 Fluentd\ncat >> fluent-bit.yaml << \"EOF\"\napiVersion: fluentbit.fluent.io/v1alpha2\nkind: ClusterOutput\nmetadata:\n  name: fluentd\n  labels:\n    fluentbit.fluent.io/enabled: \"true\"\n    fluentbit.fluent.io/component: logging\nspec:\n  matchRegex: (?:kube|service)\\.(.*)\n  forward:\n    host: fluentd.fluent.svc\n    port: 24224\nEOF\n\n# 部署 Fluentd \ncat > fluentd.yaml << \"EOF\"\napiVersion: fluentd.fluent.io/v1alpha1\nkind: Fluentd\nmetadata:\n  name: fluentd\n  namespace: fluent\n  labels:\n    app.kubernetes.io/name: fluentd\nspec:\n  globalInputs:\n  - forward:\n      bind: 0.0.0.0\n      port: 24224\n  replicas: 1\n  image: kubesphere/fluentd:v1.14.4\n  fluentdCfgSelector:\n    matchLabels:\n      config.fluentd.fluent.io/enabled: \"true\"\nEOF\n\n# 配置 Fluentd\n#1.使用 ClusterFluentdConfig 配置，发送 kube-system 与 default 下 namesapce 日志到 ClusterOutput\ncat >> fluentd.yaml << \"EOF\"\napiVersion: fluentd.fluent.io/v1alpha1\nkind: ClusterFluentdConfig\nmetadata:\n  name: cluster-fluentd-config\n  labels:\n    config.fluentd.fluent.io/enabled: \"true\"\nspec:\n  watchedNamespaces:\n  - kube-system\n  - default\n  clusterOutputSelector:\n    matchLabels:\n      output.fluentd.fluent.io/scope: \"cluster\"\n      output.fluentd.fluent.io/enabled: \"true\"\n---\napiVersion: fluentd.fluent.io/v1alpha1\nkind: ClusterOutput\nmetadata:\n  name: cluster-fluentd-output-es\n  labels:\n    output.fluentd.fluent.io/scope: \"cluster\"\n    output.fluentd.fluent.io/enabled: \"true\"\nspec:\n  outputs:\n  - elasticsearch:\n      host: elasticsearch-master.elastic.svc\n      port: 9200\n      logstashFormat: true\n      logstashPrefix: fluent-log-cluster-fd\nEOF\n#2.使用 FluentdConfig + ClusterFluentdConfig 配置，发送集群范围和 namespace 范围日志到 Output 或 ClusterOutput\ncat >> fluentd.yaml << \"EOF\"\napiVersion: fluentd.fluent.io/v1alpha1\nkind: FluentdConfig\nmetadata:\n  name: namespace-fluentd-config-user1\n  namespace: fluent\n  labels:\n    config.fluentd.fluent.io/enabled: \"true\"\nspec:\n  outputSelector:\n    matchLabels:\n      output.fluentd.fluent.io/enabled: \"true\"\n      output.fluentd.fluent.io/user: \"user1\"\n  clusterOutputSelector:\n    matchLabels:\n      output.fluentd.fluent.io/enabled: \"true\"\n      output.fluentd.fluent.io/user: \"user1\"\n---\napiVersion: fluentd.fluent.io/v1alpha1\nkind: ClusterFluentdConfig\nmetadata:\n  name: cluster-fluentd-config-cluster-only\n  labels:\n    config.fluentd.fluent.io/enabled: \"true\"\nspec:\n  watchedNamespaces:\n  - kube-system\n  - kubesphere-system\n  clusterOutputSelector:\n    matchLabels:\n      output.fluentd.fluent.io/enabled: \"true\"\n      output.fluentd.fluent.io/scope: \"cluster-only\"\n---\napiVersion: fluentd.fluent.io/v1alpha1\nkind: Output\nmetadata:\n  name: namespace-fluentd-output-user1\n  namespace: fluent\n  labels:\n    output.fluentd.fluent.io/enabled: \"true\"\n    output.fluentd.fluent.io/user: \"user1\"\nspec:\n  outputs:\n  - elasticsearch:\n      host: elasticsearch-master.elastic.svc\n      port: 9200\n      logstashFormat: true\n      logstashPrefix: fluent-log-user1-fd\n---\napiVersion: fluentd.fluent.io/v1alpha1\nkind: ClusterOutput\nmetadata:\n  name: cluster-fluentd-output-user1\n  labels:\n    output.fluentd.fluent.io/enabled: \"true\"\n    output.fluentd.fluent.io/user: \"user1\"\nspec:\n  outputs:\n  - elasticsearch:\n      host: elasticsearch-master.elastic.svc\n      port: 9200\n      logstashFormat: true\n      logstashPrefix: fluent-log-cluster-user1-fd\n---\napiVersion: fluentd.fluent.io/v1alpha1\nkind: ClusterOutput\nmetadata:\n  name: cluster-fluentd-output-cluster-only\n  labels:\n    output.fluentd.fluent.io/enabled: \"true\"\n    output.fluentd.fluent.io/scope: \"cluster-only\"\nspec:\n  outputs:\n  - elasticsearch:\n      host: elasticsearch-master.elastic.svc\n      port: 9200\n      logstashFormat: true\n      logstashPrefix: fluent-log-cluster-only-fd\nEOF\n\n# Fluentd 输出使用 buffer 缓冲区\ncat >> fluentd.yaml << \"EOF\"\napiVersion: fluentd.fluent.io/v1alpha1\nkind: ClusterOutput\nmetadata:\n  name: cluster-fluentd-output-buffer\n  labels:\n    output.fluentd.fluent.io/type: \"buffer\"\n    output.fluentd.fluent.io/enabled: \"true\"\nspec:\n  outputs:\n  - stdout: {}\n    buffer:\n      type: file\n      path: /buffers/stdout.log\n  - elasticsearch:\n      host: elasticsearch-master.elastic.svc\n      port: 9200\n      logstashFormat: true\n      logstashPrefix: fluent-log-buffer-fd\n    buffer:\n      type: file\n      path: /buffers/es.log\nEOF\n\n```\n\n#### Fluentd Only 模式\n```shell\ncat > fluentd.yaml << \"EOF\"\napiVersion: fluentd.fluent.io/v1alpha1\nkind: Fluentd\nmetadata:\n  name: fluentd-http\n  namespace: fluent\n  labels:\n    app.kubernetes.io/name: fluentd\nspec:\n  globalInputs:\n    - http:\n        bind: 0.0.0.0\n        port: 9880\n  replicas: 1\n  image: kubesphere/fluentd:v1.14.4\n  fluentdCfgSelector:\n    matchLabels:\n      config.fluentd.fluent.io/enabled: \"true\"\n---\napiVersion: fluentd.fluent.io/v1alpha1\nkind: FluentdConfig\nmetadata:\n  name: fluentd-only-config\n  namespace: fluent\n  labels:\n    config.fluentd.fluent.io/enabled: \"true\"\nspec:\n  filterSelector:\n    matchLabels:\n      filter.fluentd.fluent.io/mode: \"fluentd-only\"\n      filter.fluentd.fluent.io/enabled: \"true\"\n  outputSelector:\n    matchLabels:\n      output.fluentd.fluent.io/mode: \"fluentd-only\"\n      output.fluentd.fluent.io/enabled: \"true\"\n---\napiVersion: fluentd.fluent.io/v1alpha1\nkind: Filter\nmetadata:\n  name: fluentd-only-filter\n  namespace: fluent\n  labels:\n    filter.fluentd.fluent.io/mode: \"fluentd-only\"\n    filter.fluentd.fluent.io/enabled: \"true\"\nspec:\n  filters:\n    - stdout: {}\n---\napiVersion: fluentd.fluent.io/v1alpha1\nkind: Output\nmetadata:\n  name: fluentd-only-stdout\n  namespace: fluent\n  labels:\n    output.fluentd.fluent.io/mode: \"fluentd-only\"\n    output.fluentd.fluent.io/enabled: \"true\"\nspec:\n  outputs:\n    - stdout: {}\nEOF\n\n# 查看部署资源\nkubectl get all -n fluent\nNAME                                   READY   STATUS    RESTARTS       AGE\npod/es-0                               1/1     Running   1 (163m ago)   19h\npod/fluent-operator-86858cfc87-cg4ct   1/1     Running   1 (163m ago)   19h\npod/fluentd-http-0                     1/1     Running   0              2m53s\n\nNAME                    TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)             AGE\nservice/elasticsearch   ClusterIP   None         <none>        9200/TCP,9300/TCP   19h\nservice/fluentd-http    ClusterIP   10.97.96.1   <none>        9880/TCP            2m54s\n\nNAME                              READY   UP-TO-DATE   AVAILABLE   AGE\ndeployment.apps/fluent-operator   1/1     1            1           19h\n\nNAME                                         DESIRED   CURRENT   READY   AGE\nreplicaset.apps/fluent-operator-86858cfc87   1         1         1       19h\n\nNAME                            READY   AGE\nstatefulset.apps/es             1/1     19h\nstatefulset.apps/fluentd-http   1/1     2m54s\n```\n\n\n> 参考文档：\n> 1、[https://www.qikqiak.com/post/install-efk-stack-on-k8s/](https://www.qikqiak.com/post/install-efk-stack-on-k8s/)\n> 2、fluentd 官网：[https://docs.fluentd.org/](https://docs.fluentd.org/)\n> 3、fluentd-operator 官网：[https://github.com/fluent/fluent-operator](https://github.com/fluent/fluent-operator)\n> 4、fluent-operator-walkthrough：[https://github.com/kubesphere-sigs/fluent-operator-walkthrough](https://github.com/kubesphere-sigs/fluent-operator-walkthrough)\n> 5、KubeSphere：[https://kubesphere.com.cn/blogs/fluent-operator-logging](https://kubesphere.com.cn/blogs/fluent-operator-logging)\n\n\n","source":"_posts/observability-fluentd-component.md","raw":"---\ntitle: 可观测性-Fluentd 日志组件\nabbrlink: 41fe\ndate: 2022-07-11 21:56:17\ncategories:\n  - CNCF\ntags:\n  - Observability\n---\n### 一、组件说明\n**Fluentd**\n负责从 Kubernetes 搜集日志，每个 node 节点上面的 fluentd 监控并收集该节点上面的系统+容器日志，并将处理过后的日志信息发送给 Elasticsearch。\n{% asset_img fluent1.png %}\n> fluentd 数据流逻辑：source --> parser --> filter --> output\n\n\n**Elasticsearch**\n搜索引擎，负责存储日志并提供查询接口。\n\n**Kibana** \n提供了一个 Web GUI，用户可以浏览和搜索存储在 Elasticsearch 中的日志。 \n\n> 主要的日志收集方案：\n> - 在节点上运行一个 agent 来收集日志（daemonSet）\n> - 在 Pod 中包含一个 sidecar 容器来收集应用日志\n> - 直接在应用程序中将日志信息推送到采集后端（一般不采用该方式）\n\n<!--more-->\n\n### 二、二进制方式 / 容器方式部署\n#### 二进制方式\n官网安装方式：[https://docs.fluentd.org/installation/before-install](https://docs.fluentd.org/installation/before-install)\n\n#### 容器方式\n仓库地址：[https://hub.docker.com/r/fluent/fluentd](https://hub.docker.com/r/fluent/fluentd)\n\n### 三、配置与使用\n> 数据流逻辑：fluentd 以 tag 值为基准，决定数据的流经哪些处理器。\n> 数据的流向：source -> parser -> filter -> output\n\n#### input 配置\n\n- **http：从 http 接口获取日志来源**\n```shell\n# 创建配置文件\nmkdir /tmp/fluentd && cd /tmp/fluentd\ncat > fluent.conf << EOF\n<source>\n  @type http\n  port 9880\n  bind 0.0.0.0\n</source>\n\n<match **>\n  @type stdout\n</match>\nEOF\n\n# 启动镜像，将 fluentd 目录挂载进容器，默认使用 fluent.conf 配置文件\ndocker run -p 9880:9880 --rm --name fluent -v /tmp/fluentd:/fluentd/etc fluent/fluentd\n\n# 测试请求 http 接口生成日志\ncurl -X POST 127.0.0.1:9880/yakir.test -d 'json={\"a\":\"aaa\"}'\n```\n\n- **tail：增量读取日志文件**\n```shell\ncat > fluent.conf << EOF\n<source>\n  @type tail\n  path /var/log/httpd-access.log\n  path_key tailed_path\n  pos_file /var/log/td-agent/httpd-access.log.pos\n  tag apache.access\n  <parse>\n    @type apache2\n  </parse>\n</source>\nEOF\n\n# 启动镜像并测试日志\ndocker run --rm --name fluent -v /tmp/fluentd:/fluentd/etc fluent/fluentd\n```\n\n- **exec：周期性执行命令，获取命令输出为 event**\n```shell\ncat > fluent.conf << EOF\n<source>\n  @type exec\n  tag yakir.test\n  command cat /proc/loadavg | cut -d ' ' -f 1,2,3\n  run_interval 10s\n\n  <parse>\n    @type tsv\n    keys avg1,avg5,avg15\n    delimiter \" \"\n  </parse>\n</source>\n\n<match **>\n  @type stdout\n</match>\nEOF\n\n# 启动镜像，验证日志\ndocker run --rm --name fluent -v /tmp/fluentd:/fluentd/etc fluent/fluentd\n2022-06-30 08:43:20.377146682 +0000 yakir.test: {\"avg1\":\"0.12\",\"avg5\":\"0.16\",\"avg15\":\"0.17\"}\n2022-06-30 08:43:30.347891525 +0000 yakir.test: {\"avg1\":\"0.10\",\"avg5\":\"0.15\",\"avg15\":\"0.17\"}\n```\n\n- **syslog：连接 rsyslog 系统日志，作为 rsyslog 接收端**\n```shell\ncat > fluent.conf << EOF\n<source>\n    @type syslog\n    port 5140\n    bind 0.0.0.0\n    tag system\n</source>\n\n<match **>\n  @type stdout\n</match>\nEOF\n\n# 启动镜像，转发 udp 端口\ndocker run -p 5140:5140/udp --rm --name fluent -v /tmp/fluentd:/fluentd/etc fluent/fluentd\n\n# 添加 rsyslog 配置，转发日志到 fluent\ncat >> /etc/rsyslog.d/50-default.conf << \"EOF\"\n*.* @127.0.0.1:5140\nEOF\n\n# logger 产生日志，验证日志生成\nlogger -p mail.info 'this is info message'\nlogger -p mail.warning 'this is warning message'\n2022-07-04 10:27:48.000000000 +0000 system.mail.info: {\"host\":\"minikube\",\"ident\":\"root\",\"message\":\"this is info message\"}\n2022-07-04 10:28:11.000000000 +0000 system.mail.warn: {\"host\":\"minikube\",\"ident\":\"root\",\"message\":\"this is warning message\"}\n```\n\n- **dummy：测试用数据源，周期生成假数据**\n```shell\ncat > fluent.conf << \"EOF\"\n<source>\n    @type dummy\n    dummy {\"foo\": \"bar\"}\n    size 3\n    rate 1\n    tag yakir.test\n    auto_increment_key primary_key\n    suspend true\n</source>\n\n<match **>\n  @type stdout\n</match>\nEOF\n\n#参数说明\nsize     #每次发送的 event 数量\nrate     #每秒产生多少个 event\nauto_increment_key   #自增键名\nsuspend              #重启后自增值是否重新开始\n\n# 启动镜像，验证日志\ndocker run --rm --name fluent -v /tmp/fluentd:/fluentd/etc fluent/fluentd\n2022-07-04 02:51:37.044796145 +0000 yakir.test: {\"foo\":\"bar\",\"primary_key\":0}\n2022-07-04 02:51:37.044834743 +0000 yakir.test: {\"foo\":\"bar\",\"primary_key\":1}\n```\n\n- **forward：接收其他 fluentd forward 的 event**\n```shell\n<source>\n  @type forward\n  port 24224\n  bind 0.0.0.0\n</source>\n```\n#### output 配置\n\n- **file：输出 event 为文件，默认每天输出一个日志文件**\n```shell\ncat > fluent.conf << \"EOF\"\n<source>\n  @type dummy\n  dummy {\"foo\": \"bar\"}\n  tag yakir.test\n  size 1\n  rate 1\n</source>\n\n<match yakir.**>\n  @type file\n  path /tmp/fluent/yakir\n  compress gzip\n  <buffer>\n    timekey 1d\n    timekey_use_utc true\n    timekey_wait 10m\n  </buffer>\n  \n  #@type file\n  #path /tmp/${tag[0]}/file.%Y-%m-%d-%H-%M-%S\n  #<buffer tag,time>\n  #  timekey 10\n  #  timekey_wait 10\n  #  timekey_use_utc true\n  #</buffer>\n</match>\nEOF\n\n# 参数说明\npath：支持 placeholder，可以在日志路径中嵌入时间，tag 和 record 中的字段值。例如：/path/to/${tag}/${key1}/file.%Y%m%d\nappend：flush 的 chuck 是否追加到已存在的文件后。默认为 false，便于文件的并行处理。\nformat 标签，用来规定文件内容的格式，默认值为 out_file。\ninject 标签，用来为 event 增加 time 和 tag 等字段。\nadd_path_suffix：是否增加 path 后缀\npath_suffix：path 后缀内容，默认为.log。\ncompress：采用什么压缩格式，默认不压缩。\nrecompress：是否在 buffer chunk 已经压缩的情况再次压缩，默认为 false。\n\n# 启动镜像验证日志\ndocker run --rm --name fluent -v /tmp/fluentd:/fluentd/etc fluent/fluentd\ndocker exec -it fluent /bin/sh\ntail -2 /tmp/fluent/yakir/buffer.b5e2f5e063d4389bd9304563cf7f07656.log\n2022-07-04T07:42:34+00:00\tyakir.test\t{\"foo\":\"bar\"}\n2022-07-04T07:42:35+00:00\tyakir.test\t{\"foo\":\"bar\"}\n```\n\n- **buffer 标签**\n```shell\n<buffer>\n  @type file\n</buffer>\n# @type 值：file（存文件）、memory（存内存，默认值）\n\n<buffer ARGUMENT_CHUNK_KEYS>\n  # ...\n</buffer>\n# buffer chunk keys（buffer 已 record 的什么字段分段存放），没有配置 chunk key，所有 event 写入同一个 chunk file 直到 buffer 滚动。\n# 使用 time 为 chunk key，按照时间对 buffer 进行分段。\n# timekey：时间跨度   timekey_wait：flush 延迟时间，用于等待迟到的数据\n\n# 常用参数\ntimekey_use_utc：使用国际标准时间还是当地时间，默认是使用当地时间。\ntimekey_zone：指定时区。\nchunk_limit_size：chunk 大小限制，默认 8MB。\nchunk_limit_records：chunk event 条数限制。\ntotal_limit_size：总 buffer 大小限制。\nchunk_full_threshold：chunk 大小超过 chunk_limit_size * chunk_full_threshold 时会自动 flush。\nqueued_chunks_limit_size：限制队列中的 chunk 数目，防止频繁 flush 产生过多的 chunk。\ncompress：压缩格式，可使用 text 或 gzip。默认为 text。\nflush_at_shutdown：关闭时候是否 flush。对于非持久化 buffer 默认值为 true，持久化 buffer 默认值为 false。\nflush_interval：多长时间 flush 一次。\nretry_timeout：重试 flush 的超时时间。在这个时间后不再会 retry。\nretry_forever：是否永远尝试 flush。如果设置为 true 会忽略 retry_timeout 的配置。\nretry_max_times：重试最大次数。\nretry_type：有两个配置值：retry 时间间隔，指数级增长或者是固定周期重试。\nretry_wait：每次重试等待时间。\nretry_exponential_backoff_base：retry 时间指数扩大倍数。\nretry_max_interval：最长 retry 时间间隔。\nretry_randomize：是否随机 retry 时间间隔。\n```\n\n- **format 标签**\n```shell\n<match>\n  ...\n  \n  <format>\n    @type json\n  </format>\n\n  <buffer>\n    ...\n  </buffer>\n  \n</match>\n\n```\n\n- **forward：转发 event 到其他 fluentd 节点。配置多个 fluentd 节点时，使用负载均衡方式发送。**\n```shell\n<match yakir.*>\n  @type forward\n  send_timeout 60s\n  recover_wait 10s\n  hard_timeout 60s\n\n  <server>\n    name myserver1\n    host 192.168.1.3\n    port 24224\n    weight 60\n  </server>\n  <server>\n    name myserver2\n    host 192.168.1.4\n    port 24224\n    weight 60\n  </server>\n  ...\n\n  <secondary>\n    @type file\n    path /var/log/fluent/forward-failed\n  </secondary>\n</match>\n\n#server 标签参数说明\nhost\nname\nport\nshared_key\nusername\npassword\nstandby 标记 server 为备用，只有其他 node 不可用的时候才会启用 standby 的 node\nweight 负载均衡的权重配置\n```\n\n- **copy：多路输出，复制 event 到多个输出端**\n```shell\ncat > fluent.conf << \"EOF\"\n<source>\n  @type dummy\n  dummy {\"foo\": \"bar\"}\n  tag yakir.test\n  size 1\n  rate 1\n</source>\n\n<match yakir.**>\n  @type copy\n  <store>\n    @type file\n    path /tmp/yakir/file.%Y%m%d\n    compress gzip\n  </store>\n  <store ignore_error>\n    @type stdout\n  </store>\n</match>\nEOF\n\n# 参数说明\ncopy_mode 复制模式可选值\n  no_copy：每路输出共享 event。\n  shallow：浅拷贝，如果不修改嵌套字段可以使用。\n  deep：深拷贝，使用msgpack-ruby方式。\n  marshal：深拷贝，使用marshal方式。\nstore 标签 ignore_error 参数：标记的 store 出现错误时，不影响其他\n\n```\n\n- **http：通过 http 请求方式发送 event，payload 格式由 format 标签决定。**\n```shell\n<match pattern>\n  @type http\n  endpoint http://logserver.com:9000/api\n  open_timeout 2\n\n  <format>\n    @type json\n  </format>\n  <buffer>\n    flush_interval 10s\n  </buffer>\n</match>\n\n# 使用 post 方式，连接超时2s，输出格式为 json，每10s 输出一次到 endpoint。（content-type 为 application/x-ndjson）\n```\n\n- **stdout：标准输出，后台运行时输出到 fluentd 日志。**\n```shell\n<source>\n  @type dummy\n  dummy {\"foo\": \"bar\"}\n  tag yakir.test\n  size 1\n  rate 1\n</source>\n\n<match yakir.**>\n  @type stdout\n</match>\n```\n\n- **第三方存储：Elasticsearch、Kafka**\n```shell\n# elasticsearch 关键配置\n<match yakir.logs>\n  @type elasticsearch\n  host localhost\n  port 9200\n  logstash_format true\n</match>\n# 参数\nhost：单个 elasticsearch 节点地址\nport：单个 elasticsearch 节点的端口号\nhosts：elasticsearch 集群地址。格式为 ip1:port1,ip2:port2...\nuser、password：elasticsearch 的认证信息\nscheme：使用 https 还是 http。默认为 http 模式\npath：REST 接口路径，默认为空\nindex_name：index 名称\nlogstash_format：index 是否使用 logstash 命名方式（logstash-%Y.%m.%d），默认不启用\nlogstash_prefix：logstash_format 启用的时候，index 命名前缀是什么。默认为logstash\n\n\n# kafka 关键配置\n<match pattern>\n  @type kafka2\n\n  # list of seed brokers\n  brokers <broker1_host>:<broker1_port>,<broker2_host>:<broker2_port>\n  use_event_time true\n\n  # buffer settings\n  <buffer topic>\n    @type file\n    path /var/log/td-agent/buffer/td\n    flush_interval 3s\n  </buffer>\n\n  # data type settings\n  <format>\n    @type json\n  </format>\n\n  # topic settings\n  topic_key topic\n  default_topic messages\n\n  # producer settings\n  required_acks -1\n  compression_codec gzip\n</match>\n# 参数\nbrokers：Kafka brokers 的地址和端口号\ntopic_key：record 中哪个 key 对应的值用作 Kafka 消息的 key\ndefault_topic：如果没有配置 topic_key，默认使用的 topic 名字\nformat 标签：确定发送的数据格式\nuse_event_time：是否使用 fluentd event 的时间作为 Kafka 消息的时间。默认为 false。意思为使用当前时间作为发送消息的时间\nrequired_acks：producer acks 的值\ncompression_codec：压缩编码方式\n```\n\n- **webhdfs：通过 REST 方式写入 event 到 HDFS（配合 Hadoop）**\n```shell\n  <store>\n    @type webhdfs\n    host 1.1.1.1\n    port 50070\n    path \"/history/access.log.%Y%m%d_%H.#{Socket.gethostname}.log\"\n    <buffer>\n        flush_interval 60s\n    </buffer>\n  </store>\n```\n\n#### parser 配置\n\n- **regexp：正则表达式解析信息，可通过 time_key 指定 event 的 time 字段**\n> 在线测试正则语法工具：[http://fluentular.herokuapp.com/](http://fluentular.herokuapp.com/)\n\n```shell\n# 关键配置\n<parse>\n  @type regexp\n  expression /^\\[(?<logtime>[^\\]]*)\\] (?<name>[^ ]*) (?<title>[^ ]*) (?<id>\\d*)$/\n  time_key logtime\n  time_format %Y-%m-%d %H:%M:%S %z\n  types id:integer\n</parse>\n\n# 数据解析\n#原日志\n[2013-02-28 12:00:00 +0900] alice engineer 1\n#解析后\ntime:\n1362020400 (2013-02-28 12:00:00 +0900)\n\nrecord:\n{\n  \"name\" : \"alice\",\n  \"title\": \"engineer\",\n  \"id\"   : 1\n}\n```\n\n#### filter 配置\n\n- **record_transformer：修改 event 结构，增加或修改字段**\n```shell\n# 新增字段，使用 ruby 表达式\ncat > fluent.conf << \"EOF\"\n<source>\n  @type dummy\n  dummy {\"foo\":\"bar\", \"id1\": 100, \"id2\": 50}\n  tag yakir.test\n  size 1\n  rate 1\n</source>\n\n<filter>\n  @type record_transformer\n  enable_ruby true\n  <record>\n    hostname \"#{Socket.gethostname}\"\n    tag ${tag}\n    avg ${record[\"id1\"] / record[\"id2\"]}\n  </record>\n</filter>\n\n<match yakir.**>\n  @type stdout\n</match>\nEOF\n# 启动镜像，验证日志\ndocker run --rm --name fluent -v /tmp/fluentd:/fluentd/etc fluent/fluentd\n2022-07-04 10:12:53.028623276 +0000 yakir.test: {\"foo\":\"bar\",\"id1\":100,\"id2\":50,\"hostname\":\"7d5e83c528c7\",\"tag\":\"yakir.test\",\"avg\":2}\n\n\n# 修改字段内容\n#关键配置\n<filter foo.bar>\n  @type record_transformer\n  <record>\n    message yay, ${record[\"message\"]}\n  </record>\n</filter>\n\n\n# 数据解析\n#原日志\n{ \"message\": \"hello world!\" }\n#解析后\ntime:\n{ \"message\": \"yay, hello world!\" }\n\n```\n\n- **record 标签**\n```shell\n# 配置\n<record>\n  NEW_FIELD NEW_VALUE\n</record>\n\n# 参数说明\nrecord：获取 record 中某些字段的内容。例如record[\"count\"]\ntag：获取 tag 的内容\ntime：获取日志的时间戳\nhostname：获取主机名字，和#{Socket.gethostname}作用一样\ntag_parts[N]：tag 以.分隔，获取 tag 的第 N 部分\ntag_prefix[N]：获取 tag 的 0-N 部分\ntag_suffix[N]：获取 tag 的 N-结尾部分\n```\n\n### 四、DaemonSet 方式部署\n{% asset_img fluent2.png %}\n#### 部署 Elasticsearch 和 Kibana\n```shell\n# 创建日志 namespace，方便清理\nkubectl create ns logging\n\n# 部署 Elasticsearch（StatefulSet 和 Service，service 资源使用无头服务）\ncat > elasticsearch.yaml << \"EOF\"\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: es\n  namespace: logging\nspec:\n  serviceName: elasticsearch\n  replicas: 1\n  selector:\n    matchLabels:\n      app: elasticsearch\n  template:\n    metadata:\n      labels:\n        app: elasticsearch\n    spec:\n      # 初始化容器，调整内核参数\n      initContainers:\n      - name: increase-vm-max-map\n        image: busybox\n        command: [\"sysctl\", \"-w\", \"vm.max_map_count=262144\"]\n        securityContext:\n          privileged: true\n      - name: increase-fd-ulimit\n        image: busybox\n        command: [\"sh\", \"-c\", \"ulimit -n 65536\"]\n        securityContext:\n          privileged: true\n      containers:\n      - name: elasticsearch\n        image: docker.elastic.co/elasticsearch/elasticsearch:7.6.2\n        resources:\n          limits:\n            cpu: 1000m\n          requests:\n            cpu: 100m\n        ports:\n        - containerPort: 9200\n          name: rest\n          protocol: TCP\n        - containerPort: 9300\n          name: inter-node\n          protocol: TCP\n        volumeMounts:\n        - name: data\n          mountPath: /usr/share/elasticsearch/data\n        env:\n          - name: cluster.name\n            value: k8s-logs\n          - name: node.name\n            valueFrom:\n              fieldRef:\n                fieldPath: metadata.name\n          #多 ES 节点时注意以下配置\n          - name: cluster.initial_master_nodes\n            value: \"es-0\"\n          - name: discovery.zen.minimum_master_nodes\n            value: \"1\"\n          - name: discovery.seed_hosts\n            value: \"elasticsearch\"\n          - name: ES_JAVA_OPTS\n            value: \"-Xms512m -Xmx512m\"\n          - name: network.host\n            value: \"0.0.0.0\"\n      # 持久化存储，线上环境建议使用 StorageClass 等存储资源对象\n      volumes:\n      - name: data\n        emptyDir: {}\n---\nkind: Service\napiVersion: v1\nmetadata:\n  name: elasticsearch\n  namespace: logging\n  labels:\n    app: elasticsearch\nspec:\n  selector:\n    app: elasticsearch\n  #使用无头服务，确保 StatefulSet 中 Pod 固定 DNS 地址，如 es-0.elasticsearch.logging.svc.cluster.local\n  clusterIP: None\n  ports:\n    - port: 9200\n      name: rest\n    - port: 9300\n      name: inter-node\nEOF\n\n# 部署 Kibana 资源\ncat > kibana.yaml << \"EOF\"\napiVersion: v1\nkind: Service\nmetadata:\n  name: kibana\n  namespace: logging\n  labels:\n    app: kibana\nspec:\n  selector:\n    app: kibana\n  ports:\n  - port: 5601\n  type: ClusterIP\n\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: kibana\n  namespace: logging\n  labels:\n    app: kibana\nspec:\n  selector:\n    matchLabels:\n      app: kibana\n  template:\n    metadata:\n      labels:\n        app: kibana\n    spec:\n      containers:\n      - name: kibana\n        image: docker.elastic.co/kibana/kibana:7.6.2\n        resources:\n          limits:\n            cpu: 1000m\n          requests:\n            cpu: 200m\n        env:\n        - name: ELASTICSEARCH_HOSTS\n          value: http://elasticsearch:9200\n        ports:\n        - containerPort: 5601\nEOF\n\n# 部署并查看部署结果\nkubectl apply -f elasticsearch.yaml\nkubectl apply -f kibana.yaml\nkubectl get pod,svc -n logging -owide\nNAME                          READY   STATUS    RESTARTS   AGE     IP           NODE       NOMINATED NODE   READINESS GATES\npod/es-0                      1/1     Running   0          4h54m   172.17.0.6   minikube   <none>           <none>\npod/kibana-6c84594848-mdp76   1/1     Running   0          158m    172.17.0.5   minikube   <none>           <none>\n\nNAME                    TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)             AGE     SELECTOR\nservice/elasticsearch   ClusterIP   None           <none>        9200/TCP,9300/TCP   4h50m   app=elasticsearch\nservice/kibana          ClusterIP   10.106.67.32   <none>        5601/TCP            158m    app=kibana\n\n# 访问验证\nkubectl port-forward services/elasticsearch -n logging --address 127.0.0.1 9200:9200\ncurl http://127.0.0.1:9200/_cluster/state?pretty\ncurl 10.106.67.32:5601/app/kibana -I\n```\n\n#### 部署 Fluentd\n```shell\n# 源码方式\n# git clone https://github.com/fluent/fluentd-kubernetes-daemonset.git\n\n# 自定义安装方式\n#Fluentd 配置文件\ncat > fluentd-cfg.yaml << \"EOF\"\nkind: ConfigMap\napiVersion: v1\nmetadata:\n  name: fluentd-config\n  namespace: logging\ndata:\n  system.conf: |-\n    <system>\n      root_dir /tmp/fluentd-buffers/\n    </system>\n  containers.input.conf: |-\n    <source>\n      @id fluentd-containers.log\n      @type tail                              # Fluentd 内置的输入方式，其原理是不停地从源文件中获取新的日志。\n      path /var/log/containers/*.log          # 挂载的服务器Docker容器日志地址\n      pos_file /var/log/es-containers.log.pos\n      tag raw.kubernetes.*                    # 设置日志标签\n      read_from_head true\n      <parse>                                 # 多行格式化成JSON\n        @type multi_format                    # 使用 multi-format-parser 解析器插件\n        <pattern>\n          format json                         # JSON解析器\n          time_key time                       # 指定事件时间的时间字段\n          time_format %Y-%m-%dT%H:%M:%S.%NZ   # 时间格式\n        </pattern>\n        <pattern>\n          format /^(?<time>.+) (?<stream>stdout|stderr) [^ ]* (?<log>.*)$/\n          time_format %Y-%m-%dT%H:%M:%S.%N%:z\n        </pattern>\n      </parse>\n    </source>\n    # 在日志输出中检测异常，并将其作为一条日志转发\n    # https://github.com/GoogleCloudPlatform/fluent-plugin-detect-exceptions\n    <match raw.kubernetes.**>           # 匹配tag为raw.kubernetes.**日志信息\n      @id raw.kubernetes\n      @type detect_exceptions           # 使用detect-exceptions插件处理异常栈信息\n      remove_tag_prefix raw             # 移除 raw 前缀\n      message log\n      stream stream\n      multiline_flush_interval 5\n      max_bytes 500000\n      max_lines 1000\n    </match>\n\n    <filter **>  # 拼接日志\n      @id filter_concat\n      @type concat                # Fluentd Filter 插件，用于连接多个事件中分隔的多行日志。\n      key message\n      multiline_end_regexp /\\n$/  # 以换行符“\\n”拼接\n      separator \"\"\n    </filter>\n\n    # 添加 Kubernetes metadata 数据\n    <filter kubernetes.**>\n      @id filter_kubernetes_metadata\n      @type kubernetes_metadata\n    </filter>\n\n    # 修复 ES 中的 JSON 字段\n    # 插件地址：https://github.com/repeatedly/fluent-plugin-multi-format-parser\n    <filter kubernetes.**>\n      @id filter_parser\n      @type parser                # multi-format-parser多格式解析器插件\n      key_name log                # 在要解析的记录中指定字段名称。\n      reserve_data true           # 在解析结果中保留原始键值对。\n      remove_key_name_field true  # key_name 解析成功后删除字段。\n      <parse>\n        @type multi_format\n        <pattern>\n          format json\n        </pattern>\n        <pattern>\n          format none\n        </pattern>\n      </parse>\n    </filter>\n\n    # 删除一些多余的属性\n    <filter kubernetes.**>\n      @type record_transformer\n      remove_keys $.docker.container_id,$.kubernetes.container_image_id,$.kubernetes.pod_id,$.kubernetes.namespace_id,$.kubernetes.master_url,$.kubernetes.labels.pod-template-hash\n    </filter>\n\n    # 只保留具有logging=true标签的Pod日志\n    <filter kubernetes.**>\n      @id filter_log\n      @type grep\n      <regexp>\n        key $.kubernetes.labels.logging\n        pattern ^true$\n      </regexp>\n    </filter>\n\n  ###### 监听配置，一般用于日志聚合用 ######\n  forward.input.conf: |-\n    # 监听通过TCP发送的消息\n    <source>\n      @id forward\n      @type forward\n    </source>\n\n  output.conf: |-\n    <match **>\n      @id elasticsearch\n      @type elasticsearch\n      @log_level info\n      include_tag_key true\n      host elasticsearch\n      port 9200\n      logstash_format true\n      logstash_prefix k8s  # 设置 index 前缀为 k8s\n      request_timeout    30s\n      <buffer>\n        @type file\n        path /var/log/fluentd-buffers/kubernetes.system.buffer\n        flush_mode interval\n        retry_type exponential_backoff\n        flush_thread_count 2\n        flush_interval 5s\n        retry_forever\n        retry_max_interval 30\n        chunk_limit_size 2M\n        queue_limit_length 8\n        overflow_action block\n      </buffer>\n    </match>\nEOF\n\n\ncat > fluentd-daemonset.yaml << \"EOF\"\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: fluentd-es\n  namespace: logging\n  labels:\n    k8s-app: fluentd-es\n    kubernetes.io/cluster-service: \"true\"\n    addonmanager.kubernetes.io/mode: Reconcile\n---\nkind: ClusterRole\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: fluentd-es\n  labels:\n    k8s-app: fluentd-es\n    kubernetes.io/cluster-service: \"true\"\n    addonmanager.kubernetes.io/mode: Reconcile\nrules:\n- apiGroups:\n  - \"\"\n  resources:\n  - \"namespaces\"\n  - \"pods\"\n  verbs:\n  - \"get\"\n  - \"watch\"\n  - \"list\"\n---\nkind: ClusterRoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: fluentd-es\n  labels:\n    k8s-app: fluentd-es\n    kubernetes.io/cluster-service: \"true\"\n    addonmanager.kubernetes.io/mode: Reconcile\nsubjects:\n- kind: ServiceAccount\n  name: fluentd-es\n  namespace: logging\n  apiGroup: \"\"\nroleRef:\n  kind: ClusterRole\n  name: fluentd-es\n  apiGroup: \"\"\n---\napiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  name: fluentd-es\n  namespace: logging\n  labels:\n    k8s-app: fluentd-es\n    kubernetes.io/cluster-service: \"true\"\n    addonmanager.kubernetes.io/mode: Reconcile\nspec:\n  selector:\n    matchLabels:\n      k8s-app: fluentd-es\n  template:\n    metadata:\n      labels:\n        k8s-app: fluentd-es\n        kubernetes.io/cluster-service: \"true\"\n      # 此注释确保如果节点被驱逐，fluentd不会被驱逐，支持关键的基于 pod 注释的优先级方案。\n      annotations:\n        priorityClassName: system-cluster-critical\n    spec:\n      serviceAccountName: fluentd-es\n      containers:\n      - name: fluentd-es\n        image: quay.io/fluentd_elasticsearch/fluentd:v3.0.1\n        #image: fluent/fluentd-kubernetes-daemonset:v1.14.6-debian-elasticsearch7-1.1\n        env:\n        - name: FLUENTD_ARGS\n          value: --no-supervisor -q\n        resources:\n          limits:\n            memory: 500Mi\n          requests:\n            cpu: 100m\n            memory: 200Mi\n        volumeMounts:\n        - name: varlog\n          mountPath: /var/log\n        - name: varlibdockercontainers\n          mountPath: /var/lib/docker/containers\n          readOnly: true\n        - name: config-volume\n          mountPath: /etc/fluent/config.d\n      # 打上 master 节点污点，收集 master 节点\n      tolerations:\n      - operator: Exists\n      terminationGracePeriodSeconds: 30\n      # 挂载需要收集日志的目录\n      volumes:\n      - name: varlog\n        hostPath:\n          path: /var/log\n      - name: varlibdockercontainers\n        hostPath:\n          path: /var/lib/docker/containers\n      - name: config-volume\n        configMap:\n          name: fluentd-config\nEOF\n\n# 部署并查看部署结果\nkubectl apply -f fluentd-cfg.yaml\nkubectl apply -f fluentd-daemonset.yaml\nkubectl get pod -n logging -owide\nNAME                          READY   STATUS    RESTARTS        AGE     IP           NODE       NOMINATED NODE   READINESS GATES\npod/fluentd-es-cfdcx          1/1     Running   0               91m     172.17.0.7   minikube   <none>           <none>\n\n```\n#### 部署测试应用，输出日志容器\n```shell\n# 直接标准输出日志容器\ncat > stdin.yaml << \"EOF\"\napiVersion: v1\nkind: Pod\nmetadata:\n  name: counter1\n  labels:\n    # 配置该标签，日志才能进行收集\n    logging: \"true\"\nspec:\n  containers:\n    - image: busybox\n      args: [\"/bin/sh\",\"-c\", 'i=0; while true; do echo \"$i: $(date)\"; i=$((i+1)); sleep 5; done']\n      name: counter\nEOF\n\n# sidecar 方式获取输出到文件的容器日志\ncat > sidecar.yaml << \"EOF\"\napiVersion: v1\nkind: Pod\nmetadata:\n  name: counter2\n  labels:\n    logging: \"true\"\nspec:\n  containers:\n  - name: counter2\n    image: busybox\n    args:\n    - /bin/sh\n    - -c\n    - >\n      i=0;\n      while true;\n      do\n        echo \"$i: $(date)\" >> /var/log/1.log;\n        echo \"$(date) INFO $i\" >> /var/log/2.log;\n        i=$((i+1));\n        sleep 3;\n      done\n    volumeMounts:\n    - name: varlog\n      mountPath: /var/log\n  - name: count-log-1\n    image: busybox\n    args: [/bin/sh, -c, 'tail -n 1 -f /var/log/1.log']\n    volumeMounts:\n    - name: varlog\n      mountPath: /var/log\n  - name: count-log-2\n    image: busybox\n    args: [/bin/sh, -c, 'tail -n 1 -f /var/log/2.log']\n    volumeMounts:\n    - name: varlog\n      mountPath: /var/log\n  restartPolicy: Never\n  volumes:\n  - name: varlog\n    emptyDir: {}\nEOF\n# 获取日志方式：kubectl logs counter2 count-log-2 -f --tail 3\n\n# 输出 JSON 格式日志，用于分析\ncat > dummylogs.yaml << \"EOF\"\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: dummylogs\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: dummylogs\n  template:\n    metadata:\n      labels:\n        app: dummylogs\n        logging: \"true\"  # 要采集日志需要加上该标签\n    spec:\n      containers:\n      - name: dummy\n        image: cnych/dummylogs:latest\n        args:\n        - msg-processor\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: dummylogs2\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: dummylogs2\n  template:\n    metadata:\n      labels:\n        app: dummylogs2\n        logging: \"true\"  # 要采集日志需要加上该标签\n    spec:\n      containers:\n      - name: dummy\n        image: cnych/dummylogs:latest\n        args:\n        - msg-receiver-api\nEOF\n\n# 部署\nkubectl apply -f counter.yaml\nkubectl apply -f dummylogs.yaml\n```\n#### Kibana  & Elasticsearch 查询数据验证\n\n- 暴露 Kibana  & Elasticsearch 服务\n```shell\nkubectl port-forward services/kibana -n logging --address 127.0.0.1 5601:5601\nkubectl port-forward services/elasticsearch -n logging --address 127.0.0.1 9200:9200\n```\n\n- 访问验证\n\n{% asset_img fluent3.png %}\n{% asset_img fluent4.png %}\n\n- Kibana 图表聚合展示\n#### 日志告警功能\n```shell\ncat > elastalert.yaml << \"EOF\"\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: elastalert-config\n  namespace: logging\n  labels:\n    app: elastalert\ndata:\n  elastalert_config: |-\n    ---\n    rules_folder: /opt/rules       # 指定规则的目录\n    scan_subdirectories: false\n    run_every:                     # 多久从 ES 中查询一次\n      minutes: 1\n    buffer_time:\n      minutes: 15\n    es_host: elasticsearch\n    es_port: 9200\n    writeback_index: elastalert\n    use_ssl: False\n    verify_certs: True\n    alert_time_limit:             # 失败重试限制\n      minutes: 720\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: elastalert-rules\n  namespace: logging\n  labels:\n    app: elastalert\ndata:\n  rule_config.yaml: |-\n    name: dummylogs error     # 规则名字，唯一值\n    es_host: elasticsearch\n    es_port: 9200\n    type: any                 # 报警类型\n    index: k8s-*              # es索引\n    filter:                   # 过滤\n    - query:\n        query_string:\n          query: \"LOGLEVEL:ERROR\"  # 报警条件\n    alert:                         # 报警类型\n    - \"email\"\n    smtp_host: 127.0.0.1\n    smtp_port: 587\n    smtp_auth_file: /opt/auth/smtp_auth_file.yaml\n    email_reply_to: xxx@gmail.com\n    from_addr: xxx@gmail.com\n    email:                  # 接受邮箱\n    - \"xxx@gmail.com\"\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: elastalert\n  namespace: logging\n  labels:\n    app: elastalert\nspec:\n  selector:\n    matchLabels:\n      app: elastalert\n  template:\n    metadata:\n      labels:\n        app: elastalert\n    spec:\n      containers:\n      - name: elastalert\n        image: jertel/elastalert-docker:0.2.4\n        imagePullPolicy: IfNotPresent\n        volumeMounts:\n        - name: config\n          mountPath: /opt/config\n        - name: rules\n          mountPath: /opt/rules\n        - name: auth\n          mountPath: /opt/auth\n        resources:\n          limits:\n            cpu: 50m\n            memory: 256Mi\n          requests:\n            cpu: 50m\n            memory: 256Mi\n      volumes:\n      - name: auth\n        secret:\n          secretName: smtp-auth\n      - name: rules\n        configMap:\n          name: elastalert-rules\n      - name: config\n        configMap:\n          name: elastalert-config\n          items:\n          - key: elastalert_config\n            path: elastalert_config.yaml\nEOF\n\n# 邮箱认证信息\ncat > smtp_auth_file.yaml << EOF\nuser: \"xxxxx@gmail.com\"\npassword: \"123xxx\"\nEOF\n\n# 部署验证\nkubectl create secret generic smtp-auth --from-file=smtp_auth_file.yaml -n logging\nkubectl apply -f elastalert.yaml\nkubectl get pods -n logging -l app=elastalert\n#查看 Kibana 是否生成对应索引\n```\n\n### 五、fluentd-operator 方式部署\n#### CRD 资源\n**fluentbit.fluent.io 资源**\n\n- FluentBit：定义 Fluent Bit 属性，如镜像版本、污点、亲和性等参数。\n- ClusterFluentBitConfig：定义 Fluent Bit 的配置文件。\n- ClusterInput：：定义 Fluent Bit 的 input 插件。\n- ClusterFilter：：定义 Fluent Bit 的 filter 插件。\n- ClusterParser：定义 Fluent Bit 的 parser 插件。\n- ClusterOutput：定义 Fluent Bit 的 output 插件。\n\n**fluentd.fluent.io 资源**\n\n- Fluentd：定义 Fluentd 属性，如镜像版本、污点、亲和性等参数。\n- FluentdConfig：定义 Fluentd namespace 级别配置文件。\n- ClusterFluentdConfig：定义 Fluentd 集群级别配置文件。\n- Filter：定义 Fluentd namespace 级别的 filter 插件。\n- ClusterFilter：定义 Fluentd 集群级别的 filter 插件。\n- Output：定义 Fluentd namespace 级别的 output 插件。\n- ClusterOutput：定义 Fluentd 集群级别的 output 插件。\n\n#### 部署 CRD 资源与 fluent-operator\n```shell\n# 下载源码，创建 CRD 资源与部署 fluent-operator\ngit clone https://github.com/fluent/fluent-operator\ncd fluent-operator && kubectl apply -f manifests/setup/setup.yaml\n\n# 验证资源\nkubectl get pod,crd -n fluent\nNAME                                   READY   STATUS    RESTARTS        AGE\npod/fluent-operator-86858cfc87-cg4ct   1/1     Running   1 (5h20m ago)   22h\n\nNAME                                                                                        CREATED AT\ncustomresourcedefinition.apiextensions.k8s.io/clusterfilters.fluentbit.fluent.io            2022-07-05T07:45:26Z\ncustomresourcedefinition.apiextensions.k8s.io/clusterfilters.fluentd.fluent.io              2022-07-05T07:45:26Z\ncustomresourcedefinition.apiextensions.k8s.io/clusterfluentbitconfigs.fluentbit.fluent.io   2022-07-05T07:45:26Z\ncustomresourcedefinition.apiextensions.k8s.io/clusterfluentdconfigs.fluentd.fluent.io       2022-07-05T07:45:26Z\ncustomresourcedefinition.apiextensions.k8s.io/clusterinputs.fluentbit.fluent.io             2022-07-05T07:45:26Z\ncustomresourcedefinition.apiextensions.k8s.io/clusteroutputs.fluentbit.fluent.io            2022-07-05T07:45:26Z\ncustomresourcedefinition.apiextensions.k8s.io/clusteroutputs.fluentd.fluent.io              2022-07-05T07:45:26Z\ncustomresourcedefinition.apiextensions.k8s.io/clusterparsers.fluentbit.fluent.io            2022-07-05T07:45:26Z\ncustomresourcedefinition.apiextensions.k8s.io/filters.fluentd.fluent.io                     2022-07-05T07:45:27Z\ncustomresourcedefinition.apiextensions.k8s.io/fluentbits.fluentbit.fluent.io                2022-07-05T07:45:27Z\ncustomresourcedefinition.apiextensions.k8s.io/fluentdconfigs.fluentd.fluent.io              2022-07-05T07:45:27Z\ncustomresourcedefinition.apiextensions.k8s.io/fluentds.fluentd.fluent.io                    2022-07-05T07:45:27Z\ncustomresourcedefinition.apiextensions.k8s.io/outputs.fluentd.fluent.io                     2022-07-05T07:45:28Z\n```\n\n#### Fluent Bit Only 模式\n```shell\n# 部署 Fluent Bit 收集日志\ncat > fluent-bit.yaml << \"EOF\"\napiVersion: fluentbit.fluent.io/v1alpha2\nkind: FluentBit\nmetadata:\n  name: fluent-bit\n  namespace: fluent\n  labels:\n    app.kubernetes.io/name: fluent-bit\nspec:\n  image: kubesphere/fluent-bit:v1.8.11\n  positionDB:\n    hostPath:\n      path: /var/lib/fluent-bit/\n  resources:\n    requests:\n      cpu: 10m\n      memory: 25Mi\n    limits:\n      cpu: 500m\n      memory: 200Mi\n  fluentBitConfigName: fluent-bit-config\n  tolerations:\n    - operator: Exists\n---\napiVersion: fluentbit.fluent.io/v1alpha2\nkind: ClusterFluentBitConfig\nmetadata:\n  name: fluent-bit-config\n  labels:\n    app.kubernetes.io/name: fluent-bit\nspec:\n  service:\n    parsersFile: parsers.conf\n  inputSelector:\n    matchLabels:\n      fluentbit.fluent.io/enabled: \"true\"\n      fluentbit.fluent.io/mode: \"k8s\"\n  filterSelector:\n    matchLabels:\n      fluentbit.fluent.io/enabled: \"true\"\n      fluentbit.fluent.io/mode: \"k8s\"\n  outputSelector:\n    matchLabels:\n      fluentbit.fluent.io/enabled: \"true\"\n      fluentbit.fluent.io/mode: \"k8s\"\n---\napiVersion: fluentbit.fluent.io/v1alpha2\nkind: ClusterInput\nmetadata:\n  name: tail\n  labels:\n    fluentbit.fluent.io/enabled: \"true\"\n    fluentbit.fluent.io/mode: \"k8s\"\nspec:\n  tail:\n    tag: kube.*\n    path: /var/log/containers/*.log\n    parser: docker\n    refreshIntervalSeconds: 10\n    memBufLimit: 5MB\n    skipLongLines: true\n    db: /fluent-bit/tail/pos.db\n    dbSync: Normal\n---\napiVersion: fluentbit.fluent.io/v1alpha2\nkind: ClusterOutput\nmetadata:\n  name: es\n  labels:\n    fluentbit.fluent.io/enabled: \"true\"\n    fluentbit.fluent.io/mode: \"k8s\"\nspec:\n  matchRegex: (?:kube|service)\\.(.*)\n  es:\n    host: elasticsearch\n    port: 9200\n    generateID: true\n    logstashPrefix: fluent-log-fb-only\n    logstashFormat: true\n    timeKey: \"@timestamp\"\nEOF\n# 需要先部署最后端日志 output 层 elasticsearch 资源\nkubectl apply -f elasticsearch.yaml\nkubectl apply -f fluent-bit.yaml\n\n# 查看部署资源\nkubectl get pod,svc -n fluent\nNAME                                   READY   STATUS    RESTARTS      AGE\npod/es-0                               1/1     Running   1 (56m ago)   17h\npod/fluent-bit-rjqsd                   1/1     Running   0             2m34s\npod/fluent-operator-86858cfc87-cg4ct   1/1     Running   1 (56m ago)   17h\nNAME                    TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)             AGE\nservice/elasticsearch   ClusterIP   None         <none>        9200/TCP,9300/TCP   17h\n\n# 请求 Elasticsearch 搜索验证日志内容\nkubectl port-forward services/elasticsearch -n fluent --address 127.0.0.1 9200:9200\n#查看所有索引\ncurl \"127.0.0.1:9200/_cat/indices?pretty\"\nyellow open fluent-log-fb-only-2022.07.06 lLmstFnwQLa89Jb7TFe-0Q 1 1 152 0 155.2kb 155.2kb \n#查看索引所有文档\ncurl \"127.0.0.1:9200/fluent-log-fb-only-2022.07.06/_search?pretty\"\n...\n#根据文档 ID 搜索具体日志\ncurl \"127.0.0.1:9200/fluent-log-fb-only-2022.07.06/_doc/b641529e-255c-f260-f911-f7d00d84e3fe?pretty\"\n{\n  \"_index\" : \"fluent-log-fb-only-2022.07.06\",\n  \"_type\" : \"_doc\",\n  \"_id\" : \"b641529e-255c-f260-f911-f7d00d84e3fe\",\n  \"_version\" : 1,\n  \"_seq_no\" : 94,\n  \"_primary_term\" : 1,\n  \"found\" : true,\n  \"_source\" : {\n    \"@timestamp\" : \"2022-07-06T02:57:38.035Z\",\n    \"log\" : \"[2022/07/06 02:57:38] [ info] [input:tail:tail.0] inotify_fs_add(): inode=2050771 watch_fd=3 name=/var/log/containers/dashboard-metrics-scraper-58549894f-q9lpg_kubernetes-dashboard_dashboard-metrics-scraper-51061ac5d9c2c7c2da734ab35b9252edb29f4101ade5679a22181d0d735dc364.log\\n\",\n    \"time\" : \"2022-07-06T02:57:38.035319145Z\",\n    \"kubernetes\" : {\n      \"pod_name\" : \"fluent-bit-8v2qn\",\n      \"namespace_name\" : \"fluent\",\n      \"container_name\" : \"fluent-bit\",\n      \"docker_id\" : \"098d8ac65b201686b7a2945df6ee1a919b7220b637aea4de6490d92569c9c455\",\n      \"container_image\" : \"kubesphere/fluent-bit:v1.8.11\"\n    }\n  }\n}\n```\n\n#### Fluent Bit + Fluentd 模式\n```shell\n# 修改 Fluent Bit output 资源配置，启用 forward 插件，转发到 Fluentd\ncat >> fluent-bit.yaml << \"EOF\"\napiVersion: fluentbit.fluent.io/v1alpha2\nkind: ClusterOutput\nmetadata:\n  name: fluentd\n  labels:\n    fluentbit.fluent.io/enabled: \"true\"\n    fluentbit.fluent.io/component: logging\nspec:\n  matchRegex: (?:kube|service)\\.(.*)\n  forward:\n    host: fluentd.fluent.svc\n    port: 24224\nEOF\n\n# 部署 Fluentd \ncat > fluentd.yaml << \"EOF\"\napiVersion: fluentd.fluent.io/v1alpha1\nkind: Fluentd\nmetadata:\n  name: fluentd\n  namespace: fluent\n  labels:\n    app.kubernetes.io/name: fluentd\nspec:\n  globalInputs:\n  - forward:\n      bind: 0.0.0.0\n      port: 24224\n  replicas: 1\n  image: kubesphere/fluentd:v1.14.4\n  fluentdCfgSelector:\n    matchLabels:\n      config.fluentd.fluent.io/enabled: \"true\"\nEOF\n\n# 配置 Fluentd\n#1.使用 ClusterFluentdConfig 配置，发送 kube-system 与 default 下 namesapce 日志到 ClusterOutput\ncat >> fluentd.yaml << \"EOF\"\napiVersion: fluentd.fluent.io/v1alpha1\nkind: ClusterFluentdConfig\nmetadata:\n  name: cluster-fluentd-config\n  labels:\n    config.fluentd.fluent.io/enabled: \"true\"\nspec:\n  watchedNamespaces:\n  - kube-system\n  - default\n  clusterOutputSelector:\n    matchLabels:\n      output.fluentd.fluent.io/scope: \"cluster\"\n      output.fluentd.fluent.io/enabled: \"true\"\n---\napiVersion: fluentd.fluent.io/v1alpha1\nkind: ClusterOutput\nmetadata:\n  name: cluster-fluentd-output-es\n  labels:\n    output.fluentd.fluent.io/scope: \"cluster\"\n    output.fluentd.fluent.io/enabled: \"true\"\nspec:\n  outputs:\n  - elasticsearch:\n      host: elasticsearch-master.elastic.svc\n      port: 9200\n      logstashFormat: true\n      logstashPrefix: fluent-log-cluster-fd\nEOF\n#2.使用 FluentdConfig + ClusterFluentdConfig 配置，发送集群范围和 namespace 范围日志到 Output 或 ClusterOutput\ncat >> fluentd.yaml << \"EOF\"\napiVersion: fluentd.fluent.io/v1alpha1\nkind: FluentdConfig\nmetadata:\n  name: namespace-fluentd-config-user1\n  namespace: fluent\n  labels:\n    config.fluentd.fluent.io/enabled: \"true\"\nspec:\n  outputSelector:\n    matchLabels:\n      output.fluentd.fluent.io/enabled: \"true\"\n      output.fluentd.fluent.io/user: \"user1\"\n  clusterOutputSelector:\n    matchLabels:\n      output.fluentd.fluent.io/enabled: \"true\"\n      output.fluentd.fluent.io/user: \"user1\"\n---\napiVersion: fluentd.fluent.io/v1alpha1\nkind: ClusterFluentdConfig\nmetadata:\n  name: cluster-fluentd-config-cluster-only\n  labels:\n    config.fluentd.fluent.io/enabled: \"true\"\nspec:\n  watchedNamespaces:\n  - kube-system\n  - kubesphere-system\n  clusterOutputSelector:\n    matchLabels:\n      output.fluentd.fluent.io/enabled: \"true\"\n      output.fluentd.fluent.io/scope: \"cluster-only\"\n---\napiVersion: fluentd.fluent.io/v1alpha1\nkind: Output\nmetadata:\n  name: namespace-fluentd-output-user1\n  namespace: fluent\n  labels:\n    output.fluentd.fluent.io/enabled: \"true\"\n    output.fluentd.fluent.io/user: \"user1\"\nspec:\n  outputs:\n  - elasticsearch:\n      host: elasticsearch-master.elastic.svc\n      port: 9200\n      logstashFormat: true\n      logstashPrefix: fluent-log-user1-fd\n---\napiVersion: fluentd.fluent.io/v1alpha1\nkind: ClusterOutput\nmetadata:\n  name: cluster-fluentd-output-user1\n  labels:\n    output.fluentd.fluent.io/enabled: \"true\"\n    output.fluentd.fluent.io/user: \"user1\"\nspec:\n  outputs:\n  - elasticsearch:\n      host: elasticsearch-master.elastic.svc\n      port: 9200\n      logstashFormat: true\n      logstashPrefix: fluent-log-cluster-user1-fd\n---\napiVersion: fluentd.fluent.io/v1alpha1\nkind: ClusterOutput\nmetadata:\n  name: cluster-fluentd-output-cluster-only\n  labels:\n    output.fluentd.fluent.io/enabled: \"true\"\n    output.fluentd.fluent.io/scope: \"cluster-only\"\nspec:\n  outputs:\n  - elasticsearch:\n      host: elasticsearch-master.elastic.svc\n      port: 9200\n      logstashFormat: true\n      logstashPrefix: fluent-log-cluster-only-fd\nEOF\n\n# Fluentd 输出使用 buffer 缓冲区\ncat >> fluentd.yaml << \"EOF\"\napiVersion: fluentd.fluent.io/v1alpha1\nkind: ClusterOutput\nmetadata:\n  name: cluster-fluentd-output-buffer\n  labels:\n    output.fluentd.fluent.io/type: \"buffer\"\n    output.fluentd.fluent.io/enabled: \"true\"\nspec:\n  outputs:\n  - stdout: {}\n    buffer:\n      type: file\n      path: /buffers/stdout.log\n  - elasticsearch:\n      host: elasticsearch-master.elastic.svc\n      port: 9200\n      logstashFormat: true\n      logstashPrefix: fluent-log-buffer-fd\n    buffer:\n      type: file\n      path: /buffers/es.log\nEOF\n\n```\n\n#### Fluentd Only 模式\n```shell\ncat > fluentd.yaml << \"EOF\"\napiVersion: fluentd.fluent.io/v1alpha1\nkind: Fluentd\nmetadata:\n  name: fluentd-http\n  namespace: fluent\n  labels:\n    app.kubernetes.io/name: fluentd\nspec:\n  globalInputs:\n    - http:\n        bind: 0.0.0.0\n        port: 9880\n  replicas: 1\n  image: kubesphere/fluentd:v1.14.4\n  fluentdCfgSelector:\n    matchLabels:\n      config.fluentd.fluent.io/enabled: \"true\"\n---\napiVersion: fluentd.fluent.io/v1alpha1\nkind: FluentdConfig\nmetadata:\n  name: fluentd-only-config\n  namespace: fluent\n  labels:\n    config.fluentd.fluent.io/enabled: \"true\"\nspec:\n  filterSelector:\n    matchLabels:\n      filter.fluentd.fluent.io/mode: \"fluentd-only\"\n      filter.fluentd.fluent.io/enabled: \"true\"\n  outputSelector:\n    matchLabels:\n      output.fluentd.fluent.io/mode: \"fluentd-only\"\n      output.fluentd.fluent.io/enabled: \"true\"\n---\napiVersion: fluentd.fluent.io/v1alpha1\nkind: Filter\nmetadata:\n  name: fluentd-only-filter\n  namespace: fluent\n  labels:\n    filter.fluentd.fluent.io/mode: \"fluentd-only\"\n    filter.fluentd.fluent.io/enabled: \"true\"\nspec:\n  filters:\n    - stdout: {}\n---\napiVersion: fluentd.fluent.io/v1alpha1\nkind: Output\nmetadata:\n  name: fluentd-only-stdout\n  namespace: fluent\n  labels:\n    output.fluentd.fluent.io/mode: \"fluentd-only\"\n    output.fluentd.fluent.io/enabled: \"true\"\nspec:\n  outputs:\n    - stdout: {}\nEOF\n\n# 查看部署资源\nkubectl get all -n fluent\nNAME                                   READY   STATUS    RESTARTS       AGE\npod/es-0                               1/1     Running   1 (163m ago)   19h\npod/fluent-operator-86858cfc87-cg4ct   1/1     Running   1 (163m ago)   19h\npod/fluentd-http-0                     1/1     Running   0              2m53s\n\nNAME                    TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)             AGE\nservice/elasticsearch   ClusterIP   None         <none>        9200/TCP,9300/TCP   19h\nservice/fluentd-http    ClusterIP   10.97.96.1   <none>        9880/TCP            2m54s\n\nNAME                              READY   UP-TO-DATE   AVAILABLE   AGE\ndeployment.apps/fluent-operator   1/1     1            1           19h\n\nNAME                                         DESIRED   CURRENT   READY   AGE\nreplicaset.apps/fluent-operator-86858cfc87   1         1         1       19h\n\nNAME                            READY   AGE\nstatefulset.apps/es             1/1     19h\nstatefulset.apps/fluentd-http   1/1     2m54s\n```\n\n\n> 参考文档：\n> 1、[https://www.qikqiak.com/post/install-efk-stack-on-k8s/](https://www.qikqiak.com/post/install-efk-stack-on-k8s/)\n> 2、fluentd 官网：[https://docs.fluentd.org/](https://docs.fluentd.org/)\n> 3、fluentd-operator 官网：[https://github.com/fluent/fluent-operator](https://github.com/fluent/fluent-operator)\n> 4、fluent-operator-walkthrough：[https://github.com/kubesphere-sigs/fluent-operator-walkthrough](https://github.com/kubesphere-sigs/fluent-operator-walkthrough)\n> 5、KubeSphere：[https://kubesphere.com.cn/blogs/fluent-operator-logging](https://kubesphere.com.cn/blogs/fluent-operator-logging)\n\n\n","slug":"observability-fluentd-component","published":1,"updated":"2024-01-21T15:28:43.158Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm0fat8zq001ps0njgnra83jk","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"一、组件说明\"><a href=\"#一、组件说明\" class=\"headerlink\" title=\"一、组件说明\"></a>一、组件说明</h3><p><strong>Fluentd</strong><br>负责从 Kubernetes 搜集日志，每个 node 节点上面的 fluentd 监控并收集该节点上面的系统+容器日志，并将处理过后的日志信息发送给 Elasticsearch。</p>\n<img data-src=\"/posts/41fe/fluent1.png\" class>\n<blockquote>\n<p>fluentd 数据流逻辑：source –&gt; parser –&gt; filter –&gt; output</p>\n</blockquote>\n<p><strong>Elasticsearch</strong><br>搜索引擎，负责存储日志并提供查询接口。</p>\n<p><strong>Kibana</strong><br>提供了一个 Web GUI，用户可以浏览和搜索存储在 Elasticsearch 中的日志。 </p>\n<blockquote>\n<p>主要的日志收集方案：</p>\n<ul>\n<li>在节点上运行一个 agent 来收集日志（daemonSet）</li>\n<li>在 Pod 中包含一个 sidecar 容器来收集应用日志</li>\n<li>直接在应用程序中将日志信息推送到采集后端（一般不采用该方式）</li>\n</ul>\n</blockquote>\n<span id=\"more\"></span>\n\n<h3 id=\"二、二进制方式-x2F-容器方式部署\"><a href=\"#二、二进制方式-x2F-容器方式部署\" class=\"headerlink\" title=\"二、二进制方式 &#x2F; 容器方式部署\"></a>二、二进制方式 &#x2F; 容器方式部署</h3><h4 id=\"二进制方式\"><a href=\"#二进制方式\" class=\"headerlink\" title=\"二进制方式\"></a>二进制方式</h4><p>官网安装方式：<a href=\"https://docs.fluentd.org/installation/before-install\">https://docs.fluentd.org/installation/before-install</a></p>\n<h4 id=\"容器方式\"><a href=\"#容器方式\" class=\"headerlink\" title=\"容器方式\"></a>容器方式</h4><p>仓库地址：<a href=\"https://hub.docker.com/r/fluent/fluentd\">https://hub.docker.com/r/fluent/fluentd</a></p>\n<h3 id=\"三、配置与使用\"><a href=\"#三、配置与使用\" class=\"headerlink\" title=\"三、配置与使用\"></a>三、配置与使用</h3><blockquote>\n<p>数据流逻辑：fluentd 以 tag 值为基准，决定数据的流经哪些处理器。<br>数据的流向：source -&gt; parser -&gt; filter -&gt; output</p>\n</blockquote>\n<h4 id=\"input-配置\"><a href=\"#input-配置\" class=\"headerlink\" title=\"input 配置\"></a>input 配置</h4><ul>\n<li><p><strong>http：从 http 接口获取日志来源</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建配置文件</span></span><br><span class=\"line\">mkdir /tmp/fluentd &amp;&amp; cd /tmp/fluentd</span><br><span class=\"line\">cat &gt; fluent.conf &lt;&lt; EOF</span><br><span class=\"line\">&lt;source&gt;</span><br><span class=\"line\">  @type http</span><br><span class=\"line\">  port 9880</span><br><span class=\"line\">  bind 0.0.0.0</span><br><span class=\"line\">&lt;/source&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;match **&gt;</span><br><span class=\"line\">  @type stdout</span><br><span class=\"line\">&lt;/match&gt;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动镜像，将 fluentd 目录挂载进容器，默认使用 fluent.conf 配置文件</span></span><br><span class=\"line\">docker run -p 9880:9880 --rm --name fluent -v /tmp/fluentd:/fluentd/etc fluent/fluentd</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">测试请求 http 接口生成日志</span></span><br><span class=\"line\">curl -X POST 127.0.0.1:9880/yakir.test -d &#x27;json=&#123;&quot;a&quot;:&quot;aaa&quot;&#125;&#x27;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>tail：增量读取日志文件</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; fluent.conf &lt;&lt; EOF</span><br><span class=\"line\">&lt;source&gt;</span><br><span class=\"line\">  @type tail</span><br><span class=\"line\">  path /var/log/httpd-access.log</span><br><span class=\"line\">  path_key tailed_path</span><br><span class=\"line\">  pos_file /var/log/td-agent/httpd-access.log.pos</span><br><span class=\"line\">  tag apache.access</span><br><span class=\"line\">  &lt;parse&gt;</span><br><span class=\"line\">    @type apache2</span><br><span class=\"line\">  &lt;/parse&gt;</span><br><span class=\"line\">&lt;/source&gt;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动镜像并测试日志</span></span><br><span class=\"line\">docker run --rm --name fluent -v /tmp/fluentd:/fluentd/etc fluent/fluentd</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>exec：周期性执行命令，获取命令输出为 event</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; fluent.conf &lt;&lt; EOF</span><br><span class=\"line\">&lt;source&gt;</span><br><span class=\"line\">  @type exec</span><br><span class=\"line\">  tag yakir.test</span><br><span class=\"line\">  command cat /proc/loadavg | cut -d &#x27; &#x27; -f 1,2,3</span><br><span class=\"line\">  run_interval 10s</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;parse&gt;</span><br><span class=\"line\">    @type tsv</span><br><span class=\"line\">    keys avg1,avg5,avg15</span><br><span class=\"line\">    delimiter &quot; &quot;</span><br><span class=\"line\">  &lt;/parse&gt;</span><br><span class=\"line\">&lt;/source&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;match **&gt;</span><br><span class=\"line\">  @type stdout</span><br><span class=\"line\">&lt;/match&gt;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动镜像，验证日志</span></span><br><span class=\"line\">docker run --rm --name fluent -v /tmp/fluentd:/fluentd/etc fluent/fluentd</span><br><span class=\"line\">2022-06-30 08:43:20.377146682 +0000 yakir.test: &#123;&quot;avg1&quot;:&quot;0.12&quot;,&quot;avg5&quot;:&quot;0.16&quot;,&quot;avg15&quot;:&quot;0.17&quot;&#125;</span><br><span class=\"line\">2022-06-30 08:43:30.347891525 +0000 yakir.test: &#123;&quot;avg1&quot;:&quot;0.10&quot;,&quot;avg5&quot;:&quot;0.15&quot;,&quot;avg15&quot;:&quot;0.17&quot;&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>syslog：连接 rsyslog 系统日志，作为 rsyslog 接收端</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; fluent.conf &lt;&lt; EOF</span><br><span class=\"line\">&lt;source&gt;</span><br><span class=\"line\">    @type syslog</span><br><span class=\"line\">    port 5140</span><br><span class=\"line\">    bind 0.0.0.0</span><br><span class=\"line\">    tag system</span><br><span class=\"line\">&lt;/source&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;match **&gt;</span><br><span class=\"line\">  @type stdout</span><br><span class=\"line\">&lt;/match&gt;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动镜像，转发 udp 端口</span></span><br><span class=\"line\">docker run -p 5140:5140/udp --rm --name fluent -v /tmp/fluentd:/fluentd/etc fluent/fluentd</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加 rsyslog 配置，转发日志到 fluent</span></span><br><span class=\"line\">cat &gt;&gt; /etc/rsyslog.d/50-default.conf &lt;&lt; &quot;EOF&quot;</span><br><span class=\"line\">*.* @127.0.0.1:5140</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">logger 产生日志，验证日志生成</span></span><br><span class=\"line\">logger -p mail.info &#x27;this is info message&#x27;</span><br><span class=\"line\">logger -p mail.warning &#x27;this is warning message&#x27;</span><br><span class=\"line\">2022-07-04 10:27:48.000000000 +0000 system.mail.info: &#123;&quot;host&quot;:&quot;minikube&quot;,&quot;ident&quot;:&quot;root&quot;,&quot;message&quot;:&quot;this is info message&quot;&#125;</span><br><span class=\"line\">2022-07-04 10:28:11.000000000 +0000 system.mail.warn: &#123;&quot;host&quot;:&quot;minikube&quot;,&quot;ident&quot;:&quot;root&quot;,&quot;message&quot;:&quot;this is warning message&quot;&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>dummy：测试用数据源，周期生成假数据</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; fluent.conf &lt;&lt; &quot;EOF&quot;</span><br><span class=\"line\">&lt;source&gt;</span><br><span class=\"line\">    @type dummy</span><br><span class=\"line\">    dummy &#123;&quot;foo&quot;: &quot;bar&quot;&#125;</span><br><span class=\"line\">    size 3</span><br><span class=\"line\">    rate 1</span><br><span class=\"line\">    tag yakir.test</span><br><span class=\"line\">    auto_increment_key primary_key</span><br><span class=\"line\">    suspend true</span><br><span class=\"line\">&lt;/source&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;match **&gt;</span><br><span class=\"line\">  @type stdout</span><br><span class=\"line\">&lt;/match&gt;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">参数说明</span></span><br><span class=\"line\">size     #每次发送的 event 数量</span><br><span class=\"line\">rate     #每秒产生多少个 event</span><br><span class=\"line\">auto_increment_key   #自增键名</span><br><span class=\"line\">suspend              #重启后自增值是否重新开始</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动镜像，验证日志</span></span><br><span class=\"line\">docker run --rm --name fluent -v /tmp/fluentd:/fluentd/etc fluent/fluentd</span><br><span class=\"line\">2022-07-04 02:51:37.044796145 +0000 yakir.test: &#123;&quot;foo&quot;:&quot;bar&quot;,&quot;primary_key&quot;:0&#125;</span><br><span class=\"line\">2022-07-04 02:51:37.044834743 +0000 yakir.test: &#123;&quot;foo&quot;:&quot;bar&quot;,&quot;primary_key&quot;:1&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>forward：接收其他 fluentd forward 的 event</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;source&gt;</span><br><span class=\"line\">  @type forward</span><br><span class=\"line\">  port 24224</span><br><span class=\"line\">  bind 0.0.0.0</span><br><span class=\"line\">&lt;/source&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"output-配置\"><a href=\"#output-配置\" class=\"headerlink\" title=\"output 配置\"></a>output 配置</h4></li>\n<li><p><strong>file：输出 event 为文件，默认每天输出一个日志文件</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; fluent.conf &lt;&lt; &quot;EOF&quot;</span><br><span class=\"line\">&lt;source&gt;</span><br><span class=\"line\">  @type dummy</span><br><span class=\"line\">  dummy &#123;&quot;foo&quot;: &quot;bar&quot;&#125;</span><br><span class=\"line\">  tag yakir.test</span><br><span class=\"line\">  size 1</span><br><span class=\"line\">  rate 1</span><br><span class=\"line\">&lt;/source&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;match yakir.**&gt;</span><br><span class=\"line\">  @type file</span><br><span class=\"line\">  path /tmp/fluent/yakir</span><br><span class=\"line\">  compress gzip</span><br><span class=\"line\">  &lt;buffer&gt;</span><br><span class=\"line\">    timekey 1d</span><br><span class=\"line\">    timekey_use_utc true</span><br><span class=\"line\">    timekey_wait 10m</span><br><span class=\"line\">  &lt;/buffer&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"meta prompt_\">  #</span><span class=\"language-bash\">@<span class=\"built_in\">type</span> file</span></span><br><span class=\"line\"><span class=\"meta prompt_\">  #</span><span class=\"language-bash\">path /tmp/<span class=\"variable\">$&#123;tag[0]&#125;</span>/file.%Y-%m-%d-%H-%M-%S</span></span><br><span class=\"line\"><span class=\"meta prompt_\">  #</span><span class=\"language-bash\">&lt;buffer tag,time&gt;</span></span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\"> timekey 10</span></span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\"> timekey_wait 10</span></span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\"> timekey_use_utc <span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">  #</span><span class=\"language-bash\">&lt;/buffer&gt;</span></span><br><span class=\"line\">&lt;/match&gt;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">参数说明</span></span><br><span class=\"line\">path：支持 placeholder，可以在日志路径中嵌入时间，tag 和 record 中的字段值。例如：/path/to/$&#123;tag&#125;/$&#123;key1&#125;/file.%Y%m%d</span><br><span class=\"line\">append：flush 的 chuck 是否追加到已存在的文件后。默认为 false，便于文件的并行处理。</span><br><span class=\"line\">format 标签，用来规定文件内容的格式，默认值为 out_file。</span><br><span class=\"line\">inject 标签，用来为 event 增加 time 和 tag 等字段。</span><br><span class=\"line\">add_path_suffix：是否增加 path 后缀</span><br><span class=\"line\">path_suffix：path 后缀内容，默认为.log。</span><br><span class=\"line\">compress：采用什么压缩格式，默认不压缩。</span><br><span class=\"line\">recompress：是否在 buffer chunk 已经压缩的情况再次压缩，默认为 false。</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动镜像验证日志</span></span><br><span class=\"line\">docker run --rm --name fluent -v /tmp/fluentd:/fluentd/etc fluent/fluentd</span><br><span class=\"line\">docker exec -it fluent /bin/sh</span><br><span class=\"line\">tail -2 /tmp/fluent/yakir/buffer.b5e2f5e063d4389bd9304563cf7f07656.log</span><br><span class=\"line\">2022-07-04T07:42:34+00:00\tyakir.test\t&#123;&quot;foo&quot;:&quot;bar&quot;&#125;</span><br><span class=\"line\">2022-07-04T07:42:35+00:00\tyakir.test\t&#123;&quot;foo&quot;:&quot;bar&quot;&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>buffer 标签</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;buffer&gt;</span><br><span class=\"line\">  @type file</span><br><span class=\"line\">&lt;/buffer&gt;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">@<span class=\"built_in\">type</span> 值：file（存文件）、memory（存内存，默认值）</span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;buffer ARGUMENT_CHUNK_KEYS&gt;</span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">...</span></span><br><span class=\"line\">&lt;/buffer&gt;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">buffer chunk keys（buffer 已 record 的什么字段分段存放），没有配置 chunk key，所有 event 写入同一个 chunk file 直到 buffer 滚动。</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用 time 为 chunk key，按照时间对 buffer 进行分段。</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">timekey：时间跨度   timekey_wait：flush 延迟时间，用于等待迟到的数据</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">常用参数</span></span><br><span class=\"line\">timekey_use_utc：使用国际标准时间还是当地时间，默认是使用当地时间。</span><br><span class=\"line\">timekey_zone：指定时区。</span><br><span class=\"line\">chunk_limit_size：chunk 大小限制，默认 8MB。</span><br><span class=\"line\">chunk_limit_records：chunk event 条数限制。</span><br><span class=\"line\">total_limit_size：总 buffer 大小限制。</span><br><span class=\"line\">chunk_full_threshold：chunk 大小超过 chunk_limit_size * chunk_full_threshold 时会自动 flush。</span><br><span class=\"line\">queued_chunks_limit_size：限制队列中的 chunk 数目，防止频繁 flush 产生过多的 chunk。</span><br><span class=\"line\">compress：压缩格式，可使用 text 或 gzip。默认为 text。</span><br><span class=\"line\">flush_at_shutdown：关闭时候是否 flush。对于非持久化 buffer 默认值为 true，持久化 buffer 默认值为 false。</span><br><span class=\"line\">flush_interval：多长时间 flush 一次。</span><br><span class=\"line\">retry_timeout：重试 flush 的超时时间。在这个时间后不再会 retry。</span><br><span class=\"line\">retry_forever：是否永远尝试 flush。如果设置为 true 会忽略 retry_timeout 的配置。</span><br><span class=\"line\">retry_max_times：重试最大次数。</span><br><span class=\"line\">retry_type：有两个配置值：retry 时间间隔，指数级增长或者是固定周期重试。</span><br><span class=\"line\">retry_wait：每次重试等待时间。</span><br><span class=\"line\">retry_exponential_backoff_base：retry 时间指数扩大倍数。</span><br><span class=\"line\">retry_max_interval：最长 retry 时间间隔。</span><br><span class=\"line\">retry_randomize：是否随机 retry 时间间隔。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>format 标签</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;match&gt;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  </span><br><span class=\"line\">  &lt;format&gt;</span><br><span class=\"line\">    @type json</span><br><span class=\"line\">  &lt;/format&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;buffer&gt;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &lt;/buffer&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\">&lt;/match&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>forward：转发 event 到其他 fluentd 节点。配置多个 fluentd 节点时，使用负载均衡方式发送。</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;match yakir.*&gt;</span><br><span class=\"line\">  @type forward</span><br><span class=\"line\">  send_timeout 60s</span><br><span class=\"line\">  recover_wait 10s</span><br><span class=\"line\">  hard_timeout 60s</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;server&gt;</span><br><span class=\"line\">    name myserver1</span><br><span class=\"line\">    host 192.168.1.3</span><br><span class=\"line\">    port 24224</span><br><span class=\"line\">    weight 60</span><br><span class=\"line\">  &lt;/server&gt;</span><br><span class=\"line\">  &lt;server&gt;</span><br><span class=\"line\">    name myserver2</span><br><span class=\"line\">    host 192.168.1.4</span><br><span class=\"line\">    port 24224</span><br><span class=\"line\">    weight 60</span><br><span class=\"line\">  &lt;/server&gt;</span><br><span class=\"line\">  ...</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;secondary&gt;</span><br><span class=\"line\">    @type file</span><br><span class=\"line\">    path /var/log/fluent/forward-failed</span><br><span class=\"line\">  &lt;/secondary&gt;</span><br><span class=\"line\">&lt;/match&gt;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">server 标签参数说明</span></span><br><span class=\"line\">host</span><br><span class=\"line\">name</span><br><span class=\"line\">port</span><br><span class=\"line\">shared_key</span><br><span class=\"line\">username</span><br><span class=\"line\">password</span><br><span class=\"line\">standby 标记 server 为备用，只有其他 node 不可用的时候才会启用 standby 的 node</span><br><span class=\"line\">weight 负载均衡的权重配置</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>copy：多路输出，复制 event 到多个输出端</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; fluent.conf &lt;&lt; &quot;EOF&quot;</span><br><span class=\"line\">&lt;source&gt;</span><br><span class=\"line\">  @type dummy</span><br><span class=\"line\">  dummy &#123;&quot;foo&quot;: &quot;bar&quot;&#125;</span><br><span class=\"line\">  tag yakir.test</span><br><span class=\"line\">  size 1</span><br><span class=\"line\">  rate 1</span><br><span class=\"line\">&lt;/source&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;match yakir.**&gt;</span><br><span class=\"line\">  @type copy</span><br><span class=\"line\">  &lt;store&gt;</span><br><span class=\"line\">    @type file</span><br><span class=\"line\">    path /tmp/yakir/file.%Y%m%d</span><br><span class=\"line\">    compress gzip</span><br><span class=\"line\">  &lt;/store&gt;</span><br><span class=\"line\">  &lt;store ignore_error&gt;</span><br><span class=\"line\">    @type stdout</span><br><span class=\"line\">  &lt;/store&gt;</span><br><span class=\"line\">&lt;/match&gt;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">参数说明</span></span><br><span class=\"line\">copy_mode 复制模式可选值</span><br><span class=\"line\">  no_copy：每路输出共享 event。</span><br><span class=\"line\">  shallow：浅拷贝，如果不修改嵌套字段可以使用。</span><br><span class=\"line\">  deep：深拷贝，使用msgpack-ruby方式。</span><br><span class=\"line\">  marshal：深拷贝，使用marshal方式。</span><br><span class=\"line\">store 标签 ignore_error 参数：标记的 store 出现错误时，不影响其他</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>http：通过 http 请求方式发送 event，payload 格式由 format 标签决定。</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;match pattern&gt;</span><br><span class=\"line\">  @type http</span><br><span class=\"line\">  endpoint http://logserver.com:9000/api</span><br><span class=\"line\">  open_timeout 2</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;format&gt;</span><br><span class=\"line\">    @type json</span><br><span class=\"line\">  &lt;/format&gt;</span><br><span class=\"line\">  &lt;buffer&gt;</span><br><span class=\"line\">    flush_interval 10s</span><br><span class=\"line\">  &lt;/buffer&gt;</span><br><span class=\"line\">&lt;/match&gt;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用 post 方式，连接超时2s，输出格式为 json，每10s 输出一次到 endpoint。（content-type 为 application/x-ndjson）</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>stdout：标准输出，后台运行时输出到 fluentd 日志。</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;source&gt;</span><br><span class=\"line\">  @type dummy</span><br><span class=\"line\">  dummy &#123;&quot;foo&quot;: &quot;bar&quot;&#125;</span><br><span class=\"line\">  tag yakir.test</span><br><span class=\"line\">  size 1</span><br><span class=\"line\">  rate 1</span><br><span class=\"line\">&lt;/source&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;match yakir.**&gt;</span><br><span class=\"line\">  @type stdout</span><br><span class=\"line\">&lt;/match&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>第三方存储：Elasticsearch、Kafka</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">elasticsearch 关键配置</span></span><br><span class=\"line\">&lt;match yakir.logs&gt;</span><br><span class=\"line\">  @type elasticsearch</span><br><span class=\"line\">  host localhost</span><br><span class=\"line\">  port 9200</span><br><span class=\"line\">  logstash_format true</span><br><span class=\"line\">&lt;/match&gt;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">参数</span></span><br><span class=\"line\">host：单个 elasticsearch 节点地址</span><br><span class=\"line\">port：单个 elasticsearch 节点的端口号</span><br><span class=\"line\">hosts：elasticsearch 集群地址。格式为 ip1:port1,ip2:port2...</span><br><span class=\"line\">user、password：elasticsearch 的认证信息</span><br><span class=\"line\">scheme：使用 https 还是 http。默认为 http 模式</span><br><span class=\"line\">path：REST 接口路径，默认为空</span><br><span class=\"line\">index_name：index 名称</span><br><span class=\"line\">logstash_format：index 是否使用 logstash 命名方式（logstash-%Y.%m.%d），默认不启用</span><br><span class=\"line\">logstash_prefix：logstash_format 启用的时候，index 命名前缀是什么。默认为logstash</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">kafka 关键配置</span></span><br><span class=\"line\">&lt;match pattern&gt;</span><br><span class=\"line\">  @type kafka2</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">list of seed brokers</span></span><br><span class=\"line\">  brokers &lt;broker1_host&gt;:&lt;broker1_port&gt;,&lt;broker2_host&gt;:&lt;broker2_port&gt;</span><br><span class=\"line\">  use_event_time true</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">buffer settings</span></span><br><span class=\"line\">  &lt;buffer topic&gt;</span><br><span class=\"line\">    @type file</span><br><span class=\"line\">    path /var/log/td-agent/buffer/td</span><br><span class=\"line\">    flush_interval 3s</span><br><span class=\"line\">  &lt;/buffer&gt;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">data <span class=\"built_in\">type</span> settings</span></span><br><span class=\"line\">  &lt;format&gt;</span><br><span class=\"line\">    @type json</span><br><span class=\"line\">  &lt;/format&gt;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">topic settings</span></span><br><span class=\"line\">  topic_key topic</span><br><span class=\"line\">  default_topic messages</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">producer settings</span></span><br><span class=\"line\">  required_acks -1</span><br><span class=\"line\">  compression_codec gzip</span><br><span class=\"line\">&lt;/match&gt;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">参数</span></span><br><span class=\"line\">brokers：Kafka brokers 的地址和端口号</span><br><span class=\"line\">topic_key：record 中哪个 key 对应的值用作 Kafka 消息的 key</span><br><span class=\"line\">default_topic：如果没有配置 topic_key，默认使用的 topic 名字</span><br><span class=\"line\">format 标签：确定发送的数据格式</span><br><span class=\"line\">use_event_time：是否使用 fluentd event 的时间作为 Kafka 消息的时间。默认为 false。意思为使用当前时间作为发送消息的时间</span><br><span class=\"line\">required_acks：producer acks 的值</span><br><span class=\"line\">compression_codec：压缩编码方式</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>webhdfs：通过 REST 方式写入 event 到 HDFS（配合 Hadoop）</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;store&gt;</span><br><span class=\"line\">  @type webhdfs</span><br><span class=\"line\">  host 1.1.1.1</span><br><span class=\"line\">  port 50070</span><br><span class=\"line\">  path &quot;/history/access.log.%Y%m%d_%H.#&#123;Socket.gethostname&#125;.log&quot;</span><br><span class=\"line\">  &lt;buffer&gt;</span><br><span class=\"line\">      flush_interval 60s</span><br><span class=\"line\">  &lt;/buffer&gt;</span><br><span class=\"line\">&lt;/store&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"parser-配置\"><a href=\"#parser-配置\" class=\"headerlink\" title=\"parser 配置\"></a>parser 配置</h4><ul>\n<li><strong>regexp：正则表达式解析信息，可通过 time_key 指定 event 的 time 字段</strong><blockquote>\n<p>在线测试正则语法工具：<a href=\"http://fluentular.herokuapp.com/\">http://fluentular.herokuapp.com/</a></p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">关键配置</span></span><br><span class=\"line\">&lt;parse&gt;</span><br><span class=\"line\">  @type regexp</span><br><span class=\"line\">  expression /^\\[(?&lt;logtime&gt;[^\\]]*)\\] (?&lt;name&gt;[^ ]*) (?&lt;title&gt;[^ ]*) (?&lt;id&gt;\\d*)$/</span><br><span class=\"line\">  time_key logtime</span><br><span class=\"line\">  time_format %Y-%m-%d %H:%M:%S %z</span><br><span class=\"line\">  types id:integer</span><br><span class=\"line\">&lt;/parse&gt;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">数据解析</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">原日志</span></span><br><span class=\"line\">[2013-02-28 12:00:00 +0900] alice engineer 1</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">解析后</span></span><br><span class=\"line\">time:</span><br><span class=\"line\">1362020400 (2013-02-28 12:00:00 +0900)</span><br><span class=\"line\"></span><br><span class=\"line\">record:</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot; : &quot;alice&quot;,</span><br><span class=\"line\">  &quot;title&quot;: &quot;engineer&quot;,</span><br><span class=\"line\">  &quot;id&quot;   : 1</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"filter-配置\"><a href=\"#filter-配置\" class=\"headerlink\" title=\"filter 配置\"></a>filter 配置</h4><ul>\n<li><p><strong>record_transformer：修改 event 结构，增加或修改字段</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">新增字段，使用 ruby 表达式</span></span><br><span class=\"line\">cat &gt; fluent.conf &lt;&lt; &quot;EOF&quot;</span><br><span class=\"line\">&lt;source&gt;</span><br><span class=\"line\">  @type dummy</span><br><span class=\"line\">  dummy &#123;&quot;foo&quot;:&quot;bar&quot;, &quot;id1&quot;: 100, &quot;id2&quot;: 50&#125;</span><br><span class=\"line\">  tag yakir.test</span><br><span class=\"line\">  size 1</span><br><span class=\"line\">  rate 1</span><br><span class=\"line\">&lt;/source&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;filter&gt;</span><br><span class=\"line\">  @type record_transformer</span><br><span class=\"line\">  enable_ruby true</span><br><span class=\"line\">  &lt;record&gt;</span><br><span class=\"line\">    hostname &quot;#&#123;Socket.gethostname&#125;&quot;</span><br><span class=\"line\">    tag $&#123;tag&#125;</span><br><span class=\"line\">    avg $&#123;record[&quot;id1&quot;] / record[&quot;id2&quot;]&#125;</span><br><span class=\"line\">  &lt;/record&gt;</span><br><span class=\"line\">&lt;/filter&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;match yakir.**&gt;</span><br><span class=\"line\">  @type stdout</span><br><span class=\"line\">&lt;/match&gt;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动镜像，验证日志</span></span><br><span class=\"line\">docker run --rm --name fluent -v /tmp/fluentd:/fluentd/etc fluent/fluentd</span><br><span class=\"line\">2022-07-04 10:12:53.028623276 +0000 yakir.test: &#123;&quot;foo&quot;:&quot;bar&quot;,&quot;id1&quot;:100,&quot;id2&quot;:50,&quot;hostname&quot;:&quot;7d5e83c528c7&quot;,&quot;tag&quot;:&quot;yakir.test&quot;,&quot;avg&quot;:2&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改字段内容</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">关键配置</span></span><br><span class=\"line\">&lt;filter foo.bar&gt;</span><br><span class=\"line\">  @type record_transformer</span><br><span class=\"line\">  &lt;record&gt;</span><br><span class=\"line\">    message yay, $&#123;record[&quot;message&quot;]&#125;</span><br><span class=\"line\">  &lt;/record&gt;</span><br><span class=\"line\">&lt;/filter&gt;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">数据解析</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">原日志</span></span><br><span class=\"line\">&#123; &quot;message&quot;: &quot;hello world!&quot; &#125;</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">解析后</span></span><br><span class=\"line\">time:</span><br><span class=\"line\">&#123; &quot;message&quot;: &quot;yay, hello world!&quot; &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>record 标签</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置</span></span><br><span class=\"line\">&lt;record&gt;</span><br><span class=\"line\">  NEW_FIELD NEW_VALUE</span><br><span class=\"line\">&lt;/record&gt;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">参数说明</span></span><br><span class=\"line\">record：获取 record 中某些字段的内容。例如record[&quot;count&quot;]</span><br><span class=\"line\">tag：获取 tag 的内容</span><br><span class=\"line\">time：获取日志的时间戳</span><br><span class=\"line\">hostname：获取主机名字，和#&#123;Socket.gethostname&#125;作用一样</span><br><span class=\"line\">tag_parts[N]：tag 以.分隔，获取 tag 的第 N 部分</span><br><span class=\"line\">tag_prefix[N]：获取 tag 的 0-N 部分</span><br><span class=\"line\">tag_suffix[N]：获取 tag 的 N-结尾部分</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"四、DaemonSet-方式部署\"><a href=\"#四、DaemonSet-方式部署\" class=\"headerlink\" title=\"四、DaemonSet 方式部署\"></a>四、DaemonSet 方式部署</h3><img data-src=\"/posts/41fe/fluent2.png\" class>\n<h4 id=\"部署-Elasticsearch-和-Kibana\"><a href=\"#部署-Elasticsearch-和-Kibana\" class=\"headerlink\" title=\"部署 Elasticsearch 和 Kibana\"></a>部署 Elasticsearch 和 Kibana</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建日志 namespace，方便清理</span></span><br><span class=\"line\">kubectl create ns logging</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">部署 Elasticsearch（StatefulSet 和 Service，service 资源使用无头服务）</span></span><br><span class=\"line\">cat &gt; elasticsearch.yaml &lt;&lt; &quot;EOF&quot;</span><br><span class=\"line\">apiVersion: apps/v1</span><br><span class=\"line\">kind: StatefulSet</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: es</span><br><span class=\"line\">  namespace: logging</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  serviceName: elasticsearch</span><br><span class=\"line\">  replicas: 1</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      app: elasticsearch</span><br><span class=\"line\">  template:</span><br><span class=\"line\">    metadata:</span><br><span class=\"line\">      labels:</span><br><span class=\"line\">        app: elasticsearch</span><br><span class=\"line\">    spec:</span><br><span class=\"line\">      # 初始化容器，调整内核参数</span><br><span class=\"line\">      initContainers:</span><br><span class=\"line\">      - name: increase-vm-max-map</span><br><span class=\"line\">        image: busybox</span><br><span class=\"line\">        command: [&quot;sysctl&quot;, &quot;-w&quot;, &quot;vm.max_map_count=262144&quot;]</span><br><span class=\"line\">        securityContext:</span><br><span class=\"line\">          privileged: true</span><br><span class=\"line\">      - name: increase-fd-ulimit</span><br><span class=\"line\">        image: busybox</span><br><span class=\"line\">        command: [&quot;sh&quot;, &quot;-c&quot;, &quot;ulimit -n 65536&quot;]</span><br><span class=\"line\">        securityContext:</span><br><span class=\"line\">          privileged: true</span><br><span class=\"line\">      containers:</span><br><span class=\"line\">      - name: elasticsearch</span><br><span class=\"line\">        image: docker.elastic.co/elasticsearch/elasticsearch:7.6.2</span><br><span class=\"line\">        resources:</span><br><span class=\"line\">          limits:</span><br><span class=\"line\">            cpu: 1000m</span><br><span class=\"line\">          requests:</span><br><span class=\"line\">            cpu: 100m</span><br><span class=\"line\">        ports:</span><br><span class=\"line\">        - containerPort: 9200</span><br><span class=\"line\">          name: rest</span><br><span class=\"line\">          protocol: TCP</span><br><span class=\"line\">        - containerPort: 9300</span><br><span class=\"line\">          name: inter-node</span><br><span class=\"line\">          protocol: TCP</span><br><span class=\"line\">        volumeMounts:</span><br><span class=\"line\">        - name: data</span><br><span class=\"line\">          mountPath: /usr/share/elasticsearch/data</span><br><span class=\"line\">        env:</span><br><span class=\"line\">          - name: cluster.name</span><br><span class=\"line\">            value: k8s-logs</span><br><span class=\"line\">          - name: node.name</span><br><span class=\"line\">            valueFrom:</span><br><span class=\"line\">              fieldRef:</span><br><span class=\"line\">                fieldPath: metadata.name</span><br><span class=\"line\">          #多 ES 节点时注意以下配置</span><br><span class=\"line\">          - name: cluster.initial_master_nodes</span><br><span class=\"line\">            value: &quot;es-0&quot;</span><br><span class=\"line\">          - name: discovery.zen.minimum_master_nodes</span><br><span class=\"line\">            value: &quot;1&quot;</span><br><span class=\"line\">          - name: discovery.seed_hosts</span><br><span class=\"line\">            value: &quot;elasticsearch&quot;</span><br><span class=\"line\">          - name: ES_JAVA_OPTS</span><br><span class=\"line\">            value: &quot;-Xms512m -Xmx512m&quot;</span><br><span class=\"line\">          - name: network.host</span><br><span class=\"line\">            value: &quot;0.0.0.0&quot;</span><br><span class=\"line\">      # 持久化存储，线上环境建议使用 StorageClass 等存储资源对象</span><br><span class=\"line\">      volumes:</span><br><span class=\"line\">      - name: data</span><br><span class=\"line\">        emptyDir: &#123;&#125;</span><br><span class=\"line\">---</span><br><span class=\"line\">kind: Service</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: elasticsearch</span><br><span class=\"line\">  namespace: logging</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app: elasticsearch</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    app: elasticsearch</span><br><span class=\"line\"><span class=\"meta prompt_\">  #</span><span class=\"language-bash\">使用无头服务，确保 StatefulSet 中 Pod 固定 DNS 地址，如 es-0.elasticsearch.logging.svc.cluster.local</span></span><br><span class=\"line\">  clusterIP: None</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">    - port: 9200</span><br><span class=\"line\">      name: rest</span><br><span class=\"line\">    - port: 9300</span><br><span class=\"line\">      name: inter-node</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">部署 Kibana 资源</span></span><br><span class=\"line\">cat &gt; kibana.yaml &lt;&lt; &quot;EOF&quot;</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Service</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: kibana</span><br><span class=\"line\">  namespace: logging</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app: kibana</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    app: kibana</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">  - port: 5601</span><br><span class=\"line\">  type: ClusterIP</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: apps/v1</span><br><span class=\"line\">kind: Deployment</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: kibana</span><br><span class=\"line\">  namespace: logging</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app: kibana</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      app: kibana</span><br><span class=\"line\">  template:</span><br><span class=\"line\">    metadata:</span><br><span class=\"line\">      labels:</span><br><span class=\"line\">        app: kibana</span><br><span class=\"line\">    spec:</span><br><span class=\"line\">      containers:</span><br><span class=\"line\">      - name: kibana</span><br><span class=\"line\">        image: docker.elastic.co/kibana/kibana:7.6.2</span><br><span class=\"line\">        resources:</span><br><span class=\"line\">          limits:</span><br><span class=\"line\">            cpu: 1000m</span><br><span class=\"line\">          requests:</span><br><span class=\"line\">            cpu: 200m</span><br><span class=\"line\">        env:</span><br><span class=\"line\">        - name: ELASTICSEARCH_HOSTS</span><br><span class=\"line\">          value: http://elasticsearch:9200</span><br><span class=\"line\">        ports:</span><br><span class=\"line\">        - containerPort: 5601</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">部署并查看部署结果</span></span><br><span class=\"line\">kubectl apply -f elasticsearch.yaml</span><br><span class=\"line\">kubectl apply -f kibana.yaml</span><br><span class=\"line\">kubectl get pod,svc -n logging -owide</span><br><span class=\"line\">NAME                          READY   STATUS    RESTARTS   AGE     IP           NODE       NOMINATED NODE   READINESS GATES</span><br><span class=\"line\">pod/es-0                      1/1     Running   0          4h54m   172.17.0.6   minikube   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">pod/kibana-6c84594848-mdp76   1/1     Running   0          158m    172.17.0.5   minikube   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                    TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)             AGE     SELECTOR</span><br><span class=\"line\">service/elasticsearch   ClusterIP   None           &lt;none&gt;        9200/TCP,9300/TCP   4h50m   app=elasticsearch</span><br><span class=\"line\">service/kibana          ClusterIP   10.106.67.32   &lt;none&gt;        5601/TCP            158m    app=kibana</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">访问验证</span></span><br><span class=\"line\">kubectl port-forward services/elasticsearch -n logging --address 127.0.0.1 9200:9200</span><br><span class=\"line\">curl http://127.0.0.1:9200/_cluster/state?pretty</span><br><span class=\"line\">curl 10.106.67.32:5601/app/kibana -I</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"部署-Fluentd\"><a href=\"#部署-Fluentd\" class=\"headerlink\" title=\"部署 Fluentd\"></a>部署 Fluentd</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">源码方式</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">git <span class=\"built_in\">clone</span> https://github.com/fluent/fluentd-kubernetes-daemonset.git</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">自定义安装方式</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">Fluentd 配置文件</span></span><br><span class=\"line\">cat &gt; fluentd-cfg.yaml &lt;&lt; &quot;EOF&quot;</span><br><span class=\"line\">kind: ConfigMap</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: fluentd-config</span><br><span class=\"line\">  namespace: logging</span><br><span class=\"line\">data:</span><br><span class=\"line\">  system.conf: |-</span><br><span class=\"line\">    &lt;system&gt;</span><br><span class=\"line\">      root_dir /tmp/fluentd-buffers/</span><br><span class=\"line\">    &lt;/system&gt;</span><br><span class=\"line\">  containers.input.conf: |-</span><br><span class=\"line\">    &lt;source&gt;</span><br><span class=\"line\">      @id fluentd-containers.log</span><br><span class=\"line\">      @type tail                              # Fluentd 内置的输入方式，其原理是不停地从源文件中获取新的日志。</span><br><span class=\"line\">      path /var/log/containers/*.log          # 挂载的服务器Docker容器日志地址</span><br><span class=\"line\">      pos_file /var/log/es-containers.log.pos</span><br><span class=\"line\">      tag raw.kubernetes.*                    # 设置日志标签</span><br><span class=\"line\">      read_from_head true</span><br><span class=\"line\">      &lt;parse&gt;                                 # 多行格式化成JSON</span><br><span class=\"line\">        @type multi_format                    # 使用 multi-format-parser 解析器插件</span><br><span class=\"line\">        &lt;pattern&gt;</span><br><span class=\"line\">          format json                         # JSON解析器</span><br><span class=\"line\">          time_key time                       # 指定事件时间的时间字段</span><br><span class=\"line\">          time_format %Y-%m-%dT%H:%M:%S.%NZ   # 时间格式</span><br><span class=\"line\">        &lt;/pattern&gt;</span><br><span class=\"line\">        &lt;pattern&gt;</span><br><span class=\"line\">          format /^(?&lt;time&gt;.+) (?&lt;stream&gt;stdout|stderr) [^ ]* (?&lt;log&gt;.*)$/</span><br><span class=\"line\">          time_format %Y-%m-%dT%H:%M:%S.%N%:z</span><br><span class=\"line\">        &lt;/pattern&gt;</span><br><span class=\"line\">      &lt;/parse&gt;</span><br><span class=\"line\">    &lt;/source&gt;</span><br><span class=\"line\">    # 在日志输出中检测异常，并将其作为一条日志转发</span><br><span class=\"line\">    # https://github.com/GoogleCloudPlatform/fluent-plugin-detect-exceptions</span><br><span class=\"line\">    &lt;match raw.kubernetes.**&gt;           # 匹配tag为raw.kubernetes.**日志信息</span><br><span class=\"line\">      @id raw.kubernetes</span><br><span class=\"line\">      @type detect_exceptions           # 使用detect-exceptions插件处理异常栈信息</span><br><span class=\"line\">      remove_tag_prefix raw             # 移除 raw 前缀</span><br><span class=\"line\">      message log</span><br><span class=\"line\">      stream stream</span><br><span class=\"line\">      multiline_flush_interval 5</span><br><span class=\"line\">      max_bytes 500000</span><br><span class=\"line\">      max_lines 1000</span><br><span class=\"line\">    &lt;/match&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;filter **&gt;  # 拼接日志</span><br><span class=\"line\">      @id filter_concat</span><br><span class=\"line\">      @type concat                # Fluentd Filter 插件，用于连接多个事件中分隔的多行日志。</span><br><span class=\"line\">      key message</span><br><span class=\"line\">      multiline_end_regexp /\\n$/  # 以换行符“\\n”拼接</span><br><span class=\"line\">      separator &quot;&quot;</span><br><span class=\"line\">    &lt;/filter&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 添加 Kubernetes metadata 数据</span><br><span class=\"line\">    &lt;filter kubernetes.**&gt;</span><br><span class=\"line\">      @id filter_kubernetes_metadata</span><br><span class=\"line\">      @type kubernetes_metadata</span><br><span class=\"line\">    &lt;/filter&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 修复 ES 中的 JSON 字段</span><br><span class=\"line\">    # 插件地址：https://github.com/repeatedly/fluent-plugin-multi-format-parser</span><br><span class=\"line\">    &lt;filter kubernetes.**&gt;</span><br><span class=\"line\">      @id filter_parser</span><br><span class=\"line\">      @type parser                # multi-format-parser多格式解析器插件</span><br><span class=\"line\">      key_name log                # 在要解析的记录中指定字段名称。</span><br><span class=\"line\">      reserve_data true           # 在解析结果中保留原始键值对。</span><br><span class=\"line\">      remove_key_name_field true  # key_name 解析成功后删除字段。</span><br><span class=\"line\">      &lt;parse&gt;</span><br><span class=\"line\">        @type multi_format</span><br><span class=\"line\">        &lt;pattern&gt;</span><br><span class=\"line\">          format json</span><br><span class=\"line\">        &lt;/pattern&gt;</span><br><span class=\"line\">        &lt;pattern&gt;</span><br><span class=\"line\">          format none</span><br><span class=\"line\">        &lt;/pattern&gt;</span><br><span class=\"line\">      &lt;/parse&gt;</span><br><span class=\"line\">    &lt;/filter&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 删除一些多余的属性</span><br><span class=\"line\">    &lt;filter kubernetes.**&gt;</span><br><span class=\"line\">      @type record_transformer</span><br><span class=\"line\">      remove_keys $.docker.container_id,$.kubernetes.container_image_id,$.kubernetes.pod_id,$.kubernetes.namespace_id,$.kubernetes.master_url,$.kubernetes.labels.pod-template-hash</span><br><span class=\"line\">    &lt;/filter&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 只保留具有logging=true标签的Pod日志</span><br><span class=\"line\">    &lt;filter kubernetes.**&gt;</span><br><span class=\"line\">      @id filter_log</span><br><span class=\"line\">      @type grep</span><br><span class=\"line\">      &lt;regexp&gt;</span><br><span class=\"line\">        key $.kubernetes.labels.logging</span><br><span class=\"line\">        pattern ^true$</span><br><span class=\"line\">      &lt;/regexp&gt;</span><br><span class=\"line\">    &lt;/filter&gt;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">  #</span><span class=\"language-bash\"><span class=\"comment\">##### 监听配置，一般用于日志聚合用 ######</span></span></span><br><span class=\"line\">  forward.input.conf: |-</span><br><span class=\"line\">    # 监听通过TCP发送的消息</span><br><span class=\"line\">    &lt;source&gt;</span><br><span class=\"line\">      @id forward</span><br><span class=\"line\">      @type forward</span><br><span class=\"line\">    &lt;/source&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  output.conf: |-</span><br><span class=\"line\">    &lt;match **&gt;</span><br><span class=\"line\">      @id elasticsearch</span><br><span class=\"line\">      @type elasticsearch</span><br><span class=\"line\">      @log_level info</span><br><span class=\"line\">      include_tag_key true</span><br><span class=\"line\">      host elasticsearch</span><br><span class=\"line\">      port 9200</span><br><span class=\"line\">      logstash_format true</span><br><span class=\"line\">      logstash_prefix k8s  # 设置 index 前缀为 k8s</span><br><span class=\"line\">      request_timeout    30s</span><br><span class=\"line\">      &lt;buffer&gt;</span><br><span class=\"line\">        @type file</span><br><span class=\"line\">        path /var/log/fluentd-buffers/kubernetes.system.buffer</span><br><span class=\"line\">        flush_mode interval</span><br><span class=\"line\">        retry_type exponential_backoff</span><br><span class=\"line\">        flush_thread_count 2</span><br><span class=\"line\">        flush_interval 5s</span><br><span class=\"line\">        retry_forever</span><br><span class=\"line\">        retry_max_interval 30</span><br><span class=\"line\">        chunk_limit_size 2M</span><br><span class=\"line\">        queue_limit_length 8</span><br><span class=\"line\">        overflow_action block</span><br><span class=\"line\">      &lt;/buffer&gt;</span><br><span class=\"line\">    &lt;/match&gt;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">cat &gt; fluentd-daemonset.yaml &lt;&lt; &quot;EOF&quot;</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: ServiceAccount</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: fluentd-es</span><br><span class=\"line\">  namespace: logging</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    k8s-app: fluentd-es</span><br><span class=\"line\">    kubernetes.io/cluster-service: &quot;true&quot;</span><br><span class=\"line\">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class=\"line\">---</span><br><span class=\"line\">kind: ClusterRole</span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: fluentd-es</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    k8s-app: fluentd-es</span><br><span class=\"line\">    kubernetes.io/cluster-service: &quot;true&quot;</span><br><span class=\"line\">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class=\"line\">rules:</span><br><span class=\"line\">- apiGroups:</span><br><span class=\"line\">  - &quot;&quot;</span><br><span class=\"line\">  resources:</span><br><span class=\"line\">  - &quot;namespaces&quot;</span><br><span class=\"line\">  - &quot;pods&quot;</span><br><span class=\"line\">  verbs:</span><br><span class=\"line\">  - &quot;get&quot;</span><br><span class=\"line\">  - &quot;watch&quot;</span><br><span class=\"line\">  - &quot;list&quot;</span><br><span class=\"line\">---</span><br><span class=\"line\">kind: ClusterRoleBinding</span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: fluentd-es</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    k8s-app: fluentd-es</span><br><span class=\"line\">    kubernetes.io/cluster-service: &quot;true&quot;</span><br><span class=\"line\">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class=\"line\">subjects:</span><br><span class=\"line\">- kind: ServiceAccount</span><br><span class=\"line\">  name: fluentd-es</span><br><span class=\"line\">  namespace: logging</span><br><span class=\"line\">  apiGroup: &quot;&quot;</span><br><span class=\"line\">roleRef:</span><br><span class=\"line\">  kind: ClusterRole</span><br><span class=\"line\">  name: fluentd-es</span><br><span class=\"line\">  apiGroup: &quot;&quot;</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: apps/v1</span><br><span class=\"line\">kind: DaemonSet</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: fluentd-es</span><br><span class=\"line\">  namespace: logging</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    k8s-app: fluentd-es</span><br><span class=\"line\">    kubernetes.io/cluster-service: &quot;true&quot;</span><br><span class=\"line\">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      k8s-app: fluentd-es</span><br><span class=\"line\">  template:</span><br><span class=\"line\">    metadata:</span><br><span class=\"line\">      labels:</span><br><span class=\"line\">        k8s-app: fluentd-es</span><br><span class=\"line\">        kubernetes.io/cluster-service: &quot;true&quot;</span><br><span class=\"line\">      # 此注释确保如果节点被驱逐，fluentd不会被驱逐，支持关键的基于 pod 注释的优先级方案。</span><br><span class=\"line\">      annotations:</span><br><span class=\"line\">        priorityClassName: system-cluster-critical</span><br><span class=\"line\">    spec:</span><br><span class=\"line\">      serviceAccountName: fluentd-es</span><br><span class=\"line\">      containers:</span><br><span class=\"line\">      - name: fluentd-es</span><br><span class=\"line\">        image: quay.io/fluentd_elasticsearch/fluentd:v3.0.1</span><br><span class=\"line\">        #image: fluent/fluentd-kubernetes-daemonset:v1.14.6-debian-elasticsearch7-1.1</span><br><span class=\"line\">        env:</span><br><span class=\"line\">        - name: FLUENTD_ARGS</span><br><span class=\"line\">          value: --no-supervisor -q</span><br><span class=\"line\">        resources:</span><br><span class=\"line\">          limits:</span><br><span class=\"line\">            memory: 500Mi</span><br><span class=\"line\">          requests:</span><br><span class=\"line\">            cpu: 100m</span><br><span class=\"line\">            memory: 200Mi</span><br><span class=\"line\">        volumeMounts:</span><br><span class=\"line\">        - name: varlog</span><br><span class=\"line\">          mountPath: /var/log</span><br><span class=\"line\">        - name: varlibdockercontainers</span><br><span class=\"line\">          mountPath: /var/lib/docker/containers</span><br><span class=\"line\">          readOnly: true</span><br><span class=\"line\">        - name: config-volume</span><br><span class=\"line\">          mountPath: /etc/fluent/config.d</span><br><span class=\"line\">      # 打上 master 节点污点，收集 master 节点</span><br><span class=\"line\">      tolerations:</span><br><span class=\"line\">      - operator: Exists</span><br><span class=\"line\">      terminationGracePeriodSeconds: 30</span><br><span class=\"line\">      # 挂载需要收集日志的目录</span><br><span class=\"line\">      volumes:</span><br><span class=\"line\">      - name: varlog</span><br><span class=\"line\">        hostPath:</span><br><span class=\"line\">          path: /var/log</span><br><span class=\"line\">      - name: varlibdockercontainers</span><br><span class=\"line\">        hostPath:</span><br><span class=\"line\">          path: /var/lib/docker/containers</span><br><span class=\"line\">      - name: config-volume</span><br><span class=\"line\">        configMap:</span><br><span class=\"line\">          name: fluentd-config</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">部署并查看部署结果</span></span><br><span class=\"line\">kubectl apply -f fluentd-cfg.yaml</span><br><span class=\"line\">kubectl apply -f fluentd-daemonset.yaml</span><br><span class=\"line\">kubectl get pod -n logging -owide</span><br><span class=\"line\">NAME                          READY   STATUS    RESTARTS        AGE     IP           NODE       NOMINATED NODE   READINESS GATES</span><br><span class=\"line\">pod/fluentd-es-cfdcx          1/1     Running   0               91m     172.17.0.7   minikube   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"部署测试应用，输出日志容器\"><a href=\"#部署测试应用，输出日志容器\" class=\"headerlink\" title=\"部署测试应用，输出日志容器\"></a>部署测试应用，输出日志容器</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">直接标准输出日志容器</span></span><br><span class=\"line\">cat &gt; stdin.yaml &lt;&lt; &quot;EOF&quot;</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Pod</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: counter1</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    # 配置该标签，日志才能进行收集</span><br><span class=\"line\">    logging: &quot;true&quot;</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  containers:</span><br><span class=\"line\">    - image: busybox</span><br><span class=\"line\">      args: [&quot;/bin/sh&quot;,&quot;-c&quot;, &#x27;i=0; while true; do echo &quot;$i: $(date)&quot;; i=$((i+1)); sleep 5; done&#x27;]</span><br><span class=\"line\">      name: counter</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">sidecar 方式获取输出到文件的容器日志</span></span><br><span class=\"line\">cat &gt; sidecar.yaml &lt;&lt; &quot;EOF&quot;</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Pod</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: counter2</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    logging: &quot;true&quot;</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  containers:</span><br><span class=\"line\">  - name: counter2</span><br><span class=\"line\">    image: busybox</span><br><span class=\"line\">    args:</span><br><span class=\"line\">    - /bin/sh</span><br><span class=\"line\">    - -c</span><br><span class=\"line\">    - &gt;</span><br><span class=\"line\">      i=0;</span><br><span class=\"line\">      while true;</span><br><span class=\"line\">      do</span><br><span class=\"line\">        echo &quot;$i: $(date)&quot; &gt;&gt; /var/log/1.log;</span><br><span class=\"line\">        echo &quot;$(date) INFO $i&quot; &gt;&gt; /var/log/2.log;</span><br><span class=\"line\">        i=$((i+1));</span><br><span class=\"line\">        sleep 3;</span><br><span class=\"line\">      done</span><br><span class=\"line\">    volumeMounts:</span><br><span class=\"line\">    - name: varlog</span><br><span class=\"line\">      mountPath: /var/log</span><br><span class=\"line\">  - name: count-log-1</span><br><span class=\"line\">    image: busybox</span><br><span class=\"line\">    args: [/bin/sh, -c, &#x27;tail -n 1 -f /var/log/1.log&#x27;]</span><br><span class=\"line\">    volumeMounts:</span><br><span class=\"line\">    - name: varlog</span><br><span class=\"line\">      mountPath: /var/log</span><br><span class=\"line\">  - name: count-log-2</span><br><span class=\"line\">    image: busybox</span><br><span class=\"line\">    args: [/bin/sh, -c, &#x27;tail -n 1 -f /var/log/2.log&#x27;]</span><br><span class=\"line\">    volumeMounts:</span><br><span class=\"line\">    - name: varlog</span><br><span class=\"line\">      mountPath: /var/log</span><br><span class=\"line\">  restartPolicy: Never</span><br><span class=\"line\">  volumes:</span><br><span class=\"line\">  - name: varlog</span><br><span class=\"line\">    emptyDir: &#123;&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">获取日志方式：kubectl logs counter2 count-log-2 -f --<span class=\"built_in\">tail</span> 3</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">输出 JSON 格式日志，用于分析</span></span><br><span class=\"line\">cat &gt; dummylogs.yaml &lt;&lt; &quot;EOF&quot;</span><br><span class=\"line\">apiVersion: apps/v1</span><br><span class=\"line\">kind: Deployment</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: dummylogs</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  replicas: 1</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      app: dummylogs</span><br><span class=\"line\">  template:</span><br><span class=\"line\">    metadata:</span><br><span class=\"line\">      labels:</span><br><span class=\"line\">        app: dummylogs</span><br><span class=\"line\">        logging: &quot;true&quot;  # 要采集日志需要加上该标签</span><br><span class=\"line\">    spec:</span><br><span class=\"line\">      containers:</span><br><span class=\"line\">      - name: dummy</span><br><span class=\"line\">        image: cnych/dummylogs:latest</span><br><span class=\"line\">        args:</span><br><span class=\"line\">        - msg-processor</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: apps/v1</span><br><span class=\"line\">kind: Deployment</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: dummylogs2</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  replicas: 1</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      app: dummylogs2</span><br><span class=\"line\">  template:</span><br><span class=\"line\">    metadata:</span><br><span class=\"line\">      labels:</span><br><span class=\"line\">        app: dummylogs2</span><br><span class=\"line\">        logging: &quot;true&quot;  # 要采集日志需要加上该标签</span><br><span class=\"line\">    spec:</span><br><span class=\"line\">      containers:</span><br><span class=\"line\">      - name: dummy</span><br><span class=\"line\">        image: cnych/dummylogs:latest</span><br><span class=\"line\">        args:</span><br><span class=\"line\">        - msg-receiver-api</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">部署</span></span><br><span class=\"line\">kubectl apply -f counter.yaml</span><br><span class=\"line\">kubectl apply -f dummylogs.yaml</span><br></pre></td></tr></table></figure>\n<h4 id=\"Kibana-amp-Elasticsearch-查询数据验证\"><a href=\"#Kibana-amp-Elasticsearch-查询数据验证\" class=\"headerlink\" title=\"Kibana  &amp; Elasticsearch 查询数据验证\"></a>Kibana  &amp; Elasticsearch 查询数据验证</h4><ul>\n<li><p>暴露 Kibana  &amp; Elasticsearch 服务</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl port-forward services/kibana -n logging --address 127.0.0.1 5601:5601</span><br><span class=\"line\">kubectl port-forward services/elasticsearch -n logging --address 127.0.0.1 9200:9200</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>访问验证</p>\n</li>\n</ul>\n<img data-src=\"/posts/41fe/fluent3.png\" class>\n<img data-src=\"/posts/41fe/fluent4.png\" class>\n\n<ul>\n<li>Kibana 图表聚合展示<h4 id=\"日志告警功能\"><a href=\"#日志告警功能\" class=\"headerlink\" title=\"日志告警功能\"></a>日志告警功能</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; elastalert.yaml &lt;&lt; &quot;EOF&quot;</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: ConfigMap</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: elastalert-config</span><br><span class=\"line\">  namespace: logging</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app: elastalert</span><br><span class=\"line\">data:</span><br><span class=\"line\">  elastalert_config: |-</span><br><span class=\"line\">    ---</span><br><span class=\"line\">    rules_folder: /opt/rules       # 指定规则的目录</span><br><span class=\"line\">    scan_subdirectories: false</span><br><span class=\"line\">    run_every:                     # 多久从 ES 中查询一次</span><br><span class=\"line\">      minutes: 1</span><br><span class=\"line\">    buffer_time:</span><br><span class=\"line\">      minutes: 15</span><br><span class=\"line\">    es_host: elasticsearch</span><br><span class=\"line\">    es_port: 9200</span><br><span class=\"line\">    writeback_index: elastalert</span><br><span class=\"line\">    use_ssl: False</span><br><span class=\"line\">    verify_certs: True</span><br><span class=\"line\">    alert_time_limit:             # 失败重试限制</span><br><span class=\"line\">      minutes: 720</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: ConfigMap</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: elastalert-rules</span><br><span class=\"line\">  namespace: logging</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app: elastalert</span><br><span class=\"line\">data:</span><br><span class=\"line\">  rule_config.yaml: |-</span><br><span class=\"line\">    name: dummylogs error     # 规则名字，唯一值</span><br><span class=\"line\">    es_host: elasticsearch</span><br><span class=\"line\">    es_port: 9200</span><br><span class=\"line\">    type: any                 # 报警类型</span><br><span class=\"line\">    index: k8s-*              # es索引</span><br><span class=\"line\">    filter:                   # 过滤</span><br><span class=\"line\">    - query:</span><br><span class=\"line\">        query_string:</span><br><span class=\"line\">          query: &quot;LOGLEVEL:ERROR&quot;  # 报警条件</span><br><span class=\"line\">    alert:                         # 报警类型</span><br><span class=\"line\">    - &quot;email&quot;</span><br><span class=\"line\">    smtp_host: 127.0.0.1</span><br><span class=\"line\">    smtp_port: 587</span><br><span class=\"line\">    smtp_auth_file: /opt/auth/smtp_auth_file.yaml</span><br><span class=\"line\">    email_reply_to: xxx@gmail.com</span><br><span class=\"line\">    from_addr: xxx@gmail.com</span><br><span class=\"line\">    email:                  # 接受邮箱</span><br><span class=\"line\">    - &quot;xxx@gmail.com&quot;</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: apps/v1</span><br><span class=\"line\">kind: Deployment</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: elastalert</span><br><span class=\"line\">  namespace: logging</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app: elastalert</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      app: elastalert</span><br><span class=\"line\">  template:</span><br><span class=\"line\">    metadata:</span><br><span class=\"line\">      labels:</span><br><span class=\"line\">        app: elastalert</span><br><span class=\"line\">    spec:</span><br><span class=\"line\">      containers:</span><br><span class=\"line\">      - name: elastalert</span><br><span class=\"line\">        image: jertel/elastalert-docker:0.2.4</span><br><span class=\"line\">        imagePullPolicy: IfNotPresent</span><br><span class=\"line\">        volumeMounts:</span><br><span class=\"line\">        - name: config</span><br><span class=\"line\">          mountPath: /opt/config</span><br><span class=\"line\">        - name: rules</span><br><span class=\"line\">          mountPath: /opt/rules</span><br><span class=\"line\">        - name: auth</span><br><span class=\"line\">          mountPath: /opt/auth</span><br><span class=\"line\">        resources:</span><br><span class=\"line\">          limits:</span><br><span class=\"line\">            cpu: 50m</span><br><span class=\"line\">            memory: 256Mi</span><br><span class=\"line\">          requests:</span><br><span class=\"line\">            cpu: 50m</span><br><span class=\"line\">            memory: 256Mi</span><br><span class=\"line\">      volumes:</span><br><span class=\"line\">      - name: auth</span><br><span class=\"line\">        secret:</span><br><span class=\"line\">          secretName: smtp-auth</span><br><span class=\"line\">      - name: rules</span><br><span class=\"line\">        configMap:</span><br><span class=\"line\">          name: elastalert-rules</span><br><span class=\"line\">      - name: config</span><br><span class=\"line\">        configMap:</span><br><span class=\"line\">          name: elastalert-config</span><br><span class=\"line\">          items:</span><br><span class=\"line\">          - key: elastalert_config</span><br><span class=\"line\">            path: elastalert_config.yaml</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">邮箱认证信息</span></span><br><span class=\"line\">cat &gt; smtp_auth_file.yaml &lt;&lt; EOF</span><br><span class=\"line\">user: &quot;xxxxx@gmail.com&quot;</span><br><span class=\"line\">password: &quot;123xxx&quot;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">部署验证</span></span><br><span class=\"line\">kubectl create secret generic smtp-auth --from-file=smtp_auth_file.yaml -n logging</span><br><span class=\"line\">kubectl apply -f elastalert.yaml</span><br><span class=\"line\">kubectl get pods -n logging -l app=elastalert</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">查看 Kibana 是否生成对应索引</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"五、fluentd-operator-方式部署\"><a href=\"#五、fluentd-operator-方式部署\" class=\"headerlink\" title=\"五、fluentd-operator 方式部署\"></a>五、fluentd-operator 方式部署</h3><h4 id=\"CRD-资源\"><a href=\"#CRD-资源\" class=\"headerlink\" title=\"CRD 资源\"></a>CRD 资源</h4><p><strong>fluentbit.fluent.io 资源</strong></p>\n<ul>\n<li>FluentBit：定义 Fluent Bit 属性，如镜像版本、污点、亲和性等参数。</li>\n<li>ClusterFluentBitConfig：定义 Fluent Bit 的配置文件。</li>\n<li>ClusterInput：：定义 Fluent Bit 的 input 插件。</li>\n<li>ClusterFilter：：定义 Fluent Bit 的 filter 插件。</li>\n<li>ClusterParser：定义 Fluent Bit 的 parser 插件。</li>\n<li>ClusterOutput：定义 Fluent Bit 的 output 插件。</li>\n</ul>\n<p><strong>fluentd.fluent.io 资源</strong></p>\n<ul>\n<li>Fluentd：定义 Fluentd 属性，如镜像版本、污点、亲和性等参数。</li>\n<li>FluentdConfig：定义 Fluentd namespace 级别配置文件。</li>\n<li>ClusterFluentdConfig：定义 Fluentd 集群级别配置文件。</li>\n<li>Filter：定义 Fluentd namespace 级别的 filter 插件。</li>\n<li>ClusterFilter：定义 Fluentd 集群级别的 filter 插件。</li>\n<li>Output：定义 Fluentd namespace 级别的 output 插件。</li>\n<li>ClusterOutput：定义 Fluentd 集群级别的 output 插件。</li>\n</ul>\n<h4 id=\"部署-CRD-资源与-fluent-operator\"><a href=\"#部署-CRD-资源与-fluent-operator\" class=\"headerlink\" title=\"部署 CRD 资源与 fluent-operator\"></a>部署 CRD 资源与 fluent-operator</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下载源码，创建 CRD 资源与部署 fluent-operator</span></span><br><span class=\"line\">git clone https://github.com/fluent/fluent-operator</span><br><span class=\"line\">cd fluent-operator &amp;&amp; kubectl apply -f manifests/setup/setup.yaml</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">验证资源</span></span><br><span class=\"line\">kubectl get pod,crd -n fluent</span><br><span class=\"line\">NAME                                   READY   STATUS    RESTARTS        AGE</span><br><span class=\"line\">pod/fluent-operator-86858cfc87-cg4ct   1/1     Running   1 (5h20m ago)   22h</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                                                                                        CREATED AT</span><br><span class=\"line\">customresourcedefinition.apiextensions.k8s.io/clusterfilters.fluentbit.fluent.io            2022-07-05T07:45:26Z</span><br><span class=\"line\">customresourcedefinition.apiextensions.k8s.io/clusterfilters.fluentd.fluent.io              2022-07-05T07:45:26Z</span><br><span class=\"line\">customresourcedefinition.apiextensions.k8s.io/clusterfluentbitconfigs.fluentbit.fluent.io   2022-07-05T07:45:26Z</span><br><span class=\"line\">customresourcedefinition.apiextensions.k8s.io/clusterfluentdconfigs.fluentd.fluent.io       2022-07-05T07:45:26Z</span><br><span class=\"line\">customresourcedefinition.apiextensions.k8s.io/clusterinputs.fluentbit.fluent.io             2022-07-05T07:45:26Z</span><br><span class=\"line\">customresourcedefinition.apiextensions.k8s.io/clusteroutputs.fluentbit.fluent.io            2022-07-05T07:45:26Z</span><br><span class=\"line\">customresourcedefinition.apiextensions.k8s.io/clusteroutputs.fluentd.fluent.io              2022-07-05T07:45:26Z</span><br><span class=\"line\">customresourcedefinition.apiextensions.k8s.io/clusterparsers.fluentbit.fluent.io            2022-07-05T07:45:26Z</span><br><span class=\"line\">customresourcedefinition.apiextensions.k8s.io/filters.fluentd.fluent.io                     2022-07-05T07:45:27Z</span><br><span class=\"line\">customresourcedefinition.apiextensions.k8s.io/fluentbits.fluentbit.fluent.io                2022-07-05T07:45:27Z</span><br><span class=\"line\">customresourcedefinition.apiextensions.k8s.io/fluentdconfigs.fluentd.fluent.io              2022-07-05T07:45:27Z</span><br><span class=\"line\">customresourcedefinition.apiextensions.k8s.io/fluentds.fluentd.fluent.io                    2022-07-05T07:45:27Z</span><br><span class=\"line\">customresourcedefinition.apiextensions.k8s.io/outputs.fluentd.fluent.io                     2022-07-05T07:45:28Z</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Fluent-Bit-Only-模式\"><a href=\"#Fluent-Bit-Only-模式\" class=\"headerlink\" title=\"Fluent Bit Only 模式\"></a>Fluent Bit Only 模式</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">部署 Fluent Bit 收集日志</span></span><br><span class=\"line\">cat &gt; fluent-bit.yaml &lt;&lt; &quot;EOF&quot;</span><br><span class=\"line\">apiVersion: fluentbit.fluent.io/v1alpha2</span><br><span class=\"line\">kind: FluentBit</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: fluent-bit</span><br><span class=\"line\">  namespace: fluent</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app.kubernetes.io/name: fluent-bit</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  image: kubesphere/fluent-bit:v1.8.11</span><br><span class=\"line\">  positionDB:</span><br><span class=\"line\">    hostPath:</span><br><span class=\"line\">      path: /var/lib/fluent-bit/</span><br><span class=\"line\">  resources:</span><br><span class=\"line\">    requests:</span><br><span class=\"line\">      cpu: 10m</span><br><span class=\"line\">      memory: 25Mi</span><br><span class=\"line\">    limits:</span><br><span class=\"line\">      cpu: 500m</span><br><span class=\"line\">      memory: 200Mi</span><br><span class=\"line\">  fluentBitConfigName: fluent-bit-config</span><br><span class=\"line\">  tolerations:</span><br><span class=\"line\">    - operator: Exists</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: fluentbit.fluent.io/v1alpha2</span><br><span class=\"line\">kind: ClusterFluentBitConfig</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: fluent-bit-config</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app.kubernetes.io/name: fluent-bit</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  service:</span><br><span class=\"line\">    parsersFile: parsers.conf</span><br><span class=\"line\">  inputSelector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      fluentbit.fluent.io/enabled: &quot;true&quot;</span><br><span class=\"line\">      fluentbit.fluent.io/mode: &quot;k8s&quot;</span><br><span class=\"line\">  filterSelector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      fluentbit.fluent.io/enabled: &quot;true&quot;</span><br><span class=\"line\">      fluentbit.fluent.io/mode: &quot;k8s&quot;</span><br><span class=\"line\">  outputSelector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      fluentbit.fluent.io/enabled: &quot;true&quot;</span><br><span class=\"line\">      fluentbit.fluent.io/mode: &quot;k8s&quot;</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: fluentbit.fluent.io/v1alpha2</span><br><span class=\"line\">kind: ClusterInput</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: tail</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    fluentbit.fluent.io/enabled: &quot;true&quot;</span><br><span class=\"line\">    fluentbit.fluent.io/mode: &quot;k8s&quot;</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  tail:</span><br><span class=\"line\">    tag: kube.*</span><br><span class=\"line\">    path: /var/log/containers/*.log</span><br><span class=\"line\">    parser: docker</span><br><span class=\"line\">    refreshIntervalSeconds: 10</span><br><span class=\"line\">    memBufLimit: 5MB</span><br><span class=\"line\">    skipLongLines: true</span><br><span class=\"line\">    db: /fluent-bit/tail/pos.db</span><br><span class=\"line\">    dbSync: Normal</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: fluentbit.fluent.io/v1alpha2</span><br><span class=\"line\">kind: ClusterOutput</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: es</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    fluentbit.fluent.io/enabled: &quot;true&quot;</span><br><span class=\"line\">    fluentbit.fluent.io/mode: &quot;k8s&quot;</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  matchRegex: (?:kube|service)\\.(.*)</span><br><span class=\"line\">  es:</span><br><span class=\"line\">    host: elasticsearch</span><br><span class=\"line\">    port: 9200</span><br><span class=\"line\">    generateID: true</span><br><span class=\"line\">    logstashPrefix: fluent-log-fb-only</span><br><span class=\"line\">    logstashFormat: true</span><br><span class=\"line\">    timeKey: &quot;@timestamp&quot;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">需要先部署最后端日志 output 层 elasticsearch 资源</span></span><br><span class=\"line\">kubectl apply -f elasticsearch.yaml</span><br><span class=\"line\">kubectl apply -f fluent-bit.yaml</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看部署资源</span></span><br><span class=\"line\">kubectl get pod,svc -n fluent</span><br><span class=\"line\">NAME                                   READY   STATUS    RESTARTS      AGE</span><br><span class=\"line\">pod/es-0                               1/1     Running   1 (56m ago)   17h</span><br><span class=\"line\">pod/fluent-bit-rjqsd                   1/1     Running   0             2m34s</span><br><span class=\"line\">pod/fluent-operator-86858cfc87-cg4ct   1/1     Running   1 (56m ago)   17h</span><br><span class=\"line\">NAME                    TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)             AGE</span><br><span class=\"line\">service/elasticsearch   ClusterIP   None         &lt;none&gt;        9200/TCP,9300/TCP   17h</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">请求 Elasticsearch 搜索验证日志内容</span></span><br><span class=\"line\">kubectl port-forward services/elasticsearch -n fluent --address 127.0.0.1 9200:9200</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">查看所有索引</span></span><br><span class=\"line\">curl &quot;127.0.0.1:9200/_cat/indices?pretty&quot;</span><br><span class=\"line\">yellow open fluent-log-fb-only-2022.07.06 lLmstFnwQLa89Jb7TFe-0Q 1 1 152 0 155.2kb 155.2kb </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">查看索引所有文档</span></span><br><span class=\"line\">curl &quot;127.0.0.1:9200/fluent-log-fb-only-2022.07.06/_search?pretty&quot;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">根据文档 ID 搜索具体日志</span></span><br><span class=\"line\">curl &quot;127.0.0.1:9200/fluent-log-fb-only-2022.07.06/_doc/b641529e-255c-f260-f911-f7d00d84e3fe?pretty&quot;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;_index&quot; : &quot;fluent-log-fb-only-2022.07.06&quot;,</span><br><span class=\"line\">  &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class=\"line\">  &quot;_id&quot; : &quot;b641529e-255c-f260-f911-f7d00d84e3fe&quot;,</span><br><span class=\"line\">  &quot;_version&quot; : 1,</span><br><span class=\"line\">  &quot;_seq_no&quot; : 94,</span><br><span class=\"line\">  &quot;_primary_term&quot; : 1,</span><br><span class=\"line\">  &quot;found&quot; : true,</span><br><span class=\"line\">  &quot;_source&quot; : &#123;</span><br><span class=\"line\">    &quot;@timestamp&quot; : &quot;2022-07-06T02:57:38.035Z&quot;,</span><br><span class=\"line\">    &quot;log&quot; : &quot;[2022/07/06 02:57:38] [ info] [input:tail:tail.0] inotify_fs_add(): inode=2050771 watch_fd=3 name=/var/log/containers/dashboard-metrics-scraper-58549894f-q9lpg_kubernetes-dashboard_dashboard-metrics-scraper-51061ac5d9c2c7c2da734ab35b9252edb29f4101ade5679a22181d0d735dc364.log\\n&quot;,</span><br><span class=\"line\">    &quot;time&quot; : &quot;2022-07-06T02:57:38.035319145Z&quot;,</span><br><span class=\"line\">    &quot;kubernetes&quot; : &#123;</span><br><span class=\"line\">      &quot;pod_name&quot; : &quot;fluent-bit-8v2qn&quot;,</span><br><span class=\"line\">      &quot;namespace_name&quot; : &quot;fluent&quot;,</span><br><span class=\"line\">      &quot;container_name&quot; : &quot;fluent-bit&quot;,</span><br><span class=\"line\">      &quot;docker_id&quot; : &quot;098d8ac65b201686b7a2945df6ee1a919b7220b637aea4de6490d92569c9c455&quot;,</span><br><span class=\"line\">      &quot;container_image&quot; : &quot;kubesphere/fluent-bit:v1.8.11&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Fluent-Bit-Fluentd-模式\"><a href=\"#Fluent-Bit-Fluentd-模式\" class=\"headerlink\" title=\"Fluent Bit + Fluentd 模式\"></a>Fluent Bit + Fluentd 模式</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改 Fluent Bit output 资源配置，启用 forward 插件，转发到 Fluentd</span></span><br><span class=\"line\">cat &gt;&gt; fluent-bit.yaml &lt;&lt; &quot;EOF&quot;</span><br><span class=\"line\">apiVersion: fluentbit.fluent.io/v1alpha2</span><br><span class=\"line\">kind: ClusterOutput</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: fluentd</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    fluentbit.fluent.io/enabled: &quot;true&quot;</span><br><span class=\"line\">    fluentbit.fluent.io/component: logging</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  matchRegex: (?:kube|service)\\.(.*)</span><br><span class=\"line\">  forward:</span><br><span class=\"line\">    host: fluentd.fluent.svc</span><br><span class=\"line\">    port: 24224</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">部署 Fluentd</span> </span><br><span class=\"line\">cat &gt; fluentd.yaml &lt;&lt; &quot;EOF&quot;</span><br><span class=\"line\">apiVersion: fluentd.fluent.io/v1alpha1</span><br><span class=\"line\">kind: Fluentd</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: fluentd</span><br><span class=\"line\">  namespace: fluent</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app.kubernetes.io/name: fluentd</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  globalInputs:</span><br><span class=\"line\">  - forward:</span><br><span class=\"line\">      bind: 0.0.0.0</span><br><span class=\"line\">      port: 24224</span><br><span class=\"line\">  replicas: 1</span><br><span class=\"line\">  image: kubesphere/fluentd:v1.14.4</span><br><span class=\"line\">  fluentdCfgSelector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      config.fluentd.fluent.io/enabled: &quot;true&quot;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置 Fluentd</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">1.使用 ClusterFluentdConfig 配置，发送 kube-system 与 default 下 namesapce 日志到 ClusterOutput</span></span><br><span class=\"line\">cat &gt;&gt; fluentd.yaml &lt;&lt; &quot;EOF&quot;</span><br><span class=\"line\">apiVersion: fluentd.fluent.io/v1alpha1</span><br><span class=\"line\">kind: ClusterFluentdConfig</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: cluster-fluentd-config</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    config.fluentd.fluent.io/enabled: &quot;true&quot;</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  watchedNamespaces:</span><br><span class=\"line\">  - kube-system</span><br><span class=\"line\">  - default</span><br><span class=\"line\">  clusterOutputSelector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      output.fluentd.fluent.io/scope: &quot;cluster&quot;</span><br><span class=\"line\">      output.fluentd.fluent.io/enabled: &quot;true&quot;</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: fluentd.fluent.io/v1alpha1</span><br><span class=\"line\">kind: ClusterOutput</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: cluster-fluentd-output-es</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    output.fluentd.fluent.io/scope: &quot;cluster&quot;</span><br><span class=\"line\">    output.fluentd.fluent.io/enabled: &quot;true&quot;</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  outputs:</span><br><span class=\"line\">  - elasticsearch:</span><br><span class=\"line\">      host: elasticsearch-master.elastic.svc</span><br><span class=\"line\">      port: 9200</span><br><span class=\"line\">      logstashFormat: true</span><br><span class=\"line\">      logstashPrefix: fluent-log-cluster-fd</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">2.使用 FluentdConfig + ClusterFluentdConfig 配置，发送集群范围和 namespace 范围日志到 Output 或 ClusterOutput</span></span><br><span class=\"line\">cat &gt;&gt; fluentd.yaml &lt;&lt; &quot;EOF&quot;</span><br><span class=\"line\">apiVersion: fluentd.fluent.io/v1alpha1</span><br><span class=\"line\">kind: FluentdConfig</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: namespace-fluentd-config-user1</span><br><span class=\"line\">  namespace: fluent</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    config.fluentd.fluent.io/enabled: &quot;true&quot;</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  outputSelector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      output.fluentd.fluent.io/enabled: &quot;true&quot;</span><br><span class=\"line\">      output.fluentd.fluent.io/user: &quot;user1&quot;</span><br><span class=\"line\">  clusterOutputSelector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      output.fluentd.fluent.io/enabled: &quot;true&quot;</span><br><span class=\"line\">      output.fluentd.fluent.io/user: &quot;user1&quot;</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: fluentd.fluent.io/v1alpha1</span><br><span class=\"line\">kind: ClusterFluentdConfig</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: cluster-fluentd-config-cluster-only</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    config.fluentd.fluent.io/enabled: &quot;true&quot;</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  watchedNamespaces:</span><br><span class=\"line\">  - kube-system</span><br><span class=\"line\">  - kubesphere-system</span><br><span class=\"line\">  clusterOutputSelector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      output.fluentd.fluent.io/enabled: &quot;true&quot;</span><br><span class=\"line\">      output.fluentd.fluent.io/scope: &quot;cluster-only&quot;</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: fluentd.fluent.io/v1alpha1</span><br><span class=\"line\">kind: Output</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: namespace-fluentd-output-user1</span><br><span class=\"line\">  namespace: fluent</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    output.fluentd.fluent.io/enabled: &quot;true&quot;</span><br><span class=\"line\">    output.fluentd.fluent.io/user: &quot;user1&quot;</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  outputs:</span><br><span class=\"line\">  - elasticsearch:</span><br><span class=\"line\">      host: elasticsearch-master.elastic.svc</span><br><span class=\"line\">      port: 9200</span><br><span class=\"line\">      logstashFormat: true</span><br><span class=\"line\">      logstashPrefix: fluent-log-user1-fd</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: fluentd.fluent.io/v1alpha1</span><br><span class=\"line\">kind: ClusterOutput</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: cluster-fluentd-output-user1</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    output.fluentd.fluent.io/enabled: &quot;true&quot;</span><br><span class=\"line\">    output.fluentd.fluent.io/user: &quot;user1&quot;</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  outputs:</span><br><span class=\"line\">  - elasticsearch:</span><br><span class=\"line\">      host: elasticsearch-master.elastic.svc</span><br><span class=\"line\">      port: 9200</span><br><span class=\"line\">      logstashFormat: true</span><br><span class=\"line\">      logstashPrefix: fluent-log-cluster-user1-fd</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: fluentd.fluent.io/v1alpha1</span><br><span class=\"line\">kind: ClusterOutput</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: cluster-fluentd-output-cluster-only</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    output.fluentd.fluent.io/enabled: &quot;true&quot;</span><br><span class=\"line\">    output.fluentd.fluent.io/scope: &quot;cluster-only&quot;</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  outputs:</span><br><span class=\"line\">  - elasticsearch:</span><br><span class=\"line\">      host: elasticsearch-master.elastic.svc</span><br><span class=\"line\">      port: 9200</span><br><span class=\"line\">      logstashFormat: true</span><br><span class=\"line\">      logstashPrefix: fluent-log-cluster-only-fd</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Fluentd 输出使用 buffer 缓冲区</span></span><br><span class=\"line\">cat &gt;&gt; fluentd.yaml &lt;&lt; &quot;EOF&quot;</span><br><span class=\"line\">apiVersion: fluentd.fluent.io/v1alpha1</span><br><span class=\"line\">kind: ClusterOutput</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: cluster-fluentd-output-buffer</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    output.fluentd.fluent.io/type: &quot;buffer&quot;</span><br><span class=\"line\">    output.fluentd.fluent.io/enabled: &quot;true&quot;</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  outputs:</span><br><span class=\"line\">  - stdout: &#123;&#125;</span><br><span class=\"line\">    buffer:</span><br><span class=\"line\">      type: file</span><br><span class=\"line\">      path: /buffers/stdout.log</span><br><span class=\"line\">  - elasticsearch:</span><br><span class=\"line\">      host: elasticsearch-master.elastic.svc</span><br><span class=\"line\">      port: 9200</span><br><span class=\"line\">      logstashFormat: true</span><br><span class=\"line\">      logstashPrefix: fluent-log-buffer-fd</span><br><span class=\"line\">    buffer:</span><br><span class=\"line\">      type: file</span><br><span class=\"line\">      path: /buffers/es.log</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Fluentd-Only-模式\"><a href=\"#Fluentd-Only-模式\" class=\"headerlink\" title=\"Fluentd Only 模式\"></a>Fluentd Only 模式</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; fluentd.yaml &lt;&lt; &quot;EOF&quot;</span><br><span class=\"line\">apiVersion: fluentd.fluent.io/v1alpha1</span><br><span class=\"line\">kind: Fluentd</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: fluentd-http</span><br><span class=\"line\">  namespace: fluent</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app.kubernetes.io/name: fluentd</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  globalInputs:</span><br><span class=\"line\">    - http:</span><br><span class=\"line\">        bind: 0.0.0.0</span><br><span class=\"line\">        port: 9880</span><br><span class=\"line\">  replicas: 1</span><br><span class=\"line\">  image: kubesphere/fluentd:v1.14.4</span><br><span class=\"line\">  fluentdCfgSelector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      config.fluentd.fluent.io/enabled: &quot;true&quot;</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: fluentd.fluent.io/v1alpha1</span><br><span class=\"line\">kind: FluentdConfig</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: fluentd-only-config</span><br><span class=\"line\">  namespace: fluent</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    config.fluentd.fluent.io/enabled: &quot;true&quot;</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  filterSelector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      filter.fluentd.fluent.io/mode: &quot;fluentd-only&quot;</span><br><span class=\"line\">      filter.fluentd.fluent.io/enabled: &quot;true&quot;</span><br><span class=\"line\">  outputSelector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      output.fluentd.fluent.io/mode: &quot;fluentd-only&quot;</span><br><span class=\"line\">      output.fluentd.fluent.io/enabled: &quot;true&quot;</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: fluentd.fluent.io/v1alpha1</span><br><span class=\"line\">kind: Filter</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: fluentd-only-filter</span><br><span class=\"line\">  namespace: fluent</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    filter.fluentd.fluent.io/mode: &quot;fluentd-only&quot;</span><br><span class=\"line\">    filter.fluentd.fluent.io/enabled: &quot;true&quot;</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  filters:</span><br><span class=\"line\">    - stdout: &#123;&#125;</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: fluentd.fluent.io/v1alpha1</span><br><span class=\"line\">kind: Output</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: fluentd-only-stdout</span><br><span class=\"line\">  namespace: fluent</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    output.fluentd.fluent.io/mode: &quot;fluentd-only&quot;</span><br><span class=\"line\">    output.fluentd.fluent.io/enabled: &quot;true&quot;</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  outputs:</span><br><span class=\"line\">    - stdout: &#123;&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看部署资源</span></span><br><span class=\"line\">kubectl get all -n fluent</span><br><span class=\"line\">NAME                                   READY   STATUS    RESTARTS       AGE</span><br><span class=\"line\">pod/es-0                               1/1     Running   1 (163m ago)   19h</span><br><span class=\"line\">pod/fluent-operator-86858cfc87-cg4ct   1/1     Running   1 (163m ago)   19h</span><br><span class=\"line\">pod/fluentd-http-0                     1/1     Running   0              2m53s</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                    TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)             AGE</span><br><span class=\"line\">service/elasticsearch   ClusterIP   None         &lt;none&gt;        9200/TCP,9300/TCP   19h</span><br><span class=\"line\">service/fluentd-http    ClusterIP   10.97.96.1   &lt;none&gt;        9880/TCP            2m54s</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                              READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class=\"line\">deployment.apps/fluent-operator   1/1     1            1           19h</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                                         DESIRED   CURRENT   READY   AGE</span><br><span class=\"line\">replicaset.apps/fluent-operator-86858cfc87   1         1         1       19h</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                            READY   AGE</span><br><span class=\"line\">statefulset.apps/es             1/1     19h</span><br><span class=\"line\">statefulset.apps/fluentd-http   1/1     2m54s</span><br></pre></td></tr></table></figure>\n\n\n<blockquote>\n<p>参考文档：<br>1、<a href=\"https://www.qikqiak.com/post/install-efk-stack-on-k8s/\">https://www.qikqiak.com/post/install-efk-stack-on-k8s/</a><br>2、fluentd 官网：<a href=\"https://docs.fluentd.org/\">https://docs.fluentd.org/</a><br>3、fluentd-operator 官网：<a href=\"https://github.com/fluent/fluent-operator\">https://github.com/fluent/fluent-operator</a><br>4、fluent-operator-walkthrough：<a href=\"https://github.com/kubesphere-sigs/fluent-operator-walkthrough\">https://github.com/kubesphere-sigs/fluent-operator-walkthrough</a><br>5、KubeSphere：<a href=\"https://kubesphere.com.cn/blogs/fluent-operator-logging\">https://kubesphere.com.cn/blogs/fluent-operator-logging</a></p>\n</blockquote>\n","site":{"data":{"footer":"","styles":".post {\n  margin-top: 50px;\n  margin-bottom: 50px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n.headband {\n  display: none;\n}\nbody {\n  background: url(\"/images/background.jpeg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\n.post-block.page {\n  margin-top: 40px;\n}\n.category-all-page {\n  box-shadow: 0px 0px 10px 0px rgba(0,0,0,0.5);\n  background-color: #797d7f;\n  padding: 20px 30px 60px 30px;\n  border-radius: 25px 25px 25px 25px;\n}\n.category-all-title {\n  font-family: Impact;\n  font-size: 24px;\n  color: #0ff;\n}\n.category-list {\n  overflow: auto;\n}\n.category-list li {\n  height: 100%;\n  float: left;\n  border-right: 3px solid #222;\n  padding: 0 20px;\n}\n.category-all ul li {\n  list-style: none !important;\n}\n.category-list li:last-child {\n  border-right: none;\n}\n.category-list li a {\n  font-size: 16px;\n  text-decoration: none;\n  color: #7fff00;\n  font-family: Helvetica, Verdana, sans-serif;\n  -webkit-transition: all 0.5s ease;\n  -moz-transition: all 0.5s ease;\n  -o-transition: all 0.5s ease;\n  -ms-transition: all 0.5s ease;\n  transition: all 0.5s ease;\n}\n.category-list li a:hover {\n  color: #000;\n}\n.category-list li.active a {\n  font-weight: bold;\n  color: #000;\n}\n.tag-cloud a {\n  box-shadow: 0 1px 3px #6f42c1, 0 1px 2px #d9534f;\n  padding: 2px 10px;\n  margin: 8px;\n  background: rgba(193,66,92,0);\n  border-bottom: none;\n  border-radius: 20px;\n}\ncode {\n  background: #555;\n  color: #fff;\n}\n","variables":""}},"length":37149,"excerpt":"<h3 id=\"一、组件说明\"><a href=\"#一、组件说明\" class=\"headerlink\" title=\"一、组件说明\"></a>一、组件说明</h3><p><strong>Fluentd</strong><br>负责从 Kubernetes 搜集日志，每个 node 节点上面的 fluentd 监控并收集该节点上面的系统+容器日志，并将处理过后的日志信息发送给 Elasticsearch。</p>\n<img data-src=\"/posts/41fe/fluent1.png\" class>\n<blockquote>\n<p>fluentd 数据流逻辑：source –&gt; parser –&gt; filter –&gt; output</p>\n</blockquote>\n<p><strong>Elasticsearch</strong><br>搜索引擎，负责存储日志并提供查询接口。</p>\n<p><strong>Kibana</strong><br>提供了一个 Web GUI，用户可以浏览和搜索存储在 Elasticsearch 中的日志。 </p>\n<blockquote>\n<p>主要的日志收集方案：</p>\n<ul>\n<li>在节点上运行一个 agent 来收集日志（daemonSet）</li>\n<li>在 Pod 中包含一个 sidecar 容器来收集应用日志</li>\n<li>直接在应用程序中将日志信息推送到采集后端（一般不采用该方式）</li>\n</ul>\n</blockquote>","more":"<h3 id=\"二、二进制方式-x2F-容器方式部署\"><a href=\"#二、二进制方式-x2F-容器方式部署\" class=\"headerlink\" title=\"二、二进制方式 &#x2F; 容器方式部署\"></a>二、二进制方式 &#x2F; 容器方式部署</h3><h4 id=\"二进制方式\"><a href=\"#二进制方式\" class=\"headerlink\" title=\"二进制方式\"></a>二进制方式</h4><p>官网安装方式：<a href=\"https://docs.fluentd.org/installation/before-install\">https://docs.fluentd.org/installation/before-install</a></p>\n<h4 id=\"容器方式\"><a href=\"#容器方式\" class=\"headerlink\" title=\"容器方式\"></a>容器方式</h4><p>仓库地址：<a href=\"https://hub.docker.com/r/fluent/fluentd\">https://hub.docker.com/r/fluent/fluentd</a></p>\n<h3 id=\"三、配置与使用\"><a href=\"#三、配置与使用\" class=\"headerlink\" title=\"三、配置与使用\"></a>三、配置与使用</h3><blockquote>\n<p>数据流逻辑：fluentd 以 tag 值为基准，决定数据的流经哪些处理器。<br>数据的流向：source -&gt; parser -&gt; filter -&gt; output</p>\n</blockquote>\n<h4 id=\"input-配置\"><a href=\"#input-配置\" class=\"headerlink\" title=\"input 配置\"></a>input 配置</h4><ul>\n<li><p><strong>http：从 http 接口获取日志来源</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建配置文件</span></span><br><span class=\"line\">mkdir /tmp/fluentd &amp;&amp; cd /tmp/fluentd</span><br><span class=\"line\">cat &gt; fluent.conf &lt;&lt; EOF</span><br><span class=\"line\">&lt;source&gt;</span><br><span class=\"line\">  @type http</span><br><span class=\"line\">  port 9880</span><br><span class=\"line\">  bind 0.0.0.0</span><br><span class=\"line\">&lt;/source&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;match **&gt;</span><br><span class=\"line\">  @type stdout</span><br><span class=\"line\">&lt;/match&gt;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动镜像，将 fluentd 目录挂载进容器，默认使用 fluent.conf 配置文件</span></span><br><span class=\"line\">docker run -p 9880:9880 --rm --name fluent -v /tmp/fluentd:/fluentd/etc fluent/fluentd</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">测试请求 http 接口生成日志</span></span><br><span class=\"line\">curl -X POST 127.0.0.1:9880/yakir.test -d &#x27;json=&#123;&quot;a&quot;:&quot;aaa&quot;&#125;&#x27;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>tail：增量读取日志文件</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; fluent.conf &lt;&lt; EOF</span><br><span class=\"line\">&lt;source&gt;</span><br><span class=\"line\">  @type tail</span><br><span class=\"line\">  path /var/log/httpd-access.log</span><br><span class=\"line\">  path_key tailed_path</span><br><span class=\"line\">  pos_file /var/log/td-agent/httpd-access.log.pos</span><br><span class=\"line\">  tag apache.access</span><br><span class=\"line\">  &lt;parse&gt;</span><br><span class=\"line\">    @type apache2</span><br><span class=\"line\">  &lt;/parse&gt;</span><br><span class=\"line\">&lt;/source&gt;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动镜像并测试日志</span></span><br><span class=\"line\">docker run --rm --name fluent -v /tmp/fluentd:/fluentd/etc fluent/fluentd</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>exec：周期性执行命令，获取命令输出为 event</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; fluent.conf &lt;&lt; EOF</span><br><span class=\"line\">&lt;source&gt;</span><br><span class=\"line\">  @type exec</span><br><span class=\"line\">  tag yakir.test</span><br><span class=\"line\">  command cat /proc/loadavg | cut -d &#x27; &#x27; -f 1,2,3</span><br><span class=\"line\">  run_interval 10s</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;parse&gt;</span><br><span class=\"line\">    @type tsv</span><br><span class=\"line\">    keys avg1,avg5,avg15</span><br><span class=\"line\">    delimiter &quot; &quot;</span><br><span class=\"line\">  &lt;/parse&gt;</span><br><span class=\"line\">&lt;/source&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;match **&gt;</span><br><span class=\"line\">  @type stdout</span><br><span class=\"line\">&lt;/match&gt;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动镜像，验证日志</span></span><br><span class=\"line\">docker run --rm --name fluent -v /tmp/fluentd:/fluentd/etc fluent/fluentd</span><br><span class=\"line\">2022-06-30 08:43:20.377146682 +0000 yakir.test: &#123;&quot;avg1&quot;:&quot;0.12&quot;,&quot;avg5&quot;:&quot;0.16&quot;,&quot;avg15&quot;:&quot;0.17&quot;&#125;</span><br><span class=\"line\">2022-06-30 08:43:30.347891525 +0000 yakir.test: &#123;&quot;avg1&quot;:&quot;0.10&quot;,&quot;avg5&quot;:&quot;0.15&quot;,&quot;avg15&quot;:&quot;0.17&quot;&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>syslog：连接 rsyslog 系统日志，作为 rsyslog 接收端</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; fluent.conf &lt;&lt; EOF</span><br><span class=\"line\">&lt;source&gt;</span><br><span class=\"line\">    @type syslog</span><br><span class=\"line\">    port 5140</span><br><span class=\"line\">    bind 0.0.0.0</span><br><span class=\"line\">    tag system</span><br><span class=\"line\">&lt;/source&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;match **&gt;</span><br><span class=\"line\">  @type stdout</span><br><span class=\"line\">&lt;/match&gt;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动镜像，转发 udp 端口</span></span><br><span class=\"line\">docker run -p 5140:5140/udp --rm --name fluent -v /tmp/fluentd:/fluentd/etc fluent/fluentd</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加 rsyslog 配置，转发日志到 fluent</span></span><br><span class=\"line\">cat &gt;&gt; /etc/rsyslog.d/50-default.conf &lt;&lt; &quot;EOF&quot;</span><br><span class=\"line\">*.* @127.0.0.1:5140</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">logger 产生日志，验证日志生成</span></span><br><span class=\"line\">logger -p mail.info &#x27;this is info message&#x27;</span><br><span class=\"line\">logger -p mail.warning &#x27;this is warning message&#x27;</span><br><span class=\"line\">2022-07-04 10:27:48.000000000 +0000 system.mail.info: &#123;&quot;host&quot;:&quot;minikube&quot;,&quot;ident&quot;:&quot;root&quot;,&quot;message&quot;:&quot;this is info message&quot;&#125;</span><br><span class=\"line\">2022-07-04 10:28:11.000000000 +0000 system.mail.warn: &#123;&quot;host&quot;:&quot;minikube&quot;,&quot;ident&quot;:&quot;root&quot;,&quot;message&quot;:&quot;this is warning message&quot;&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>dummy：测试用数据源，周期生成假数据</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; fluent.conf &lt;&lt; &quot;EOF&quot;</span><br><span class=\"line\">&lt;source&gt;</span><br><span class=\"line\">    @type dummy</span><br><span class=\"line\">    dummy &#123;&quot;foo&quot;: &quot;bar&quot;&#125;</span><br><span class=\"line\">    size 3</span><br><span class=\"line\">    rate 1</span><br><span class=\"line\">    tag yakir.test</span><br><span class=\"line\">    auto_increment_key primary_key</span><br><span class=\"line\">    suspend true</span><br><span class=\"line\">&lt;/source&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;match **&gt;</span><br><span class=\"line\">  @type stdout</span><br><span class=\"line\">&lt;/match&gt;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">参数说明</span></span><br><span class=\"line\">size     #每次发送的 event 数量</span><br><span class=\"line\">rate     #每秒产生多少个 event</span><br><span class=\"line\">auto_increment_key   #自增键名</span><br><span class=\"line\">suspend              #重启后自增值是否重新开始</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动镜像，验证日志</span></span><br><span class=\"line\">docker run --rm --name fluent -v /tmp/fluentd:/fluentd/etc fluent/fluentd</span><br><span class=\"line\">2022-07-04 02:51:37.044796145 +0000 yakir.test: &#123;&quot;foo&quot;:&quot;bar&quot;,&quot;primary_key&quot;:0&#125;</span><br><span class=\"line\">2022-07-04 02:51:37.044834743 +0000 yakir.test: &#123;&quot;foo&quot;:&quot;bar&quot;,&quot;primary_key&quot;:1&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>forward：接收其他 fluentd forward 的 event</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;source&gt;</span><br><span class=\"line\">  @type forward</span><br><span class=\"line\">  port 24224</span><br><span class=\"line\">  bind 0.0.0.0</span><br><span class=\"line\">&lt;/source&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"output-配置\"><a href=\"#output-配置\" class=\"headerlink\" title=\"output 配置\"></a>output 配置</h4></li>\n<li><p><strong>file：输出 event 为文件，默认每天输出一个日志文件</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; fluent.conf &lt;&lt; &quot;EOF&quot;</span><br><span class=\"line\">&lt;source&gt;</span><br><span class=\"line\">  @type dummy</span><br><span class=\"line\">  dummy &#123;&quot;foo&quot;: &quot;bar&quot;&#125;</span><br><span class=\"line\">  tag yakir.test</span><br><span class=\"line\">  size 1</span><br><span class=\"line\">  rate 1</span><br><span class=\"line\">&lt;/source&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;match yakir.**&gt;</span><br><span class=\"line\">  @type file</span><br><span class=\"line\">  path /tmp/fluent/yakir</span><br><span class=\"line\">  compress gzip</span><br><span class=\"line\">  &lt;buffer&gt;</span><br><span class=\"line\">    timekey 1d</span><br><span class=\"line\">    timekey_use_utc true</span><br><span class=\"line\">    timekey_wait 10m</span><br><span class=\"line\">  &lt;/buffer&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"meta prompt_\">  #</span><span class=\"language-bash\">@<span class=\"built_in\">type</span> file</span></span><br><span class=\"line\"><span class=\"meta prompt_\">  #</span><span class=\"language-bash\">path /tmp/<span class=\"variable\">$&#123;tag[0]&#125;</span>/file.%Y-%m-%d-%H-%M-%S</span></span><br><span class=\"line\"><span class=\"meta prompt_\">  #</span><span class=\"language-bash\">&lt;buffer tag,time&gt;</span></span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\"> timekey 10</span></span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\"> timekey_wait 10</span></span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\"> timekey_use_utc <span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">  #</span><span class=\"language-bash\">&lt;/buffer&gt;</span></span><br><span class=\"line\">&lt;/match&gt;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">参数说明</span></span><br><span class=\"line\">path：支持 placeholder，可以在日志路径中嵌入时间，tag 和 record 中的字段值。例如：/path/to/$&#123;tag&#125;/$&#123;key1&#125;/file.%Y%m%d</span><br><span class=\"line\">append：flush 的 chuck 是否追加到已存在的文件后。默认为 false，便于文件的并行处理。</span><br><span class=\"line\">format 标签，用来规定文件内容的格式，默认值为 out_file。</span><br><span class=\"line\">inject 标签，用来为 event 增加 time 和 tag 等字段。</span><br><span class=\"line\">add_path_suffix：是否增加 path 后缀</span><br><span class=\"line\">path_suffix：path 后缀内容，默认为.log。</span><br><span class=\"line\">compress：采用什么压缩格式，默认不压缩。</span><br><span class=\"line\">recompress：是否在 buffer chunk 已经压缩的情况再次压缩，默认为 false。</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动镜像验证日志</span></span><br><span class=\"line\">docker run --rm --name fluent -v /tmp/fluentd:/fluentd/etc fluent/fluentd</span><br><span class=\"line\">docker exec -it fluent /bin/sh</span><br><span class=\"line\">tail -2 /tmp/fluent/yakir/buffer.b5e2f5e063d4389bd9304563cf7f07656.log</span><br><span class=\"line\">2022-07-04T07:42:34+00:00\tyakir.test\t&#123;&quot;foo&quot;:&quot;bar&quot;&#125;</span><br><span class=\"line\">2022-07-04T07:42:35+00:00\tyakir.test\t&#123;&quot;foo&quot;:&quot;bar&quot;&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>buffer 标签</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;buffer&gt;</span><br><span class=\"line\">  @type file</span><br><span class=\"line\">&lt;/buffer&gt;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">@<span class=\"built_in\">type</span> 值：file（存文件）、memory（存内存，默认值）</span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;buffer ARGUMENT_CHUNK_KEYS&gt;</span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">...</span></span><br><span class=\"line\">&lt;/buffer&gt;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">buffer chunk keys（buffer 已 record 的什么字段分段存放），没有配置 chunk key，所有 event 写入同一个 chunk file 直到 buffer 滚动。</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用 time 为 chunk key，按照时间对 buffer 进行分段。</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">timekey：时间跨度   timekey_wait：flush 延迟时间，用于等待迟到的数据</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">常用参数</span></span><br><span class=\"line\">timekey_use_utc：使用国际标准时间还是当地时间，默认是使用当地时间。</span><br><span class=\"line\">timekey_zone：指定时区。</span><br><span class=\"line\">chunk_limit_size：chunk 大小限制，默认 8MB。</span><br><span class=\"line\">chunk_limit_records：chunk event 条数限制。</span><br><span class=\"line\">total_limit_size：总 buffer 大小限制。</span><br><span class=\"line\">chunk_full_threshold：chunk 大小超过 chunk_limit_size * chunk_full_threshold 时会自动 flush。</span><br><span class=\"line\">queued_chunks_limit_size：限制队列中的 chunk 数目，防止频繁 flush 产生过多的 chunk。</span><br><span class=\"line\">compress：压缩格式，可使用 text 或 gzip。默认为 text。</span><br><span class=\"line\">flush_at_shutdown：关闭时候是否 flush。对于非持久化 buffer 默认值为 true，持久化 buffer 默认值为 false。</span><br><span class=\"line\">flush_interval：多长时间 flush 一次。</span><br><span class=\"line\">retry_timeout：重试 flush 的超时时间。在这个时间后不再会 retry。</span><br><span class=\"line\">retry_forever：是否永远尝试 flush。如果设置为 true 会忽略 retry_timeout 的配置。</span><br><span class=\"line\">retry_max_times：重试最大次数。</span><br><span class=\"line\">retry_type：有两个配置值：retry 时间间隔，指数级增长或者是固定周期重试。</span><br><span class=\"line\">retry_wait：每次重试等待时间。</span><br><span class=\"line\">retry_exponential_backoff_base：retry 时间指数扩大倍数。</span><br><span class=\"line\">retry_max_interval：最长 retry 时间间隔。</span><br><span class=\"line\">retry_randomize：是否随机 retry 时间间隔。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>format 标签</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;match&gt;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  </span><br><span class=\"line\">  &lt;format&gt;</span><br><span class=\"line\">    @type json</span><br><span class=\"line\">  &lt;/format&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;buffer&gt;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &lt;/buffer&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\">&lt;/match&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>forward：转发 event 到其他 fluentd 节点。配置多个 fluentd 节点时，使用负载均衡方式发送。</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;match yakir.*&gt;</span><br><span class=\"line\">  @type forward</span><br><span class=\"line\">  send_timeout 60s</span><br><span class=\"line\">  recover_wait 10s</span><br><span class=\"line\">  hard_timeout 60s</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;server&gt;</span><br><span class=\"line\">    name myserver1</span><br><span class=\"line\">    host 192.168.1.3</span><br><span class=\"line\">    port 24224</span><br><span class=\"line\">    weight 60</span><br><span class=\"line\">  &lt;/server&gt;</span><br><span class=\"line\">  &lt;server&gt;</span><br><span class=\"line\">    name myserver2</span><br><span class=\"line\">    host 192.168.1.4</span><br><span class=\"line\">    port 24224</span><br><span class=\"line\">    weight 60</span><br><span class=\"line\">  &lt;/server&gt;</span><br><span class=\"line\">  ...</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;secondary&gt;</span><br><span class=\"line\">    @type file</span><br><span class=\"line\">    path /var/log/fluent/forward-failed</span><br><span class=\"line\">  &lt;/secondary&gt;</span><br><span class=\"line\">&lt;/match&gt;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">server 标签参数说明</span></span><br><span class=\"line\">host</span><br><span class=\"line\">name</span><br><span class=\"line\">port</span><br><span class=\"line\">shared_key</span><br><span class=\"line\">username</span><br><span class=\"line\">password</span><br><span class=\"line\">standby 标记 server 为备用，只有其他 node 不可用的时候才会启用 standby 的 node</span><br><span class=\"line\">weight 负载均衡的权重配置</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>copy：多路输出，复制 event 到多个输出端</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; fluent.conf &lt;&lt; &quot;EOF&quot;</span><br><span class=\"line\">&lt;source&gt;</span><br><span class=\"line\">  @type dummy</span><br><span class=\"line\">  dummy &#123;&quot;foo&quot;: &quot;bar&quot;&#125;</span><br><span class=\"line\">  tag yakir.test</span><br><span class=\"line\">  size 1</span><br><span class=\"line\">  rate 1</span><br><span class=\"line\">&lt;/source&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;match yakir.**&gt;</span><br><span class=\"line\">  @type copy</span><br><span class=\"line\">  &lt;store&gt;</span><br><span class=\"line\">    @type file</span><br><span class=\"line\">    path /tmp/yakir/file.%Y%m%d</span><br><span class=\"line\">    compress gzip</span><br><span class=\"line\">  &lt;/store&gt;</span><br><span class=\"line\">  &lt;store ignore_error&gt;</span><br><span class=\"line\">    @type stdout</span><br><span class=\"line\">  &lt;/store&gt;</span><br><span class=\"line\">&lt;/match&gt;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">参数说明</span></span><br><span class=\"line\">copy_mode 复制模式可选值</span><br><span class=\"line\">  no_copy：每路输出共享 event。</span><br><span class=\"line\">  shallow：浅拷贝，如果不修改嵌套字段可以使用。</span><br><span class=\"line\">  deep：深拷贝，使用msgpack-ruby方式。</span><br><span class=\"line\">  marshal：深拷贝，使用marshal方式。</span><br><span class=\"line\">store 标签 ignore_error 参数：标记的 store 出现错误时，不影响其他</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>http：通过 http 请求方式发送 event，payload 格式由 format 标签决定。</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;match pattern&gt;</span><br><span class=\"line\">  @type http</span><br><span class=\"line\">  endpoint http://logserver.com:9000/api</span><br><span class=\"line\">  open_timeout 2</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;format&gt;</span><br><span class=\"line\">    @type json</span><br><span class=\"line\">  &lt;/format&gt;</span><br><span class=\"line\">  &lt;buffer&gt;</span><br><span class=\"line\">    flush_interval 10s</span><br><span class=\"line\">  &lt;/buffer&gt;</span><br><span class=\"line\">&lt;/match&gt;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用 post 方式，连接超时2s，输出格式为 json，每10s 输出一次到 endpoint。（content-type 为 application/x-ndjson）</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>stdout：标准输出，后台运行时输出到 fluentd 日志。</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;source&gt;</span><br><span class=\"line\">  @type dummy</span><br><span class=\"line\">  dummy &#123;&quot;foo&quot;: &quot;bar&quot;&#125;</span><br><span class=\"line\">  tag yakir.test</span><br><span class=\"line\">  size 1</span><br><span class=\"line\">  rate 1</span><br><span class=\"line\">&lt;/source&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;match yakir.**&gt;</span><br><span class=\"line\">  @type stdout</span><br><span class=\"line\">&lt;/match&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>第三方存储：Elasticsearch、Kafka</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">elasticsearch 关键配置</span></span><br><span class=\"line\">&lt;match yakir.logs&gt;</span><br><span class=\"line\">  @type elasticsearch</span><br><span class=\"line\">  host localhost</span><br><span class=\"line\">  port 9200</span><br><span class=\"line\">  logstash_format true</span><br><span class=\"line\">&lt;/match&gt;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">参数</span></span><br><span class=\"line\">host：单个 elasticsearch 节点地址</span><br><span class=\"line\">port：单个 elasticsearch 节点的端口号</span><br><span class=\"line\">hosts：elasticsearch 集群地址。格式为 ip1:port1,ip2:port2...</span><br><span class=\"line\">user、password：elasticsearch 的认证信息</span><br><span class=\"line\">scheme：使用 https 还是 http。默认为 http 模式</span><br><span class=\"line\">path：REST 接口路径，默认为空</span><br><span class=\"line\">index_name：index 名称</span><br><span class=\"line\">logstash_format：index 是否使用 logstash 命名方式（logstash-%Y.%m.%d），默认不启用</span><br><span class=\"line\">logstash_prefix：logstash_format 启用的时候，index 命名前缀是什么。默认为logstash</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">kafka 关键配置</span></span><br><span class=\"line\">&lt;match pattern&gt;</span><br><span class=\"line\">  @type kafka2</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">list of seed brokers</span></span><br><span class=\"line\">  brokers &lt;broker1_host&gt;:&lt;broker1_port&gt;,&lt;broker2_host&gt;:&lt;broker2_port&gt;</span><br><span class=\"line\">  use_event_time true</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">buffer settings</span></span><br><span class=\"line\">  &lt;buffer topic&gt;</span><br><span class=\"line\">    @type file</span><br><span class=\"line\">    path /var/log/td-agent/buffer/td</span><br><span class=\"line\">    flush_interval 3s</span><br><span class=\"line\">  &lt;/buffer&gt;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">data <span class=\"built_in\">type</span> settings</span></span><br><span class=\"line\">  &lt;format&gt;</span><br><span class=\"line\">    @type json</span><br><span class=\"line\">  &lt;/format&gt;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">topic settings</span></span><br><span class=\"line\">  topic_key topic</span><br><span class=\"line\">  default_topic messages</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">producer settings</span></span><br><span class=\"line\">  required_acks -1</span><br><span class=\"line\">  compression_codec gzip</span><br><span class=\"line\">&lt;/match&gt;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">参数</span></span><br><span class=\"line\">brokers：Kafka brokers 的地址和端口号</span><br><span class=\"line\">topic_key：record 中哪个 key 对应的值用作 Kafka 消息的 key</span><br><span class=\"line\">default_topic：如果没有配置 topic_key，默认使用的 topic 名字</span><br><span class=\"line\">format 标签：确定发送的数据格式</span><br><span class=\"line\">use_event_time：是否使用 fluentd event 的时间作为 Kafka 消息的时间。默认为 false。意思为使用当前时间作为发送消息的时间</span><br><span class=\"line\">required_acks：producer acks 的值</span><br><span class=\"line\">compression_codec：压缩编码方式</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>webhdfs：通过 REST 方式写入 event 到 HDFS（配合 Hadoop）</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;store&gt;</span><br><span class=\"line\">  @type webhdfs</span><br><span class=\"line\">  host 1.1.1.1</span><br><span class=\"line\">  port 50070</span><br><span class=\"line\">  path &quot;/history/access.log.%Y%m%d_%H.#&#123;Socket.gethostname&#125;.log&quot;</span><br><span class=\"line\">  &lt;buffer&gt;</span><br><span class=\"line\">      flush_interval 60s</span><br><span class=\"line\">  &lt;/buffer&gt;</span><br><span class=\"line\">&lt;/store&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"parser-配置\"><a href=\"#parser-配置\" class=\"headerlink\" title=\"parser 配置\"></a>parser 配置</h4><ul>\n<li><strong>regexp：正则表达式解析信息，可通过 time_key 指定 event 的 time 字段</strong><blockquote>\n<p>在线测试正则语法工具：<a href=\"http://fluentular.herokuapp.com/\">http://fluentular.herokuapp.com/</a></p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">关键配置</span></span><br><span class=\"line\">&lt;parse&gt;</span><br><span class=\"line\">  @type regexp</span><br><span class=\"line\">  expression /^\\[(?&lt;logtime&gt;[^\\]]*)\\] (?&lt;name&gt;[^ ]*) (?&lt;title&gt;[^ ]*) (?&lt;id&gt;\\d*)$/</span><br><span class=\"line\">  time_key logtime</span><br><span class=\"line\">  time_format %Y-%m-%d %H:%M:%S %z</span><br><span class=\"line\">  types id:integer</span><br><span class=\"line\">&lt;/parse&gt;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">数据解析</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">原日志</span></span><br><span class=\"line\">[2013-02-28 12:00:00 +0900] alice engineer 1</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">解析后</span></span><br><span class=\"line\">time:</span><br><span class=\"line\">1362020400 (2013-02-28 12:00:00 +0900)</span><br><span class=\"line\"></span><br><span class=\"line\">record:</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot; : &quot;alice&quot;,</span><br><span class=\"line\">  &quot;title&quot;: &quot;engineer&quot;,</span><br><span class=\"line\">  &quot;id&quot;   : 1</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"filter-配置\"><a href=\"#filter-配置\" class=\"headerlink\" title=\"filter 配置\"></a>filter 配置</h4><ul>\n<li><p><strong>record_transformer：修改 event 结构，增加或修改字段</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">新增字段，使用 ruby 表达式</span></span><br><span class=\"line\">cat &gt; fluent.conf &lt;&lt; &quot;EOF&quot;</span><br><span class=\"line\">&lt;source&gt;</span><br><span class=\"line\">  @type dummy</span><br><span class=\"line\">  dummy &#123;&quot;foo&quot;:&quot;bar&quot;, &quot;id1&quot;: 100, &quot;id2&quot;: 50&#125;</span><br><span class=\"line\">  tag yakir.test</span><br><span class=\"line\">  size 1</span><br><span class=\"line\">  rate 1</span><br><span class=\"line\">&lt;/source&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;filter&gt;</span><br><span class=\"line\">  @type record_transformer</span><br><span class=\"line\">  enable_ruby true</span><br><span class=\"line\">  &lt;record&gt;</span><br><span class=\"line\">    hostname &quot;#&#123;Socket.gethostname&#125;&quot;</span><br><span class=\"line\">    tag $&#123;tag&#125;</span><br><span class=\"line\">    avg $&#123;record[&quot;id1&quot;] / record[&quot;id2&quot;]&#125;</span><br><span class=\"line\">  &lt;/record&gt;</span><br><span class=\"line\">&lt;/filter&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;match yakir.**&gt;</span><br><span class=\"line\">  @type stdout</span><br><span class=\"line\">&lt;/match&gt;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动镜像，验证日志</span></span><br><span class=\"line\">docker run --rm --name fluent -v /tmp/fluentd:/fluentd/etc fluent/fluentd</span><br><span class=\"line\">2022-07-04 10:12:53.028623276 +0000 yakir.test: &#123;&quot;foo&quot;:&quot;bar&quot;,&quot;id1&quot;:100,&quot;id2&quot;:50,&quot;hostname&quot;:&quot;7d5e83c528c7&quot;,&quot;tag&quot;:&quot;yakir.test&quot;,&quot;avg&quot;:2&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改字段内容</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">关键配置</span></span><br><span class=\"line\">&lt;filter foo.bar&gt;</span><br><span class=\"line\">  @type record_transformer</span><br><span class=\"line\">  &lt;record&gt;</span><br><span class=\"line\">    message yay, $&#123;record[&quot;message&quot;]&#125;</span><br><span class=\"line\">  &lt;/record&gt;</span><br><span class=\"line\">&lt;/filter&gt;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">数据解析</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">原日志</span></span><br><span class=\"line\">&#123; &quot;message&quot;: &quot;hello world!&quot; &#125;</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">解析后</span></span><br><span class=\"line\">time:</span><br><span class=\"line\">&#123; &quot;message&quot;: &quot;yay, hello world!&quot; &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>record 标签</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置</span></span><br><span class=\"line\">&lt;record&gt;</span><br><span class=\"line\">  NEW_FIELD NEW_VALUE</span><br><span class=\"line\">&lt;/record&gt;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">参数说明</span></span><br><span class=\"line\">record：获取 record 中某些字段的内容。例如record[&quot;count&quot;]</span><br><span class=\"line\">tag：获取 tag 的内容</span><br><span class=\"line\">time：获取日志的时间戳</span><br><span class=\"line\">hostname：获取主机名字，和#&#123;Socket.gethostname&#125;作用一样</span><br><span class=\"line\">tag_parts[N]：tag 以.分隔，获取 tag 的第 N 部分</span><br><span class=\"line\">tag_prefix[N]：获取 tag 的 0-N 部分</span><br><span class=\"line\">tag_suffix[N]：获取 tag 的 N-结尾部分</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"四、DaemonSet-方式部署\"><a href=\"#四、DaemonSet-方式部署\" class=\"headerlink\" title=\"四、DaemonSet 方式部署\"></a>四、DaemonSet 方式部署</h3><img data-src=\"/posts/41fe/fluent2.png\" class>\n<h4 id=\"部署-Elasticsearch-和-Kibana\"><a href=\"#部署-Elasticsearch-和-Kibana\" class=\"headerlink\" title=\"部署 Elasticsearch 和 Kibana\"></a>部署 Elasticsearch 和 Kibana</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建日志 namespace，方便清理</span></span><br><span class=\"line\">kubectl create ns logging</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">部署 Elasticsearch（StatefulSet 和 Service，service 资源使用无头服务）</span></span><br><span class=\"line\">cat &gt; elasticsearch.yaml &lt;&lt; &quot;EOF&quot;</span><br><span class=\"line\">apiVersion: apps/v1</span><br><span class=\"line\">kind: StatefulSet</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: es</span><br><span class=\"line\">  namespace: logging</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  serviceName: elasticsearch</span><br><span class=\"line\">  replicas: 1</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      app: elasticsearch</span><br><span class=\"line\">  template:</span><br><span class=\"line\">    metadata:</span><br><span class=\"line\">      labels:</span><br><span class=\"line\">        app: elasticsearch</span><br><span class=\"line\">    spec:</span><br><span class=\"line\">      # 初始化容器，调整内核参数</span><br><span class=\"line\">      initContainers:</span><br><span class=\"line\">      - name: increase-vm-max-map</span><br><span class=\"line\">        image: busybox</span><br><span class=\"line\">        command: [&quot;sysctl&quot;, &quot;-w&quot;, &quot;vm.max_map_count=262144&quot;]</span><br><span class=\"line\">        securityContext:</span><br><span class=\"line\">          privileged: true</span><br><span class=\"line\">      - name: increase-fd-ulimit</span><br><span class=\"line\">        image: busybox</span><br><span class=\"line\">        command: [&quot;sh&quot;, &quot;-c&quot;, &quot;ulimit -n 65536&quot;]</span><br><span class=\"line\">        securityContext:</span><br><span class=\"line\">          privileged: true</span><br><span class=\"line\">      containers:</span><br><span class=\"line\">      - name: elasticsearch</span><br><span class=\"line\">        image: docker.elastic.co/elasticsearch/elasticsearch:7.6.2</span><br><span class=\"line\">        resources:</span><br><span class=\"line\">          limits:</span><br><span class=\"line\">            cpu: 1000m</span><br><span class=\"line\">          requests:</span><br><span class=\"line\">            cpu: 100m</span><br><span class=\"line\">        ports:</span><br><span class=\"line\">        - containerPort: 9200</span><br><span class=\"line\">          name: rest</span><br><span class=\"line\">          protocol: TCP</span><br><span class=\"line\">        - containerPort: 9300</span><br><span class=\"line\">          name: inter-node</span><br><span class=\"line\">          protocol: TCP</span><br><span class=\"line\">        volumeMounts:</span><br><span class=\"line\">        - name: data</span><br><span class=\"line\">          mountPath: /usr/share/elasticsearch/data</span><br><span class=\"line\">        env:</span><br><span class=\"line\">          - name: cluster.name</span><br><span class=\"line\">            value: k8s-logs</span><br><span class=\"line\">          - name: node.name</span><br><span class=\"line\">            valueFrom:</span><br><span class=\"line\">              fieldRef:</span><br><span class=\"line\">                fieldPath: metadata.name</span><br><span class=\"line\">          #多 ES 节点时注意以下配置</span><br><span class=\"line\">          - name: cluster.initial_master_nodes</span><br><span class=\"line\">            value: &quot;es-0&quot;</span><br><span class=\"line\">          - name: discovery.zen.minimum_master_nodes</span><br><span class=\"line\">            value: &quot;1&quot;</span><br><span class=\"line\">          - name: discovery.seed_hosts</span><br><span class=\"line\">            value: &quot;elasticsearch&quot;</span><br><span class=\"line\">          - name: ES_JAVA_OPTS</span><br><span class=\"line\">            value: &quot;-Xms512m -Xmx512m&quot;</span><br><span class=\"line\">          - name: network.host</span><br><span class=\"line\">            value: &quot;0.0.0.0&quot;</span><br><span class=\"line\">      # 持久化存储，线上环境建议使用 StorageClass 等存储资源对象</span><br><span class=\"line\">      volumes:</span><br><span class=\"line\">      - name: data</span><br><span class=\"line\">        emptyDir: &#123;&#125;</span><br><span class=\"line\">---</span><br><span class=\"line\">kind: Service</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: elasticsearch</span><br><span class=\"line\">  namespace: logging</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app: elasticsearch</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    app: elasticsearch</span><br><span class=\"line\"><span class=\"meta prompt_\">  #</span><span class=\"language-bash\">使用无头服务，确保 StatefulSet 中 Pod 固定 DNS 地址，如 es-0.elasticsearch.logging.svc.cluster.local</span></span><br><span class=\"line\">  clusterIP: None</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">    - port: 9200</span><br><span class=\"line\">      name: rest</span><br><span class=\"line\">    - port: 9300</span><br><span class=\"line\">      name: inter-node</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">部署 Kibana 资源</span></span><br><span class=\"line\">cat &gt; kibana.yaml &lt;&lt; &quot;EOF&quot;</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Service</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: kibana</span><br><span class=\"line\">  namespace: logging</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app: kibana</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    app: kibana</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">  - port: 5601</span><br><span class=\"line\">  type: ClusterIP</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: apps/v1</span><br><span class=\"line\">kind: Deployment</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: kibana</span><br><span class=\"line\">  namespace: logging</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app: kibana</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      app: kibana</span><br><span class=\"line\">  template:</span><br><span class=\"line\">    metadata:</span><br><span class=\"line\">      labels:</span><br><span class=\"line\">        app: kibana</span><br><span class=\"line\">    spec:</span><br><span class=\"line\">      containers:</span><br><span class=\"line\">      - name: kibana</span><br><span class=\"line\">        image: docker.elastic.co/kibana/kibana:7.6.2</span><br><span class=\"line\">        resources:</span><br><span class=\"line\">          limits:</span><br><span class=\"line\">            cpu: 1000m</span><br><span class=\"line\">          requests:</span><br><span class=\"line\">            cpu: 200m</span><br><span class=\"line\">        env:</span><br><span class=\"line\">        - name: ELASTICSEARCH_HOSTS</span><br><span class=\"line\">          value: http://elasticsearch:9200</span><br><span class=\"line\">        ports:</span><br><span class=\"line\">        - containerPort: 5601</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">部署并查看部署结果</span></span><br><span class=\"line\">kubectl apply -f elasticsearch.yaml</span><br><span class=\"line\">kubectl apply -f kibana.yaml</span><br><span class=\"line\">kubectl get pod,svc -n logging -owide</span><br><span class=\"line\">NAME                          READY   STATUS    RESTARTS   AGE     IP           NODE       NOMINATED NODE   READINESS GATES</span><br><span class=\"line\">pod/es-0                      1/1     Running   0          4h54m   172.17.0.6   minikube   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">pod/kibana-6c84594848-mdp76   1/1     Running   0          158m    172.17.0.5   minikube   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                    TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)             AGE     SELECTOR</span><br><span class=\"line\">service/elasticsearch   ClusterIP   None           &lt;none&gt;        9200/TCP,9300/TCP   4h50m   app=elasticsearch</span><br><span class=\"line\">service/kibana          ClusterIP   10.106.67.32   &lt;none&gt;        5601/TCP            158m    app=kibana</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">访问验证</span></span><br><span class=\"line\">kubectl port-forward services/elasticsearch -n logging --address 127.0.0.1 9200:9200</span><br><span class=\"line\">curl http://127.0.0.1:9200/_cluster/state?pretty</span><br><span class=\"line\">curl 10.106.67.32:5601/app/kibana -I</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"部署-Fluentd\"><a href=\"#部署-Fluentd\" class=\"headerlink\" title=\"部署 Fluentd\"></a>部署 Fluentd</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">源码方式</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">git <span class=\"built_in\">clone</span> https://github.com/fluent/fluentd-kubernetes-daemonset.git</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">自定义安装方式</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">Fluentd 配置文件</span></span><br><span class=\"line\">cat &gt; fluentd-cfg.yaml &lt;&lt; &quot;EOF&quot;</span><br><span class=\"line\">kind: ConfigMap</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: fluentd-config</span><br><span class=\"line\">  namespace: logging</span><br><span class=\"line\">data:</span><br><span class=\"line\">  system.conf: |-</span><br><span class=\"line\">    &lt;system&gt;</span><br><span class=\"line\">      root_dir /tmp/fluentd-buffers/</span><br><span class=\"line\">    &lt;/system&gt;</span><br><span class=\"line\">  containers.input.conf: |-</span><br><span class=\"line\">    &lt;source&gt;</span><br><span class=\"line\">      @id fluentd-containers.log</span><br><span class=\"line\">      @type tail                              # Fluentd 内置的输入方式，其原理是不停地从源文件中获取新的日志。</span><br><span class=\"line\">      path /var/log/containers/*.log          # 挂载的服务器Docker容器日志地址</span><br><span class=\"line\">      pos_file /var/log/es-containers.log.pos</span><br><span class=\"line\">      tag raw.kubernetes.*                    # 设置日志标签</span><br><span class=\"line\">      read_from_head true</span><br><span class=\"line\">      &lt;parse&gt;                                 # 多行格式化成JSON</span><br><span class=\"line\">        @type multi_format                    # 使用 multi-format-parser 解析器插件</span><br><span class=\"line\">        &lt;pattern&gt;</span><br><span class=\"line\">          format json                         # JSON解析器</span><br><span class=\"line\">          time_key time                       # 指定事件时间的时间字段</span><br><span class=\"line\">          time_format %Y-%m-%dT%H:%M:%S.%NZ   # 时间格式</span><br><span class=\"line\">        &lt;/pattern&gt;</span><br><span class=\"line\">        &lt;pattern&gt;</span><br><span class=\"line\">          format /^(?&lt;time&gt;.+) (?&lt;stream&gt;stdout|stderr) [^ ]* (?&lt;log&gt;.*)$/</span><br><span class=\"line\">          time_format %Y-%m-%dT%H:%M:%S.%N%:z</span><br><span class=\"line\">        &lt;/pattern&gt;</span><br><span class=\"line\">      &lt;/parse&gt;</span><br><span class=\"line\">    &lt;/source&gt;</span><br><span class=\"line\">    # 在日志输出中检测异常，并将其作为一条日志转发</span><br><span class=\"line\">    # https://github.com/GoogleCloudPlatform/fluent-plugin-detect-exceptions</span><br><span class=\"line\">    &lt;match raw.kubernetes.**&gt;           # 匹配tag为raw.kubernetes.**日志信息</span><br><span class=\"line\">      @id raw.kubernetes</span><br><span class=\"line\">      @type detect_exceptions           # 使用detect-exceptions插件处理异常栈信息</span><br><span class=\"line\">      remove_tag_prefix raw             # 移除 raw 前缀</span><br><span class=\"line\">      message log</span><br><span class=\"line\">      stream stream</span><br><span class=\"line\">      multiline_flush_interval 5</span><br><span class=\"line\">      max_bytes 500000</span><br><span class=\"line\">      max_lines 1000</span><br><span class=\"line\">    &lt;/match&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;filter **&gt;  # 拼接日志</span><br><span class=\"line\">      @id filter_concat</span><br><span class=\"line\">      @type concat                # Fluentd Filter 插件，用于连接多个事件中分隔的多行日志。</span><br><span class=\"line\">      key message</span><br><span class=\"line\">      multiline_end_regexp /\\n$/  # 以换行符“\\n”拼接</span><br><span class=\"line\">      separator &quot;&quot;</span><br><span class=\"line\">    &lt;/filter&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 添加 Kubernetes metadata 数据</span><br><span class=\"line\">    &lt;filter kubernetes.**&gt;</span><br><span class=\"line\">      @id filter_kubernetes_metadata</span><br><span class=\"line\">      @type kubernetes_metadata</span><br><span class=\"line\">    &lt;/filter&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 修复 ES 中的 JSON 字段</span><br><span class=\"line\">    # 插件地址：https://github.com/repeatedly/fluent-plugin-multi-format-parser</span><br><span class=\"line\">    &lt;filter kubernetes.**&gt;</span><br><span class=\"line\">      @id filter_parser</span><br><span class=\"line\">      @type parser                # multi-format-parser多格式解析器插件</span><br><span class=\"line\">      key_name log                # 在要解析的记录中指定字段名称。</span><br><span class=\"line\">      reserve_data true           # 在解析结果中保留原始键值对。</span><br><span class=\"line\">      remove_key_name_field true  # key_name 解析成功后删除字段。</span><br><span class=\"line\">      &lt;parse&gt;</span><br><span class=\"line\">        @type multi_format</span><br><span class=\"line\">        &lt;pattern&gt;</span><br><span class=\"line\">          format json</span><br><span class=\"line\">        &lt;/pattern&gt;</span><br><span class=\"line\">        &lt;pattern&gt;</span><br><span class=\"line\">          format none</span><br><span class=\"line\">        &lt;/pattern&gt;</span><br><span class=\"line\">      &lt;/parse&gt;</span><br><span class=\"line\">    &lt;/filter&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 删除一些多余的属性</span><br><span class=\"line\">    &lt;filter kubernetes.**&gt;</span><br><span class=\"line\">      @type record_transformer</span><br><span class=\"line\">      remove_keys $.docker.container_id,$.kubernetes.container_image_id,$.kubernetes.pod_id,$.kubernetes.namespace_id,$.kubernetes.master_url,$.kubernetes.labels.pod-template-hash</span><br><span class=\"line\">    &lt;/filter&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 只保留具有logging=true标签的Pod日志</span><br><span class=\"line\">    &lt;filter kubernetes.**&gt;</span><br><span class=\"line\">      @id filter_log</span><br><span class=\"line\">      @type grep</span><br><span class=\"line\">      &lt;regexp&gt;</span><br><span class=\"line\">        key $.kubernetes.labels.logging</span><br><span class=\"line\">        pattern ^true$</span><br><span class=\"line\">      &lt;/regexp&gt;</span><br><span class=\"line\">    &lt;/filter&gt;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">  #</span><span class=\"language-bash\"><span class=\"comment\">##### 监听配置，一般用于日志聚合用 ######</span></span></span><br><span class=\"line\">  forward.input.conf: |-</span><br><span class=\"line\">    # 监听通过TCP发送的消息</span><br><span class=\"line\">    &lt;source&gt;</span><br><span class=\"line\">      @id forward</span><br><span class=\"line\">      @type forward</span><br><span class=\"line\">    &lt;/source&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  output.conf: |-</span><br><span class=\"line\">    &lt;match **&gt;</span><br><span class=\"line\">      @id elasticsearch</span><br><span class=\"line\">      @type elasticsearch</span><br><span class=\"line\">      @log_level info</span><br><span class=\"line\">      include_tag_key true</span><br><span class=\"line\">      host elasticsearch</span><br><span class=\"line\">      port 9200</span><br><span class=\"line\">      logstash_format true</span><br><span class=\"line\">      logstash_prefix k8s  # 设置 index 前缀为 k8s</span><br><span class=\"line\">      request_timeout    30s</span><br><span class=\"line\">      &lt;buffer&gt;</span><br><span class=\"line\">        @type file</span><br><span class=\"line\">        path /var/log/fluentd-buffers/kubernetes.system.buffer</span><br><span class=\"line\">        flush_mode interval</span><br><span class=\"line\">        retry_type exponential_backoff</span><br><span class=\"line\">        flush_thread_count 2</span><br><span class=\"line\">        flush_interval 5s</span><br><span class=\"line\">        retry_forever</span><br><span class=\"line\">        retry_max_interval 30</span><br><span class=\"line\">        chunk_limit_size 2M</span><br><span class=\"line\">        queue_limit_length 8</span><br><span class=\"line\">        overflow_action block</span><br><span class=\"line\">      &lt;/buffer&gt;</span><br><span class=\"line\">    &lt;/match&gt;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">cat &gt; fluentd-daemonset.yaml &lt;&lt; &quot;EOF&quot;</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: ServiceAccount</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: fluentd-es</span><br><span class=\"line\">  namespace: logging</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    k8s-app: fluentd-es</span><br><span class=\"line\">    kubernetes.io/cluster-service: &quot;true&quot;</span><br><span class=\"line\">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class=\"line\">---</span><br><span class=\"line\">kind: ClusterRole</span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: fluentd-es</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    k8s-app: fluentd-es</span><br><span class=\"line\">    kubernetes.io/cluster-service: &quot;true&quot;</span><br><span class=\"line\">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class=\"line\">rules:</span><br><span class=\"line\">- apiGroups:</span><br><span class=\"line\">  - &quot;&quot;</span><br><span class=\"line\">  resources:</span><br><span class=\"line\">  - &quot;namespaces&quot;</span><br><span class=\"line\">  - &quot;pods&quot;</span><br><span class=\"line\">  verbs:</span><br><span class=\"line\">  - &quot;get&quot;</span><br><span class=\"line\">  - &quot;watch&quot;</span><br><span class=\"line\">  - &quot;list&quot;</span><br><span class=\"line\">---</span><br><span class=\"line\">kind: ClusterRoleBinding</span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: fluentd-es</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    k8s-app: fluentd-es</span><br><span class=\"line\">    kubernetes.io/cluster-service: &quot;true&quot;</span><br><span class=\"line\">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class=\"line\">subjects:</span><br><span class=\"line\">- kind: ServiceAccount</span><br><span class=\"line\">  name: fluentd-es</span><br><span class=\"line\">  namespace: logging</span><br><span class=\"line\">  apiGroup: &quot;&quot;</span><br><span class=\"line\">roleRef:</span><br><span class=\"line\">  kind: ClusterRole</span><br><span class=\"line\">  name: fluentd-es</span><br><span class=\"line\">  apiGroup: &quot;&quot;</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: apps/v1</span><br><span class=\"line\">kind: DaemonSet</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: fluentd-es</span><br><span class=\"line\">  namespace: logging</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    k8s-app: fluentd-es</span><br><span class=\"line\">    kubernetes.io/cluster-service: &quot;true&quot;</span><br><span class=\"line\">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      k8s-app: fluentd-es</span><br><span class=\"line\">  template:</span><br><span class=\"line\">    metadata:</span><br><span class=\"line\">      labels:</span><br><span class=\"line\">        k8s-app: fluentd-es</span><br><span class=\"line\">        kubernetes.io/cluster-service: &quot;true&quot;</span><br><span class=\"line\">      # 此注释确保如果节点被驱逐，fluentd不会被驱逐，支持关键的基于 pod 注释的优先级方案。</span><br><span class=\"line\">      annotations:</span><br><span class=\"line\">        priorityClassName: system-cluster-critical</span><br><span class=\"line\">    spec:</span><br><span class=\"line\">      serviceAccountName: fluentd-es</span><br><span class=\"line\">      containers:</span><br><span class=\"line\">      - name: fluentd-es</span><br><span class=\"line\">        image: quay.io/fluentd_elasticsearch/fluentd:v3.0.1</span><br><span class=\"line\">        #image: fluent/fluentd-kubernetes-daemonset:v1.14.6-debian-elasticsearch7-1.1</span><br><span class=\"line\">        env:</span><br><span class=\"line\">        - name: FLUENTD_ARGS</span><br><span class=\"line\">          value: --no-supervisor -q</span><br><span class=\"line\">        resources:</span><br><span class=\"line\">          limits:</span><br><span class=\"line\">            memory: 500Mi</span><br><span class=\"line\">          requests:</span><br><span class=\"line\">            cpu: 100m</span><br><span class=\"line\">            memory: 200Mi</span><br><span class=\"line\">        volumeMounts:</span><br><span class=\"line\">        - name: varlog</span><br><span class=\"line\">          mountPath: /var/log</span><br><span class=\"line\">        - name: varlibdockercontainers</span><br><span class=\"line\">          mountPath: /var/lib/docker/containers</span><br><span class=\"line\">          readOnly: true</span><br><span class=\"line\">        - name: config-volume</span><br><span class=\"line\">          mountPath: /etc/fluent/config.d</span><br><span class=\"line\">      # 打上 master 节点污点，收集 master 节点</span><br><span class=\"line\">      tolerations:</span><br><span class=\"line\">      - operator: Exists</span><br><span class=\"line\">      terminationGracePeriodSeconds: 30</span><br><span class=\"line\">      # 挂载需要收集日志的目录</span><br><span class=\"line\">      volumes:</span><br><span class=\"line\">      - name: varlog</span><br><span class=\"line\">        hostPath:</span><br><span class=\"line\">          path: /var/log</span><br><span class=\"line\">      - name: varlibdockercontainers</span><br><span class=\"line\">        hostPath:</span><br><span class=\"line\">          path: /var/lib/docker/containers</span><br><span class=\"line\">      - name: config-volume</span><br><span class=\"line\">        configMap:</span><br><span class=\"line\">          name: fluentd-config</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">部署并查看部署结果</span></span><br><span class=\"line\">kubectl apply -f fluentd-cfg.yaml</span><br><span class=\"line\">kubectl apply -f fluentd-daemonset.yaml</span><br><span class=\"line\">kubectl get pod -n logging -owide</span><br><span class=\"line\">NAME                          READY   STATUS    RESTARTS        AGE     IP           NODE       NOMINATED NODE   READINESS GATES</span><br><span class=\"line\">pod/fluentd-es-cfdcx          1/1     Running   0               91m     172.17.0.7   minikube   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"部署测试应用，输出日志容器\"><a href=\"#部署测试应用，输出日志容器\" class=\"headerlink\" title=\"部署测试应用，输出日志容器\"></a>部署测试应用，输出日志容器</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">直接标准输出日志容器</span></span><br><span class=\"line\">cat &gt; stdin.yaml &lt;&lt; &quot;EOF&quot;</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Pod</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: counter1</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    # 配置该标签，日志才能进行收集</span><br><span class=\"line\">    logging: &quot;true&quot;</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  containers:</span><br><span class=\"line\">    - image: busybox</span><br><span class=\"line\">      args: [&quot;/bin/sh&quot;,&quot;-c&quot;, &#x27;i=0; while true; do echo &quot;$i: $(date)&quot;; i=$((i+1)); sleep 5; done&#x27;]</span><br><span class=\"line\">      name: counter</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">sidecar 方式获取输出到文件的容器日志</span></span><br><span class=\"line\">cat &gt; sidecar.yaml &lt;&lt; &quot;EOF&quot;</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Pod</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: counter2</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    logging: &quot;true&quot;</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  containers:</span><br><span class=\"line\">  - name: counter2</span><br><span class=\"line\">    image: busybox</span><br><span class=\"line\">    args:</span><br><span class=\"line\">    - /bin/sh</span><br><span class=\"line\">    - -c</span><br><span class=\"line\">    - &gt;</span><br><span class=\"line\">      i=0;</span><br><span class=\"line\">      while true;</span><br><span class=\"line\">      do</span><br><span class=\"line\">        echo &quot;$i: $(date)&quot; &gt;&gt; /var/log/1.log;</span><br><span class=\"line\">        echo &quot;$(date) INFO $i&quot; &gt;&gt; /var/log/2.log;</span><br><span class=\"line\">        i=$((i+1));</span><br><span class=\"line\">        sleep 3;</span><br><span class=\"line\">      done</span><br><span class=\"line\">    volumeMounts:</span><br><span class=\"line\">    - name: varlog</span><br><span class=\"line\">      mountPath: /var/log</span><br><span class=\"line\">  - name: count-log-1</span><br><span class=\"line\">    image: busybox</span><br><span class=\"line\">    args: [/bin/sh, -c, &#x27;tail -n 1 -f /var/log/1.log&#x27;]</span><br><span class=\"line\">    volumeMounts:</span><br><span class=\"line\">    - name: varlog</span><br><span class=\"line\">      mountPath: /var/log</span><br><span class=\"line\">  - name: count-log-2</span><br><span class=\"line\">    image: busybox</span><br><span class=\"line\">    args: [/bin/sh, -c, &#x27;tail -n 1 -f /var/log/2.log&#x27;]</span><br><span class=\"line\">    volumeMounts:</span><br><span class=\"line\">    - name: varlog</span><br><span class=\"line\">      mountPath: /var/log</span><br><span class=\"line\">  restartPolicy: Never</span><br><span class=\"line\">  volumes:</span><br><span class=\"line\">  - name: varlog</span><br><span class=\"line\">    emptyDir: &#123;&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">获取日志方式：kubectl logs counter2 count-log-2 -f --<span class=\"built_in\">tail</span> 3</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">输出 JSON 格式日志，用于分析</span></span><br><span class=\"line\">cat &gt; dummylogs.yaml &lt;&lt; &quot;EOF&quot;</span><br><span class=\"line\">apiVersion: apps/v1</span><br><span class=\"line\">kind: Deployment</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: dummylogs</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  replicas: 1</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      app: dummylogs</span><br><span class=\"line\">  template:</span><br><span class=\"line\">    metadata:</span><br><span class=\"line\">      labels:</span><br><span class=\"line\">        app: dummylogs</span><br><span class=\"line\">        logging: &quot;true&quot;  # 要采集日志需要加上该标签</span><br><span class=\"line\">    spec:</span><br><span class=\"line\">      containers:</span><br><span class=\"line\">      - name: dummy</span><br><span class=\"line\">        image: cnych/dummylogs:latest</span><br><span class=\"line\">        args:</span><br><span class=\"line\">        - msg-processor</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: apps/v1</span><br><span class=\"line\">kind: Deployment</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: dummylogs2</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  replicas: 1</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      app: dummylogs2</span><br><span class=\"line\">  template:</span><br><span class=\"line\">    metadata:</span><br><span class=\"line\">      labels:</span><br><span class=\"line\">        app: dummylogs2</span><br><span class=\"line\">        logging: &quot;true&quot;  # 要采集日志需要加上该标签</span><br><span class=\"line\">    spec:</span><br><span class=\"line\">      containers:</span><br><span class=\"line\">      - name: dummy</span><br><span class=\"line\">        image: cnych/dummylogs:latest</span><br><span class=\"line\">        args:</span><br><span class=\"line\">        - msg-receiver-api</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">部署</span></span><br><span class=\"line\">kubectl apply -f counter.yaml</span><br><span class=\"line\">kubectl apply -f dummylogs.yaml</span><br></pre></td></tr></table></figure>\n<h4 id=\"Kibana-amp-Elasticsearch-查询数据验证\"><a href=\"#Kibana-amp-Elasticsearch-查询数据验证\" class=\"headerlink\" title=\"Kibana  &amp; Elasticsearch 查询数据验证\"></a>Kibana  &amp; Elasticsearch 查询数据验证</h4><ul>\n<li><p>暴露 Kibana  &amp; Elasticsearch 服务</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl port-forward services/kibana -n logging --address 127.0.0.1 5601:5601</span><br><span class=\"line\">kubectl port-forward services/elasticsearch -n logging --address 127.0.0.1 9200:9200</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>访问验证</p>\n</li>\n</ul>\n<img data-src=\"/posts/41fe/fluent3.png\" class>\n<img data-src=\"/posts/41fe/fluent4.png\" class>\n\n<ul>\n<li>Kibana 图表聚合展示<h4 id=\"日志告警功能\"><a href=\"#日志告警功能\" class=\"headerlink\" title=\"日志告警功能\"></a>日志告警功能</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; elastalert.yaml &lt;&lt; &quot;EOF&quot;</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: ConfigMap</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: elastalert-config</span><br><span class=\"line\">  namespace: logging</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app: elastalert</span><br><span class=\"line\">data:</span><br><span class=\"line\">  elastalert_config: |-</span><br><span class=\"line\">    ---</span><br><span class=\"line\">    rules_folder: /opt/rules       # 指定规则的目录</span><br><span class=\"line\">    scan_subdirectories: false</span><br><span class=\"line\">    run_every:                     # 多久从 ES 中查询一次</span><br><span class=\"line\">      minutes: 1</span><br><span class=\"line\">    buffer_time:</span><br><span class=\"line\">      minutes: 15</span><br><span class=\"line\">    es_host: elasticsearch</span><br><span class=\"line\">    es_port: 9200</span><br><span class=\"line\">    writeback_index: elastalert</span><br><span class=\"line\">    use_ssl: False</span><br><span class=\"line\">    verify_certs: True</span><br><span class=\"line\">    alert_time_limit:             # 失败重试限制</span><br><span class=\"line\">      minutes: 720</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: ConfigMap</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: elastalert-rules</span><br><span class=\"line\">  namespace: logging</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app: elastalert</span><br><span class=\"line\">data:</span><br><span class=\"line\">  rule_config.yaml: |-</span><br><span class=\"line\">    name: dummylogs error     # 规则名字，唯一值</span><br><span class=\"line\">    es_host: elasticsearch</span><br><span class=\"line\">    es_port: 9200</span><br><span class=\"line\">    type: any                 # 报警类型</span><br><span class=\"line\">    index: k8s-*              # es索引</span><br><span class=\"line\">    filter:                   # 过滤</span><br><span class=\"line\">    - query:</span><br><span class=\"line\">        query_string:</span><br><span class=\"line\">          query: &quot;LOGLEVEL:ERROR&quot;  # 报警条件</span><br><span class=\"line\">    alert:                         # 报警类型</span><br><span class=\"line\">    - &quot;email&quot;</span><br><span class=\"line\">    smtp_host: 127.0.0.1</span><br><span class=\"line\">    smtp_port: 587</span><br><span class=\"line\">    smtp_auth_file: /opt/auth/smtp_auth_file.yaml</span><br><span class=\"line\">    email_reply_to: xxx@gmail.com</span><br><span class=\"line\">    from_addr: xxx@gmail.com</span><br><span class=\"line\">    email:                  # 接受邮箱</span><br><span class=\"line\">    - &quot;xxx@gmail.com&quot;</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: apps/v1</span><br><span class=\"line\">kind: Deployment</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: elastalert</span><br><span class=\"line\">  namespace: logging</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app: elastalert</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      app: elastalert</span><br><span class=\"line\">  template:</span><br><span class=\"line\">    metadata:</span><br><span class=\"line\">      labels:</span><br><span class=\"line\">        app: elastalert</span><br><span class=\"line\">    spec:</span><br><span class=\"line\">      containers:</span><br><span class=\"line\">      - name: elastalert</span><br><span class=\"line\">        image: jertel/elastalert-docker:0.2.4</span><br><span class=\"line\">        imagePullPolicy: IfNotPresent</span><br><span class=\"line\">        volumeMounts:</span><br><span class=\"line\">        - name: config</span><br><span class=\"line\">          mountPath: /opt/config</span><br><span class=\"line\">        - name: rules</span><br><span class=\"line\">          mountPath: /opt/rules</span><br><span class=\"line\">        - name: auth</span><br><span class=\"line\">          mountPath: /opt/auth</span><br><span class=\"line\">        resources:</span><br><span class=\"line\">          limits:</span><br><span class=\"line\">            cpu: 50m</span><br><span class=\"line\">            memory: 256Mi</span><br><span class=\"line\">          requests:</span><br><span class=\"line\">            cpu: 50m</span><br><span class=\"line\">            memory: 256Mi</span><br><span class=\"line\">      volumes:</span><br><span class=\"line\">      - name: auth</span><br><span class=\"line\">        secret:</span><br><span class=\"line\">          secretName: smtp-auth</span><br><span class=\"line\">      - name: rules</span><br><span class=\"line\">        configMap:</span><br><span class=\"line\">          name: elastalert-rules</span><br><span class=\"line\">      - name: config</span><br><span class=\"line\">        configMap:</span><br><span class=\"line\">          name: elastalert-config</span><br><span class=\"line\">          items:</span><br><span class=\"line\">          - key: elastalert_config</span><br><span class=\"line\">            path: elastalert_config.yaml</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">邮箱认证信息</span></span><br><span class=\"line\">cat &gt; smtp_auth_file.yaml &lt;&lt; EOF</span><br><span class=\"line\">user: &quot;xxxxx@gmail.com&quot;</span><br><span class=\"line\">password: &quot;123xxx&quot;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">部署验证</span></span><br><span class=\"line\">kubectl create secret generic smtp-auth --from-file=smtp_auth_file.yaml -n logging</span><br><span class=\"line\">kubectl apply -f elastalert.yaml</span><br><span class=\"line\">kubectl get pods -n logging -l app=elastalert</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">查看 Kibana 是否生成对应索引</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"五、fluentd-operator-方式部署\"><a href=\"#五、fluentd-operator-方式部署\" class=\"headerlink\" title=\"五、fluentd-operator 方式部署\"></a>五、fluentd-operator 方式部署</h3><h4 id=\"CRD-资源\"><a href=\"#CRD-资源\" class=\"headerlink\" title=\"CRD 资源\"></a>CRD 资源</h4><p><strong>fluentbit.fluent.io 资源</strong></p>\n<ul>\n<li>FluentBit：定义 Fluent Bit 属性，如镜像版本、污点、亲和性等参数。</li>\n<li>ClusterFluentBitConfig：定义 Fluent Bit 的配置文件。</li>\n<li>ClusterInput：：定义 Fluent Bit 的 input 插件。</li>\n<li>ClusterFilter：：定义 Fluent Bit 的 filter 插件。</li>\n<li>ClusterParser：定义 Fluent Bit 的 parser 插件。</li>\n<li>ClusterOutput：定义 Fluent Bit 的 output 插件。</li>\n</ul>\n<p><strong>fluentd.fluent.io 资源</strong></p>\n<ul>\n<li>Fluentd：定义 Fluentd 属性，如镜像版本、污点、亲和性等参数。</li>\n<li>FluentdConfig：定义 Fluentd namespace 级别配置文件。</li>\n<li>ClusterFluentdConfig：定义 Fluentd 集群级别配置文件。</li>\n<li>Filter：定义 Fluentd namespace 级别的 filter 插件。</li>\n<li>ClusterFilter：定义 Fluentd 集群级别的 filter 插件。</li>\n<li>Output：定义 Fluentd namespace 级别的 output 插件。</li>\n<li>ClusterOutput：定义 Fluentd 集群级别的 output 插件。</li>\n</ul>\n<h4 id=\"部署-CRD-资源与-fluent-operator\"><a href=\"#部署-CRD-资源与-fluent-operator\" class=\"headerlink\" title=\"部署 CRD 资源与 fluent-operator\"></a>部署 CRD 资源与 fluent-operator</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下载源码，创建 CRD 资源与部署 fluent-operator</span></span><br><span class=\"line\">git clone https://github.com/fluent/fluent-operator</span><br><span class=\"line\">cd fluent-operator &amp;&amp; kubectl apply -f manifests/setup/setup.yaml</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">验证资源</span></span><br><span class=\"line\">kubectl get pod,crd -n fluent</span><br><span class=\"line\">NAME                                   READY   STATUS    RESTARTS        AGE</span><br><span class=\"line\">pod/fluent-operator-86858cfc87-cg4ct   1/1     Running   1 (5h20m ago)   22h</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                                                                                        CREATED AT</span><br><span class=\"line\">customresourcedefinition.apiextensions.k8s.io/clusterfilters.fluentbit.fluent.io            2022-07-05T07:45:26Z</span><br><span class=\"line\">customresourcedefinition.apiextensions.k8s.io/clusterfilters.fluentd.fluent.io              2022-07-05T07:45:26Z</span><br><span class=\"line\">customresourcedefinition.apiextensions.k8s.io/clusterfluentbitconfigs.fluentbit.fluent.io   2022-07-05T07:45:26Z</span><br><span class=\"line\">customresourcedefinition.apiextensions.k8s.io/clusterfluentdconfigs.fluentd.fluent.io       2022-07-05T07:45:26Z</span><br><span class=\"line\">customresourcedefinition.apiextensions.k8s.io/clusterinputs.fluentbit.fluent.io             2022-07-05T07:45:26Z</span><br><span class=\"line\">customresourcedefinition.apiextensions.k8s.io/clusteroutputs.fluentbit.fluent.io            2022-07-05T07:45:26Z</span><br><span class=\"line\">customresourcedefinition.apiextensions.k8s.io/clusteroutputs.fluentd.fluent.io              2022-07-05T07:45:26Z</span><br><span class=\"line\">customresourcedefinition.apiextensions.k8s.io/clusterparsers.fluentbit.fluent.io            2022-07-05T07:45:26Z</span><br><span class=\"line\">customresourcedefinition.apiextensions.k8s.io/filters.fluentd.fluent.io                     2022-07-05T07:45:27Z</span><br><span class=\"line\">customresourcedefinition.apiextensions.k8s.io/fluentbits.fluentbit.fluent.io                2022-07-05T07:45:27Z</span><br><span class=\"line\">customresourcedefinition.apiextensions.k8s.io/fluentdconfigs.fluentd.fluent.io              2022-07-05T07:45:27Z</span><br><span class=\"line\">customresourcedefinition.apiextensions.k8s.io/fluentds.fluentd.fluent.io                    2022-07-05T07:45:27Z</span><br><span class=\"line\">customresourcedefinition.apiextensions.k8s.io/outputs.fluentd.fluent.io                     2022-07-05T07:45:28Z</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Fluent-Bit-Only-模式\"><a href=\"#Fluent-Bit-Only-模式\" class=\"headerlink\" title=\"Fluent Bit Only 模式\"></a>Fluent Bit Only 模式</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">部署 Fluent Bit 收集日志</span></span><br><span class=\"line\">cat &gt; fluent-bit.yaml &lt;&lt; &quot;EOF&quot;</span><br><span class=\"line\">apiVersion: fluentbit.fluent.io/v1alpha2</span><br><span class=\"line\">kind: FluentBit</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: fluent-bit</span><br><span class=\"line\">  namespace: fluent</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app.kubernetes.io/name: fluent-bit</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  image: kubesphere/fluent-bit:v1.8.11</span><br><span class=\"line\">  positionDB:</span><br><span class=\"line\">    hostPath:</span><br><span class=\"line\">      path: /var/lib/fluent-bit/</span><br><span class=\"line\">  resources:</span><br><span class=\"line\">    requests:</span><br><span class=\"line\">      cpu: 10m</span><br><span class=\"line\">      memory: 25Mi</span><br><span class=\"line\">    limits:</span><br><span class=\"line\">      cpu: 500m</span><br><span class=\"line\">      memory: 200Mi</span><br><span class=\"line\">  fluentBitConfigName: fluent-bit-config</span><br><span class=\"line\">  tolerations:</span><br><span class=\"line\">    - operator: Exists</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: fluentbit.fluent.io/v1alpha2</span><br><span class=\"line\">kind: ClusterFluentBitConfig</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: fluent-bit-config</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app.kubernetes.io/name: fluent-bit</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  service:</span><br><span class=\"line\">    parsersFile: parsers.conf</span><br><span class=\"line\">  inputSelector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      fluentbit.fluent.io/enabled: &quot;true&quot;</span><br><span class=\"line\">      fluentbit.fluent.io/mode: &quot;k8s&quot;</span><br><span class=\"line\">  filterSelector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      fluentbit.fluent.io/enabled: &quot;true&quot;</span><br><span class=\"line\">      fluentbit.fluent.io/mode: &quot;k8s&quot;</span><br><span class=\"line\">  outputSelector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      fluentbit.fluent.io/enabled: &quot;true&quot;</span><br><span class=\"line\">      fluentbit.fluent.io/mode: &quot;k8s&quot;</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: fluentbit.fluent.io/v1alpha2</span><br><span class=\"line\">kind: ClusterInput</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: tail</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    fluentbit.fluent.io/enabled: &quot;true&quot;</span><br><span class=\"line\">    fluentbit.fluent.io/mode: &quot;k8s&quot;</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  tail:</span><br><span class=\"line\">    tag: kube.*</span><br><span class=\"line\">    path: /var/log/containers/*.log</span><br><span class=\"line\">    parser: docker</span><br><span class=\"line\">    refreshIntervalSeconds: 10</span><br><span class=\"line\">    memBufLimit: 5MB</span><br><span class=\"line\">    skipLongLines: true</span><br><span class=\"line\">    db: /fluent-bit/tail/pos.db</span><br><span class=\"line\">    dbSync: Normal</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: fluentbit.fluent.io/v1alpha2</span><br><span class=\"line\">kind: ClusterOutput</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: es</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    fluentbit.fluent.io/enabled: &quot;true&quot;</span><br><span class=\"line\">    fluentbit.fluent.io/mode: &quot;k8s&quot;</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  matchRegex: (?:kube|service)\\.(.*)</span><br><span class=\"line\">  es:</span><br><span class=\"line\">    host: elasticsearch</span><br><span class=\"line\">    port: 9200</span><br><span class=\"line\">    generateID: true</span><br><span class=\"line\">    logstashPrefix: fluent-log-fb-only</span><br><span class=\"line\">    logstashFormat: true</span><br><span class=\"line\">    timeKey: &quot;@timestamp&quot;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">需要先部署最后端日志 output 层 elasticsearch 资源</span></span><br><span class=\"line\">kubectl apply -f elasticsearch.yaml</span><br><span class=\"line\">kubectl apply -f fluent-bit.yaml</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看部署资源</span></span><br><span class=\"line\">kubectl get pod,svc -n fluent</span><br><span class=\"line\">NAME                                   READY   STATUS    RESTARTS      AGE</span><br><span class=\"line\">pod/es-0                               1/1     Running   1 (56m ago)   17h</span><br><span class=\"line\">pod/fluent-bit-rjqsd                   1/1     Running   0             2m34s</span><br><span class=\"line\">pod/fluent-operator-86858cfc87-cg4ct   1/1     Running   1 (56m ago)   17h</span><br><span class=\"line\">NAME                    TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)             AGE</span><br><span class=\"line\">service/elasticsearch   ClusterIP   None         &lt;none&gt;        9200/TCP,9300/TCP   17h</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">请求 Elasticsearch 搜索验证日志内容</span></span><br><span class=\"line\">kubectl port-forward services/elasticsearch -n fluent --address 127.0.0.1 9200:9200</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">查看所有索引</span></span><br><span class=\"line\">curl &quot;127.0.0.1:9200/_cat/indices?pretty&quot;</span><br><span class=\"line\">yellow open fluent-log-fb-only-2022.07.06 lLmstFnwQLa89Jb7TFe-0Q 1 1 152 0 155.2kb 155.2kb </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">查看索引所有文档</span></span><br><span class=\"line\">curl &quot;127.0.0.1:9200/fluent-log-fb-only-2022.07.06/_search?pretty&quot;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">根据文档 ID 搜索具体日志</span></span><br><span class=\"line\">curl &quot;127.0.0.1:9200/fluent-log-fb-only-2022.07.06/_doc/b641529e-255c-f260-f911-f7d00d84e3fe?pretty&quot;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;_index&quot; : &quot;fluent-log-fb-only-2022.07.06&quot;,</span><br><span class=\"line\">  &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class=\"line\">  &quot;_id&quot; : &quot;b641529e-255c-f260-f911-f7d00d84e3fe&quot;,</span><br><span class=\"line\">  &quot;_version&quot; : 1,</span><br><span class=\"line\">  &quot;_seq_no&quot; : 94,</span><br><span class=\"line\">  &quot;_primary_term&quot; : 1,</span><br><span class=\"line\">  &quot;found&quot; : true,</span><br><span class=\"line\">  &quot;_source&quot; : &#123;</span><br><span class=\"line\">    &quot;@timestamp&quot; : &quot;2022-07-06T02:57:38.035Z&quot;,</span><br><span class=\"line\">    &quot;log&quot; : &quot;[2022/07/06 02:57:38] [ info] [input:tail:tail.0] inotify_fs_add(): inode=2050771 watch_fd=3 name=/var/log/containers/dashboard-metrics-scraper-58549894f-q9lpg_kubernetes-dashboard_dashboard-metrics-scraper-51061ac5d9c2c7c2da734ab35b9252edb29f4101ade5679a22181d0d735dc364.log\\n&quot;,</span><br><span class=\"line\">    &quot;time&quot; : &quot;2022-07-06T02:57:38.035319145Z&quot;,</span><br><span class=\"line\">    &quot;kubernetes&quot; : &#123;</span><br><span class=\"line\">      &quot;pod_name&quot; : &quot;fluent-bit-8v2qn&quot;,</span><br><span class=\"line\">      &quot;namespace_name&quot; : &quot;fluent&quot;,</span><br><span class=\"line\">      &quot;container_name&quot; : &quot;fluent-bit&quot;,</span><br><span class=\"line\">      &quot;docker_id&quot; : &quot;098d8ac65b201686b7a2945df6ee1a919b7220b637aea4de6490d92569c9c455&quot;,</span><br><span class=\"line\">      &quot;container_image&quot; : &quot;kubesphere/fluent-bit:v1.8.11&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Fluent-Bit-Fluentd-模式\"><a href=\"#Fluent-Bit-Fluentd-模式\" class=\"headerlink\" title=\"Fluent Bit + Fluentd 模式\"></a>Fluent Bit + Fluentd 模式</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改 Fluent Bit output 资源配置，启用 forward 插件，转发到 Fluentd</span></span><br><span class=\"line\">cat &gt;&gt; fluent-bit.yaml &lt;&lt; &quot;EOF&quot;</span><br><span class=\"line\">apiVersion: fluentbit.fluent.io/v1alpha2</span><br><span class=\"line\">kind: ClusterOutput</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: fluentd</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    fluentbit.fluent.io/enabled: &quot;true&quot;</span><br><span class=\"line\">    fluentbit.fluent.io/component: logging</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  matchRegex: (?:kube|service)\\.(.*)</span><br><span class=\"line\">  forward:</span><br><span class=\"line\">    host: fluentd.fluent.svc</span><br><span class=\"line\">    port: 24224</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">部署 Fluentd</span> </span><br><span class=\"line\">cat &gt; fluentd.yaml &lt;&lt; &quot;EOF&quot;</span><br><span class=\"line\">apiVersion: fluentd.fluent.io/v1alpha1</span><br><span class=\"line\">kind: Fluentd</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: fluentd</span><br><span class=\"line\">  namespace: fluent</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app.kubernetes.io/name: fluentd</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  globalInputs:</span><br><span class=\"line\">  - forward:</span><br><span class=\"line\">      bind: 0.0.0.0</span><br><span class=\"line\">      port: 24224</span><br><span class=\"line\">  replicas: 1</span><br><span class=\"line\">  image: kubesphere/fluentd:v1.14.4</span><br><span class=\"line\">  fluentdCfgSelector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      config.fluentd.fluent.io/enabled: &quot;true&quot;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置 Fluentd</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">1.使用 ClusterFluentdConfig 配置，发送 kube-system 与 default 下 namesapce 日志到 ClusterOutput</span></span><br><span class=\"line\">cat &gt;&gt; fluentd.yaml &lt;&lt; &quot;EOF&quot;</span><br><span class=\"line\">apiVersion: fluentd.fluent.io/v1alpha1</span><br><span class=\"line\">kind: ClusterFluentdConfig</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: cluster-fluentd-config</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    config.fluentd.fluent.io/enabled: &quot;true&quot;</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  watchedNamespaces:</span><br><span class=\"line\">  - kube-system</span><br><span class=\"line\">  - default</span><br><span class=\"line\">  clusterOutputSelector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      output.fluentd.fluent.io/scope: &quot;cluster&quot;</span><br><span class=\"line\">      output.fluentd.fluent.io/enabled: &quot;true&quot;</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: fluentd.fluent.io/v1alpha1</span><br><span class=\"line\">kind: ClusterOutput</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: cluster-fluentd-output-es</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    output.fluentd.fluent.io/scope: &quot;cluster&quot;</span><br><span class=\"line\">    output.fluentd.fluent.io/enabled: &quot;true&quot;</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  outputs:</span><br><span class=\"line\">  - elasticsearch:</span><br><span class=\"line\">      host: elasticsearch-master.elastic.svc</span><br><span class=\"line\">      port: 9200</span><br><span class=\"line\">      logstashFormat: true</span><br><span class=\"line\">      logstashPrefix: fluent-log-cluster-fd</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">2.使用 FluentdConfig + ClusterFluentdConfig 配置，发送集群范围和 namespace 范围日志到 Output 或 ClusterOutput</span></span><br><span class=\"line\">cat &gt;&gt; fluentd.yaml &lt;&lt; &quot;EOF&quot;</span><br><span class=\"line\">apiVersion: fluentd.fluent.io/v1alpha1</span><br><span class=\"line\">kind: FluentdConfig</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: namespace-fluentd-config-user1</span><br><span class=\"line\">  namespace: fluent</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    config.fluentd.fluent.io/enabled: &quot;true&quot;</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  outputSelector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      output.fluentd.fluent.io/enabled: &quot;true&quot;</span><br><span class=\"line\">      output.fluentd.fluent.io/user: &quot;user1&quot;</span><br><span class=\"line\">  clusterOutputSelector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      output.fluentd.fluent.io/enabled: &quot;true&quot;</span><br><span class=\"line\">      output.fluentd.fluent.io/user: &quot;user1&quot;</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: fluentd.fluent.io/v1alpha1</span><br><span class=\"line\">kind: ClusterFluentdConfig</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: cluster-fluentd-config-cluster-only</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    config.fluentd.fluent.io/enabled: &quot;true&quot;</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  watchedNamespaces:</span><br><span class=\"line\">  - kube-system</span><br><span class=\"line\">  - kubesphere-system</span><br><span class=\"line\">  clusterOutputSelector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      output.fluentd.fluent.io/enabled: &quot;true&quot;</span><br><span class=\"line\">      output.fluentd.fluent.io/scope: &quot;cluster-only&quot;</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: fluentd.fluent.io/v1alpha1</span><br><span class=\"line\">kind: Output</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: namespace-fluentd-output-user1</span><br><span class=\"line\">  namespace: fluent</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    output.fluentd.fluent.io/enabled: &quot;true&quot;</span><br><span class=\"line\">    output.fluentd.fluent.io/user: &quot;user1&quot;</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  outputs:</span><br><span class=\"line\">  - elasticsearch:</span><br><span class=\"line\">      host: elasticsearch-master.elastic.svc</span><br><span class=\"line\">      port: 9200</span><br><span class=\"line\">      logstashFormat: true</span><br><span class=\"line\">      logstashPrefix: fluent-log-user1-fd</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: fluentd.fluent.io/v1alpha1</span><br><span class=\"line\">kind: ClusterOutput</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: cluster-fluentd-output-user1</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    output.fluentd.fluent.io/enabled: &quot;true&quot;</span><br><span class=\"line\">    output.fluentd.fluent.io/user: &quot;user1&quot;</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  outputs:</span><br><span class=\"line\">  - elasticsearch:</span><br><span class=\"line\">      host: elasticsearch-master.elastic.svc</span><br><span class=\"line\">      port: 9200</span><br><span class=\"line\">      logstashFormat: true</span><br><span class=\"line\">      logstashPrefix: fluent-log-cluster-user1-fd</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: fluentd.fluent.io/v1alpha1</span><br><span class=\"line\">kind: ClusterOutput</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: cluster-fluentd-output-cluster-only</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    output.fluentd.fluent.io/enabled: &quot;true&quot;</span><br><span class=\"line\">    output.fluentd.fluent.io/scope: &quot;cluster-only&quot;</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  outputs:</span><br><span class=\"line\">  - elasticsearch:</span><br><span class=\"line\">      host: elasticsearch-master.elastic.svc</span><br><span class=\"line\">      port: 9200</span><br><span class=\"line\">      logstashFormat: true</span><br><span class=\"line\">      logstashPrefix: fluent-log-cluster-only-fd</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Fluentd 输出使用 buffer 缓冲区</span></span><br><span class=\"line\">cat &gt;&gt; fluentd.yaml &lt;&lt; &quot;EOF&quot;</span><br><span class=\"line\">apiVersion: fluentd.fluent.io/v1alpha1</span><br><span class=\"line\">kind: ClusterOutput</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: cluster-fluentd-output-buffer</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    output.fluentd.fluent.io/type: &quot;buffer&quot;</span><br><span class=\"line\">    output.fluentd.fluent.io/enabled: &quot;true&quot;</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  outputs:</span><br><span class=\"line\">  - stdout: &#123;&#125;</span><br><span class=\"line\">    buffer:</span><br><span class=\"line\">      type: file</span><br><span class=\"line\">      path: /buffers/stdout.log</span><br><span class=\"line\">  - elasticsearch:</span><br><span class=\"line\">      host: elasticsearch-master.elastic.svc</span><br><span class=\"line\">      port: 9200</span><br><span class=\"line\">      logstashFormat: true</span><br><span class=\"line\">      logstashPrefix: fluent-log-buffer-fd</span><br><span class=\"line\">    buffer:</span><br><span class=\"line\">      type: file</span><br><span class=\"line\">      path: /buffers/es.log</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Fluentd-Only-模式\"><a href=\"#Fluentd-Only-模式\" class=\"headerlink\" title=\"Fluentd Only 模式\"></a>Fluentd Only 模式</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; fluentd.yaml &lt;&lt; &quot;EOF&quot;</span><br><span class=\"line\">apiVersion: fluentd.fluent.io/v1alpha1</span><br><span class=\"line\">kind: Fluentd</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: fluentd-http</span><br><span class=\"line\">  namespace: fluent</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app.kubernetes.io/name: fluentd</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  globalInputs:</span><br><span class=\"line\">    - http:</span><br><span class=\"line\">        bind: 0.0.0.0</span><br><span class=\"line\">        port: 9880</span><br><span class=\"line\">  replicas: 1</span><br><span class=\"line\">  image: kubesphere/fluentd:v1.14.4</span><br><span class=\"line\">  fluentdCfgSelector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      config.fluentd.fluent.io/enabled: &quot;true&quot;</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: fluentd.fluent.io/v1alpha1</span><br><span class=\"line\">kind: FluentdConfig</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: fluentd-only-config</span><br><span class=\"line\">  namespace: fluent</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    config.fluentd.fluent.io/enabled: &quot;true&quot;</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  filterSelector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      filter.fluentd.fluent.io/mode: &quot;fluentd-only&quot;</span><br><span class=\"line\">      filter.fluentd.fluent.io/enabled: &quot;true&quot;</span><br><span class=\"line\">  outputSelector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      output.fluentd.fluent.io/mode: &quot;fluentd-only&quot;</span><br><span class=\"line\">      output.fluentd.fluent.io/enabled: &quot;true&quot;</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: fluentd.fluent.io/v1alpha1</span><br><span class=\"line\">kind: Filter</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: fluentd-only-filter</span><br><span class=\"line\">  namespace: fluent</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    filter.fluentd.fluent.io/mode: &quot;fluentd-only&quot;</span><br><span class=\"line\">    filter.fluentd.fluent.io/enabled: &quot;true&quot;</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  filters:</span><br><span class=\"line\">    - stdout: &#123;&#125;</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: fluentd.fluent.io/v1alpha1</span><br><span class=\"line\">kind: Output</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: fluentd-only-stdout</span><br><span class=\"line\">  namespace: fluent</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    output.fluentd.fluent.io/mode: &quot;fluentd-only&quot;</span><br><span class=\"line\">    output.fluentd.fluent.io/enabled: &quot;true&quot;</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  outputs:</span><br><span class=\"line\">    - stdout: &#123;&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看部署资源</span></span><br><span class=\"line\">kubectl get all -n fluent</span><br><span class=\"line\">NAME                                   READY   STATUS    RESTARTS       AGE</span><br><span class=\"line\">pod/es-0                               1/1     Running   1 (163m ago)   19h</span><br><span class=\"line\">pod/fluent-operator-86858cfc87-cg4ct   1/1     Running   1 (163m ago)   19h</span><br><span class=\"line\">pod/fluentd-http-0                     1/1     Running   0              2m53s</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                    TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)             AGE</span><br><span class=\"line\">service/elasticsearch   ClusterIP   None         &lt;none&gt;        9200/TCP,9300/TCP   19h</span><br><span class=\"line\">service/fluentd-http    ClusterIP   10.97.96.1   &lt;none&gt;        9880/TCP            2m54s</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                              READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class=\"line\">deployment.apps/fluent-operator   1/1     1            1           19h</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                                         DESIRED   CURRENT   READY   AGE</span><br><span class=\"line\">replicaset.apps/fluent-operator-86858cfc87   1         1         1       19h</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                            READY   AGE</span><br><span class=\"line\">statefulset.apps/es             1/1     19h</span><br><span class=\"line\">statefulset.apps/fluentd-http   1/1     2m54s</span><br></pre></td></tr></table></figure>\n\n\n<blockquote>\n<p>参考文档：<br>1、<a href=\"https://www.qikqiak.com/post/install-efk-stack-on-k8s/\">https://www.qikqiak.com/post/install-efk-stack-on-k8s/</a><br>2、fluentd 官网：<a href=\"https://docs.fluentd.org/\">https://docs.fluentd.org/</a><br>3、fluentd-operator 官网：<a href=\"https://github.com/fluent/fluent-operator\">https://github.com/fluent/fluent-operator</a><br>4、fluent-operator-walkthrough：<a href=\"https://github.com/kubesphere-sigs/fluent-operator-walkthrough\">https://github.com/kubesphere-sigs/fluent-operator-walkthrough</a><br>5、KubeSphere：<a href=\"https://kubesphere.com.cn/blogs/fluent-operator-logging\">https://kubesphere.com.cn/blogs/fluent-operator-logging</a></p>\n</blockquote>"},{"title":"Openssl 原理与操作","abbrlink":"b8bc","date":"2022-12-08T14:52:20.000Z","_content":"### 一、原理\n> 参考：\n> [https://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html](https://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html)\n> [https://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html](https://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html)\n> [https://www.nixops.me/articles/ssl-cetificate-create-and-signed.html](https://www.nixops.me/articles/ssl-cetificate-create-and-signed.html)\n\n{% asset_img openssl-1.jpeg %}\n\n### 二、证书操作\n#### 1、第三方签发 SSL 证书\n```shell\n# 生成私钥，加密参数 -des3\nopenssl genrsa -out a.com.key 2048\n\n\n# 生成 csr 文件\nopenssl genrsa -out a.com.key 2048 openssl req -new -sha256 -key a.com.key -out a.com.csr\n# 查看 csr 信息\nopenssl req -noout -text -in a.com.csr\n\n\n# 提交 csr 文件到 CA 或第三方证书机构获取数字签名后的公钥 crt 文件\n# 部署 crt 与 key 文件至 web 服务器\n```\n<!--more-->\n\n#### 2、自签名/自有 CA 签发证书\n\n- 使用自签名方式\n```shell\n# 使用已有私钥和 csr 自签名\nopenssl x509 -req -days 3650 -in a.com.csr -extensions v3_ca -signkey a.com.key -out a.com.crt\n# 或直接生成私钥+公钥\nopenssl req -x509 -nodes -days 3650 -newkey rsa:2048 -keyout a.com.key -out a.com.crt\n\n\n# 直接生成自签名证书\nopenssl req -x509 -days 3650 -new -newkey rsa:2048 -nodes -keyout a.com.key -out a.com.csr -subj \"/C=hk/ST=hk/L=hk/O=hk/OU=hk/CN=*.a.com\"\n# 验证私钥和公钥\nopenssl rsa -check -in a.com.key \nopenssl x509 -text -noout -in a.com.crt \n```\n\n- 使用 CA 签名\n```shell\n# 生成 CA 公私钥\nopenssl genrsa -out ca.key 2048\nopenssl req -x509 -sha256 -new -nodes -key ca.key -out ca.crt -days 36500 -subj \"/C=CN/ST=HK/L=HK/O=HK/OU=HK LTD/CN=a.com\"\n# 查看 CA 证书详细信息\nopenssl x509 -in ca.crt -text\n\n\n# 使用 CA 签发证书\nopenssl x509 -req -days 365 -sha256 -CA ca.crt -CAkey ca.key -CAcreateserial -in a.com.csr -out a.com.crt\n# 更好兼容浏览器\ncat ca.crt >> a.com.crt\n\n\n# 查看签发者信息\nopenssl x509 -noout -issuer -issuer_hash -in a.com.crt\n```\n\n#### 3、使用 openssl 加密解密文件\n```shell\n# 生成并验证私钥\nopenssl genrsa -out yakir.key 2048 \nopenssl rsa -in yakir.key -text -noout\n\n# 导出公钥并验证\nopenssl rsa -in yakir.key -pubout -out yakir.pub\nopenssl rsa -in yakir.pub -pubin -text -noout \n\n# 加解密小文件\n# 使用这种方式 1024 位的私钥可以加密小于 86 字节的文件，2048 位的私钥可以加密小于 214 字节的文件。\n# 用公钥加密\nopenssl rsautl -encrypt -inkey yakir.pub -pubin -in file.txt -out file.bin \n# 用私钥解密\nopenssl rsautl -decrypt -inkey yakir.key -in file.bin \n\n# 加解密大文件\n# 用公钥加密\nopenssl smime -encrypt -aes256 -in Large.zip -binary -outform DEM -out Encrypted.zip yakir.pub\n# 用私钥解密\nopenssl smime -decrypt -in Encrypted.zip -binary -inform DEM -inkey yakir.key -out Large.zip \n```\n### \n#### 4、证书格式转化\n> 一般有以下几种标准格式\n> - .DER .CER ： 二进制格式，只保存证书，不保存私钥。\n> - .PEM ：文本格式，可保存证书，可保存私钥，通常网上的.key 后缀的私钥，其实就是 PEM 格式。\n> - .CRT ：可以是二进制格式，可以是文本格式，只保存证书，不保存私钥。\n> - .PFX .P12 ：即 PKCS12，是二进制格式，同时包含证书和私钥，一般有密码保护。\n> - .JKS ：JAVA 的专属二进制格式，同时包含证书和私钥，一般有密码保护\n\n```shell\n# DER/CER/CRT 转 PEM\n# 先查看证书信息，在转格式\nopenssl x509 -in cert.der -inform der -text -noout openssl x509 -in cert.der -inform der -outform pem -out cert.pem\n\n# PEM 转 DER/CER/CRT\nopenssl x509 -in cert.pem -text -noout openssl x509 -in cert.pem -outform der -out cert.der\n\n# PFX 转 PEM\nopenssl pkcs12 -info -nodes -in site.pfx openssl pkcs12 -in site.pfx -out site.pem -nodes\n\n# JKS 转 PEM\n# 需要 JDK 中提供的 keytool 工具配合 openssl, 先用 keytool 转成 PKCS12 格式：\nkeytool -importkeystore -srckeystore cert.jks -destkeystore cert.pkcs -srcstoretype JKS -deststoretype PKCS12\n# 在用 openssl 转成 pem 格式\nopenssl pkcs12 -in cert.pkcs -out cert.pem\n```\n\n#### 5、其它一些技巧\n```shell\n# 移除证书中的密码\nopenssl rsa -in cert.key -out nopass.key\n\n# 查看公钥的 hash\nopenssl x509 -noout -hash -in cert.pem\n\n# 查看在线网站的证书信息\nopenssl s_client -connect www.baidu.com:443 -showcerts\n\n# 查看网站证书的有效期\n# 查看本地证书\nopenssl x509 -dates -noout -in file.pem #查看证书签发时间和有效期 openssl x509 -startdate -noout -in file.pem #查看签发时间 openssl x509 -enddate -noout -in file.pem #查看有效时间 openssl x509 -checkend 86400 -noout -in file.pem #检查证书是否在一天内过期，用echo $?即可判断\n# 查看在线证书\nopenssl s_client -connect www.baidu.com:443 -servername www.baidu.com 2> /dev/null | openssl x509 -noout -dates\n# 提取过期时间\nopenssl s_client -connect www.baidu.com:443 -servername www.baidu.com 2>/dev/null |openssl x509 -enddate -noout |cut -d \"=\" -f 2\n# date 命令转换一下日期格式\ndate --date=\"$(openssl s_client -connect www.baidu.com:443 -servername www.baidu.com 2>/dev/null |openssl x509 -enddate -noout |cut -d \"=\" -f 2)\" --iso-8601\n\n# 检查网站是否接受指定版本的 SSL 协议\n# 协议有 TLS 1.0 (tls1)、TLS 1.1 (tls1_1) TLS 1.2 (tls1_2), 在高版本的 openssl 中默认已经禁用了 SSL V2 (ssl2)、SSL V3 (ssl3)\nopenssl s_client -connect www.baidu.com:443 -tls1\n\n# 检查网站是否支持指定的加密算法\nopenssl s_client -connect www.baidu.com:443 -tls1_2 -cipher 'ECDHE-RSA-AES128-GCM-SHA256'\n```\n","source":"_posts/openssl-basic.md","raw":"---\ntitle: Openssl 原理与操作\ncategories:\n  - Operations\ntags:\n  - openssl\n  - Linux\nabbrlink: b8bc\ndate: 2022-12-08 22:52:20\n---\n### 一、原理\n> 参考：\n> [https://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html](https://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html)\n> [https://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html](https://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html)\n> [https://www.nixops.me/articles/ssl-cetificate-create-and-signed.html](https://www.nixops.me/articles/ssl-cetificate-create-and-signed.html)\n\n{% asset_img openssl-1.jpeg %}\n\n### 二、证书操作\n#### 1、第三方签发 SSL 证书\n```shell\n# 生成私钥，加密参数 -des3\nopenssl genrsa -out a.com.key 2048\n\n\n# 生成 csr 文件\nopenssl genrsa -out a.com.key 2048 openssl req -new -sha256 -key a.com.key -out a.com.csr\n# 查看 csr 信息\nopenssl req -noout -text -in a.com.csr\n\n\n# 提交 csr 文件到 CA 或第三方证书机构获取数字签名后的公钥 crt 文件\n# 部署 crt 与 key 文件至 web 服务器\n```\n<!--more-->\n\n#### 2、自签名/自有 CA 签发证书\n\n- 使用自签名方式\n```shell\n# 使用已有私钥和 csr 自签名\nopenssl x509 -req -days 3650 -in a.com.csr -extensions v3_ca -signkey a.com.key -out a.com.crt\n# 或直接生成私钥+公钥\nopenssl req -x509 -nodes -days 3650 -newkey rsa:2048 -keyout a.com.key -out a.com.crt\n\n\n# 直接生成自签名证书\nopenssl req -x509 -days 3650 -new -newkey rsa:2048 -nodes -keyout a.com.key -out a.com.csr -subj \"/C=hk/ST=hk/L=hk/O=hk/OU=hk/CN=*.a.com\"\n# 验证私钥和公钥\nopenssl rsa -check -in a.com.key \nopenssl x509 -text -noout -in a.com.crt \n```\n\n- 使用 CA 签名\n```shell\n# 生成 CA 公私钥\nopenssl genrsa -out ca.key 2048\nopenssl req -x509 -sha256 -new -nodes -key ca.key -out ca.crt -days 36500 -subj \"/C=CN/ST=HK/L=HK/O=HK/OU=HK LTD/CN=a.com\"\n# 查看 CA 证书详细信息\nopenssl x509 -in ca.crt -text\n\n\n# 使用 CA 签发证书\nopenssl x509 -req -days 365 -sha256 -CA ca.crt -CAkey ca.key -CAcreateserial -in a.com.csr -out a.com.crt\n# 更好兼容浏览器\ncat ca.crt >> a.com.crt\n\n\n# 查看签发者信息\nopenssl x509 -noout -issuer -issuer_hash -in a.com.crt\n```\n\n#### 3、使用 openssl 加密解密文件\n```shell\n# 生成并验证私钥\nopenssl genrsa -out yakir.key 2048 \nopenssl rsa -in yakir.key -text -noout\n\n# 导出公钥并验证\nopenssl rsa -in yakir.key -pubout -out yakir.pub\nopenssl rsa -in yakir.pub -pubin -text -noout \n\n# 加解密小文件\n# 使用这种方式 1024 位的私钥可以加密小于 86 字节的文件，2048 位的私钥可以加密小于 214 字节的文件。\n# 用公钥加密\nopenssl rsautl -encrypt -inkey yakir.pub -pubin -in file.txt -out file.bin \n# 用私钥解密\nopenssl rsautl -decrypt -inkey yakir.key -in file.bin \n\n# 加解密大文件\n# 用公钥加密\nopenssl smime -encrypt -aes256 -in Large.zip -binary -outform DEM -out Encrypted.zip yakir.pub\n# 用私钥解密\nopenssl smime -decrypt -in Encrypted.zip -binary -inform DEM -inkey yakir.key -out Large.zip \n```\n### \n#### 4、证书格式转化\n> 一般有以下几种标准格式\n> - .DER .CER ： 二进制格式，只保存证书，不保存私钥。\n> - .PEM ：文本格式，可保存证书，可保存私钥，通常网上的.key 后缀的私钥，其实就是 PEM 格式。\n> - .CRT ：可以是二进制格式，可以是文本格式，只保存证书，不保存私钥。\n> - .PFX .P12 ：即 PKCS12，是二进制格式，同时包含证书和私钥，一般有密码保护。\n> - .JKS ：JAVA 的专属二进制格式，同时包含证书和私钥，一般有密码保护\n\n```shell\n# DER/CER/CRT 转 PEM\n# 先查看证书信息，在转格式\nopenssl x509 -in cert.der -inform der -text -noout openssl x509 -in cert.der -inform der -outform pem -out cert.pem\n\n# PEM 转 DER/CER/CRT\nopenssl x509 -in cert.pem -text -noout openssl x509 -in cert.pem -outform der -out cert.der\n\n# PFX 转 PEM\nopenssl pkcs12 -info -nodes -in site.pfx openssl pkcs12 -in site.pfx -out site.pem -nodes\n\n# JKS 转 PEM\n# 需要 JDK 中提供的 keytool 工具配合 openssl, 先用 keytool 转成 PKCS12 格式：\nkeytool -importkeystore -srckeystore cert.jks -destkeystore cert.pkcs -srcstoretype JKS -deststoretype PKCS12\n# 在用 openssl 转成 pem 格式\nopenssl pkcs12 -in cert.pkcs -out cert.pem\n```\n\n#### 5、其它一些技巧\n```shell\n# 移除证书中的密码\nopenssl rsa -in cert.key -out nopass.key\n\n# 查看公钥的 hash\nopenssl x509 -noout -hash -in cert.pem\n\n# 查看在线网站的证书信息\nopenssl s_client -connect www.baidu.com:443 -showcerts\n\n# 查看网站证书的有效期\n# 查看本地证书\nopenssl x509 -dates -noout -in file.pem #查看证书签发时间和有效期 openssl x509 -startdate -noout -in file.pem #查看签发时间 openssl x509 -enddate -noout -in file.pem #查看有效时间 openssl x509 -checkend 86400 -noout -in file.pem #检查证书是否在一天内过期，用echo $?即可判断\n# 查看在线证书\nopenssl s_client -connect www.baidu.com:443 -servername www.baidu.com 2> /dev/null | openssl x509 -noout -dates\n# 提取过期时间\nopenssl s_client -connect www.baidu.com:443 -servername www.baidu.com 2>/dev/null |openssl x509 -enddate -noout |cut -d \"=\" -f 2\n# date 命令转换一下日期格式\ndate --date=\"$(openssl s_client -connect www.baidu.com:443 -servername www.baidu.com 2>/dev/null |openssl x509 -enddate -noout |cut -d \"=\" -f 2)\" --iso-8601\n\n# 检查网站是否接受指定版本的 SSL 协议\n# 协议有 TLS 1.0 (tls1)、TLS 1.1 (tls1_1) TLS 1.2 (tls1_2), 在高版本的 openssl 中默认已经禁用了 SSL V2 (ssl2)、SSL V3 (ssl3)\nopenssl s_client -connect www.baidu.com:443 -tls1\n\n# 检查网站是否支持指定的加密算法\nopenssl s_client -connect www.baidu.com:443 -tls1_2 -cipher 'ECDHE-RSA-AES128-GCM-SHA256'\n```\n","slug":"openssl-basic","published":1,"updated":"2024-01-21T15:28:43.160Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm0fat8zq001rs0nj45ma5k69","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"一、原理\"><a href=\"#一、原理\" class=\"headerlink\" title=\"一、原理\"></a>一、原理</h3><blockquote>\n<p>参考：<br><a href=\"https://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html\">https://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html</a><br><a href=\"https://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html\">https://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html</a><br><a href=\"https://www.nixops.me/articles/ssl-cetificate-create-and-signed.html\">https://www.nixops.me/articles/ssl-cetificate-create-and-signed.html</a></p>\n</blockquote>\n<img data-src=\"/posts/b8bc/openssl-1.jpeg\" class>\n\n<h3 id=\"二、证书操作\"><a href=\"#二、证书操作\" class=\"headerlink\" title=\"二、证书操作\"></a>二、证书操作</h3><h4 id=\"1、第三方签发-SSL-证书\"><a href=\"#1、第三方签发-SSL-证书\" class=\"headerlink\" title=\"1、第三方签发 SSL 证书\"></a>1、第三方签发 SSL 证书</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">生成私钥，加密参数 -des3</span></span><br><span class=\"line\">openssl genrsa -out a.com.key 2048</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">生成 csr 文件</span></span><br><span class=\"line\">openssl genrsa -out a.com.key 2048 openssl req -new -sha256 -key a.com.key -out a.com.csr</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看 csr 信息</span></span><br><span class=\"line\">openssl req -noout -text -in a.com.csr</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">提交 csr 文件到 CA 或第三方证书机构获取数字签名后的公钥 crt 文件</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">部署 crt 与 key 文件至 web 服务器</span></span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n\n<h4 id=\"2、自签名-x2F-自有-CA-签发证书\"><a href=\"#2、自签名-x2F-自有-CA-签发证书\" class=\"headerlink\" title=\"2、自签名&#x2F;自有 CA 签发证书\"></a>2、自签名&#x2F;自有 CA 签发证书</h4><ul>\n<li><p>使用自签名方式</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用已有私钥和 csr 自签名</span></span><br><span class=\"line\">openssl x509 -req -days 3650 -in a.com.csr -extensions v3_ca -signkey a.com.key -out a.com.crt</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">或直接生成私钥+公钥</span></span><br><span class=\"line\">openssl req -x509 -nodes -days 3650 -newkey rsa:2048 -keyout a.com.key -out a.com.crt</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">直接生成自签名证书</span></span><br><span class=\"line\">openssl req -x509 -days 3650 -new -newkey rsa:2048 -nodes -keyout a.com.key -out a.com.csr -subj &quot;/C=hk/ST=hk/L=hk/O=hk/OU=hk/CN=*.a.com&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">验证私钥和公钥</span></span><br><span class=\"line\">openssl rsa -check -in a.com.key </span><br><span class=\"line\">openssl x509 -text -noout -in a.com.crt </span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 CA 签名</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">生成 CA 公私钥</span></span><br><span class=\"line\">openssl genrsa -out ca.key 2048</span><br><span class=\"line\">openssl req -x509 -sha256 -new -nodes -key ca.key -out ca.crt -days 36500 -subj &quot;/C=CN/ST=HK/L=HK/O=HK/OU=HK LTD/CN=a.com&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看 CA 证书详细信息</span></span><br><span class=\"line\">openssl x509 -in ca.crt -text</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用 CA 签发证书</span></span><br><span class=\"line\">openssl x509 -req -days 365 -sha256 -CA ca.crt -CAkey ca.key -CAcreateserial -in a.com.csr -out a.com.crt</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">更好兼容浏览器</span></span><br><span class=\"line\">cat ca.crt &gt;&gt; a.com.crt</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看签发者信息</span></span><br><span class=\"line\">openssl x509 -noout -issuer -issuer_hash -in a.com.crt</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"3、使用-openssl-加密解密文件\"><a href=\"#3、使用-openssl-加密解密文件\" class=\"headerlink\" title=\"3、使用 openssl 加密解密文件\"></a>3、使用 openssl 加密解密文件</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">生成并验证私钥</span></span><br><span class=\"line\">openssl genrsa -out yakir.key 2048 </span><br><span class=\"line\">openssl rsa -in yakir.key -text -noout</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">导出公钥并验证</span></span><br><span class=\"line\">openssl rsa -in yakir.key -pubout -out yakir.pub</span><br><span class=\"line\">openssl rsa -in yakir.pub -pubin -text -noout </span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">加解密小文件</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用这种方式 1024 位的私钥可以加密小于 86 字节的文件，2048 位的私钥可以加密小于 214 字节的文件。</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">用公钥加密</span></span><br><span class=\"line\">openssl rsautl -encrypt -inkey yakir.pub -pubin -in file.txt -out file.bin </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">用私钥解密</span></span><br><span class=\"line\">openssl rsautl -decrypt -inkey yakir.key -in file.bin </span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">加解密大文件</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">用公钥加密</span></span><br><span class=\"line\">openssl smime -encrypt -aes256 -in Large.zip -binary -outform DEM -out Encrypted.zip yakir.pub</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">用私钥解密</span></span><br><span class=\"line\">openssl smime -decrypt -in Encrypted.zip -binary -inform DEM -inkey yakir.key -out Large.zip </span><br></pre></td></tr></table></figure>\n<h3 id><a href=\"#\" class=\"headerlink\" title></a></h3><h4 id=\"4、证书格式转化\"><a href=\"#4、证书格式转化\" class=\"headerlink\" title=\"4、证书格式转化\"></a>4、证书格式转化</h4><blockquote>\n<p>一般有以下几种标准格式</p>\n<ul>\n<li>.DER .CER ： 二进制格式，只保存证书，不保存私钥。</li>\n<li>.PEM ：文本格式，可保存证书，可保存私钥，通常网上的.key 后缀的私钥，其实就是 PEM 格式。</li>\n<li>.CRT ：可以是二进制格式，可以是文本格式，只保存证书，不保存私钥。</li>\n<li>.PFX .P12 ：即 PKCS12，是二进制格式，同时包含证书和私钥，一般有密码保护。</li>\n<li>.JKS ：JAVA 的专属二进制格式，同时包含证书和私钥，一般有密码保护</li>\n</ul>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">DER/CER/CRT 转 PEM</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">先查看证书信息，在转格式</span></span><br><span class=\"line\">openssl x509 -in cert.der -inform der -text -noout openssl x509 -in cert.der -inform der -outform pem -out cert.pem</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">PEM 转 DER/CER/CRT</span></span><br><span class=\"line\">openssl x509 -in cert.pem -text -noout openssl x509 -in cert.pem -outform der -out cert.der</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">PFX 转 PEM</span></span><br><span class=\"line\">openssl pkcs12 -info -nodes -in site.pfx openssl pkcs12 -in site.pfx -out site.pem -nodes</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">JKS 转 PEM</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">需要 JDK 中提供的 keytool 工具配合 openssl, 先用 keytool 转成 PKCS12 格式：</span></span><br><span class=\"line\">keytool -importkeystore -srckeystore cert.jks -destkeystore cert.pkcs -srcstoretype JKS -deststoretype PKCS12</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在用 openssl 转成 pem 格式</span></span><br><span class=\"line\">openssl pkcs12 -in cert.pkcs -out cert.pem</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5、其它一些技巧\"><a href=\"#5、其它一些技巧\" class=\"headerlink\" title=\"5、其它一些技巧\"></a>5、其它一些技巧</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">移除证书中的密码</span></span><br><span class=\"line\">openssl rsa -in cert.key -out nopass.key</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看公钥的 <span class=\"built_in\">hash</span></span></span><br><span class=\"line\">openssl x509 -noout -hash -in cert.pem</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看在线网站的证书信息</span></span><br><span class=\"line\">openssl s_client -connect www.baidu.com:443 -showcerts</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看网站证书的有效期</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看本地证书</span></span><br><span class=\"line\">openssl x509 -dates -noout -in file.pem #查看证书签发时间和有效期 openssl x509 -startdate -noout -in file.pem #查看签发时间 openssl x509 -enddate -noout -in file.pem #查看有效时间 openssl x509 -checkend 86400 -noout -in file.pem #检查证书是否在一天内过期，用echo $?即可判断</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看在线证书</span></span><br><span class=\"line\">openssl s_client -connect www.baidu.com:443 -servername www.baidu.com 2&gt; /dev/null | openssl x509 -noout -dates</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">提取过期时间</span></span><br><span class=\"line\">openssl s_client -connect www.baidu.com:443 -servername www.baidu.com 2&gt;/dev/null |openssl x509 -enddate -noout |cut -d &quot;=&quot; -f 2</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">date</span> 命令转换一下日期格式</span></span><br><span class=\"line\">date --date=&quot;$(openssl s_client -connect www.baidu.com:443 -servername www.baidu.com 2&gt;/dev/null |openssl x509 -enddate -noout |cut -d &quot;=&quot; -f 2)&quot; --iso-8601</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">检查网站是否接受指定版本的 SSL 协议</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">协议有 TLS 1.0 (tls1)、TLS 1.1 (tls1_1) TLS 1.2 (tls1_2), 在高版本的 openssl 中默认已经禁用了 SSL V2 (ssl2)、SSL V3 (ssl3)</span></span><br><span class=\"line\">openssl s_client -connect www.baidu.com:443 -tls1</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">检查网站是否支持指定的加密算法</span></span><br><span class=\"line\">openssl s_client -connect www.baidu.com:443 -tls1_2 -cipher &#x27;ECDHE-RSA-AES128-GCM-SHA256&#x27;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"footer":"","styles":".post {\n  margin-top: 50px;\n  margin-bottom: 50px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n.headband {\n  display: none;\n}\nbody {\n  background: url(\"/images/background.jpeg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\n.post-block.page {\n  margin-top: 40px;\n}\n.category-all-page {\n  box-shadow: 0px 0px 10px 0px rgba(0,0,0,0.5);\n  background-color: #797d7f;\n  padding: 20px 30px 60px 30px;\n  border-radius: 25px 25px 25px 25px;\n}\n.category-all-title {\n  font-family: Impact;\n  font-size: 24px;\n  color: #0ff;\n}\n.category-list {\n  overflow: auto;\n}\n.category-list li {\n  height: 100%;\n  float: left;\n  border-right: 3px solid #222;\n  padding: 0 20px;\n}\n.category-all ul li {\n  list-style: none !important;\n}\n.category-list li:last-child {\n  border-right: none;\n}\n.category-list li a {\n  font-size: 16px;\n  text-decoration: none;\n  color: #7fff00;\n  font-family: Helvetica, Verdana, sans-serif;\n  -webkit-transition: all 0.5s ease;\n  -moz-transition: all 0.5s ease;\n  -o-transition: all 0.5s ease;\n  -ms-transition: all 0.5s ease;\n  transition: all 0.5s ease;\n}\n.category-list li a:hover {\n  color: #000;\n}\n.category-list li.active a {\n  font-weight: bold;\n  color: #000;\n}\n.tag-cloud a {\n  box-shadow: 0 1px 3px #6f42c1, 0 1px 2px #d9534f;\n  padding: 2px 10px;\n  margin: 8px;\n  background: rgba(193,66,92,0);\n  border-bottom: none;\n  border-radius: 20px;\n}\ncode {\n  background: #555;\n  color: #fff;\n}\n","variables":""}},"length":3719,"excerpt":"<h3 id=\"一、原理\"><a href=\"#一、原理\" class=\"headerlink\" title=\"一、原理\"></a>一、原理</h3><blockquote>\n<p>参考：<br><a href=\"https://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html\">https://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html</a><br><a href=\"https://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html\">https://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html</a><br><a href=\"https://www.nixops.me/articles/ssl-cetificate-create-and-signed.html\">https://www.nixops.me/articles/ssl-cetificate-create-and-signed.html</a></p>\n</blockquote>\n<img data-src=\"/posts/b8bc/openssl-1.jpeg\" class>\n\n<h3 id=\"二、证书操作\"><a href=\"#二、证书操作\" class=\"headerlink\" title=\"二、证书操作\"></a>二、证书操作</h3><h4 id=\"1、第三方签发-SSL-证书\"><a href=\"#1、第三方签发-SSL-证书\" class=\"headerlink\" title=\"1、第三方签发 SSL 证书\"></a>1、第三方签发 SSL 证书</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">生成私钥，加密参数 -des3</span></span><br><span class=\"line\">openssl genrsa -out a.com.key 2048</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">生成 csr 文件</span></span><br><span class=\"line\">openssl genrsa -out a.com.key 2048 openssl req -new -sha256 -key a.com.key -out a.com.csr</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看 csr 信息</span></span><br><span class=\"line\">openssl req -noout -text -in a.com.csr</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">提交 csr 文件到 CA 或第三方证书机构获取数字签名后的公钥 crt 文件</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">部署 crt 与 key 文件至 web 服务器</span></span><br></pre></td></tr></table></figure>","more":"<h4 id=\"2、自签名-x2F-自有-CA-签发证书\"><a href=\"#2、自签名-x2F-自有-CA-签发证书\" class=\"headerlink\" title=\"2、自签名&#x2F;自有 CA 签发证书\"></a>2、自签名&#x2F;自有 CA 签发证书</h4><ul>\n<li><p>使用自签名方式</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用已有私钥和 csr 自签名</span></span><br><span class=\"line\">openssl x509 -req -days 3650 -in a.com.csr -extensions v3_ca -signkey a.com.key -out a.com.crt</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">或直接生成私钥+公钥</span></span><br><span class=\"line\">openssl req -x509 -nodes -days 3650 -newkey rsa:2048 -keyout a.com.key -out a.com.crt</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">直接生成自签名证书</span></span><br><span class=\"line\">openssl req -x509 -days 3650 -new -newkey rsa:2048 -nodes -keyout a.com.key -out a.com.csr -subj &quot;/C=hk/ST=hk/L=hk/O=hk/OU=hk/CN=*.a.com&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">验证私钥和公钥</span></span><br><span class=\"line\">openssl rsa -check -in a.com.key </span><br><span class=\"line\">openssl x509 -text -noout -in a.com.crt </span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 CA 签名</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">生成 CA 公私钥</span></span><br><span class=\"line\">openssl genrsa -out ca.key 2048</span><br><span class=\"line\">openssl req -x509 -sha256 -new -nodes -key ca.key -out ca.crt -days 36500 -subj &quot;/C=CN/ST=HK/L=HK/O=HK/OU=HK LTD/CN=a.com&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看 CA 证书详细信息</span></span><br><span class=\"line\">openssl x509 -in ca.crt -text</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用 CA 签发证书</span></span><br><span class=\"line\">openssl x509 -req -days 365 -sha256 -CA ca.crt -CAkey ca.key -CAcreateserial -in a.com.csr -out a.com.crt</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">更好兼容浏览器</span></span><br><span class=\"line\">cat ca.crt &gt;&gt; a.com.crt</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看签发者信息</span></span><br><span class=\"line\">openssl x509 -noout -issuer -issuer_hash -in a.com.crt</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"3、使用-openssl-加密解密文件\"><a href=\"#3、使用-openssl-加密解密文件\" class=\"headerlink\" title=\"3、使用 openssl 加密解密文件\"></a>3、使用 openssl 加密解密文件</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">生成并验证私钥</span></span><br><span class=\"line\">openssl genrsa -out yakir.key 2048 </span><br><span class=\"line\">openssl rsa -in yakir.key -text -noout</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">导出公钥并验证</span></span><br><span class=\"line\">openssl rsa -in yakir.key -pubout -out yakir.pub</span><br><span class=\"line\">openssl rsa -in yakir.pub -pubin -text -noout </span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">加解密小文件</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用这种方式 1024 位的私钥可以加密小于 86 字节的文件，2048 位的私钥可以加密小于 214 字节的文件。</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">用公钥加密</span></span><br><span class=\"line\">openssl rsautl -encrypt -inkey yakir.pub -pubin -in file.txt -out file.bin </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">用私钥解密</span></span><br><span class=\"line\">openssl rsautl -decrypt -inkey yakir.key -in file.bin </span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">加解密大文件</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">用公钥加密</span></span><br><span class=\"line\">openssl smime -encrypt -aes256 -in Large.zip -binary -outform DEM -out Encrypted.zip yakir.pub</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">用私钥解密</span></span><br><span class=\"line\">openssl smime -decrypt -in Encrypted.zip -binary -inform DEM -inkey yakir.key -out Large.zip </span><br></pre></td></tr></table></figure>\n<h3 id><a href=\"#\" class=\"headerlink\" title></a></h3><h4 id=\"4、证书格式转化\"><a href=\"#4、证书格式转化\" class=\"headerlink\" title=\"4、证书格式转化\"></a>4、证书格式转化</h4><blockquote>\n<p>一般有以下几种标准格式</p>\n<ul>\n<li>.DER .CER ： 二进制格式，只保存证书，不保存私钥。</li>\n<li>.PEM ：文本格式，可保存证书，可保存私钥，通常网上的.key 后缀的私钥，其实就是 PEM 格式。</li>\n<li>.CRT ：可以是二进制格式，可以是文本格式，只保存证书，不保存私钥。</li>\n<li>.PFX .P12 ：即 PKCS12，是二进制格式，同时包含证书和私钥，一般有密码保护。</li>\n<li>.JKS ：JAVA 的专属二进制格式，同时包含证书和私钥，一般有密码保护</li>\n</ul>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">DER/CER/CRT 转 PEM</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">先查看证书信息，在转格式</span></span><br><span class=\"line\">openssl x509 -in cert.der -inform der -text -noout openssl x509 -in cert.der -inform der -outform pem -out cert.pem</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">PEM 转 DER/CER/CRT</span></span><br><span class=\"line\">openssl x509 -in cert.pem -text -noout openssl x509 -in cert.pem -outform der -out cert.der</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">PFX 转 PEM</span></span><br><span class=\"line\">openssl pkcs12 -info -nodes -in site.pfx openssl pkcs12 -in site.pfx -out site.pem -nodes</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">JKS 转 PEM</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">需要 JDK 中提供的 keytool 工具配合 openssl, 先用 keytool 转成 PKCS12 格式：</span></span><br><span class=\"line\">keytool -importkeystore -srckeystore cert.jks -destkeystore cert.pkcs -srcstoretype JKS -deststoretype PKCS12</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在用 openssl 转成 pem 格式</span></span><br><span class=\"line\">openssl pkcs12 -in cert.pkcs -out cert.pem</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5、其它一些技巧\"><a href=\"#5、其它一些技巧\" class=\"headerlink\" title=\"5、其它一些技巧\"></a>5、其它一些技巧</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">移除证书中的密码</span></span><br><span class=\"line\">openssl rsa -in cert.key -out nopass.key</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看公钥的 <span class=\"built_in\">hash</span></span></span><br><span class=\"line\">openssl x509 -noout -hash -in cert.pem</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看在线网站的证书信息</span></span><br><span class=\"line\">openssl s_client -connect www.baidu.com:443 -showcerts</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看网站证书的有效期</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看本地证书</span></span><br><span class=\"line\">openssl x509 -dates -noout -in file.pem #查看证书签发时间和有效期 openssl x509 -startdate -noout -in file.pem #查看签发时间 openssl x509 -enddate -noout -in file.pem #查看有效时间 openssl x509 -checkend 86400 -noout -in file.pem #检查证书是否在一天内过期，用echo $?即可判断</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看在线证书</span></span><br><span class=\"line\">openssl s_client -connect www.baidu.com:443 -servername www.baidu.com 2&gt; /dev/null | openssl x509 -noout -dates</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">提取过期时间</span></span><br><span class=\"line\">openssl s_client -connect www.baidu.com:443 -servername www.baidu.com 2&gt;/dev/null |openssl x509 -enddate -noout |cut -d &quot;=&quot; -f 2</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">date</span> 命令转换一下日期格式</span></span><br><span class=\"line\">date --date=&quot;$(openssl s_client -connect www.baidu.com:443 -servername www.baidu.com 2&gt;/dev/null |openssl x509 -enddate -noout |cut -d &quot;=&quot; -f 2)&quot; --iso-8601</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">检查网站是否接受指定版本的 SSL 协议</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">协议有 TLS 1.0 (tls1)、TLS 1.1 (tls1_1) TLS 1.2 (tls1_2), 在高版本的 openssl 中默认已经禁用了 SSL V2 (ssl2)、SSL V3 (ssl3)</span></span><br><span class=\"line\">openssl s_client -connect www.baidu.com:443 -tls1</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">检查网站是否支持指定的加密算法</span></span><br><span class=\"line\">openssl s_client -connect www.baidu.com:443 -tls1_2 -cipher &#x27;ECDHE-RSA-AES128-GCM-SHA256&#x27;</span><br></pre></td></tr></table></figure>"},{"title":"可观测性-监控组件 Prometheus","abbrlink":"6bfb","date":"2022-06-28T14:02:38.000Z","_content":"#### 一、组件说明\n**Prometheus Server**\n\n- 核心组件，负责实现对监控数据的获取，存储与查询。\n- 支持静态配置管理监控目标，也可通过 Service Discovery 方式动态管理监控目录，获取数据。\n- 可从其他 Prometheus Server 获取数据\n- 对外提供 PromQL 实现数据查询和分析\n\n**Exporter**\n\n- 直接采集，内置用于想 Prometheus 暴露监控数据的 Endpoints，如 node-exporter\n- 间接采集，通过 Prometheus 提供的客户端库监控采集程序，如 mysql-exporter\n\n**AlertManager**\n基于 PromQL 创建告警规则，满足规则产生告警并推送，支持 mail、webhook 等。\n\n**PushGateway**\n原获取数据方式为基于 Prometheus Server 从 Exporter pull 数据，当网络或其他原因 Server 无法与 Exporter 直接通信时，使用 PushGateway 方式中转。 \nPrometheus server 定期从配置好的 jobs 和 exporters 中拉取 metrics，或者接收来自 Pushgateway 发送过来的 metrics，或者从其它的 Prometheus server 中拉 metrics\n> metrics：实际监控指标数据，如 cpu 利用率\n\n<!--more-->\n\n**Grafana**\n图形界面可视化采集展示数据\n多数据源\n告警规则与通知\n混合展示与注释\n\n#### 二、二进制方式部署\n略（基本不使用）\n\n#### 三、容器方式部署\n\n1. 安装 node-export \n```shell\n# 创建部署清单\ncat > node-exporter.yaml << \"EOF\"\nnode-exporter.yaml\napiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  name: node-exporter\n  namespace: monitor\n  labels:\n    name: node-exporter\nspec:\n  selector:\n    matchLabels:\n     name: node-exporter\n  template:\n    metadata:\n      labels:\n        name: node-exporter\n    spec:\n      hostPID: true\n      hostIPC: true\n      hostNetwork: true\n      containers:\n      - name: node-exporter\n        image: prom/node-exporter:v0.16.0\n        ports:\n        - containerPort: 9100\n        resources:\n          requests:\n            cpu: 0.15 # 这个容器运行至少需要0.15核cpu\n        securityContext:\n          privileged: true\t# 开启特权模式\n        args:\n        - --path.procfs\n        - /host/proc\n        - --path.sysfs\n        - /host/sys\n        - --collector.filesystem.ignored-mount-points\n        - '\"^/(sys|proc|dev|host|etc)($|/)\"'\n        volumeMounts:\n        - name: dev\n          mountPath: /host/dev\n        - name: proc\n          mountPath: /host/proc\n        - name: sys\n          mountPath: /host/sys\n        - name: rootfs\n          mountPath: /rootfs\n      tolerations:\n      - key: \"node-role.kubernetes.io/master\"\n        operator: \"Exists\"\n        effect: \"NoSchedule\"\n      volumes:\n        - name: proc\n          hostPath:\n            path: /proc\n        - name: dev\n          hostPath:\n            path: /dev\n        - name: sys\n          hostPath:\n            path: /sys\n        - name: rootfs\n          hostPath:\n            path: /\nEOF\n\n# 创建监控 namespace\nkubectl create ns monitor\n\n# 部署并查看部署结果\nkubectl apply -f node-exporter.yaml\nkubectl get pods -n monitor -o wide\n\n# 验证获取指标\n#curl node_ip:9100/metrics\ncurl 192.168.49.2:9100/metrics\n```\n\n2. Prometheus Server 部署\n```shell\n# 创建 serviceaccount 与 rbac 授权\ncat > prometheus-rbac.yaml << \"EOF\"\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: monitor-sa\n  namespace: monitor\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: monitor-sa-clusterrole\nrules:\n- apiGroups:\n  - \"\"\n  resources:\n  - nodes\n  - services\n  - endpoints\n  - pods\n  - nodes/proxy\n  - nodes/metrics\n  - configmaps\n  verbs:\n  - get\n  - list\n  - watch\n- nonResourceURLs:\n  - /metrics\n  verbs:\n  - get\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: monitor-clusterrolebinding\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: monitor-sa-clusterrole\nsubjects:\n- kind: ServiceAccount\n  name: minitor-sa\n  namespace: minitor\nEOF\n\n\n# 创建 Prometheus 存储目录\n# Prometheus Server 调度节点执行（测试为 minikube 节点）\nmkdir /data && chmod 777 /data\n\n\n# 创建 configMap，存放 Prometheus、AlertManager 配置信息\ncat > prometheus-cfg.yaml << \"\"EOF\"\"\nkind: ConfigMap\napiVersion: v1\nmetadata:\n  labels:\n    app: prometheus\n  name: prometheus-config\n  namespace: monitor\ndata:\n  prometheus.yml: |\n    global:\n      scrape_interval: 15s\t\t#采集目标主机监控数据间隔\n      scrape_timeout: 10s\t\t\t#数据采集超时时间\n      evaluation_interval: 1m\t#触发告警检测时间\n      \n    # Prometheus 关联 AlertManager 配置\n    alerting:\n      alertmanagers:\n      - static_configs:\n        - targets: [\"localhost:9093\"]\n    \n    # 告警规则配置，首次读取默认加载，后续根据 evaluation_interval 周期加载\n    rule_files:\n    #- \"alertermanager_rules.yaml\"\n    - /etc/prometheus/rules.yaml\n      \n    scrape_configs:\t\t\t\t\t\t\t\t\t#配置数据源 targe，每个 target 用 job_name 命名。分为静态配置与动态发现\n    - job_name: 'kubernetes-node'\n      kubernetes_sd_configs:\t\t\t\t#使用 k8s 的服务发现\n      - role: node\t\t\t\t\t\t\t\t\t#使用 node 角色，使用默认 kubelet 提供的 http 端口发现集群中每个 node 节点\n      relabel_configs:\t\t\t\t\t\t\t#重新标记\n      - source_labels: [__address__]\t#配置的原始标签，匹配地址\n        regex: '(.*):10250'\t\t\t\t\t\t#匹配带有10250端口的 url\n        replacement: '${1}:9100'\t\t\t#保留匹配到 ip:9100 的ip\n        target_label: __address__\t\t\t#新生成的 url 是${1}获取到的 ip:9100\n        action: replace\t\t\t\t\t\t\t\t#动作替换\n      - action: labelmap\n        regex: __meta_kubernetes_node_label_(.+)\t#匹配到下面正则表达式的标签会被保留,如果不做regex正则的话，默认只是会显示instance标签\n    - job_name: 'kubernetes-node-cadvisor'\t# 抓取 cAdvisor 数据，是获取 kubelet 上 /metrics/cadvisor 接口数据来获取容器的资源使用情况\n      kubernetes_sd_configs:\n      - role: node\n      scheme: https\n      tls_config:\n        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n      relabel_configs:\n      - action: labelmap\t\t\t\t\t\t\t\t\t\t\t\t\t#保留匹配到的标签\n        regex: __meta_kubernetes_node_label_(.+)\t#保留匹配到正则的标签\n      - target_label: __address__\t\t\t\t\t\t\t\t\t#获取到的地址：__address__=\"192.168.64.2:10250\"\n        replacement: kubernetes.default.svc:443\t\t#获取到的地址替换为新地址\n      - source_labels: [__meta_kubernetes_node_name]\n        regex: (.+)\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t#匹配原始标签中 __meta_kubernetes_node_name 值\n        target_label: __metrics_path__\t\t\t\t\t\t#获取__metrics_path__对应的值\n        replacement: /api/v1/nodes//proxy/metrics/cadvisor\n        #把 metrics 替换成新的值 api/v1/nodes/k8s-master1/proxy/metrics/cadvisor\n        #${1}是 __meta_kubernetes_node_name 获取到的值\n        #新的 url 就是 https://kubernetes.default.svc:443/api/v1/nodes/k8s-master1/proxy/metrics/cadvisor\n    - job_name: 'kubernetes-apiserver'\n      kubernetes_sd_configs:\n      - role: endpoints\t\t\t\t#使用 k8s 中的 endpoint 服务发现，采集 apiserver 6443 端口获取数据\n      scheme: https\n      tls_config:\n        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n      relabel_configs:\n      - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]\n        # endpoint 这个对象的名称空间,endpoint 对象的服务名,endpoint 的端口名称\n        action: keep\t#采集满足条件的实例，其他实例不采集\n        regex: default;kubernetes;https\t#正则匹配到的默认空间下的 service 名字是 kubernetes，协议是 https 的 endpoint 类型保留下来\n    - job_name: 'kubernetes-service-endpoints'\n      kubernetes_sd_configs:\n      - role: endpoints\n      relabel_configs:\n      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]\n        action: keep\n        regex: true\n        #重新打标仅抓取到的具有 \"prometheus.io/scrape: true\" 的annotation的端点，意思是说如果某个service具有prometheus.io/scrape = true annotation声明则抓取，annotation本身也是键值结构，所以这里的源标签设置为键，而regex设置值true，当值匹配到regex设定的内容时则执行keep动作也就是保留，其余则丢弃。\n      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]\n        action: replace\n        target_label: __scheme__\n        regex: (https?)\n        #重新设置scheme，匹配源标签__meta_kubernetes_service_annotation_prometheus_io_scheme也就是prometheus.io/scheme annotation，如果源标签的值匹配到regex，则把值替换为__scheme__对应的值。\n      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]\n        action: replace\n        target_label: __metrics_path__\n        regex: (.+)\n        #应用中暴露的自定义指标 path，如 prometheus.io/path = /mymetrics\n      - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]\n        action: replace\n        target_label: __address__\n        regex: ([^:]+)(?::\\d+)?;(\\d+)\n        replacement: $1:$2\n        #暴露自定义应用的端口\n      - action: labelmap\n        regex: __meta_kubernetes_service_label_(.+)\n      - source_labels: [__meta_kubernetes_namespace]\n        action: replace\n        target_label: kubernetes_namespace\n      - source_labels: [__meta_kubernetes_service_name]\n        action: replace\n        target_label: kubernetes_name\nEOF\n\ncat > alertmanager-cfg.yaml << \"\"EOF\"\"\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: alert-config\n  namespace: monitor\ndata:\n  config.yml: |-\n    global:\n      # 在没有报警的情况下声明为已解决的时间\n      resolve_timeout: 5m\n      # 配置邮件发送信息\n      smtp_smarthost: 'smtp.163.com:25'\n      smtp_from: 'xxx@163.com'\n      smtp_auth_username: 'xx@163.com'\n      smtp_auth_password: 'password'\n      smtp_hello: '163.com'\n      smtp_require_tls: false\n    # 所有报警信息进入后的根路由，用来设置报警的分发策略\n    route:\n      # 这里的标签列表是接收到报警信息后的重新分组标签，例如，接收到的报警信息里面有许多具有 cluster=A 和 alertname=LatncyHigh 这样的标签的报警信息将会批量被聚合到一个分组里面\n      group_by: ['alertname', 'cluster']\n      # 当一个新的报警分组被创建后，需要等待至少group_wait时间来初始化通知，这种方式可以确保您能有足够的时间为同一分组来获取多个警报，然后一起触发这个报警信息。\n      group_wait: 30s\n\n      # 当第一个报警发送后，等待'group_interval'时间来发送新的一组报警信息。\n      group_interval: 5m\n\n      # 如果一个报警信息已经发送成功了，等待'repeat_interval'时间来重新发送他们\n      repeat_interval: 5m\n\n      # 默认的receiver：如果一个报警没有被一个route匹配，则发送给默认的接收器\n      receiver: default\n\n      # 上面所有的属性都由所有子路由继承，并且可以在每个子路由上进行覆盖。\n      routes:\n      - receiver: email\n        group_wait: 10s\n        match:\n          team: node\n    receivers:\n    - name: 'default'\n      email_configs:\n      - to: 'xxx@gmail.com'\n        send_resolved: true\n    - name: 'email'\n      email_configs:\n      - to: 'xxx@gmail.com'\n        send_resolved: true\nEOF\n# 部署 configmap\nkubectl apply -f alertmanager-cfg.yaml\nkubectl apply -f prometheus-cfg.yaml\n\n\n# 部署 Prometheus Server 和 AlertManager 容器\ncat > prometheus-deployment.yaml << \"EOF\"\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: prometheus-server\n  namespace: monitor\n  labels:\n    app: prometheus\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: prometheus\n      component: server\n    #matchExpressions:\n    #- {key: app, operator: In, values: [prometheus]}\n    #- {key: component, operator: In, values: [server]}\n  template:\n    metadata:\n      labels:\n        app: prometheus\n        component: server\n      annotations:\n        prometheus.io/scrape: 'false'\n    spec:\n      serviceAccountName: monitor-sa\n      containers:\n      # Prometheus 容器配置\n      - name: prometheus\n        image: prom/prometheus\n        imagePullPolicy: IfNotPresent\n        command:\n          - prometheus\n          - --config.file=/etc/prometheus/prometheus.yml\n          - --storage.tsdb.path=/prometheus\t#数据存储目录\n          - --storage.tsdb.retention=720h\t  #数据保存时长\n          - --web.enable-lifecycle\t\t\t\t\t#开启热加载\n          - --web.enable-admin-api          # admin HTTP API 访问，包括删除时间序列等功能\n        ports:\n        - containerPort: 9090\n          protocol: TCP\n        volumeMounts:\n        - mountPath: /etc/prometheus/\n          name: prometheus-config\n        - mountPath: /prometheus/\n          name: prometheus-storage-volume\n      # Prometheus 容器配置结束\n      \n      # AlertManager 容器配置\n      - name: alertmanager\n        image: prom/alertmanager\n        imagePullPolicy: IfNotPresent\n        args:\n        - --config.file=/etc/alertmanager/config.yml\n        - --storage.path=/alertmanager/data\n        ports:\n        - containerPort: 9093\n          name: http\n        volumeMounts:\n        - mountPath: /etc/alertmanager\n          name: alertcfg\n        resources:\n          requests:\n            cpu: 100m\n            memory: 256Mi\n          limits:\n            cpu: 100m\n            memory: 256Mi          \n      # AlertManager 容器配置结束\n      volumes:\n      - name: prometheus-config\n        configMap:\n          name: prometheus-config\n      - name: prometheus-storage-volume\n        hostPath:\n         path: /data\n         type: Directory\n      - name: alertcfg\n        configMap:\n          name: alert-config\nEOF\nkubectl apply -f prometheus-deployment.yaml\n\n\n# 部署 Service，暴露 Prometheus Server 对外接口\ncat > prometheus-svc.yaml << \"EOF\"\napiVersion: v1\nkind: Service\nmetadata:\n  name: prometheus\n  namespace: monitor\n  labels:\n    app: prometheus\nspec:\n  type: NodePort\n  ports:\n    - port: 9090\n      targetPort: 9090\n      protocol: TCP\n      nodePort: 30009\n  selector:\n    app: prometheus\n    component: server\nEOF\nkubectl apply -f prometheus-svc.yaml\n#minikbube 转发本机端口进集群内部 Service 方式\n#kubectl port-forward service/prometheus -n monitor --address 127.0.0.1 3009:9090\n```\n\n3. Alert 告警配置\n- 追加告警规则配置\n```shell\n# 追加 ruls.yml 配置内容到 prometheus-cfg.yaml 配置\nkind: ConfigMap\napiVersion: v1\nmetadata:\n  labels:\n    app: prometheus\n  name: prometheus-config\n  namespace: monitor\ndata:\n  prometheus.yml: |\n    ...\n  # 告警规则配置，与 prometheus 配置同样写入 /etc/prometheus 目录下\n  rules.yml: |\n    groups:\n    - name: test-rule\n      rules:\n      - alert: NodeMemoryUsage\n        expr: (node_memory_MemTotal_bytes - (node_memory_MemFree_bytes + node_memory_Buffers_bytes + node_memory_Cached_bytes)) / node_memory_MemTotal_bytes * 100 > 20\n        for: 2m\n        labels:\n          team: node\n        annotations:\n          summary: \"{{.instance}}: High Memory usage detected\"\n          description: \"{{.instance}}: Memory usage is above 20% (current value is: {{  }}\"\n```\n\n- Prometheus 热加载配置\n```shell\n# 请求 Prometheus、AlertManager 接口，可使用 Pod IP，热加载配置\ncurl -X POST http://172.17.0.5:9090/-/reload\ncurl -X POST http://172.17.0.5:9093/-/reload\n\n# 查看 log\nkubectl logs --tail 10 -f prometheus-server-658b54bd7-9gvd9 -n monitor\n\n# 强制重启加载方式，可能丢失监控数据\n#kubectl delete -f prometheus-cfg.yaml && kubectl delete -f prometheus-deployment.yaml\n#kubectl apply -f prometheus-cfg.yaml && kubectl apply -f prometheus-deployment.yaml\n```\n\n- 告警通知：email、webhook\n\n4. Grafana 部署\n```shell\ncat > grafana.yaml << \"EOF\"\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: monitoring-grafana\n  namespace: monitor\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      task: monitoring\n      k8s-app: grafana\n  template:\n    metadata:\n      labels:\n        task: monitoring\n        k8s-app: grafana\n    spec:\n      securityContext:\n        fsGroup: 472\n        runAsUser: 472\n      containers:\n      - name: grafana\n        image: grafana/grafana\n        ports:\n        - containerPort: 3000\n          protocol: TCP\n        volumeMounts:\n        - mountPath: /etc/ssl/certs\n          name: ca-certificates\n          readOnly: true\n        - mountPath: /var\n          name: grafana-storage\n        env:\n        - name: GF_SECURITY_ADMIN_USER\n          value: admin\n        - name: GF_SECURITY_ADMIN_PASSWORD\n          value: admin123\n      volumes:\n      - name: ca-certificates\n        hostPath:\n          path: /etc/ssl/certs\n      - name: grafana-storage\n        emptyDir: {}\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    kubernetes.io/cluster-service: 'true'\n    kubernetes.io/name: monitoring-grafana\n  name: monitoring-grafana\n  namespace: monitor\nspec:\n  type: NodePort\n  ports:\n  - port: 80\n    targetPort: 3000\n  selector:\n    k8s-app: grafana\nEOF\n\nkubectl apply -f grafana.yaml\nkubectl get pod,svc -n monitor\n\n\n# 配置 Grafana\n#登录，导入 Prometheus 数据源\n#导入监控 Kubernetes 集群模板，官方模板 https://grafana.com/grafana/dashboards/162/revisions\n#监控 node，导入 node_exporter.json\n\n\n```\n\n#### 四、Prometheus-Operator 方式部署\n\n1. 部署 prometheus-operator（controller）\n```shell\n# 下载官方源码，部署 operator 资源\ngit clone https://github.com/prometheus-operator/prometheus-operator && cd prometheus-operator\n# 创建 CRD 资源、RBAC 资源、operator 资源\nkubectl create -f bundle.yaml\n# 查看结果\nkubectl get pod,svc -owide\nNAME                                       READY   STATUS    RESTARTS   AGE\npod/prometheus-operator-567cd8b6f6-xvhp5   1/1     Running   0          127m\nNAME                          TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE\nservice/prometheus-operator   ClusterIP   None             <none>        8080/TCP         127m\n# 查看 CRD 资源下所有 API 资源\nkubectl get --raw /apis/monitoring.coreos.com/v1\n```\n\n> 官方源码地址已替换至: https://github.com/prometheus-operator/kube-prometheus, 部署方式参考新地址\n\n2. 部署 prometheus （server，CRD 资源）\n```shell\n# 创建 prometheus-server 资源\ncat > prometheus.yaml << \"EOF\"\napiVersion: monitoring.coreos.com/v1\nkind: Prometheus\nmetadata:\n  name: prometheus\nspec:\n  serviceAccountName: prometheus\n  #配置监控所有 ServiceMonitor\n  #ServiceMonitorSelector: {}\n  serviceMonitorSelector:\n    matchLabels:\n      team: frontend\n  resources:\n    requests:\n      memory: 200Mi\n  enableAdminAPI: false\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: prometheus\n  namespace: default\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: prometheus\nrules:\n- apiGroups: [\"\"]\n  resources:\n  - nodes\n  - services\n  - endpoints\n  - pods\n  verbs: [\"get\", \"list\", \"watch\"]\n- apiGroups: [\"\"]\n  resources:\n  - configmaps\n  verbs: [\"get\"]\n- nonResourceURLs: [\"/metrics\"]\n  verbs: [\"get\"]\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: prometheus\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: prometheus\nsubjects:\n- kind: ServiceAccount\n  name: prometheus\n  namespace: default\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: prometheus\nspec:\n  type: NodePort\n  ports:\n  - name: web\n    nodePort: 30900\n    port: 9090\n    protocol: TCP\n    targetPort: web\n  selector:\n    prometheus: prometheus\nEOF\n\n\n# 创建模拟输出 metrics 程序\ncat > example.yaml << \"EOF\"\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: example-app\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: example-app\n  template:\n    metadata:\n      labels:\n        app: example-app\n    spec:\n      containers:\n      - name: example-app\n        image: zhangguanzhang/instrumented_app\n        ports:\n        - name: web\n          containerPort: 8080\n---\nkind: Service\napiVersion: v1\nmetadata:\n  name: example-app\n  labels:\n    app: example-app\nspec:\n  selector:\n    app: example-app\n  ports:\n  - name: web\n    port: 8080\nEOF\n```\n\n3. 部署 ServiceMonitor （CRD 资源）\n```shell\n# 创建 ServiceMonitor\ncat > service-monitor.yaml << \"EOF\"\napiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  name: example-app\n  labels:\n    team: frontend\nspec:\n  #namespaceSelector:\n  #1.非同namespace时配置具体ns\n  #  matchNames:\n  #  - target_namespace_name\n  #2.任意ns\n  #  any:true\n  selector:\n    matchLabels:\n      app: example-app\n  endpoints:\n  - port: web\n  #BasicAuth认证时(base64编码)\n  #- basicAuth:\n  #    password:\n  #      name: basic-auth\n  #      key: password\n  #    username:\n  #      name: basic-auth\n  #      key: user\n  #  port: web\nEOF\n```\n\n4. 访问验证\n```shell\n# 查看部署资源信息\nNAME                                       READY   STATUS    RESTARTS   AGE    IP           NODE       NOMINATED NODE   READINESS GATES\npod/example-app-745967cc67-qbh45           1/1     Running   0          95m    172.17.0.7   minikube   <none>           <none>\npod/prometheus-operator-567cd8b6f6-xvhp5   1/1     Running   0          139m   172.17.0.6   minikube   <none>           <none>\npod/prometheus-prometheus-0                2/2     Running   0          108m   172.17.0.3   minikube   <none>           <none>\n\nNAME                          TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE    SELECTOR\nservice/example-app           ClusterIP   10.100.248.130   <none>        8080/TCP         104m   app=example-app\nservice/kubernetes            ClusterIP   10.96.0.1        <none>        443/TCP          24d    <none>\nservice/prometheus            NodePort    10.101.76.214    <none>        9090:30900/TCP   28m    prometheus=prometheus\nservice/prometheus-operated   ClusterIP   None             <none>        9090/TCP         108m   app.kubernetes.io/name=prometheus\nservice/prometheus-operator   ClusterIP   None             <none>        8080/TCP         139m   app.kubernetes.io/component=controller,app.kubernetes.io/name=prometheus-operator\n\n# 访问验证\n#minikube 需转发端口 \n#kubectl port-forward service/prometheus --address 127.0.0.1 9090:9090\n#浏览器访问 127.0.0.1:9090/targets\n```\n\n5. 自定义监控集群资源（Etcd、controller-manager 等）\n- 监控 Etcd\n```shell\n#1、获取 etcd 证书生成 secret\n#2、配置 prometheus StatefulSet 添加上一步生成的 secret\nkubectl get statefulsets -n monitoring\nNAME                READY   AGE\nalertmanager-main   3/3     3h25m\nprometheus-k8s      1/1     3h25m\n#3、创建 ServiceMonitor 资源并部署\n#4、创建 Service、Endpoints 资源并进行关联（标签关联）\n```\n\n6. 配置 AlertManager、PrometheusRule 自定义告警\n- AlertManager 配置（Prometheus Dashboard 页面查看 Config 内容）\n```shell\nalerting:\n  alert_relabel_configs:\n  - separator: ;\n    regex: prometheus_replica\n    replacement: $1\n    action: labeldrop\n  alertmanagers:\n  - kubernetes_sd_configs:\n    - role: endpoints\n      namespaces:\n        names:\n        - monitoring\n    scheme: http\n    path_prefix: /\n    timeout: 10s\n    relabel_configs:\n    - source_labels: [__meta_kubernetes_service_name]\n      separator: ;\n      regex: alertmanager-main\n      replacement: $1\n      action: keep\n    - source_labels: [__meta_kubernetes_endpoint_port_name]\n      separator: ;\n      regex: web\n      replacement: $1\n      action: keep\nrule_files:\n- /etc/prometheus/rules/prometheus-k8s-rulefiles-0/*.yaml\n```\n\n- 告警规则\n```shell\n# Prometheus Rule\ncat > prometheus-rules.yaml << \"EOF\"\napiVersion: monitoring.coreos.com/v1\nkind: PrometheusRule\nmetadata:\n  labels:\n    prometheus: k8s\n    role: alert-rules\n  name: prometheus-k8s-rules\nspec:\n  groups:\n  - name: k8s.rules\n    rules:\n    - expr: |\n        sum(rate(container_cpu_usage_seconds_total{job=\"kubelet\", image!=\"\", container_name!=\"\"}[5m])) by (namespace)\n      record: namespace:container_cpu_usage_seconds_total:sum_rate\nEOF\n# 生成 rule 配置文件到 prometheus 的 /etc/prometheus/rules/prometheus-k8s-rulefiles-0/ 目录下\n```\n\n- 配置告警（AlertManager 配置 secret）\n\n7. 自动发现配置与持久化存储\n- 自动发现配置（annotations）\n\nprometheus.io/scrape=true\nprometheus.io/port=xxx\n\n- 持久化存储（PV、PVC）\n\n\n> Operator 管理监控以及维护 CRD 资源对象的状态：\n> - Prometheus\n> - ServiceMonitor\n> - PodMonitor\n> - AltertManager\n> - PrometheusRule\n\n\n> 参考文档：\n> 1、[https://www.servicemesher.com/blog/prometheus-operator-manual/](https://www.servicemesher.com/blog/prometheus-operator-manual/)\n> 2、[https://www.qikqiak.com/k8s-book/docs/52.Prometheus%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html](https://www.qikqiak.com/k8s-book/docs/52.Prometheus%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html)\n> 官方文档：\n> 1、[https://github.com/prometheus-operator/prometheus-operator](https://github.com/prometheus-operator/prometheus-operator)\n> 2、[https://github.com/prometheus-operator/kube-prometheus](https://github.com/prometheus-operator/kube-prometheus)（新版本）\n> 3、告警规则：[https://yunlzheng.gitbook.io/prometheus-book/parti-prometheus-ji-chu/alert/prometheus-alert-rule](https://yunlzheng.gitbook.io/prometheus-book/parti-prometheus-ji-chu/alert/prometheus-alert-rule)\n\n\n","source":"_posts/observability-prometheus-component.md","raw":"---\ntitle: 可观测性-监控组件 Prometheus\ncategories:\n  - CNCF\ntags:\n  - Observability\nabbrlink: 6bfb\ndate: 2022-06-28 22:02:38\n---\n#### 一、组件说明\n**Prometheus Server**\n\n- 核心组件，负责实现对监控数据的获取，存储与查询。\n- 支持静态配置管理监控目标，也可通过 Service Discovery 方式动态管理监控目录，获取数据。\n- 可从其他 Prometheus Server 获取数据\n- 对外提供 PromQL 实现数据查询和分析\n\n**Exporter**\n\n- 直接采集，内置用于想 Prometheus 暴露监控数据的 Endpoints，如 node-exporter\n- 间接采集，通过 Prometheus 提供的客户端库监控采集程序，如 mysql-exporter\n\n**AlertManager**\n基于 PromQL 创建告警规则，满足规则产生告警并推送，支持 mail、webhook 等。\n\n**PushGateway**\n原获取数据方式为基于 Prometheus Server 从 Exporter pull 数据，当网络或其他原因 Server 无法与 Exporter 直接通信时，使用 PushGateway 方式中转。 \nPrometheus server 定期从配置好的 jobs 和 exporters 中拉取 metrics，或者接收来自 Pushgateway 发送过来的 metrics，或者从其它的 Prometheus server 中拉 metrics\n> metrics：实际监控指标数据，如 cpu 利用率\n\n<!--more-->\n\n**Grafana**\n图形界面可视化采集展示数据\n多数据源\n告警规则与通知\n混合展示与注释\n\n#### 二、二进制方式部署\n略（基本不使用）\n\n#### 三、容器方式部署\n\n1. 安装 node-export \n```shell\n# 创建部署清单\ncat > node-exporter.yaml << \"EOF\"\nnode-exporter.yaml\napiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  name: node-exporter\n  namespace: monitor\n  labels:\n    name: node-exporter\nspec:\n  selector:\n    matchLabels:\n     name: node-exporter\n  template:\n    metadata:\n      labels:\n        name: node-exporter\n    spec:\n      hostPID: true\n      hostIPC: true\n      hostNetwork: true\n      containers:\n      - name: node-exporter\n        image: prom/node-exporter:v0.16.0\n        ports:\n        - containerPort: 9100\n        resources:\n          requests:\n            cpu: 0.15 # 这个容器运行至少需要0.15核cpu\n        securityContext:\n          privileged: true\t# 开启特权模式\n        args:\n        - --path.procfs\n        - /host/proc\n        - --path.sysfs\n        - /host/sys\n        - --collector.filesystem.ignored-mount-points\n        - '\"^/(sys|proc|dev|host|etc)($|/)\"'\n        volumeMounts:\n        - name: dev\n          mountPath: /host/dev\n        - name: proc\n          mountPath: /host/proc\n        - name: sys\n          mountPath: /host/sys\n        - name: rootfs\n          mountPath: /rootfs\n      tolerations:\n      - key: \"node-role.kubernetes.io/master\"\n        operator: \"Exists\"\n        effect: \"NoSchedule\"\n      volumes:\n        - name: proc\n          hostPath:\n            path: /proc\n        - name: dev\n          hostPath:\n            path: /dev\n        - name: sys\n          hostPath:\n            path: /sys\n        - name: rootfs\n          hostPath:\n            path: /\nEOF\n\n# 创建监控 namespace\nkubectl create ns monitor\n\n# 部署并查看部署结果\nkubectl apply -f node-exporter.yaml\nkubectl get pods -n monitor -o wide\n\n# 验证获取指标\n#curl node_ip:9100/metrics\ncurl 192.168.49.2:9100/metrics\n```\n\n2. Prometheus Server 部署\n```shell\n# 创建 serviceaccount 与 rbac 授权\ncat > prometheus-rbac.yaml << \"EOF\"\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: monitor-sa\n  namespace: monitor\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: monitor-sa-clusterrole\nrules:\n- apiGroups:\n  - \"\"\n  resources:\n  - nodes\n  - services\n  - endpoints\n  - pods\n  - nodes/proxy\n  - nodes/metrics\n  - configmaps\n  verbs:\n  - get\n  - list\n  - watch\n- nonResourceURLs:\n  - /metrics\n  verbs:\n  - get\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: monitor-clusterrolebinding\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: monitor-sa-clusterrole\nsubjects:\n- kind: ServiceAccount\n  name: minitor-sa\n  namespace: minitor\nEOF\n\n\n# 创建 Prometheus 存储目录\n# Prometheus Server 调度节点执行（测试为 minikube 节点）\nmkdir /data && chmod 777 /data\n\n\n# 创建 configMap，存放 Prometheus、AlertManager 配置信息\ncat > prometheus-cfg.yaml << \"\"EOF\"\"\nkind: ConfigMap\napiVersion: v1\nmetadata:\n  labels:\n    app: prometheus\n  name: prometheus-config\n  namespace: monitor\ndata:\n  prometheus.yml: |\n    global:\n      scrape_interval: 15s\t\t#采集目标主机监控数据间隔\n      scrape_timeout: 10s\t\t\t#数据采集超时时间\n      evaluation_interval: 1m\t#触发告警检测时间\n      \n    # Prometheus 关联 AlertManager 配置\n    alerting:\n      alertmanagers:\n      - static_configs:\n        - targets: [\"localhost:9093\"]\n    \n    # 告警规则配置，首次读取默认加载，后续根据 evaluation_interval 周期加载\n    rule_files:\n    #- \"alertermanager_rules.yaml\"\n    - /etc/prometheus/rules.yaml\n      \n    scrape_configs:\t\t\t\t\t\t\t\t\t#配置数据源 targe，每个 target 用 job_name 命名。分为静态配置与动态发现\n    - job_name: 'kubernetes-node'\n      kubernetes_sd_configs:\t\t\t\t#使用 k8s 的服务发现\n      - role: node\t\t\t\t\t\t\t\t\t#使用 node 角色，使用默认 kubelet 提供的 http 端口发现集群中每个 node 节点\n      relabel_configs:\t\t\t\t\t\t\t#重新标记\n      - source_labels: [__address__]\t#配置的原始标签，匹配地址\n        regex: '(.*):10250'\t\t\t\t\t\t#匹配带有10250端口的 url\n        replacement: '${1}:9100'\t\t\t#保留匹配到 ip:9100 的ip\n        target_label: __address__\t\t\t#新生成的 url 是${1}获取到的 ip:9100\n        action: replace\t\t\t\t\t\t\t\t#动作替换\n      - action: labelmap\n        regex: __meta_kubernetes_node_label_(.+)\t#匹配到下面正则表达式的标签会被保留,如果不做regex正则的话，默认只是会显示instance标签\n    - job_name: 'kubernetes-node-cadvisor'\t# 抓取 cAdvisor 数据，是获取 kubelet 上 /metrics/cadvisor 接口数据来获取容器的资源使用情况\n      kubernetes_sd_configs:\n      - role: node\n      scheme: https\n      tls_config:\n        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n      relabel_configs:\n      - action: labelmap\t\t\t\t\t\t\t\t\t\t\t\t\t#保留匹配到的标签\n        regex: __meta_kubernetes_node_label_(.+)\t#保留匹配到正则的标签\n      - target_label: __address__\t\t\t\t\t\t\t\t\t#获取到的地址：__address__=\"192.168.64.2:10250\"\n        replacement: kubernetes.default.svc:443\t\t#获取到的地址替换为新地址\n      - source_labels: [__meta_kubernetes_node_name]\n        regex: (.+)\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t#匹配原始标签中 __meta_kubernetes_node_name 值\n        target_label: __metrics_path__\t\t\t\t\t\t#获取__metrics_path__对应的值\n        replacement: /api/v1/nodes//proxy/metrics/cadvisor\n        #把 metrics 替换成新的值 api/v1/nodes/k8s-master1/proxy/metrics/cadvisor\n        #${1}是 __meta_kubernetes_node_name 获取到的值\n        #新的 url 就是 https://kubernetes.default.svc:443/api/v1/nodes/k8s-master1/proxy/metrics/cadvisor\n    - job_name: 'kubernetes-apiserver'\n      kubernetes_sd_configs:\n      - role: endpoints\t\t\t\t#使用 k8s 中的 endpoint 服务发现，采集 apiserver 6443 端口获取数据\n      scheme: https\n      tls_config:\n        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n      relabel_configs:\n      - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]\n        # endpoint 这个对象的名称空间,endpoint 对象的服务名,endpoint 的端口名称\n        action: keep\t#采集满足条件的实例，其他实例不采集\n        regex: default;kubernetes;https\t#正则匹配到的默认空间下的 service 名字是 kubernetes，协议是 https 的 endpoint 类型保留下来\n    - job_name: 'kubernetes-service-endpoints'\n      kubernetes_sd_configs:\n      - role: endpoints\n      relabel_configs:\n      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]\n        action: keep\n        regex: true\n        #重新打标仅抓取到的具有 \"prometheus.io/scrape: true\" 的annotation的端点，意思是说如果某个service具有prometheus.io/scrape = true annotation声明则抓取，annotation本身也是键值结构，所以这里的源标签设置为键，而regex设置值true，当值匹配到regex设定的内容时则执行keep动作也就是保留，其余则丢弃。\n      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]\n        action: replace\n        target_label: __scheme__\n        regex: (https?)\n        #重新设置scheme，匹配源标签__meta_kubernetes_service_annotation_prometheus_io_scheme也就是prometheus.io/scheme annotation，如果源标签的值匹配到regex，则把值替换为__scheme__对应的值。\n      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]\n        action: replace\n        target_label: __metrics_path__\n        regex: (.+)\n        #应用中暴露的自定义指标 path，如 prometheus.io/path = /mymetrics\n      - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]\n        action: replace\n        target_label: __address__\n        regex: ([^:]+)(?::\\d+)?;(\\d+)\n        replacement: $1:$2\n        #暴露自定义应用的端口\n      - action: labelmap\n        regex: __meta_kubernetes_service_label_(.+)\n      - source_labels: [__meta_kubernetes_namespace]\n        action: replace\n        target_label: kubernetes_namespace\n      - source_labels: [__meta_kubernetes_service_name]\n        action: replace\n        target_label: kubernetes_name\nEOF\n\ncat > alertmanager-cfg.yaml << \"\"EOF\"\"\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: alert-config\n  namespace: monitor\ndata:\n  config.yml: |-\n    global:\n      # 在没有报警的情况下声明为已解决的时间\n      resolve_timeout: 5m\n      # 配置邮件发送信息\n      smtp_smarthost: 'smtp.163.com:25'\n      smtp_from: 'xxx@163.com'\n      smtp_auth_username: 'xx@163.com'\n      smtp_auth_password: 'password'\n      smtp_hello: '163.com'\n      smtp_require_tls: false\n    # 所有报警信息进入后的根路由，用来设置报警的分发策略\n    route:\n      # 这里的标签列表是接收到报警信息后的重新分组标签，例如，接收到的报警信息里面有许多具有 cluster=A 和 alertname=LatncyHigh 这样的标签的报警信息将会批量被聚合到一个分组里面\n      group_by: ['alertname', 'cluster']\n      # 当一个新的报警分组被创建后，需要等待至少group_wait时间来初始化通知，这种方式可以确保您能有足够的时间为同一分组来获取多个警报，然后一起触发这个报警信息。\n      group_wait: 30s\n\n      # 当第一个报警发送后，等待'group_interval'时间来发送新的一组报警信息。\n      group_interval: 5m\n\n      # 如果一个报警信息已经发送成功了，等待'repeat_interval'时间来重新发送他们\n      repeat_interval: 5m\n\n      # 默认的receiver：如果一个报警没有被一个route匹配，则发送给默认的接收器\n      receiver: default\n\n      # 上面所有的属性都由所有子路由继承，并且可以在每个子路由上进行覆盖。\n      routes:\n      - receiver: email\n        group_wait: 10s\n        match:\n          team: node\n    receivers:\n    - name: 'default'\n      email_configs:\n      - to: 'xxx@gmail.com'\n        send_resolved: true\n    - name: 'email'\n      email_configs:\n      - to: 'xxx@gmail.com'\n        send_resolved: true\nEOF\n# 部署 configmap\nkubectl apply -f alertmanager-cfg.yaml\nkubectl apply -f prometheus-cfg.yaml\n\n\n# 部署 Prometheus Server 和 AlertManager 容器\ncat > prometheus-deployment.yaml << \"EOF\"\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: prometheus-server\n  namespace: monitor\n  labels:\n    app: prometheus\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: prometheus\n      component: server\n    #matchExpressions:\n    #- {key: app, operator: In, values: [prometheus]}\n    #- {key: component, operator: In, values: [server]}\n  template:\n    metadata:\n      labels:\n        app: prometheus\n        component: server\n      annotations:\n        prometheus.io/scrape: 'false'\n    spec:\n      serviceAccountName: monitor-sa\n      containers:\n      # Prometheus 容器配置\n      - name: prometheus\n        image: prom/prometheus\n        imagePullPolicy: IfNotPresent\n        command:\n          - prometheus\n          - --config.file=/etc/prometheus/prometheus.yml\n          - --storage.tsdb.path=/prometheus\t#数据存储目录\n          - --storage.tsdb.retention=720h\t  #数据保存时长\n          - --web.enable-lifecycle\t\t\t\t\t#开启热加载\n          - --web.enable-admin-api          # admin HTTP API 访问，包括删除时间序列等功能\n        ports:\n        - containerPort: 9090\n          protocol: TCP\n        volumeMounts:\n        - mountPath: /etc/prometheus/\n          name: prometheus-config\n        - mountPath: /prometheus/\n          name: prometheus-storage-volume\n      # Prometheus 容器配置结束\n      \n      # AlertManager 容器配置\n      - name: alertmanager\n        image: prom/alertmanager\n        imagePullPolicy: IfNotPresent\n        args:\n        - --config.file=/etc/alertmanager/config.yml\n        - --storage.path=/alertmanager/data\n        ports:\n        - containerPort: 9093\n          name: http\n        volumeMounts:\n        - mountPath: /etc/alertmanager\n          name: alertcfg\n        resources:\n          requests:\n            cpu: 100m\n            memory: 256Mi\n          limits:\n            cpu: 100m\n            memory: 256Mi          \n      # AlertManager 容器配置结束\n      volumes:\n      - name: prometheus-config\n        configMap:\n          name: prometheus-config\n      - name: prometheus-storage-volume\n        hostPath:\n         path: /data\n         type: Directory\n      - name: alertcfg\n        configMap:\n          name: alert-config\nEOF\nkubectl apply -f prometheus-deployment.yaml\n\n\n# 部署 Service，暴露 Prometheus Server 对外接口\ncat > prometheus-svc.yaml << \"EOF\"\napiVersion: v1\nkind: Service\nmetadata:\n  name: prometheus\n  namespace: monitor\n  labels:\n    app: prometheus\nspec:\n  type: NodePort\n  ports:\n    - port: 9090\n      targetPort: 9090\n      protocol: TCP\n      nodePort: 30009\n  selector:\n    app: prometheus\n    component: server\nEOF\nkubectl apply -f prometheus-svc.yaml\n#minikbube 转发本机端口进集群内部 Service 方式\n#kubectl port-forward service/prometheus -n monitor --address 127.0.0.1 3009:9090\n```\n\n3. Alert 告警配置\n- 追加告警规则配置\n```shell\n# 追加 ruls.yml 配置内容到 prometheus-cfg.yaml 配置\nkind: ConfigMap\napiVersion: v1\nmetadata:\n  labels:\n    app: prometheus\n  name: prometheus-config\n  namespace: monitor\ndata:\n  prometheus.yml: |\n    ...\n  # 告警规则配置，与 prometheus 配置同样写入 /etc/prometheus 目录下\n  rules.yml: |\n    groups:\n    - name: test-rule\n      rules:\n      - alert: NodeMemoryUsage\n        expr: (node_memory_MemTotal_bytes - (node_memory_MemFree_bytes + node_memory_Buffers_bytes + node_memory_Cached_bytes)) / node_memory_MemTotal_bytes * 100 > 20\n        for: 2m\n        labels:\n          team: node\n        annotations:\n          summary: \"{{.instance}}: High Memory usage detected\"\n          description: \"{{.instance}}: Memory usage is above 20% (current value is: {{  }}\"\n```\n\n- Prometheus 热加载配置\n```shell\n# 请求 Prometheus、AlertManager 接口，可使用 Pod IP，热加载配置\ncurl -X POST http://172.17.0.5:9090/-/reload\ncurl -X POST http://172.17.0.5:9093/-/reload\n\n# 查看 log\nkubectl logs --tail 10 -f prometheus-server-658b54bd7-9gvd9 -n monitor\n\n# 强制重启加载方式，可能丢失监控数据\n#kubectl delete -f prometheus-cfg.yaml && kubectl delete -f prometheus-deployment.yaml\n#kubectl apply -f prometheus-cfg.yaml && kubectl apply -f prometheus-deployment.yaml\n```\n\n- 告警通知：email、webhook\n\n4. Grafana 部署\n```shell\ncat > grafana.yaml << \"EOF\"\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: monitoring-grafana\n  namespace: monitor\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      task: monitoring\n      k8s-app: grafana\n  template:\n    metadata:\n      labels:\n        task: monitoring\n        k8s-app: grafana\n    spec:\n      securityContext:\n        fsGroup: 472\n        runAsUser: 472\n      containers:\n      - name: grafana\n        image: grafana/grafana\n        ports:\n        - containerPort: 3000\n          protocol: TCP\n        volumeMounts:\n        - mountPath: /etc/ssl/certs\n          name: ca-certificates\n          readOnly: true\n        - mountPath: /var\n          name: grafana-storage\n        env:\n        - name: GF_SECURITY_ADMIN_USER\n          value: admin\n        - name: GF_SECURITY_ADMIN_PASSWORD\n          value: admin123\n      volumes:\n      - name: ca-certificates\n        hostPath:\n          path: /etc/ssl/certs\n      - name: grafana-storage\n        emptyDir: {}\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    kubernetes.io/cluster-service: 'true'\n    kubernetes.io/name: monitoring-grafana\n  name: monitoring-grafana\n  namespace: monitor\nspec:\n  type: NodePort\n  ports:\n  - port: 80\n    targetPort: 3000\n  selector:\n    k8s-app: grafana\nEOF\n\nkubectl apply -f grafana.yaml\nkubectl get pod,svc -n monitor\n\n\n# 配置 Grafana\n#登录，导入 Prometheus 数据源\n#导入监控 Kubernetes 集群模板，官方模板 https://grafana.com/grafana/dashboards/162/revisions\n#监控 node，导入 node_exporter.json\n\n\n```\n\n#### 四、Prometheus-Operator 方式部署\n\n1. 部署 prometheus-operator（controller）\n```shell\n# 下载官方源码，部署 operator 资源\ngit clone https://github.com/prometheus-operator/prometheus-operator && cd prometheus-operator\n# 创建 CRD 资源、RBAC 资源、operator 资源\nkubectl create -f bundle.yaml\n# 查看结果\nkubectl get pod,svc -owide\nNAME                                       READY   STATUS    RESTARTS   AGE\npod/prometheus-operator-567cd8b6f6-xvhp5   1/1     Running   0          127m\nNAME                          TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE\nservice/prometheus-operator   ClusterIP   None             <none>        8080/TCP         127m\n# 查看 CRD 资源下所有 API 资源\nkubectl get --raw /apis/monitoring.coreos.com/v1\n```\n\n> 官方源码地址已替换至: https://github.com/prometheus-operator/kube-prometheus, 部署方式参考新地址\n\n2. 部署 prometheus （server，CRD 资源）\n```shell\n# 创建 prometheus-server 资源\ncat > prometheus.yaml << \"EOF\"\napiVersion: monitoring.coreos.com/v1\nkind: Prometheus\nmetadata:\n  name: prometheus\nspec:\n  serviceAccountName: prometheus\n  #配置监控所有 ServiceMonitor\n  #ServiceMonitorSelector: {}\n  serviceMonitorSelector:\n    matchLabels:\n      team: frontend\n  resources:\n    requests:\n      memory: 200Mi\n  enableAdminAPI: false\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: prometheus\n  namespace: default\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: prometheus\nrules:\n- apiGroups: [\"\"]\n  resources:\n  - nodes\n  - services\n  - endpoints\n  - pods\n  verbs: [\"get\", \"list\", \"watch\"]\n- apiGroups: [\"\"]\n  resources:\n  - configmaps\n  verbs: [\"get\"]\n- nonResourceURLs: [\"/metrics\"]\n  verbs: [\"get\"]\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: prometheus\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: prometheus\nsubjects:\n- kind: ServiceAccount\n  name: prometheus\n  namespace: default\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: prometheus\nspec:\n  type: NodePort\n  ports:\n  - name: web\n    nodePort: 30900\n    port: 9090\n    protocol: TCP\n    targetPort: web\n  selector:\n    prometheus: prometheus\nEOF\n\n\n# 创建模拟输出 metrics 程序\ncat > example.yaml << \"EOF\"\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: example-app\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: example-app\n  template:\n    metadata:\n      labels:\n        app: example-app\n    spec:\n      containers:\n      - name: example-app\n        image: zhangguanzhang/instrumented_app\n        ports:\n        - name: web\n          containerPort: 8080\n---\nkind: Service\napiVersion: v1\nmetadata:\n  name: example-app\n  labels:\n    app: example-app\nspec:\n  selector:\n    app: example-app\n  ports:\n  - name: web\n    port: 8080\nEOF\n```\n\n3. 部署 ServiceMonitor （CRD 资源）\n```shell\n# 创建 ServiceMonitor\ncat > service-monitor.yaml << \"EOF\"\napiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  name: example-app\n  labels:\n    team: frontend\nspec:\n  #namespaceSelector:\n  #1.非同namespace时配置具体ns\n  #  matchNames:\n  #  - target_namespace_name\n  #2.任意ns\n  #  any:true\n  selector:\n    matchLabels:\n      app: example-app\n  endpoints:\n  - port: web\n  #BasicAuth认证时(base64编码)\n  #- basicAuth:\n  #    password:\n  #      name: basic-auth\n  #      key: password\n  #    username:\n  #      name: basic-auth\n  #      key: user\n  #  port: web\nEOF\n```\n\n4. 访问验证\n```shell\n# 查看部署资源信息\nNAME                                       READY   STATUS    RESTARTS   AGE    IP           NODE       NOMINATED NODE   READINESS GATES\npod/example-app-745967cc67-qbh45           1/1     Running   0          95m    172.17.0.7   minikube   <none>           <none>\npod/prometheus-operator-567cd8b6f6-xvhp5   1/1     Running   0          139m   172.17.0.6   minikube   <none>           <none>\npod/prometheus-prometheus-0                2/2     Running   0          108m   172.17.0.3   minikube   <none>           <none>\n\nNAME                          TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE    SELECTOR\nservice/example-app           ClusterIP   10.100.248.130   <none>        8080/TCP         104m   app=example-app\nservice/kubernetes            ClusterIP   10.96.0.1        <none>        443/TCP          24d    <none>\nservice/prometheus            NodePort    10.101.76.214    <none>        9090:30900/TCP   28m    prometheus=prometheus\nservice/prometheus-operated   ClusterIP   None             <none>        9090/TCP         108m   app.kubernetes.io/name=prometheus\nservice/prometheus-operator   ClusterIP   None             <none>        8080/TCP         139m   app.kubernetes.io/component=controller,app.kubernetes.io/name=prometheus-operator\n\n# 访问验证\n#minikube 需转发端口 \n#kubectl port-forward service/prometheus --address 127.0.0.1 9090:9090\n#浏览器访问 127.0.0.1:9090/targets\n```\n\n5. 自定义监控集群资源（Etcd、controller-manager 等）\n- 监控 Etcd\n```shell\n#1、获取 etcd 证书生成 secret\n#2、配置 prometheus StatefulSet 添加上一步生成的 secret\nkubectl get statefulsets -n monitoring\nNAME                READY   AGE\nalertmanager-main   3/3     3h25m\nprometheus-k8s      1/1     3h25m\n#3、创建 ServiceMonitor 资源并部署\n#4、创建 Service、Endpoints 资源并进行关联（标签关联）\n```\n\n6. 配置 AlertManager、PrometheusRule 自定义告警\n- AlertManager 配置（Prometheus Dashboard 页面查看 Config 内容）\n```shell\nalerting:\n  alert_relabel_configs:\n  - separator: ;\n    regex: prometheus_replica\n    replacement: $1\n    action: labeldrop\n  alertmanagers:\n  - kubernetes_sd_configs:\n    - role: endpoints\n      namespaces:\n        names:\n        - monitoring\n    scheme: http\n    path_prefix: /\n    timeout: 10s\n    relabel_configs:\n    - source_labels: [__meta_kubernetes_service_name]\n      separator: ;\n      regex: alertmanager-main\n      replacement: $1\n      action: keep\n    - source_labels: [__meta_kubernetes_endpoint_port_name]\n      separator: ;\n      regex: web\n      replacement: $1\n      action: keep\nrule_files:\n- /etc/prometheus/rules/prometheus-k8s-rulefiles-0/*.yaml\n```\n\n- 告警规则\n```shell\n# Prometheus Rule\ncat > prometheus-rules.yaml << \"EOF\"\napiVersion: monitoring.coreos.com/v1\nkind: PrometheusRule\nmetadata:\n  labels:\n    prometheus: k8s\n    role: alert-rules\n  name: prometheus-k8s-rules\nspec:\n  groups:\n  - name: k8s.rules\n    rules:\n    - expr: |\n        sum(rate(container_cpu_usage_seconds_total{job=\"kubelet\", image!=\"\", container_name!=\"\"}[5m])) by (namespace)\n      record: namespace:container_cpu_usage_seconds_total:sum_rate\nEOF\n# 生成 rule 配置文件到 prometheus 的 /etc/prometheus/rules/prometheus-k8s-rulefiles-0/ 目录下\n```\n\n- 配置告警（AlertManager 配置 secret）\n\n7. 自动发现配置与持久化存储\n- 自动发现配置（annotations）\n\nprometheus.io/scrape=true\nprometheus.io/port=xxx\n\n- 持久化存储（PV、PVC）\n\n\n> Operator 管理监控以及维护 CRD 资源对象的状态：\n> - Prometheus\n> - ServiceMonitor\n> - PodMonitor\n> - AltertManager\n> - PrometheusRule\n\n\n> 参考文档：\n> 1、[https://www.servicemesher.com/blog/prometheus-operator-manual/](https://www.servicemesher.com/blog/prometheus-operator-manual/)\n> 2、[https://www.qikqiak.com/k8s-book/docs/52.Prometheus%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html](https://www.qikqiak.com/k8s-book/docs/52.Prometheus%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html)\n> 官方文档：\n> 1、[https://github.com/prometheus-operator/prometheus-operator](https://github.com/prometheus-operator/prometheus-operator)\n> 2、[https://github.com/prometheus-operator/kube-prometheus](https://github.com/prometheus-operator/kube-prometheus)（新版本）\n> 3、告警规则：[https://yunlzheng.gitbook.io/prometheus-book/parti-prometheus-ji-chu/alert/prometheus-alert-rule](https://yunlzheng.gitbook.io/prometheus-book/parti-prometheus-ji-chu/alert/prometheus-alert-rule)\n\n\n","slug":"observability-prometheus-component","published":1,"updated":"2024-01-21T15:28:43.159Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm0fat8zq001vs0nj7ppme6tb","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h4 id=\"一、组件说明\"><a href=\"#一、组件说明\" class=\"headerlink\" title=\"一、组件说明\"></a>一、组件说明</h4><p><strong>Prometheus Server</strong></p>\n<ul>\n<li>核心组件，负责实现对监控数据的获取，存储与查询。</li>\n<li>支持静态配置管理监控目标，也可通过 Service Discovery 方式动态管理监控目录，获取数据。</li>\n<li>可从其他 Prometheus Server 获取数据</li>\n<li>对外提供 PromQL 实现数据查询和分析</li>\n</ul>\n<p><strong>Exporter</strong></p>\n<ul>\n<li>直接采集，内置用于想 Prometheus 暴露监控数据的 Endpoints，如 node-exporter</li>\n<li>间接采集，通过 Prometheus 提供的客户端库监控采集程序，如 mysql-exporter</li>\n</ul>\n<p><strong>AlertManager</strong><br>基于 PromQL 创建告警规则，满足规则产生告警并推送，支持 mail、webhook 等。</p>\n<p><strong>PushGateway</strong><br>原获取数据方式为基于 Prometheus Server 从 Exporter pull 数据，当网络或其他原因 Server 无法与 Exporter 直接通信时，使用 PushGateway 方式中转。<br>Prometheus server 定期从配置好的 jobs 和 exporters 中拉取 metrics，或者接收来自 Pushgateway 发送过来的 metrics，或者从其它的 Prometheus server 中拉 metrics</p>\n<blockquote>\n<p>metrics：实际监控指标数据，如 cpu 利用率</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<p><strong>Grafana</strong><br>图形界面可视化采集展示数据<br>多数据源<br>告警规则与通知<br>混合展示与注释</p>\n<h4 id=\"二、二进制方式部署\"><a href=\"#二、二进制方式部署\" class=\"headerlink\" title=\"二、二进制方式部署\"></a>二、二进制方式部署</h4><p>略（基本不使用）</p>\n<h4 id=\"三、容器方式部署\"><a href=\"#三、容器方式部署\" class=\"headerlink\" title=\"三、容器方式部署\"></a>三、容器方式部署</h4><ol>\n<li><p>安装 node-export </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建部署清单</span></span><br><span class=\"line\">cat &gt; node-exporter.yaml &lt;&lt; &quot;EOF&quot;</span><br><span class=\"line\">node-exporter.yaml</span><br><span class=\"line\">apiVersion: apps/v1</span><br><span class=\"line\">kind: DaemonSet</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: node-exporter</span><br><span class=\"line\">  namespace: monitor</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    name: node-exporter</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">     name: node-exporter</span><br><span class=\"line\">  template:</span><br><span class=\"line\">    metadata:</span><br><span class=\"line\">      labels:</span><br><span class=\"line\">        name: node-exporter</span><br><span class=\"line\">    spec:</span><br><span class=\"line\">      hostPID: true</span><br><span class=\"line\">      hostIPC: true</span><br><span class=\"line\">      hostNetwork: true</span><br><span class=\"line\">      containers:</span><br><span class=\"line\">      - name: node-exporter</span><br><span class=\"line\">        image: prom/node-exporter:v0.16.0</span><br><span class=\"line\">        ports:</span><br><span class=\"line\">        - containerPort: 9100</span><br><span class=\"line\">        resources:</span><br><span class=\"line\">          requests:</span><br><span class=\"line\">            cpu: 0.15 # 这个容器运行至少需要0.15核cpu</span><br><span class=\"line\">        securityContext:</span><br><span class=\"line\">          privileged: true\t# 开启特权模式</span><br><span class=\"line\">        args:</span><br><span class=\"line\">        - --path.procfs</span><br><span class=\"line\">        - /host/proc</span><br><span class=\"line\">        - --path.sysfs</span><br><span class=\"line\">        - /host/sys</span><br><span class=\"line\">        - --collector.filesystem.ignored-mount-points</span><br><span class=\"line\">        - &#x27;&quot;^/(sys|proc|dev|host|etc)($|/)&quot;&#x27;</span><br><span class=\"line\">        volumeMounts:</span><br><span class=\"line\">        - name: dev</span><br><span class=\"line\">          mountPath: /host/dev</span><br><span class=\"line\">        - name: proc</span><br><span class=\"line\">          mountPath: /host/proc</span><br><span class=\"line\">        - name: sys</span><br><span class=\"line\">          mountPath: /host/sys</span><br><span class=\"line\">        - name: rootfs</span><br><span class=\"line\">          mountPath: /rootfs</span><br><span class=\"line\">      tolerations:</span><br><span class=\"line\">      - key: &quot;node-role.kubernetes.io/master&quot;</span><br><span class=\"line\">        operator: &quot;Exists&quot;</span><br><span class=\"line\">        effect: &quot;NoSchedule&quot;</span><br><span class=\"line\">      volumes:</span><br><span class=\"line\">        - name: proc</span><br><span class=\"line\">          hostPath:</span><br><span class=\"line\">            path: /proc</span><br><span class=\"line\">        - name: dev</span><br><span class=\"line\">          hostPath:</span><br><span class=\"line\">            path: /dev</span><br><span class=\"line\">        - name: sys</span><br><span class=\"line\">          hostPath:</span><br><span class=\"line\">            path: /sys</span><br><span class=\"line\">        - name: rootfs</span><br><span class=\"line\">          hostPath:</span><br><span class=\"line\">            path: /</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建监控 namespace</span></span><br><span class=\"line\">kubectl create ns monitor</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">部署并查看部署结果</span></span><br><span class=\"line\">kubectl apply -f node-exporter.yaml</span><br><span class=\"line\">kubectl get pods -n monitor -o wide</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">验证获取指标</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">curl node_ip:9100/metrics</span></span><br><span class=\"line\">curl 192.168.49.2:9100/metrics</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Prometheus Server 部署</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建 serviceaccount 与 rbac 授权</span></span><br><span class=\"line\">cat &gt; prometheus-rbac.yaml &lt;&lt; &quot;EOF&quot;</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: ServiceAccount</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: monitor-sa</span><br><span class=\"line\">  namespace: monitor</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class=\"line\">kind: ClusterRole</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: monitor-sa-clusterrole</span><br><span class=\"line\">rules:</span><br><span class=\"line\">- apiGroups:</span><br><span class=\"line\">  - &quot;&quot;</span><br><span class=\"line\">  resources:</span><br><span class=\"line\">  - nodes</span><br><span class=\"line\">  - services</span><br><span class=\"line\">  - endpoints</span><br><span class=\"line\">  - pods</span><br><span class=\"line\">  - nodes/proxy</span><br><span class=\"line\">  - nodes/metrics</span><br><span class=\"line\">  - configmaps</span><br><span class=\"line\">  verbs:</span><br><span class=\"line\">  - get</span><br><span class=\"line\">  - list</span><br><span class=\"line\">  - watch</span><br><span class=\"line\">- nonResourceURLs:</span><br><span class=\"line\">  - /metrics</span><br><span class=\"line\">  verbs:</span><br><span class=\"line\">  - get</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class=\"line\">kind: ClusterRoleBinding</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: monitor-clusterrolebinding</span><br><span class=\"line\">roleRef:</span><br><span class=\"line\">  apiGroup: rbac.authorization.k8s.io</span><br><span class=\"line\">  kind: ClusterRole</span><br><span class=\"line\">  name: monitor-sa-clusterrole</span><br><span class=\"line\">subjects:</span><br><span class=\"line\">- kind: ServiceAccount</span><br><span class=\"line\">  name: minitor-sa</span><br><span class=\"line\">  namespace: minitor</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建 Prometheus 存储目录</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Prometheus Server 调度节点执行（测试为 minikube 节点）</span></span><br><span class=\"line\">mkdir /data &amp;&amp; chmod 777 /data</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建 configMap，存放 Prometheus、AlertManager 配置信息</span></span><br><span class=\"line\">cat &gt; prometheus-cfg.yaml &lt;&lt; &quot;&quot;EOF&quot;&quot;</span><br><span class=\"line\">kind: ConfigMap</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app: prometheus</span><br><span class=\"line\">  name: prometheus-config</span><br><span class=\"line\">  namespace: monitor</span><br><span class=\"line\">data:</span><br><span class=\"line\">  prometheus.yml: |</span><br><span class=\"line\">    global:</span><br><span class=\"line\">      scrape_interval: 15s\t\t#采集目标主机监控数据间隔</span><br><span class=\"line\">      scrape_timeout: 10s\t\t\t#数据采集超时时间</span><br><span class=\"line\">      evaluation_interval: 1m\t#触发告警检测时间</span><br><span class=\"line\">      </span><br><span class=\"line\">    # Prometheus 关联 AlertManager 配置</span><br><span class=\"line\">    alerting:</span><br><span class=\"line\">      alertmanagers:</span><br><span class=\"line\">      - static_configs:</span><br><span class=\"line\">        - targets: [&quot;localhost:9093&quot;]</span><br><span class=\"line\">    </span><br><span class=\"line\">    # 告警规则配置，首次读取默认加载，后续根据 evaluation_interval 周期加载</span><br><span class=\"line\">    rule_files:</span><br><span class=\"line\">    #- &quot;alertermanager_rules.yaml&quot;</span><br><span class=\"line\">    - /etc/prometheus/rules.yaml</span><br><span class=\"line\">      </span><br><span class=\"line\">    scrape_configs:\t\t\t\t\t\t\t\t\t#配置数据源 targe，每个 target 用 job_name 命名。分为静态配置与动态发现</span><br><span class=\"line\">    - job_name: &#x27;kubernetes-node&#x27;</span><br><span class=\"line\">      kubernetes_sd_configs:\t\t\t\t#使用 k8s 的服务发现</span><br><span class=\"line\">      - role: node\t\t\t\t\t\t\t\t\t#使用 node 角色，使用默认 kubelet 提供的 http 端口发现集群中每个 node 节点</span><br><span class=\"line\">      relabel_configs:\t\t\t\t\t\t\t#重新标记</span><br><span class=\"line\">      - source_labels: [__address__]\t#配置的原始标签，匹配地址</span><br><span class=\"line\">        regex: &#x27;(.*):10250&#x27;\t\t\t\t\t\t#匹配带有10250端口的 url</span><br><span class=\"line\">        replacement: &#x27;$&#123;1&#125;:9100&#x27;\t\t\t#保留匹配到 ip:9100 的ip</span><br><span class=\"line\">        target_label: __address__\t\t\t#新生成的 url 是$&#123;1&#125;获取到的 ip:9100</span><br><span class=\"line\">        action: replace\t\t\t\t\t\t\t\t#动作替换</span><br><span class=\"line\">      - action: labelmap</span><br><span class=\"line\">        regex: __meta_kubernetes_node_label_(.+)\t#匹配到下面正则表达式的标签会被保留,如果不做regex正则的话，默认只是会显示instance标签</span><br><span class=\"line\">    - job_name: &#x27;kubernetes-node-cadvisor&#x27;\t# 抓取 cAdvisor 数据，是获取 kubelet 上 /metrics/cadvisor 接口数据来获取容器的资源使用情况</span><br><span class=\"line\">      kubernetes_sd_configs:</span><br><span class=\"line\">      - role: node</span><br><span class=\"line\">      scheme: https</span><br><span class=\"line\">      tls_config:</span><br><span class=\"line\">        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span><br><span class=\"line\">      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token</span><br><span class=\"line\">      relabel_configs:</span><br><span class=\"line\">      - action: labelmap\t\t\t\t\t\t\t\t\t\t\t\t\t#保留匹配到的标签</span><br><span class=\"line\">        regex: __meta_kubernetes_node_label_(.+)\t#保留匹配到正则的标签</span><br><span class=\"line\">      - target_label: __address__\t\t\t\t\t\t\t\t\t#获取到的地址：__address__=&quot;192.168.64.2:10250&quot;</span><br><span class=\"line\">        replacement: kubernetes.default.svc:443\t\t#获取到的地址替换为新地址</span><br><span class=\"line\">      - source_labels: [__meta_kubernetes_node_name]</span><br><span class=\"line\">        regex: (.+)\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t#匹配原始标签中 __meta_kubernetes_node_name 值</span><br><span class=\"line\">        target_label: __metrics_path__\t\t\t\t\t\t#获取__metrics_path__对应的值</span><br><span class=\"line\">        replacement: /api/v1/nodes//proxy/metrics/cadvisor</span><br><span class=\"line\">        #把 metrics 替换成新的值 api/v1/nodes/k8s-master1/proxy/metrics/cadvisor</span><br><span class=\"line\">        #$&#123;1&#125;是 __meta_kubernetes_node_name 获取到的值</span><br><span class=\"line\">        #新的 url 就是 https://kubernetes.default.svc:443/api/v1/nodes/k8s-master1/proxy/metrics/cadvisor</span><br><span class=\"line\">    - job_name: &#x27;kubernetes-apiserver&#x27;</span><br><span class=\"line\">      kubernetes_sd_configs:</span><br><span class=\"line\">      - role: endpoints\t\t\t\t#使用 k8s 中的 endpoint 服务发现，采集 apiserver 6443 端口获取数据</span><br><span class=\"line\">      scheme: https</span><br><span class=\"line\">      tls_config:</span><br><span class=\"line\">        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span><br><span class=\"line\">      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token</span><br><span class=\"line\">      relabel_configs:</span><br><span class=\"line\">      - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]</span><br><span class=\"line\">        # endpoint 这个对象的名称空间,endpoint 对象的服务名,endpoint 的端口名称</span><br><span class=\"line\">        action: keep\t#采集满足条件的实例，其他实例不采集</span><br><span class=\"line\">        regex: default;kubernetes;https\t#正则匹配到的默认空间下的 service 名字是 kubernetes，协议是 https 的 endpoint 类型保留下来</span><br><span class=\"line\">    - job_name: &#x27;kubernetes-service-endpoints&#x27;</span><br><span class=\"line\">      kubernetes_sd_configs:</span><br><span class=\"line\">      - role: endpoints</span><br><span class=\"line\">      relabel_configs:</span><br><span class=\"line\">      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]</span><br><span class=\"line\">        action: keep</span><br><span class=\"line\">        regex: true</span><br><span class=\"line\">        #重新打标仅抓取到的具有 &quot;prometheus.io/scrape: true&quot; 的annotation的端点，意思是说如果某个service具有prometheus.io/scrape = true annotation声明则抓取，annotation本身也是键值结构，所以这里的源标签设置为键，而regex设置值true，当值匹配到regex设定的内容时则执行keep动作也就是保留，其余则丢弃。</span><br><span class=\"line\">      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]</span><br><span class=\"line\">        action: replace</span><br><span class=\"line\">        target_label: __scheme__</span><br><span class=\"line\">        regex: (https?)</span><br><span class=\"line\">        #重新设置scheme，匹配源标签__meta_kubernetes_service_annotation_prometheus_io_scheme也就是prometheus.io/scheme annotation，如果源标签的值匹配到regex，则把值替换为__scheme__对应的值。</span><br><span class=\"line\">      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]</span><br><span class=\"line\">        action: replace</span><br><span class=\"line\">        target_label: __metrics_path__</span><br><span class=\"line\">        regex: (.+)</span><br><span class=\"line\">        #应用中暴露的自定义指标 path，如 prometheus.io/path = /mymetrics</span><br><span class=\"line\">      - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]</span><br><span class=\"line\">        action: replace</span><br><span class=\"line\">        target_label: __address__</span><br><span class=\"line\">        regex: ([^:]+)(?::\\d+)?;(\\d+)</span><br><span class=\"line\">        replacement: $1:$2</span><br><span class=\"line\">        #暴露自定义应用的端口</span><br><span class=\"line\">      - action: labelmap</span><br><span class=\"line\">        regex: __meta_kubernetes_service_label_(.+)</span><br><span class=\"line\">      - source_labels: [__meta_kubernetes_namespace]</span><br><span class=\"line\">        action: replace</span><br><span class=\"line\">        target_label: kubernetes_namespace</span><br><span class=\"line\">      - source_labels: [__meta_kubernetes_service_name]</span><br><span class=\"line\">        action: replace</span><br><span class=\"line\">        target_label: kubernetes_name</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">cat &gt; alertmanager-cfg.yaml &lt;&lt; &quot;&quot;EOF&quot;&quot;</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: ConfigMap</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: alert-config</span><br><span class=\"line\">  namespace: monitor</span><br><span class=\"line\">data:</span><br><span class=\"line\">  config.yml: |-</span><br><span class=\"line\">    global:</span><br><span class=\"line\">      # 在没有报警的情况下声明为已解决的时间</span><br><span class=\"line\">      resolve_timeout: 5m</span><br><span class=\"line\">      # 配置邮件发送信息</span><br><span class=\"line\">      smtp_smarthost: &#x27;smtp.163.com:25&#x27;</span><br><span class=\"line\">      smtp_from: &#x27;xxx@163.com&#x27;</span><br><span class=\"line\">      smtp_auth_username: &#x27;xx@163.com&#x27;</span><br><span class=\"line\">      smtp_auth_password: &#x27;password&#x27;</span><br><span class=\"line\">      smtp_hello: &#x27;163.com&#x27;</span><br><span class=\"line\">      smtp_require_tls: false</span><br><span class=\"line\">    # 所有报警信息进入后的根路由，用来设置报警的分发策略</span><br><span class=\"line\">    route:</span><br><span class=\"line\">      # 这里的标签列表是接收到报警信息后的重新分组标签，例如，接收到的报警信息里面有许多具有 cluster=A 和 alertname=LatncyHigh 这样的标签的报警信息将会批量被聚合到一个分组里面</span><br><span class=\"line\">      group_by: [&#x27;alertname&#x27;, &#x27;cluster&#x27;]</span><br><span class=\"line\">      # 当一个新的报警分组被创建后，需要等待至少group_wait时间来初始化通知，这种方式可以确保您能有足够的时间为同一分组来获取多个警报，然后一起触发这个报警信息。</span><br><span class=\"line\">      group_wait: 30s</span><br><span class=\"line\"></span><br><span class=\"line\">      # 当第一个报警发送后，等待&#x27;group_interval&#x27;时间来发送新的一组报警信息。</span><br><span class=\"line\">      group_interval: 5m</span><br><span class=\"line\"></span><br><span class=\"line\">      # 如果一个报警信息已经发送成功了，等待&#x27;repeat_interval&#x27;时间来重新发送他们</span><br><span class=\"line\">      repeat_interval: 5m</span><br><span class=\"line\"></span><br><span class=\"line\">      # 默认的receiver：如果一个报警没有被一个route匹配，则发送给默认的接收器</span><br><span class=\"line\">      receiver: default</span><br><span class=\"line\"></span><br><span class=\"line\">      # 上面所有的属性都由所有子路由继承，并且可以在每个子路由上进行覆盖。</span><br><span class=\"line\">      routes:</span><br><span class=\"line\">      - receiver: email</span><br><span class=\"line\">        group_wait: 10s</span><br><span class=\"line\">        match:</span><br><span class=\"line\">          team: node</span><br><span class=\"line\">    receivers:</span><br><span class=\"line\">    - name: &#x27;default&#x27;</span><br><span class=\"line\">      email_configs:</span><br><span class=\"line\">      - to: &#x27;xxx@gmail.com&#x27;</span><br><span class=\"line\">        send_resolved: true</span><br><span class=\"line\">    - name: &#x27;email&#x27;</span><br><span class=\"line\">      email_configs:</span><br><span class=\"line\">      - to: &#x27;xxx@gmail.com&#x27;</span><br><span class=\"line\">        send_resolved: true</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">部署 configmap</span></span><br><span class=\"line\">kubectl apply -f alertmanager-cfg.yaml</span><br><span class=\"line\">kubectl apply -f prometheus-cfg.yaml</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">部署 Prometheus Server 和 AlertManager 容器</span></span><br><span class=\"line\">cat &gt; prometheus-deployment.yaml &lt;&lt; &quot;EOF&quot;</span><br><span class=\"line\">apiVersion: apps/v1</span><br><span class=\"line\">kind: Deployment</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: prometheus-server</span><br><span class=\"line\">  namespace: monitor</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app: prometheus</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  replicas: 1</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      app: prometheus</span><br><span class=\"line\">      component: server</span><br><span class=\"line\">    #matchExpressions:</span><br><span class=\"line\">    #- &#123;key: app, operator: In, values: [prometheus]&#125;</span><br><span class=\"line\">    #- &#123;key: component, operator: In, values: [server]&#125;</span><br><span class=\"line\">  template:</span><br><span class=\"line\">    metadata:</span><br><span class=\"line\">      labels:</span><br><span class=\"line\">        app: prometheus</span><br><span class=\"line\">        component: server</span><br><span class=\"line\">      annotations:</span><br><span class=\"line\">        prometheus.io/scrape: &#x27;false&#x27;</span><br><span class=\"line\">    spec:</span><br><span class=\"line\">      serviceAccountName: monitor-sa</span><br><span class=\"line\">      containers:</span><br><span class=\"line\">      # Prometheus 容器配置</span><br><span class=\"line\">      - name: prometheus</span><br><span class=\"line\">        image: prom/prometheus</span><br><span class=\"line\">        imagePullPolicy: IfNotPresent</span><br><span class=\"line\">        command:</span><br><span class=\"line\">          - prometheus</span><br><span class=\"line\">          - --config.file=/etc/prometheus/prometheus.yml</span><br><span class=\"line\">          - --storage.tsdb.path=/prometheus\t#数据存储目录</span><br><span class=\"line\">          - --storage.tsdb.retention=720h\t  #数据保存时长</span><br><span class=\"line\">          - --web.enable-lifecycle\t\t\t\t\t#开启热加载</span><br><span class=\"line\">          - --web.enable-admin-api          # admin HTTP API 访问，包括删除时间序列等功能</span><br><span class=\"line\">        ports:</span><br><span class=\"line\">        - containerPort: 9090</span><br><span class=\"line\">          protocol: TCP</span><br><span class=\"line\">        volumeMounts:</span><br><span class=\"line\">        - mountPath: /etc/prometheus/</span><br><span class=\"line\">          name: prometheus-config</span><br><span class=\"line\">        - mountPath: /prometheus/</span><br><span class=\"line\">          name: prometheus-storage-volume</span><br><span class=\"line\">      # Prometheus 容器配置结束</span><br><span class=\"line\">      </span><br><span class=\"line\">      # AlertManager 容器配置</span><br><span class=\"line\">      - name: alertmanager</span><br><span class=\"line\">        image: prom/alertmanager</span><br><span class=\"line\">        imagePullPolicy: IfNotPresent</span><br><span class=\"line\">        args:</span><br><span class=\"line\">        - --config.file=/etc/alertmanager/config.yml</span><br><span class=\"line\">        - --storage.path=/alertmanager/data</span><br><span class=\"line\">        ports:</span><br><span class=\"line\">        - containerPort: 9093</span><br><span class=\"line\">          name: http</span><br><span class=\"line\">        volumeMounts:</span><br><span class=\"line\">        - mountPath: /etc/alertmanager</span><br><span class=\"line\">          name: alertcfg</span><br><span class=\"line\">        resources:</span><br><span class=\"line\">          requests:</span><br><span class=\"line\">            cpu: 100m</span><br><span class=\"line\">            memory: 256Mi</span><br><span class=\"line\">          limits:</span><br><span class=\"line\">            cpu: 100m</span><br><span class=\"line\">            memory: 256Mi          </span><br><span class=\"line\">      # AlertManager 容器配置结束</span><br><span class=\"line\">      volumes:</span><br><span class=\"line\">      - name: prometheus-config</span><br><span class=\"line\">        configMap:</span><br><span class=\"line\">          name: prometheus-config</span><br><span class=\"line\">      - name: prometheus-storage-volume</span><br><span class=\"line\">        hostPath:</span><br><span class=\"line\">         path: /data</span><br><span class=\"line\">         type: Directory</span><br><span class=\"line\">      - name: alertcfg</span><br><span class=\"line\">        configMap:</span><br><span class=\"line\">          name: alert-config</span><br><span class=\"line\">EOF</span><br><span class=\"line\">kubectl apply -f prometheus-deployment.yaml</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">部署 Service，暴露 Prometheus Server 对外接口</span></span><br><span class=\"line\">cat &gt; prometheus-svc.yaml &lt;&lt; &quot;EOF&quot;</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Service</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: prometheus</span><br><span class=\"line\">  namespace: monitor</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app: prometheus</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  type: NodePort</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">    - port: 9090</span><br><span class=\"line\">      targetPort: 9090</span><br><span class=\"line\">      protocol: TCP</span><br><span class=\"line\">      nodePort: 30009</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    app: prometheus</span><br><span class=\"line\">    component: server</span><br><span class=\"line\">EOF</span><br><span class=\"line\">kubectl apply -f prometheus-svc.yaml</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">minikbube 转发本机端口进集群内部 Service 方式</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">kubectl port-forward service/prometheus -n monitor --address 127.0.0.1 3009:9090</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Alert 告警配置</p>\n</li>\n</ol>\n<ul>\n<li><p>追加告警规则配置</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">追加 ruls.yml 配置内容到 prometheus-cfg.yaml 配置</span></span><br><span class=\"line\">kind: ConfigMap</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app: prometheus</span><br><span class=\"line\">  name: prometheus-config</span><br><span class=\"line\">  namespace: monitor</span><br><span class=\"line\">data:</span><br><span class=\"line\">  prometheus.yml: |</span><br><span class=\"line\">    ...</span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">告警规则配置，与 prometheus 配置同样写入 /etc/prometheus 目录下</span></span><br><span class=\"line\">  rules.yml: |</span><br><span class=\"line\">    groups:</span><br><span class=\"line\">    - name: test-rule</span><br><span class=\"line\">      rules:</span><br><span class=\"line\">      - alert: NodeMemoryUsage</span><br><span class=\"line\">        expr: (node_memory_MemTotal_bytes - (node_memory_MemFree_bytes + node_memory_Buffers_bytes + node_memory_Cached_bytes)) / node_memory_MemTotal_bytes * 100 &gt; 20</span><br><span class=\"line\">        for: 2m</span><br><span class=\"line\">        labels:</span><br><span class=\"line\">          team: node</span><br><span class=\"line\">        annotations:</span><br><span class=\"line\">          summary: &quot;&#123;&#123;.instance&#125;&#125;: High Memory usage detected&quot;</span><br><span class=\"line\">          description: &quot;&#123;&#123;.instance&#125;&#125;: Memory usage is above 20% (current value is: &#123;&#123;  &#125;&#125;&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Prometheus 热加载配置</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">请求 Prometheus、AlertManager 接口，可使用 Pod IP，热加载配置</span></span><br><span class=\"line\">curl -X POST http://172.17.0.5:9090/-/reload</span><br><span class=\"line\">curl -X POST http://172.17.0.5:9093/-/reload</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看 <span class=\"built_in\">log</span></span></span><br><span class=\"line\">kubectl logs --tail 10 -f prometheus-server-658b54bd7-9gvd9 -n monitor</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">强制重启加载方式，可能丢失监控数据</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">kubectl delete -f prometheus-cfg.yaml &amp;&amp; kubectl delete -f prometheus-deployment.yaml</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">kubectl apply -f prometheus-cfg.yaml &amp;&amp; kubectl apply -f prometheus-deployment.yaml</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>告警通知：email、webhook</p>\n</li>\n</ul>\n<ol start=\"4\">\n<li>Grafana 部署<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; grafana.yaml &lt;&lt; &quot;EOF&quot;</span><br><span class=\"line\">apiVersion: apps/v1</span><br><span class=\"line\">kind: Deployment</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: monitoring-grafana</span><br><span class=\"line\">  namespace: monitor</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  replicas: 1</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      task: monitoring</span><br><span class=\"line\">      k8s-app: grafana</span><br><span class=\"line\">  template:</span><br><span class=\"line\">    metadata:</span><br><span class=\"line\">      labels:</span><br><span class=\"line\">        task: monitoring</span><br><span class=\"line\">        k8s-app: grafana</span><br><span class=\"line\">    spec:</span><br><span class=\"line\">      securityContext:</span><br><span class=\"line\">        fsGroup: 472</span><br><span class=\"line\">        runAsUser: 472</span><br><span class=\"line\">      containers:</span><br><span class=\"line\">      - name: grafana</span><br><span class=\"line\">        image: grafana/grafana</span><br><span class=\"line\">        ports:</span><br><span class=\"line\">        - containerPort: 3000</span><br><span class=\"line\">          protocol: TCP</span><br><span class=\"line\">        volumeMounts:</span><br><span class=\"line\">        - mountPath: /etc/ssl/certs</span><br><span class=\"line\">          name: ca-certificates</span><br><span class=\"line\">          readOnly: true</span><br><span class=\"line\">        - mountPath: /var</span><br><span class=\"line\">          name: grafana-storage</span><br><span class=\"line\">        env:</span><br><span class=\"line\">        - name: GF_SECURITY_ADMIN_USER</span><br><span class=\"line\">          value: admin</span><br><span class=\"line\">        - name: GF_SECURITY_ADMIN_PASSWORD</span><br><span class=\"line\">          value: admin123</span><br><span class=\"line\">      volumes:</span><br><span class=\"line\">      - name: ca-certificates</span><br><span class=\"line\">        hostPath:</span><br><span class=\"line\">          path: /etc/ssl/certs</span><br><span class=\"line\">      - name: grafana-storage</span><br><span class=\"line\">        emptyDir: &#123;&#125;</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Service</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    kubernetes.io/cluster-service: &#x27;true&#x27;</span><br><span class=\"line\">    kubernetes.io/name: monitoring-grafana</span><br><span class=\"line\">  name: monitoring-grafana</span><br><span class=\"line\">  namespace: monitor</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  type: NodePort</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">  - port: 80</span><br><span class=\"line\">    targetPort: 3000</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    k8s-app: grafana</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl apply -f grafana.yaml</span><br><span class=\"line\">kubectl get pod,svc -n monitor</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置 Grafana</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">登录，导入 Prometheus 数据源</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">导入监控 Kubernetes 集群模板，官方模板 https://grafana.com/grafana/dashboards/162/revisions</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">监控 node，导入 node_exporter.json</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"四、Prometheus-Operator-方式部署\"><a href=\"#四、Prometheus-Operator-方式部署\" class=\"headerlink\" title=\"四、Prometheus-Operator 方式部署\"></a>四、Prometheus-Operator 方式部署</h4><ol>\n<li>部署 prometheus-operator（controller）<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下载官方源码，部署 operator 资源</span></span><br><span class=\"line\">git clone https://github.com/prometheus-operator/prometheus-operator &amp;&amp; cd prometheus-operator</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建 CRD 资源、RBAC 资源、operator 资源</span></span><br><span class=\"line\">kubectl create -f bundle.yaml</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看结果</span></span><br><span class=\"line\">kubectl get pod,svc -owide</span><br><span class=\"line\">NAME                                       READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">pod/prometheus-operator-567cd8b6f6-xvhp5   1/1     Running   0          127m</span><br><span class=\"line\">NAME                          TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE</span><br><span class=\"line\">service/prometheus-operator   ClusterIP   None             &lt;none&gt;        8080/TCP         127m</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看 CRD 资源下所有 API 资源</span></span><br><span class=\"line\">kubectl get --raw /apis/monitoring.coreos.com/v1</span><br></pre></td></tr></table></figure></li>\n</ol>\n<blockquote>\n<p>官方源码地址已替换至: <a href=\"https://github.com/prometheus-operator/kube-prometheus\">https://github.com/prometheus-operator/kube-prometheus</a>, 部署方式参考新地址</p>\n</blockquote>\n<ol start=\"2\">\n<li><p>部署 prometheus （server，CRD 资源）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建 prometheus-server 资源</span></span><br><span class=\"line\">cat &gt; prometheus.yaml &lt;&lt; &quot;EOF&quot;</span><br><span class=\"line\">apiVersion: monitoring.coreos.com/v1</span><br><span class=\"line\">kind: Prometheus</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: prometheus</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  serviceAccountName: prometheus</span><br><span class=\"line\"><span class=\"meta prompt_\">  #</span><span class=\"language-bash\">配置监控所有 ServiceMonitor</span></span><br><span class=\"line\"><span class=\"meta prompt_\">  #</span><span class=\"language-bash\">ServiceMonitorSelector: &#123;&#125;</span></span><br><span class=\"line\">  serviceMonitorSelector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      team: frontend</span><br><span class=\"line\">  resources:</span><br><span class=\"line\">    requests:</span><br><span class=\"line\">      memory: 200Mi</span><br><span class=\"line\">  enableAdminAPI: false</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: ServiceAccount</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: prometheus</span><br><span class=\"line\">  namespace: default</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class=\"line\">kind: ClusterRole</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: prometheus</span><br><span class=\"line\">rules:</span><br><span class=\"line\">- apiGroups: [&quot;&quot;]</span><br><span class=\"line\">  resources:</span><br><span class=\"line\">  - nodes</span><br><span class=\"line\">  - services</span><br><span class=\"line\">  - endpoints</span><br><span class=\"line\">  - pods</span><br><span class=\"line\">  verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;]</span><br><span class=\"line\">- apiGroups: [&quot;&quot;]</span><br><span class=\"line\">  resources:</span><br><span class=\"line\">  - configmaps</span><br><span class=\"line\">  verbs: [&quot;get&quot;]</span><br><span class=\"line\">- nonResourceURLs: [&quot;/metrics&quot;]</span><br><span class=\"line\">  verbs: [&quot;get&quot;]</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class=\"line\">kind: ClusterRoleBinding</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: prometheus</span><br><span class=\"line\">roleRef:</span><br><span class=\"line\">  apiGroup: rbac.authorization.k8s.io</span><br><span class=\"line\">  kind: ClusterRole</span><br><span class=\"line\">  name: prometheus</span><br><span class=\"line\">subjects:</span><br><span class=\"line\">- kind: ServiceAccount</span><br><span class=\"line\">  name: prometheus</span><br><span class=\"line\">  namespace: default</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Service</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: prometheus</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  type: NodePort</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">  - name: web</span><br><span class=\"line\">    nodePort: 30900</span><br><span class=\"line\">    port: 9090</span><br><span class=\"line\">    protocol: TCP</span><br><span class=\"line\">    targetPort: web</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    prometheus: prometheus</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建模拟输出 metrics 程序</span></span><br><span class=\"line\">cat &gt; example.yaml &lt;&lt; &quot;EOF&quot;</span><br><span class=\"line\">apiVersion: apps/v1</span><br><span class=\"line\">kind: Deployment</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: example-app</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  replicas: 1</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      app: example-app</span><br><span class=\"line\">  template:</span><br><span class=\"line\">    metadata:</span><br><span class=\"line\">      labels:</span><br><span class=\"line\">        app: example-app</span><br><span class=\"line\">    spec:</span><br><span class=\"line\">      containers:</span><br><span class=\"line\">      - name: example-app</span><br><span class=\"line\">        image: zhangguanzhang/instrumented_app</span><br><span class=\"line\">        ports:</span><br><span class=\"line\">        - name: web</span><br><span class=\"line\">          containerPort: 8080</span><br><span class=\"line\">---</span><br><span class=\"line\">kind: Service</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: example-app</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app: example-app</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    app: example-app</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">  - name: web</span><br><span class=\"line\">    port: 8080</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>部署 ServiceMonitor （CRD 资源）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建 ServiceMonitor</span></span><br><span class=\"line\">cat &gt; service-monitor.yaml &lt;&lt; &quot;EOF&quot;</span><br><span class=\"line\">apiVersion: monitoring.coreos.com/v1</span><br><span class=\"line\">kind: ServiceMonitor</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: example-app</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    team: frontend</span><br><span class=\"line\">spec:</span><br><span class=\"line\"><span class=\"meta prompt_\">  #</span><span class=\"language-bash\">namespaceSelector:</span></span><br><span class=\"line\"><span class=\"meta prompt_\">  #</span><span class=\"language-bash\">1.非同namespace时配置具体ns</span></span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\"> matchNames:</span></span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\"> - target_namespace_name</span></span><br><span class=\"line\"><span class=\"meta prompt_\">  #</span><span class=\"language-bash\">2.任意ns</span></span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\"> any:<span class=\"literal\">true</span></span></span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      app: example-app</span><br><span class=\"line\">  endpoints:</span><br><span class=\"line\">  - port: web</span><br><span class=\"line\"><span class=\"meta prompt_\">  #</span><span class=\"language-bash\">BasicAuth认证时(<span class=\"built_in\">base64</span>编码)</span></span><br><span class=\"line\"><span class=\"meta prompt_\">  #</span><span class=\"language-bash\">- basicAuth:</span></span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">   password:</span></span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">     name: basic-auth</span></span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">     key: password</span></span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">   username:</span></span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">     name: basic-auth</span></span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">     key: user</span></span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\"> port: web</span></span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>访问验证</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看部署资源信息</span></span><br><span class=\"line\">NAME                                       READY   STATUS    RESTARTS   AGE    IP           NODE       NOMINATED NODE   READINESS GATES</span><br><span class=\"line\">pod/example-app-745967cc67-qbh45           1/1     Running   0          95m    172.17.0.7   minikube   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">pod/prometheus-operator-567cd8b6f6-xvhp5   1/1     Running   0          139m   172.17.0.6   minikube   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">pod/prometheus-prometheus-0                2/2     Running   0          108m   172.17.0.3   minikube   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                          TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE    SELECTOR</span><br><span class=\"line\">service/example-app           ClusterIP   10.100.248.130   &lt;none&gt;        8080/TCP         104m   app=example-app</span><br><span class=\"line\">service/kubernetes            ClusterIP   10.96.0.1        &lt;none&gt;        443/TCP          24d    &lt;none&gt;</span><br><span class=\"line\">service/prometheus            NodePort    10.101.76.214    &lt;none&gt;        9090:30900/TCP   28m    prometheus=prometheus</span><br><span class=\"line\">service/prometheus-operated   ClusterIP   None             &lt;none&gt;        9090/TCP         108m   app.kubernetes.io/name=prometheus</span><br><span class=\"line\">service/prometheus-operator   ClusterIP   None             &lt;none&gt;        8080/TCP         139m   app.kubernetes.io/component=controller,app.kubernetes.io/name=prometheus-operator</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">访问验证</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">minikube 需转发端口</span> </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">kubectl port-forward service/prometheus --address 127.0.0.1 9090:9090</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">浏览器访问 127.0.0.1:9090/targets</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>自定义监控集群资源（Etcd、controller-manager 等）</p>\n</li>\n</ol>\n<ul>\n<li>监控 Etcd<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">1、获取 etcd 证书生成 secret</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">2、配置 prometheus StatefulSet 添加上一步生成的 secret</span></span><br><span class=\"line\">kubectl get statefulsets -n monitoring</span><br><span class=\"line\">NAME                READY   AGE</span><br><span class=\"line\">alertmanager-main   3/3     3h25m</span><br><span class=\"line\">prometheus-k8s      1/1     3h25m</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">3、创建 ServiceMonitor 资源并部署</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">4、创建 Service、Endpoints 资源并进行关联（标签关联）</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"6\">\n<li>配置 AlertManager、PrometheusRule 自定义告警</li>\n</ol>\n<ul>\n<li><p>AlertManager 配置（Prometheus Dashboard 页面查看 Config 内容）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alerting:</span><br><span class=\"line\">  alert_relabel_configs:</span><br><span class=\"line\">  - separator: ;</span><br><span class=\"line\">    regex: prometheus_replica</span><br><span class=\"line\">    replacement: $1</span><br><span class=\"line\">    action: labeldrop</span><br><span class=\"line\">  alertmanagers:</span><br><span class=\"line\">  - kubernetes_sd_configs:</span><br><span class=\"line\">    - role: endpoints</span><br><span class=\"line\">      namespaces:</span><br><span class=\"line\">        names:</span><br><span class=\"line\">        - monitoring</span><br><span class=\"line\">    scheme: http</span><br><span class=\"line\">    path_prefix: /</span><br><span class=\"line\">    timeout: 10s</span><br><span class=\"line\">    relabel_configs:</span><br><span class=\"line\">    - source_labels: [__meta_kubernetes_service_name]</span><br><span class=\"line\">      separator: ;</span><br><span class=\"line\">      regex: alertmanager-main</span><br><span class=\"line\">      replacement: $1</span><br><span class=\"line\">      action: keep</span><br><span class=\"line\">    - source_labels: [__meta_kubernetes_endpoint_port_name]</span><br><span class=\"line\">      separator: ;</span><br><span class=\"line\">      regex: web</span><br><span class=\"line\">      replacement: $1</span><br><span class=\"line\">      action: keep</span><br><span class=\"line\">rule_files:</span><br><span class=\"line\">- /etc/prometheus/rules/prometheus-k8s-rulefiles-0/*.yaml</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>告警规则</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Prometheus Rule</span></span><br><span class=\"line\">cat &gt; prometheus-rules.yaml &lt;&lt; &quot;EOF&quot;</span><br><span class=\"line\">apiVersion: monitoring.coreos.com/v1</span><br><span class=\"line\">kind: PrometheusRule</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    prometheus: k8s</span><br><span class=\"line\">    role: alert-rules</span><br><span class=\"line\">  name: prometheus-k8s-rules</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  groups:</span><br><span class=\"line\">  - name: k8s.rules</span><br><span class=\"line\">    rules:</span><br><span class=\"line\">    - expr: |</span><br><span class=\"line\">        sum(rate(container_cpu_usage_seconds_total&#123;job=&quot;kubelet&quot;, image!=&quot;&quot;, container_name!=&quot;&quot;&#125;[5m])) by (namespace)</span><br><span class=\"line\">      record: namespace:container_cpu_usage_seconds_total:sum_rate</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">生成 rule 配置文件到 prometheus 的 /etc/prometheus/rules/prometheus-k8s-rulefiles-0/ 目录下</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置告警（AlertManager 配置 secret）</p>\n</li>\n</ul>\n<ol start=\"7\">\n<li>自动发现配置与持久化存储</li>\n</ol>\n<ul>\n<li>自动发现配置（annotations）</li>\n</ul>\n<p>prometheus.io&#x2F;scrape&#x3D;true<br>prometheus.io&#x2F;port&#x3D;xxx</p>\n<ul>\n<li>持久化存储（PV、PVC）</li>\n</ul>\n<blockquote>\n<p>Operator 管理监控以及维护 CRD 资源对象的状态：</p>\n<ul>\n<li>Prometheus</li>\n<li>ServiceMonitor</li>\n<li>PodMonitor</li>\n<li>AltertManager</li>\n<li>PrometheusRule</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>参考文档：<br>1、<a href=\"https://www.servicemesher.com/blog/prometheus-operator-manual/\">https://www.servicemesher.com/blog/prometheus-operator-manual/</a><br>2、<a href=\"https://www.qikqiak.com/k8s-book/docs/52.Prometheus%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html\">https://www.qikqiak.com/k8s-book/docs/52.Prometheus%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html</a><br>官方文档：<br>1、<a href=\"https://github.com/prometheus-operator/prometheus-operator\">https://github.com/prometheus-operator/prometheus-operator</a><br>2、<a href=\"https://github.com/prometheus-operator/kube-prometheus\">https://github.com/prometheus-operator/kube-prometheus</a>（新版本）<br>3、告警规则：<a href=\"https://yunlzheng.gitbook.io/prometheus-book/parti-prometheus-ji-chu/alert/prometheus-alert-rule\">https://yunlzheng.gitbook.io/prometheus-book/parti-prometheus-ji-chu/alert/prometheus-alert-rule</a></p>\n</blockquote>\n","site":{"data":{"footer":"","styles":".post {\n  margin-top: 50px;\n  margin-bottom: 50px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n.headband {\n  display: none;\n}\nbody {\n  background: url(\"/images/background.jpeg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\n.post-block.page {\n  margin-top: 40px;\n}\n.category-all-page {\n  box-shadow: 0px 0px 10px 0px rgba(0,0,0,0.5);\n  background-color: #797d7f;\n  padding: 20px 30px 60px 30px;\n  border-radius: 25px 25px 25px 25px;\n}\n.category-all-title {\n  font-family: Impact;\n  font-size: 24px;\n  color: #0ff;\n}\n.category-list {\n  overflow: auto;\n}\n.category-list li {\n  height: 100%;\n  float: left;\n  border-right: 3px solid #222;\n  padding: 0 20px;\n}\n.category-all ul li {\n  list-style: none !important;\n}\n.category-list li:last-child {\n  border-right: none;\n}\n.category-list li a {\n  font-size: 16px;\n  text-decoration: none;\n  color: #7fff00;\n  font-family: Helvetica, Verdana, sans-serif;\n  -webkit-transition: all 0.5s ease;\n  -moz-transition: all 0.5s ease;\n  -o-transition: all 0.5s ease;\n  -ms-transition: all 0.5s ease;\n  transition: all 0.5s ease;\n}\n.category-list li a:hover {\n  color: #000;\n}\n.category-list li.active a {\n  font-weight: bold;\n  color: #000;\n}\n.tag-cloud a {\n  box-shadow: 0 1px 3px #6f42c1, 0 1px 2px #d9534f;\n  padding: 2px 10px;\n  margin: 8px;\n  background: rgba(193,66,92,0);\n  border-bottom: none;\n  border-radius: 20px;\n}\ncode {\n  background: #555;\n  color: #fff;\n}\n","variables":""}},"length":18876,"excerpt":"<h4 id=\"一、组件说明\"><a href=\"#一、组件说明\" class=\"headerlink\" title=\"一、组件说明\"></a>一、组件说明</h4><p><strong>Prometheus Server</strong></p>\n<ul>\n<li>核心组件，负责实现对监控数据的获取，存储与查询。</li>\n<li>支持静态配置管理监控目标，也可通过 Service Discovery 方式动态管理监控目录，获取数据。</li>\n<li>可从其他 Prometheus Server 获取数据</li>\n<li>对外提供 PromQL 实现数据查询和分析</li>\n</ul>\n<p><strong>Exporter</strong></p>\n<ul>\n<li>直接采集，内置用于想 Prometheus 暴露监控数据的 Endpoints，如 node-exporter</li>\n<li>间接采集，通过 Prometheus 提供的客户端库监控采集程序，如 mysql-exporter</li>\n</ul>\n<p><strong>AlertManager</strong><br>基于 PromQL 创建告警规则，满足规则产生告警并推送，支持 mail、webhook 等。</p>\n<p><strong>PushGateway</strong><br>原获取数据方式为基于 Prometheus Server 从 Exporter pull 数据，当网络或其他原因 Server 无法与 Exporter 直接通信时，使用 PushGateway 方式中转。<br>Prometheus server 定期从配置好的 jobs 和 exporters 中拉取 metrics，或者接收来自 Pushgateway 发送过来的 metrics，或者从其它的 Prometheus server 中拉 metrics</p>\n<blockquote>\n<p>metrics：实际监控指标数据，如 cpu 利用率</p>\n</blockquote>","more":"<p><strong>Grafana</strong><br>图形界面可视化采集展示数据<br>多数据源<br>告警规则与通知<br>混合展示与注释</p>\n<h4 id=\"二、二进制方式部署\"><a href=\"#二、二进制方式部署\" class=\"headerlink\" title=\"二、二进制方式部署\"></a>二、二进制方式部署</h4><p>略（基本不使用）</p>\n<h4 id=\"三、容器方式部署\"><a href=\"#三、容器方式部署\" class=\"headerlink\" title=\"三、容器方式部署\"></a>三、容器方式部署</h4><ol>\n<li><p>安装 node-export </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建部署清单</span></span><br><span class=\"line\">cat &gt; node-exporter.yaml &lt;&lt; &quot;EOF&quot;</span><br><span class=\"line\">node-exporter.yaml</span><br><span class=\"line\">apiVersion: apps/v1</span><br><span class=\"line\">kind: DaemonSet</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: node-exporter</span><br><span class=\"line\">  namespace: monitor</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    name: node-exporter</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">     name: node-exporter</span><br><span class=\"line\">  template:</span><br><span class=\"line\">    metadata:</span><br><span class=\"line\">      labels:</span><br><span class=\"line\">        name: node-exporter</span><br><span class=\"line\">    spec:</span><br><span class=\"line\">      hostPID: true</span><br><span class=\"line\">      hostIPC: true</span><br><span class=\"line\">      hostNetwork: true</span><br><span class=\"line\">      containers:</span><br><span class=\"line\">      - name: node-exporter</span><br><span class=\"line\">        image: prom/node-exporter:v0.16.0</span><br><span class=\"line\">        ports:</span><br><span class=\"line\">        - containerPort: 9100</span><br><span class=\"line\">        resources:</span><br><span class=\"line\">          requests:</span><br><span class=\"line\">            cpu: 0.15 # 这个容器运行至少需要0.15核cpu</span><br><span class=\"line\">        securityContext:</span><br><span class=\"line\">          privileged: true\t# 开启特权模式</span><br><span class=\"line\">        args:</span><br><span class=\"line\">        - --path.procfs</span><br><span class=\"line\">        - /host/proc</span><br><span class=\"line\">        - --path.sysfs</span><br><span class=\"line\">        - /host/sys</span><br><span class=\"line\">        - --collector.filesystem.ignored-mount-points</span><br><span class=\"line\">        - &#x27;&quot;^/(sys|proc|dev|host|etc)($|/)&quot;&#x27;</span><br><span class=\"line\">        volumeMounts:</span><br><span class=\"line\">        - name: dev</span><br><span class=\"line\">          mountPath: /host/dev</span><br><span class=\"line\">        - name: proc</span><br><span class=\"line\">          mountPath: /host/proc</span><br><span class=\"line\">        - name: sys</span><br><span class=\"line\">          mountPath: /host/sys</span><br><span class=\"line\">        - name: rootfs</span><br><span class=\"line\">          mountPath: /rootfs</span><br><span class=\"line\">      tolerations:</span><br><span class=\"line\">      - key: &quot;node-role.kubernetes.io/master&quot;</span><br><span class=\"line\">        operator: &quot;Exists&quot;</span><br><span class=\"line\">        effect: &quot;NoSchedule&quot;</span><br><span class=\"line\">      volumes:</span><br><span class=\"line\">        - name: proc</span><br><span class=\"line\">          hostPath:</span><br><span class=\"line\">            path: /proc</span><br><span class=\"line\">        - name: dev</span><br><span class=\"line\">          hostPath:</span><br><span class=\"line\">            path: /dev</span><br><span class=\"line\">        - name: sys</span><br><span class=\"line\">          hostPath:</span><br><span class=\"line\">            path: /sys</span><br><span class=\"line\">        - name: rootfs</span><br><span class=\"line\">          hostPath:</span><br><span class=\"line\">            path: /</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建监控 namespace</span></span><br><span class=\"line\">kubectl create ns monitor</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">部署并查看部署结果</span></span><br><span class=\"line\">kubectl apply -f node-exporter.yaml</span><br><span class=\"line\">kubectl get pods -n monitor -o wide</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">验证获取指标</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">curl node_ip:9100/metrics</span></span><br><span class=\"line\">curl 192.168.49.2:9100/metrics</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Prometheus Server 部署</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建 serviceaccount 与 rbac 授权</span></span><br><span class=\"line\">cat &gt; prometheus-rbac.yaml &lt;&lt; &quot;EOF&quot;</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: ServiceAccount</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: monitor-sa</span><br><span class=\"line\">  namespace: monitor</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class=\"line\">kind: ClusterRole</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: monitor-sa-clusterrole</span><br><span class=\"line\">rules:</span><br><span class=\"line\">- apiGroups:</span><br><span class=\"line\">  - &quot;&quot;</span><br><span class=\"line\">  resources:</span><br><span class=\"line\">  - nodes</span><br><span class=\"line\">  - services</span><br><span class=\"line\">  - endpoints</span><br><span class=\"line\">  - pods</span><br><span class=\"line\">  - nodes/proxy</span><br><span class=\"line\">  - nodes/metrics</span><br><span class=\"line\">  - configmaps</span><br><span class=\"line\">  verbs:</span><br><span class=\"line\">  - get</span><br><span class=\"line\">  - list</span><br><span class=\"line\">  - watch</span><br><span class=\"line\">- nonResourceURLs:</span><br><span class=\"line\">  - /metrics</span><br><span class=\"line\">  verbs:</span><br><span class=\"line\">  - get</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class=\"line\">kind: ClusterRoleBinding</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: monitor-clusterrolebinding</span><br><span class=\"line\">roleRef:</span><br><span class=\"line\">  apiGroup: rbac.authorization.k8s.io</span><br><span class=\"line\">  kind: ClusterRole</span><br><span class=\"line\">  name: monitor-sa-clusterrole</span><br><span class=\"line\">subjects:</span><br><span class=\"line\">- kind: ServiceAccount</span><br><span class=\"line\">  name: minitor-sa</span><br><span class=\"line\">  namespace: minitor</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建 Prometheus 存储目录</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Prometheus Server 调度节点执行（测试为 minikube 节点）</span></span><br><span class=\"line\">mkdir /data &amp;&amp; chmod 777 /data</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建 configMap，存放 Prometheus、AlertManager 配置信息</span></span><br><span class=\"line\">cat &gt; prometheus-cfg.yaml &lt;&lt; &quot;&quot;EOF&quot;&quot;</span><br><span class=\"line\">kind: ConfigMap</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app: prometheus</span><br><span class=\"line\">  name: prometheus-config</span><br><span class=\"line\">  namespace: monitor</span><br><span class=\"line\">data:</span><br><span class=\"line\">  prometheus.yml: |</span><br><span class=\"line\">    global:</span><br><span class=\"line\">      scrape_interval: 15s\t\t#采集目标主机监控数据间隔</span><br><span class=\"line\">      scrape_timeout: 10s\t\t\t#数据采集超时时间</span><br><span class=\"line\">      evaluation_interval: 1m\t#触发告警检测时间</span><br><span class=\"line\">      </span><br><span class=\"line\">    # Prometheus 关联 AlertManager 配置</span><br><span class=\"line\">    alerting:</span><br><span class=\"line\">      alertmanagers:</span><br><span class=\"line\">      - static_configs:</span><br><span class=\"line\">        - targets: [&quot;localhost:9093&quot;]</span><br><span class=\"line\">    </span><br><span class=\"line\">    # 告警规则配置，首次读取默认加载，后续根据 evaluation_interval 周期加载</span><br><span class=\"line\">    rule_files:</span><br><span class=\"line\">    #- &quot;alertermanager_rules.yaml&quot;</span><br><span class=\"line\">    - /etc/prometheus/rules.yaml</span><br><span class=\"line\">      </span><br><span class=\"line\">    scrape_configs:\t\t\t\t\t\t\t\t\t#配置数据源 targe，每个 target 用 job_name 命名。分为静态配置与动态发现</span><br><span class=\"line\">    - job_name: &#x27;kubernetes-node&#x27;</span><br><span class=\"line\">      kubernetes_sd_configs:\t\t\t\t#使用 k8s 的服务发现</span><br><span class=\"line\">      - role: node\t\t\t\t\t\t\t\t\t#使用 node 角色，使用默认 kubelet 提供的 http 端口发现集群中每个 node 节点</span><br><span class=\"line\">      relabel_configs:\t\t\t\t\t\t\t#重新标记</span><br><span class=\"line\">      - source_labels: [__address__]\t#配置的原始标签，匹配地址</span><br><span class=\"line\">        regex: &#x27;(.*):10250&#x27;\t\t\t\t\t\t#匹配带有10250端口的 url</span><br><span class=\"line\">        replacement: &#x27;$&#123;1&#125;:9100&#x27;\t\t\t#保留匹配到 ip:9100 的ip</span><br><span class=\"line\">        target_label: __address__\t\t\t#新生成的 url 是$&#123;1&#125;获取到的 ip:9100</span><br><span class=\"line\">        action: replace\t\t\t\t\t\t\t\t#动作替换</span><br><span class=\"line\">      - action: labelmap</span><br><span class=\"line\">        regex: __meta_kubernetes_node_label_(.+)\t#匹配到下面正则表达式的标签会被保留,如果不做regex正则的话，默认只是会显示instance标签</span><br><span class=\"line\">    - job_name: &#x27;kubernetes-node-cadvisor&#x27;\t# 抓取 cAdvisor 数据，是获取 kubelet 上 /metrics/cadvisor 接口数据来获取容器的资源使用情况</span><br><span class=\"line\">      kubernetes_sd_configs:</span><br><span class=\"line\">      - role: node</span><br><span class=\"line\">      scheme: https</span><br><span class=\"line\">      tls_config:</span><br><span class=\"line\">        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span><br><span class=\"line\">      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token</span><br><span class=\"line\">      relabel_configs:</span><br><span class=\"line\">      - action: labelmap\t\t\t\t\t\t\t\t\t\t\t\t\t#保留匹配到的标签</span><br><span class=\"line\">        regex: __meta_kubernetes_node_label_(.+)\t#保留匹配到正则的标签</span><br><span class=\"line\">      - target_label: __address__\t\t\t\t\t\t\t\t\t#获取到的地址：__address__=&quot;192.168.64.2:10250&quot;</span><br><span class=\"line\">        replacement: kubernetes.default.svc:443\t\t#获取到的地址替换为新地址</span><br><span class=\"line\">      - source_labels: [__meta_kubernetes_node_name]</span><br><span class=\"line\">        regex: (.+)\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t#匹配原始标签中 __meta_kubernetes_node_name 值</span><br><span class=\"line\">        target_label: __metrics_path__\t\t\t\t\t\t#获取__metrics_path__对应的值</span><br><span class=\"line\">        replacement: /api/v1/nodes//proxy/metrics/cadvisor</span><br><span class=\"line\">        #把 metrics 替换成新的值 api/v1/nodes/k8s-master1/proxy/metrics/cadvisor</span><br><span class=\"line\">        #$&#123;1&#125;是 __meta_kubernetes_node_name 获取到的值</span><br><span class=\"line\">        #新的 url 就是 https://kubernetes.default.svc:443/api/v1/nodes/k8s-master1/proxy/metrics/cadvisor</span><br><span class=\"line\">    - job_name: &#x27;kubernetes-apiserver&#x27;</span><br><span class=\"line\">      kubernetes_sd_configs:</span><br><span class=\"line\">      - role: endpoints\t\t\t\t#使用 k8s 中的 endpoint 服务发现，采集 apiserver 6443 端口获取数据</span><br><span class=\"line\">      scheme: https</span><br><span class=\"line\">      tls_config:</span><br><span class=\"line\">        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span><br><span class=\"line\">      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token</span><br><span class=\"line\">      relabel_configs:</span><br><span class=\"line\">      - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]</span><br><span class=\"line\">        # endpoint 这个对象的名称空间,endpoint 对象的服务名,endpoint 的端口名称</span><br><span class=\"line\">        action: keep\t#采集满足条件的实例，其他实例不采集</span><br><span class=\"line\">        regex: default;kubernetes;https\t#正则匹配到的默认空间下的 service 名字是 kubernetes，协议是 https 的 endpoint 类型保留下来</span><br><span class=\"line\">    - job_name: &#x27;kubernetes-service-endpoints&#x27;</span><br><span class=\"line\">      kubernetes_sd_configs:</span><br><span class=\"line\">      - role: endpoints</span><br><span class=\"line\">      relabel_configs:</span><br><span class=\"line\">      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]</span><br><span class=\"line\">        action: keep</span><br><span class=\"line\">        regex: true</span><br><span class=\"line\">        #重新打标仅抓取到的具有 &quot;prometheus.io/scrape: true&quot; 的annotation的端点，意思是说如果某个service具有prometheus.io/scrape = true annotation声明则抓取，annotation本身也是键值结构，所以这里的源标签设置为键，而regex设置值true，当值匹配到regex设定的内容时则执行keep动作也就是保留，其余则丢弃。</span><br><span class=\"line\">      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]</span><br><span class=\"line\">        action: replace</span><br><span class=\"line\">        target_label: __scheme__</span><br><span class=\"line\">        regex: (https?)</span><br><span class=\"line\">        #重新设置scheme，匹配源标签__meta_kubernetes_service_annotation_prometheus_io_scheme也就是prometheus.io/scheme annotation，如果源标签的值匹配到regex，则把值替换为__scheme__对应的值。</span><br><span class=\"line\">      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]</span><br><span class=\"line\">        action: replace</span><br><span class=\"line\">        target_label: __metrics_path__</span><br><span class=\"line\">        regex: (.+)</span><br><span class=\"line\">        #应用中暴露的自定义指标 path，如 prometheus.io/path = /mymetrics</span><br><span class=\"line\">      - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]</span><br><span class=\"line\">        action: replace</span><br><span class=\"line\">        target_label: __address__</span><br><span class=\"line\">        regex: ([^:]+)(?::\\d+)?;(\\d+)</span><br><span class=\"line\">        replacement: $1:$2</span><br><span class=\"line\">        #暴露自定义应用的端口</span><br><span class=\"line\">      - action: labelmap</span><br><span class=\"line\">        regex: __meta_kubernetes_service_label_(.+)</span><br><span class=\"line\">      - source_labels: [__meta_kubernetes_namespace]</span><br><span class=\"line\">        action: replace</span><br><span class=\"line\">        target_label: kubernetes_namespace</span><br><span class=\"line\">      - source_labels: [__meta_kubernetes_service_name]</span><br><span class=\"line\">        action: replace</span><br><span class=\"line\">        target_label: kubernetes_name</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">cat &gt; alertmanager-cfg.yaml &lt;&lt; &quot;&quot;EOF&quot;&quot;</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: ConfigMap</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: alert-config</span><br><span class=\"line\">  namespace: monitor</span><br><span class=\"line\">data:</span><br><span class=\"line\">  config.yml: |-</span><br><span class=\"line\">    global:</span><br><span class=\"line\">      # 在没有报警的情况下声明为已解决的时间</span><br><span class=\"line\">      resolve_timeout: 5m</span><br><span class=\"line\">      # 配置邮件发送信息</span><br><span class=\"line\">      smtp_smarthost: &#x27;smtp.163.com:25&#x27;</span><br><span class=\"line\">      smtp_from: &#x27;xxx@163.com&#x27;</span><br><span class=\"line\">      smtp_auth_username: &#x27;xx@163.com&#x27;</span><br><span class=\"line\">      smtp_auth_password: &#x27;password&#x27;</span><br><span class=\"line\">      smtp_hello: &#x27;163.com&#x27;</span><br><span class=\"line\">      smtp_require_tls: false</span><br><span class=\"line\">    # 所有报警信息进入后的根路由，用来设置报警的分发策略</span><br><span class=\"line\">    route:</span><br><span class=\"line\">      # 这里的标签列表是接收到报警信息后的重新分组标签，例如，接收到的报警信息里面有许多具有 cluster=A 和 alertname=LatncyHigh 这样的标签的报警信息将会批量被聚合到一个分组里面</span><br><span class=\"line\">      group_by: [&#x27;alertname&#x27;, &#x27;cluster&#x27;]</span><br><span class=\"line\">      # 当一个新的报警分组被创建后，需要等待至少group_wait时间来初始化通知，这种方式可以确保您能有足够的时间为同一分组来获取多个警报，然后一起触发这个报警信息。</span><br><span class=\"line\">      group_wait: 30s</span><br><span class=\"line\"></span><br><span class=\"line\">      # 当第一个报警发送后，等待&#x27;group_interval&#x27;时间来发送新的一组报警信息。</span><br><span class=\"line\">      group_interval: 5m</span><br><span class=\"line\"></span><br><span class=\"line\">      # 如果一个报警信息已经发送成功了，等待&#x27;repeat_interval&#x27;时间来重新发送他们</span><br><span class=\"line\">      repeat_interval: 5m</span><br><span class=\"line\"></span><br><span class=\"line\">      # 默认的receiver：如果一个报警没有被一个route匹配，则发送给默认的接收器</span><br><span class=\"line\">      receiver: default</span><br><span class=\"line\"></span><br><span class=\"line\">      # 上面所有的属性都由所有子路由继承，并且可以在每个子路由上进行覆盖。</span><br><span class=\"line\">      routes:</span><br><span class=\"line\">      - receiver: email</span><br><span class=\"line\">        group_wait: 10s</span><br><span class=\"line\">        match:</span><br><span class=\"line\">          team: node</span><br><span class=\"line\">    receivers:</span><br><span class=\"line\">    - name: &#x27;default&#x27;</span><br><span class=\"line\">      email_configs:</span><br><span class=\"line\">      - to: &#x27;xxx@gmail.com&#x27;</span><br><span class=\"line\">        send_resolved: true</span><br><span class=\"line\">    - name: &#x27;email&#x27;</span><br><span class=\"line\">      email_configs:</span><br><span class=\"line\">      - to: &#x27;xxx@gmail.com&#x27;</span><br><span class=\"line\">        send_resolved: true</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">部署 configmap</span></span><br><span class=\"line\">kubectl apply -f alertmanager-cfg.yaml</span><br><span class=\"line\">kubectl apply -f prometheus-cfg.yaml</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">部署 Prometheus Server 和 AlertManager 容器</span></span><br><span class=\"line\">cat &gt; prometheus-deployment.yaml &lt;&lt; &quot;EOF&quot;</span><br><span class=\"line\">apiVersion: apps/v1</span><br><span class=\"line\">kind: Deployment</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: prometheus-server</span><br><span class=\"line\">  namespace: monitor</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app: prometheus</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  replicas: 1</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      app: prometheus</span><br><span class=\"line\">      component: server</span><br><span class=\"line\">    #matchExpressions:</span><br><span class=\"line\">    #- &#123;key: app, operator: In, values: [prometheus]&#125;</span><br><span class=\"line\">    #- &#123;key: component, operator: In, values: [server]&#125;</span><br><span class=\"line\">  template:</span><br><span class=\"line\">    metadata:</span><br><span class=\"line\">      labels:</span><br><span class=\"line\">        app: prometheus</span><br><span class=\"line\">        component: server</span><br><span class=\"line\">      annotations:</span><br><span class=\"line\">        prometheus.io/scrape: &#x27;false&#x27;</span><br><span class=\"line\">    spec:</span><br><span class=\"line\">      serviceAccountName: monitor-sa</span><br><span class=\"line\">      containers:</span><br><span class=\"line\">      # Prometheus 容器配置</span><br><span class=\"line\">      - name: prometheus</span><br><span class=\"line\">        image: prom/prometheus</span><br><span class=\"line\">        imagePullPolicy: IfNotPresent</span><br><span class=\"line\">        command:</span><br><span class=\"line\">          - prometheus</span><br><span class=\"line\">          - --config.file=/etc/prometheus/prometheus.yml</span><br><span class=\"line\">          - --storage.tsdb.path=/prometheus\t#数据存储目录</span><br><span class=\"line\">          - --storage.tsdb.retention=720h\t  #数据保存时长</span><br><span class=\"line\">          - --web.enable-lifecycle\t\t\t\t\t#开启热加载</span><br><span class=\"line\">          - --web.enable-admin-api          # admin HTTP API 访问，包括删除时间序列等功能</span><br><span class=\"line\">        ports:</span><br><span class=\"line\">        - containerPort: 9090</span><br><span class=\"line\">          protocol: TCP</span><br><span class=\"line\">        volumeMounts:</span><br><span class=\"line\">        - mountPath: /etc/prometheus/</span><br><span class=\"line\">          name: prometheus-config</span><br><span class=\"line\">        - mountPath: /prometheus/</span><br><span class=\"line\">          name: prometheus-storage-volume</span><br><span class=\"line\">      # Prometheus 容器配置结束</span><br><span class=\"line\">      </span><br><span class=\"line\">      # AlertManager 容器配置</span><br><span class=\"line\">      - name: alertmanager</span><br><span class=\"line\">        image: prom/alertmanager</span><br><span class=\"line\">        imagePullPolicy: IfNotPresent</span><br><span class=\"line\">        args:</span><br><span class=\"line\">        - --config.file=/etc/alertmanager/config.yml</span><br><span class=\"line\">        - --storage.path=/alertmanager/data</span><br><span class=\"line\">        ports:</span><br><span class=\"line\">        - containerPort: 9093</span><br><span class=\"line\">          name: http</span><br><span class=\"line\">        volumeMounts:</span><br><span class=\"line\">        - mountPath: /etc/alertmanager</span><br><span class=\"line\">          name: alertcfg</span><br><span class=\"line\">        resources:</span><br><span class=\"line\">          requests:</span><br><span class=\"line\">            cpu: 100m</span><br><span class=\"line\">            memory: 256Mi</span><br><span class=\"line\">          limits:</span><br><span class=\"line\">            cpu: 100m</span><br><span class=\"line\">            memory: 256Mi          </span><br><span class=\"line\">      # AlertManager 容器配置结束</span><br><span class=\"line\">      volumes:</span><br><span class=\"line\">      - name: prometheus-config</span><br><span class=\"line\">        configMap:</span><br><span class=\"line\">          name: prometheus-config</span><br><span class=\"line\">      - name: prometheus-storage-volume</span><br><span class=\"line\">        hostPath:</span><br><span class=\"line\">         path: /data</span><br><span class=\"line\">         type: Directory</span><br><span class=\"line\">      - name: alertcfg</span><br><span class=\"line\">        configMap:</span><br><span class=\"line\">          name: alert-config</span><br><span class=\"line\">EOF</span><br><span class=\"line\">kubectl apply -f prometheus-deployment.yaml</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">部署 Service，暴露 Prometheus Server 对外接口</span></span><br><span class=\"line\">cat &gt; prometheus-svc.yaml &lt;&lt; &quot;EOF&quot;</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Service</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: prometheus</span><br><span class=\"line\">  namespace: monitor</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app: prometheus</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  type: NodePort</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">    - port: 9090</span><br><span class=\"line\">      targetPort: 9090</span><br><span class=\"line\">      protocol: TCP</span><br><span class=\"line\">      nodePort: 30009</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    app: prometheus</span><br><span class=\"line\">    component: server</span><br><span class=\"line\">EOF</span><br><span class=\"line\">kubectl apply -f prometheus-svc.yaml</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">minikbube 转发本机端口进集群内部 Service 方式</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">kubectl port-forward service/prometheus -n monitor --address 127.0.0.1 3009:9090</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Alert 告警配置</p>\n</li>\n</ol>\n<ul>\n<li><p>追加告警规则配置</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">追加 ruls.yml 配置内容到 prometheus-cfg.yaml 配置</span></span><br><span class=\"line\">kind: ConfigMap</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app: prometheus</span><br><span class=\"line\">  name: prometheus-config</span><br><span class=\"line\">  namespace: monitor</span><br><span class=\"line\">data:</span><br><span class=\"line\">  prometheus.yml: |</span><br><span class=\"line\">    ...</span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">告警规则配置，与 prometheus 配置同样写入 /etc/prometheus 目录下</span></span><br><span class=\"line\">  rules.yml: |</span><br><span class=\"line\">    groups:</span><br><span class=\"line\">    - name: test-rule</span><br><span class=\"line\">      rules:</span><br><span class=\"line\">      - alert: NodeMemoryUsage</span><br><span class=\"line\">        expr: (node_memory_MemTotal_bytes - (node_memory_MemFree_bytes + node_memory_Buffers_bytes + node_memory_Cached_bytes)) / node_memory_MemTotal_bytes * 100 &gt; 20</span><br><span class=\"line\">        for: 2m</span><br><span class=\"line\">        labels:</span><br><span class=\"line\">          team: node</span><br><span class=\"line\">        annotations:</span><br><span class=\"line\">          summary: &quot;&#123;&#123;.instance&#125;&#125;: High Memory usage detected&quot;</span><br><span class=\"line\">          description: &quot;&#123;&#123;.instance&#125;&#125;: Memory usage is above 20% (current value is: &#123;&#123;  &#125;&#125;&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Prometheus 热加载配置</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">请求 Prometheus、AlertManager 接口，可使用 Pod IP，热加载配置</span></span><br><span class=\"line\">curl -X POST http://172.17.0.5:9090/-/reload</span><br><span class=\"line\">curl -X POST http://172.17.0.5:9093/-/reload</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看 <span class=\"built_in\">log</span></span></span><br><span class=\"line\">kubectl logs --tail 10 -f prometheus-server-658b54bd7-9gvd9 -n monitor</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">强制重启加载方式，可能丢失监控数据</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">kubectl delete -f prometheus-cfg.yaml &amp;&amp; kubectl delete -f prometheus-deployment.yaml</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">kubectl apply -f prometheus-cfg.yaml &amp;&amp; kubectl apply -f prometheus-deployment.yaml</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>告警通知：email、webhook</p>\n</li>\n</ul>\n<ol start=\"4\">\n<li>Grafana 部署<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; grafana.yaml &lt;&lt; &quot;EOF&quot;</span><br><span class=\"line\">apiVersion: apps/v1</span><br><span class=\"line\">kind: Deployment</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: monitoring-grafana</span><br><span class=\"line\">  namespace: monitor</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  replicas: 1</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      task: monitoring</span><br><span class=\"line\">      k8s-app: grafana</span><br><span class=\"line\">  template:</span><br><span class=\"line\">    metadata:</span><br><span class=\"line\">      labels:</span><br><span class=\"line\">        task: monitoring</span><br><span class=\"line\">        k8s-app: grafana</span><br><span class=\"line\">    spec:</span><br><span class=\"line\">      securityContext:</span><br><span class=\"line\">        fsGroup: 472</span><br><span class=\"line\">        runAsUser: 472</span><br><span class=\"line\">      containers:</span><br><span class=\"line\">      - name: grafana</span><br><span class=\"line\">        image: grafana/grafana</span><br><span class=\"line\">        ports:</span><br><span class=\"line\">        - containerPort: 3000</span><br><span class=\"line\">          protocol: TCP</span><br><span class=\"line\">        volumeMounts:</span><br><span class=\"line\">        - mountPath: /etc/ssl/certs</span><br><span class=\"line\">          name: ca-certificates</span><br><span class=\"line\">          readOnly: true</span><br><span class=\"line\">        - mountPath: /var</span><br><span class=\"line\">          name: grafana-storage</span><br><span class=\"line\">        env:</span><br><span class=\"line\">        - name: GF_SECURITY_ADMIN_USER</span><br><span class=\"line\">          value: admin</span><br><span class=\"line\">        - name: GF_SECURITY_ADMIN_PASSWORD</span><br><span class=\"line\">          value: admin123</span><br><span class=\"line\">      volumes:</span><br><span class=\"line\">      - name: ca-certificates</span><br><span class=\"line\">        hostPath:</span><br><span class=\"line\">          path: /etc/ssl/certs</span><br><span class=\"line\">      - name: grafana-storage</span><br><span class=\"line\">        emptyDir: &#123;&#125;</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Service</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    kubernetes.io/cluster-service: &#x27;true&#x27;</span><br><span class=\"line\">    kubernetes.io/name: monitoring-grafana</span><br><span class=\"line\">  name: monitoring-grafana</span><br><span class=\"line\">  namespace: monitor</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  type: NodePort</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">  - port: 80</span><br><span class=\"line\">    targetPort: 3000</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    k8s-app: grafana</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl apply -f grafana.yaml</span><br><span class=\"line\">kubectl get pod,svc -n monitor</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置 Grafana</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">登录，导入 Prometheus 数据源</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">导入监控 Kubernetes 集群模板，官方模板 https://grafana.com/grafana/dashboards/162/revisions</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">监控 node，导入 node_exporter.json</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"四、Prometheus-Operator-方式部署\"><a href=\"#四、Prometheus-Operator-方式部署\" class=\"headerlink\" title=\"四、Prometheus-Operator 方式部署\"></a>四、Prometheus-Operator 方式部署</h4><ol>\n<li>部署 prometheus-operator（controller）<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下载官方源码，部署 operator 资源</span></span><br><span class=\"line\">git clone https://github.com/prometheus-operator/prometheus-operator &amp;&amp; cd prometheus-operator</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建 CRD 资源、RBAC 资源、operator 资源</span></span><br><span class=\"line\">kubectl create -f bundle.yaml</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看结果</span></span><br><span class=\"line\">kubectl get pod,svc -owide</span><br><span class=\"line\">NAME                                       READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">pod/prometheus-operator-567cd8b6f6-xvhp5   1/1     Running   0          127m</span><br><span class=\"line\">NAME                          TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE</span><br><span class=\"line\">service/prometheus-operator   ClusterIP   None             &lt;none&gt;        8080/TCP         127m</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看 CRD 资源下所有 API 资源</span></span><br><span class=\"line\">kubectl get --raw /apis/monitoring.coreos.com/v1</span><br></pre></td></tr></table></figure></li>\n</ol>\n<blockquote>\n<p>官方源码地址已替换至: <a href=\"https://github.com/prometheus-operator/kube-prometheus\">https://github.com/prometheus-operator/kube-prometheus</a>, 部署方式参考新地址</p>\n</blockquote>\n<ol start=\"2\">\n<li><p>部署 prometheus （server，CRD 资源）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建 prometheus-server 资源</span></span><br><span class=\"line\">cat &gt; prometheus.yaml &lt;&lt; &quot;EOF&quot;</span><br><span class=\"line\">apiVersion: monitoring.coreos.com/v1</span><br><span class=\"line\">kind: Prometheus</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: prometheus</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  serviceAccountName: prometheus</span><br><span class=\"line\"><span class=\"meta prompt_\">  #</span><span class=\"language-bash\">配置监控所有 ServiceMonitor</span></span><br><span class=\"line\"><span class=\"meta prompt_\">  #</span><span class=\"language-bash\">ServiceMonitorSelector: &#123;&#125;</span></span><br><span class=\"line\">  serviceMonitorSelector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      team: frontend</span><br><span class=\"line\">  resources:</span><br><span class=\"line\">    requests:</span><br><span class=\"line\">      memory: 200Mi</span><br><span class=\"line\">  enableAdminAPI: false</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: ServiceAccount</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: prometheus</span><br><span class=\"line\">  namespace: default</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class=\"line\">kind: ClusterRole</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: prometheus</span><br><span class=\"line\">rules:</span><br><span class=\"line\">- apiGroups: [&quot;&quot;]</span><br><span class=\"line\">  resources:</span><br><span class=\"line\">  - nodes</span><br><span class=\"line\">  - services</span><br><span class=\"line\">  - endpoints</span><br><span class=\"line\">  - pods</span><br><span class=\"line\">  verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;]</span><br><span class=\"line\">- apiGroups: [&quot;&quot;]</span><br><span class=\"line\">  resources:</span><br><span class=\"line\">  - configmaps</span><br><span class=\"line\">  verbs: [&quot;get&quot;]</span><br><span class=\"line\">- nonResourceURLs: [&quot;/metrics&quot;]</span><br><span class=\"line\">  verbs: [&quot;get&quot;]</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class=\"line\">kind: ClusterRoleBinding</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: prometheus</span><br><span class=\"line\">roleRef:</span><br><span class=\"line\">  apiGroup: rbac.authorization.k8s.io</span><br><span class=\"line\">  kind: ClusterRole</span><br><span class=\"line\">  name: prometheus</span><br><span class=\"line\">subjects:</span><br><span class=\"line\">- kind: ServiceAccount</span><br><span class=\"line\">  name: prometheus</span><br><span class=\"line\">  namespace: default</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Service</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: prometheus</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  type: NodePort</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">  - name: web</span><br><span class=\"line\">    nodePort: 30900</span><br><span class=\"line\">    port: 9090</span><br><span class=\"line\">    protocol: TCP</span><br><span class=\"line\">    targetPort: web</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    prometheus: prometheus</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建模拟输出 metrics 程序</span></span><br><span class=\"line\">cat &gt; example.yaml &lt;&lt; &quot;EOF&quot;</span><br><span class=\"line\">apiVersion: apps/v1</span><br><span class=\"line\">kind: Deployment</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: example-app</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  replicas: 1</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      app: example-app</span><br><span class=\"line\">  template:</span><br><span class=\"line\">    metadata:</span><br><span class=\"line\">      labels:</span><br><span class=\"line\">        app: example-app</span><br><span class=\"line\">    spec:</span><br><span class=\"line\">      containers:</span><br><span class=\"line\">      - name: example-app</span><br><span class=\"line\">        image: zhangguanzhang/instrumented_app</span><br><span class=\"line\">        ports:</span><br><span class=\"line\">        - name: web</span><br><span class=\"line\">          containerPort: 8080</span><br><span class=\"line\">---</span><br><span class=\"line\">kind: Service</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: example-app</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app: example-app</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    app: example-app</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">  - name: web</span><br><span class=\"line\">    port: 8080</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>部署 ServiceMonitor （CRD 资源）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建 ServiceMonitor</span></span><br><span class=\"line\">cat &gt; service-monitor.yaml &lt;&lt; &quot;EOF&quot;</span><br><span class=\"line\">apiVersion: monitoring.coreos.com/v1</span><br><span class=\"line\">kind: ServiceMonitor</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: example-app</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    team: frontend</span><br><span class=\"line\">spec:</span><br><span class=\"line\"><span class=\"meta prompt_\">  #</span><span class=\"language-bash\">namespaceSelector:</span></span><br><span class=\"line\"><span class=\"meta prompt_\">  #</span><span class=\"language-bash\">1.非同namespace时配置具体ns</span></span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\"> matchNames:</span></span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\"> - target_namespace_name</span></span><br><span class=\"line\"><span class=\"meta prompt_\">  #</span><span class=\"language-bash\">2.任意ns</span></span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\"> any:<span class=\"literal\">true</span></span></span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      app: example-app</span><br><span class=\"line\">  endpoints:</span><br><span class=\"line\">  - port: web</span><br><span class=\"line\"><span class=\"meta prompt_\">  #</span><span class=\"language-bash\">BasicAuth认证时(<span class=\"built_in\">base64</span>编码)</span></span><br><span class=\"line\"><span class=\"meta prompt_\">  #</span><span class=\"language-bash\">- basicAuth:</span></span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">   password:</span></span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">     name: basic-auth</span></span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">     key: password</span></span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">   username:</span></span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">     name: basic-auth</span></span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">     key: user</span></span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\"> port: web</span></span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>访问验证</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看部署资源信息</span></span><br><span class=\"line\">NAME                                       READY   STATUS    RESTARTS   AGE    IP           NODE       NOMINATED NODE   READINESS GATES</span><br><span class=\"line\">pod/example-app-745967cc67-qbh45           1/1     Running   0          95m    172.17.0.7   minikube   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">pod/prometheus-operator-567cd8b6f6-xvhp5   1/1     Running   0          139m   172.17.0.6   minikube   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">pod/prometheus-prometheus-0                2/2     Running   0          108m   172.17.0.3   minikube   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                          TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE    SELECTOR</span><br><span class=\"line\">service/example-app           ClusterIP   10.100.248.130   &lt;none&gt;        8080/TCP         104m   app=example-app</span><br><span class=\"line\">service/kubernetes            ClusterIP   10.96.0.1        &lt;none&gt;        443/TCP          24d    &lt;none&gt;</span><br><span class=\"line\">service/prometheus            NodePort    10.101.76.214    &lt;none&gt;        9090:30900/TCP   28m    prometheus=prometheus</span><br><span class=\"line\">service/prometheus-operated   ClusterIP   None             &lt;none&gt;        9090/TCP         108m   app.kubernetes.io/name=prometheus</span><br><span class=\"line\">service/prometheus-operator   ClusterIP   None             &lt;none&gt;        8080/TCP         139m   app.kubernetes.io/component=controller,app.kubernetes.io/name=prometheus-operator</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">访问验证</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">minikube 需转发端口</span> </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">kubectl port-forward service/prometheus --address 127.0.0.1 9090:9090</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">浏览器访问 127.0.0.1:9090/targets</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>自定义监控集群资源（Etcd、controller-manager 等）</p>\n</li>\n</ol>\n<ul>\n<li>监控 Etcd<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">1、获取 etcd 证书生成 secret</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">2、配置 prometheus StatefulSet 添加上一步生成的 secret</span></span><br><span class=\"line\">kubectl get statefulsets -n monitoring</span><br><span class=\"line\">NAME                READY   AGE</span><br><span class=\"line\">alertmanager-main   3/3     3h25m</span><br><span class=\"line\">prometheus-k8s      1/1     3h25m</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">3、创建 ServiceMonitor 资源并部署</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">4、创建 Service、Endpoints 资源并进行关联（标签关联）</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"6\">\n<li>配置 AlertManager、PrometheusRule 自定义告警</li>\n</ol>\n<ul>\n<li><p>AlertManager 配置（Prometheus Dashboard 页面查看 Config 内容）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alerting:</span><br><span class=\"line\">  alert_relabel_configs:</span><br><span class=\"line\">  - separator: ;</span><br><span class=\"line\">    regex: prometheus_replica</span><br><span class=\"line\">    replacement: $1</span><br><span class=\"line\">    action: labeldrop</span><br><span class=\"line\">  alertmanagers:</span><br><span class=\"line\">  - kubernetes_sd_configs:</span><br><span class=\"line\">    - role: endpoints</span><br><span class=\"line\">      namespaces:</span><br><span class=\"line\">        names:</span><br><span class=\"line\">        - monitoring</span><br><span class=\"line\">    scheme: http</span><br><span class=\"line\">    path_prefix: /</span><br><span class=\"line\">    timeout: 10s</span><br><span class=\"line\">    relabel_configs:</span><br><span class=\"line\">    - source_labels: [__meta_kubernetes_service_name]</span><br><span class=\"line\">      separator: ;</span><br><span class=\"line\">      regex: alertmanager-main</span><br><span class=\"line\">      replacement: $1</span><br><span class=\"line\">      action: keep</span><br><span class=\"line\">    - source_labels: [__meta_kubernetes_endpoint_port_name]</span><br><span class=\"line\">      separator: ;</span><br><span class=\"line\">      regex: web</span><br><span class=\"line\">      replacement: $1</span><br><span class=\"line\">      action: keep</span><br><span class=\"line\">rule_files:</span><br><span class=\"line\">- /etc/prometheus/rules/prometheus-k8s-rulefiles-0/*.yaml</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>告警规则</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Prometheus Rule</span></span><br><span class=\"line\">cat &gt; prometheus-rules.yaml &lt;&lt; &quot;EOF&quot;</span><br><span class=\"line\">apiVersion: monitoring.coreos.com/v1</span><br><span class=\"line\">kind: PrometheusRule</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    prometheus: k8s</span><br><span class=\"line\">    role: alert-rules</span><br><span class=\"line\">  name: prometheus-k8s-rules</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  groups:</span><br><span class=\"line\">  - name: k8s.rules</span><br><span class=\"line\">    rules:</span><br><span class=\"line\">    - expr: |</span><br><span class=\"line\">        sum(rate(container_cpu_usage_seconds_total&#123;job=&quot;kubelet&quot;, image!=&quot;&quot;, container_name!=&quot;&quot;&#125;[5m])) by (namespace)</span><br><span class=\"line\">      record: namespace:container_cpu_usage_seconds_total:sum_rate</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">生成 rule 配置文件到 prometheus 的 /etc/prometheus/rules/prometheus-k8s-rulefiles-0/ 目录下</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置告警（AlertManager 配置 secret）</p>\n</li>\n</ul>\n<ol start=\"7\">\n<li>自动发现配置与持久化存储</li>\n</ol>\n<ul>\n<li>自动发现配置（annotations）</li>\n</ul>\n<p>prometheus.io&#x2F;scrape&#x3D;true<br>prometheus.io&#x2F;port&#x3D;xxx</p>\n<ul>\n<li>持久化存储（PV、PVC）</li>\n</ul>\n<blockquote>\n<p>Operator 管理监控以及维护 CRD 资源对象的状态：</p>\n<ul>\n<li>Prometheus</li>\n<li>ServiceMonitor</li>\n<li>PodMonitor</li>\n<li>AltertManager</li>\n<li>PrometheusRule</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>参考文档：<br>1、<a href=\"https://www.servicemesher.com/blog/prometheus-operator-manual/\">https://www.servicemesher.com/blog/prometheus-operator-manual/</a><br>2、<a href=\"https://www.qikqiak.com/k8s-book/docs/52.Prometheus%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html\">https://www.qikqiak.com/k8s-book/docs/52.Prometheus%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html</a><br>官方文档：<br>1、<a href=\"https://github.com/prometheus-operator/prometheus-operator\">https://github.com/prometheus-operator/prometheus-operator</a><br>2、<a href=\"https://github.com/prometheus-operator/kube-prometheus\">https://github.com/prometheus-operator/kube-prometheus</a>（新版本）<br>3、告警规则：<a href=\"https://yunlzheng.gitbook.io/prometheus-book/parti-prometheus-ji-chu/alert/prometheus-alert-rule\">https://yunlzheng.gitbook.io/prometheus-book/parti-prometheus-ji-chu/alert/prometheus-alert-rule</a></p>\n</blockquote>"},{"title":"Alicloud-Promotheus & Grafana 监控大盘与告警通知","abbrlink":"9a8h","date":"2022-03-16T15:21:06.000Z","_content":"### 一、背景\n- 线上ACK 集群部署了StatefulSet 应用（rabbitMQ），由于rabbitMQ 本身自带的management 后台数据展示较为简陋且没有告警功能，因此考虑接入云上产品监控资源数据且对接告警通知功能，主要通过如下产品实现：\n   - 接入Prometheus 监控+grafana 进行数据图表展示。\n   - 利用Arms 产品获取Prometheus 的监控指标，按照设定的阈值进行告警通知功能。\n\n### 二、操作过程\n#### 1）接入Prometheus 组件监控，获取数据指标\n\n- 进入云产品 **Prometheus监控服务**，选择对应集群。（ACK集群需要先安装Prometheus 监控组件，安装参考：[ARMS Prometheus监控](https://help.aliyun.com/document_detail/161304.html)）\n{% asset_img 1.png %}\n\n<!--more-->\n- 选择 组件监控 ，点击添加组件监控，选择要添加的组件。（本次示例为RabbitMQ）\n{% asset_img 2.png %}\n{% asset_img 3.png %}\n\n- 添加后即可进入grafana 大盘查看指标数据。验证数据方式可以通过 **curl  xxx:9419/metrics ** 获取指标数据，如图:\n{% asset_img 4.png %}\n\n\n#### 2）grafana 接入数据展示\n\n- 从Pometheus 控制台，点击对应生成的大盘，进入grafana 数据展示界面\n{% asset_img 5.png %}\n\n- 进入grafana Dashboard界面后，需要新增一个panel。操作如下：\n{% asset_img 6.png %}\n{% asset_img 7.png %}\n{% asset_img 8.png %}\n\n- 在ACK集群查看展示组件相关监控数据：在对应ACK 集群中，选择 **运维管理 -- Prometheus监控 --Cloud RABBITMQ** ，即可查看大盘数据。\n{% asset_img 9.png %}\n\n#### 3）创建告警阈值与通知\n\n- 创建钉钉群，并生成钉钉机器人webhook地址。参考：[https://help.aliyun.com/document_detail/251838.html](https://help.aliyun.com/document_detail/251838.html)\n\n- 在云产品 **Prometheus监控服务** 中，将钉钉机器人添加到告警联系人，使用IM机器人方式。\n{% asset_img 10.png %}\n\n- 在云产品 **应用实时监控服务ARMS -- Prometheus监控 -- Prometheus告警规则** 中，点击**创建Prometheus告警规则** ，创建告警规则。告警规则详细如图：\n{% asset_img 11.png %}\n{% asset_img 12.png %}\n\n- 在云产品 **应用实时监控服务ARMS -- 告警管理 -- 通知策略** 中，点击**创建通知策略** ，创建告警通知策略。策略配置详细如图：\n{% asset_img 13.png %}\n{% asset_img 14.png %}\n\n#### 4）验证告警\n\n- 将告警规则中PromQL 语句暂时配置为：sum by (queue)(rabbitmq_queue_messages_unacknowledged{app=\"rabbi-exporter\"}) >= 0\n\n来产生告警\n\n- 在云产品 **应用实时监控服务ARMS -- 告警管理 -- 告警发送历史/告警事件历史** 中，搜索告警事件与发送结果：\n{% asset_img 15.png %}\n{% asset_img 16.png %}\n\n- 可以看到钉钉群已正常接收告警通知（告警恢复自动发送恢复通知并停止发送告警消息）\n{% asset_img 17.png %}\n\n### 三、注意事项\n\n- ACK 集群 RabbitMQ应用告警是创建的临时告警群。后续如需添加其他人或告警通知发布到正式群组按情况进行调整。\n","source":"_posts/prometheus-grafana-notice.md","raw":"---\ntitle: Alicloud-Promotheus & Grafana 监控大盘与告警通知\nabbrlink: 9a8h\ndate: 2022-03-16 23:21:06\ncategories:\n  - Alicloud\n  - CNCF\ntags:\n  - Kubernetes\n---\n### 一、背景\n- 线上ACK 集群部署了StatefulSet 应用（rabbitMQ），由于rabbitMQ 本身自带的management 后台数据展示较为简陋且没有告警功能，因此考虑接入云上产品监控资源数据且对接告警通知功能，主要通过如下产品实现：\n   - 接入Prometheus 监控+grafana 进行数据图表展示。\n   - 利用Arms 产品获取Prometheus 的监控指标，按照设定的阈值进行告警通知功能。\n\n### 二、操作过程\n#### 1）接入Prometheus 组件监控，获取数据指标\n\n- 进入云产品 **Prometheus监控服务**，选择对应集群。（ACK集群需要先安装Prometheus 监控组件，安装参考：[ARMS Prometheus监控](https://help.aliyun.com/document_detail/161304.html)）\n{% asset_img 1.png %}\n\n<!--more-->\n- 选择 组件监控 ，点击添加组件监控，选择要添加的组件。（本次示例为RabbitMQ）\n{% asset_img 2.png %}\n{% asset_img 3.png %}\n\n- 添加后即可进入grafana 大盘查看指标数据。验证数据方式可以通过 **curl  xxx:9419/metrics ** 获取指标数据，如图:\n{% asset_img 4.png %}\n\n\n#### 2）grafana 接入数据展示\n\n- 从Pometheus 控制台，点击对应生成的大盘，进入grafana 数据展示界面\n{% asset_img 5.png %}\n\n- 进入grafana Dashboard界面后，需要新增一个panel。操作如下：\n{% asset_img 6.png %}\n{% asset_img 7.png %}\n{% asset_img 8.png %}\n\n- 在ACK集群查看展示组件相关监控数据：在对应ACK 集群中，选择 **运维管理 -- Prometheus监控 --Cloud RABBITMQ** ，即可查看大盘数据。\n{% asset_img 9.png %}\n\n#### 3）创建告警阈值与通知\n\n- 创建钉钉群，并生成钉钉机器人webhook地址。参考：[https://help.aliyun.com/document_detail/251838.html](https://help.aliyun.com/document_detail/251838.html)\n\n- 在云产品 **Prometheus监控服务** 中，将钉钉机器人添加到告警联系人，使用IM机器人方式。\n{% asset_img 10.png %}\n\n- 在云产品 **应用实时监控服务ARMS -- Prometheus监控 -- Prometheus告警规则** 中，点击**创建Prometheus告警规则** ，创建告警规则。告警规则详细如图：\n{% asset_img 11.png %}\n{% asset_img 12.png %}\n\n- 在云产品 **应用实时监控服务ARMS -- 告警管理 -- 通知策略** 中，点击**创建通知策略** ，创建告警通知策略。策略配置详细如图：\n{% asset_img 13.png %}\n{% asset_img 14.png %}\n\n#### 4）验证告警\n\n- 将告警规则中PromQL 语句暂时配置为：sum by (queue)(rabbitmq_queue_messages_unacknowledged{app=\"rabbi-exporter\"}) >= 0\n\n来产生告警\n\n- 在云产品 **应用实时监控服务ARMS -- 告警管理 -- 告警发送历史/告警事件历史** 中，搜索告警事件与发送结果：\n{% asset_img 15.png %}\n{% asset_img 16.png %}\n\n- 可以看到钉钉群已正常接收告警通知（告警恢复自动发送恢复通知并停止发送告警消息）\n{% asset_img 17.png %}\n\n### 三、注意事项\n\n- ACK 集群 RabbitMQ应用告警是创建的临时告警群。后续如需添加其他人或告警通知发布到正式群组按情况进行调整。\n","slug":"prometheus-grafana-notice","published":1,"updated":"2024-01-21T15:30:17.732Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm0fat8zq001xs0njexlfbxdk","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"一、背景\"><a href=\"#一、背景\" class=\"headerlink\" title=\"一、背景\"></a>一、背景</h3><ul>\n<li>线上ACK 集群部署了StatefulSet 应用（rabbitMQ），由于rabbitMQ 本身自带的management 后台数据展示较为简陋且没有告警功能，因此考虑接入云上产品监控资源数据且对接告警通知功能，主要通过如下产品实现：<ul>\n<li>接入Prometheus 监控+grafana 进行数据图表展示。</li>\n<li>利用Arms 产品获取Prometheus 的监控指标，按照设定的阈值进行告警通知功能。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"二、操作过程\"><a href=\"#二、操作过程\" class=\"headerlink\" title=\"二、操作过程\"></a>二、操作过程</h3><h4 id=\"1）接入Prometheus-组件监控，获取数据指标\"><a href=\"#1）接入Prometheus-组件监控，获取数据指标\" class=\"headerlink\" title=\"1）接入Prometheus 组件监控，获取数据指标\"></a>1）接入Prometheus 组件监控，获取数据指标</h4><ul>\n<li>进入云产品 <strong>Prometheus监控服务</strong>，选择对应集群。（ACK集群需要先安装Prometheus 监控组件，安装参考：<a href=\"https://help.aliyun.com/document_detail/161304.html\">ARMS Prometheus监控</a>）<img data-src=\"/posts/9a8h/1.png\" class></li>\n</ul>\n<span id=\"more\"></span>\n<ul>\n<li><p>选择 组件监控 ，点击添加组件监控，选择要添加的组件。（本次示例为RabbitMQ）</p>\n<img data-src=\"/posts/9a8h/2.png\" class>\n<img data-src=\"/posts/9a8h/3.png\" class>\n</li>\n<li><p>添加后即可进入grafana 大盘查看指标数据。验证数据方式可以通过 **curl  xxx:9419&#x2F;metrics ** 获取指标数据，如图:</p>\n<img data-src=\"/posts/9a8h/4.png\" class></li>\n</ul>\n<h4 id=\"2）grafana-接入数据展示\"><a href=\"#2）grafana-接入数据展示\" class=\"headerlink\" title=\"2）grafana 接入数据展示\"></a>2）grafana 接入数据展示</h4><ul>\n<li><p>从Pometheus 控制台，点击对应生成的大盘，进入grafana 数据展示界面</p>\n<img data-src=\"/posts/9a8h/5.png\" class>\n</li>\n<li><p>进入grafana Dashboard界面后，需要新增一个panel。操作如下：</p>\n<img data-src=\"/posts/9a8h/6.png\" class>\n<img data-src=\"/posts/9a8h/7.png\" class>\n<img data-src=\"/posts/9a8h/8.png\" class>\n</li>\n<li><p>在ACK集群查看展示组件相关监控数据：在对应ACK 集群中，选择 <strong>运维管理 – Prometheus监控 –Cloud RABBITMQ</strong> ，即可查看大盘数据。</p>\n<img data-src=\"/posts/9a8h/9.png\" class></li>\n</ul>\n<h4 id=\"3）创建告警阈值与通知\"><a href=\"#3）创建告警阈值与通知\" class=\"headerlink\" title=\"3）创建告警阈值与通知\"></a>3）创建告警阈值与通知</h4><ul>\n<li><p>创建钉钉群，并生成钉钉机器人webhook地址。参考：<a href=\"https://help.aliyun.com/document_detail/251838.html\">https://help.aliyun.com/document_detail&#x2F;251838.html</a></p>\n</li>\n<li><p>在云产品 <strong>Prometheus监控服务</strong> 中，将钉钉机器人添加到告警联系人，使用IM机器人方式。</p>\n<img data-src=\"/posts/9a8h/10.png\" class>\n</li>\n<li><p>在云产品 <strong>应用实时监控服务ARMS – Prometheus监控 – Prometheus告警规则</strong> 中，点击<strong>创建Prometheus告警规则</strong> ，创建告警规则。告警规则详细如图：</p>\n<img data-src=\"/posts/9a8h/11.png\" class>\n<img data-src=\"/posts/9a8h/12.png\" class>\n</li>\n<li><p>在云产品 <strong>应用实时监控服务ARMS – 告警管理 – 通知策略</strong> 中，点击<strong>创建通知策略</strong> ，创建告警通知策略。策略配置详细如图：</p>\n<img data-src=\"/posts/9a8h/13.png\" class>\n<img data-src=\"/posts/9a8h/14.png\" class></li>\n</ul>\n<h4 id=\"4）验证告警\"><a href=\"#4）验证告警\" class=\"headerlink\" title=\"4）验证告警\"></a>4）验证告警</h4><ul>\n<li>将告警规则中PromQL 语句暂时配置为：sum by (queue)(rabbitmq_queue_messages_unacknowledged{app&#x3D;”rabbi-exporter”}) &gt;&#x3D; 0</li>\n</ul>\n<p>来产生告警</p>\n<ul>\n<li><p>在云产品 <strong>应用实时监控服务ARMS – 告警管理 – 告警发送历史&#x2F;告警事件历史</strong> 中，搜索告警事件与发送结果：</p>\n<img data-src=\"/posts/9a8h/15.png\" class>\n<img data-src=\"/posts/9a8h/16.png\" class>\n</li>\n<li><p>可以看到钉钉群已正常接收告警通知（告警恢复自动发送恢复通知并停止发送告警消息）</p>\n<img data-src=\"/posts/9a8h/17.png\" class></li>\n</ul>\n<h3 id=\"三、注意事项\"><a href=\"#三、注意事项\" class=\"headerlink\" title=\"三、注意事项\"></a>三、注意事项</h3><ul>\n<li>ACK 集群 RabbitMQ应用告警是创建的临时告警群。后续如需添加其他人或告警通知发布到正式群组按情况进行调整。</li>\n</ul>\n","site":{"data":{"footer":"","styles":".post {\n  margin-top: 50px;\n  margin-bottom: 50px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n.headband {\n  display: none;\n}\nbody {\n  background: url(\"/images/background.jpeg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\n.post-block.page {\n  margin-top: 40px;\n}\n.category-all-page {\n  box-shadow: 0px 0px 10px 0px rgba(0,0,0,0.5);\n  background-color: #797d7f;\n  padding: 20px 30px 60px 30px;\n  border-radius: 25px 25px 25px 25px;\n}\n.category-all-title {\n  font-family: Impact;\n  font-size: 24px;\n  color: #0ff;\n}\n.category-list {\n  overflow: auto;\n}\n.category-list li {\n  height: 100%;\n  float: left;\n  border-right: 3px solid #222;\n  padding: 0 20px;\n}\n.category-all ul li {\n  list-style: none !important;\n}\n.category-list li:last-child {\n  border-right: none;\n}\n.category-list li a {\n  font-size: 16px;\n  text-decoration: none;\n  color: #7fff00;\n  font-family: Helvetica, Verdana, sans-serif;\n  -webkit-transition: all 0.5s ease;\n  -moz-transition: all 0.5s ease;\n  -o-transition: all 0.5s ease;\n  -ms-transition: all 0.5s ease;\n  transition: all 0.5s ease;\n}\n.category-list li a:hover {\n  color: #000;\n}\n.category-list li.active a {\n  font-weight: bold;\n  color: #000;\n}\n.tag-cloud a {\n  box-shadow: 0 1px 3px #6f42c1, 0 1px 2px #d9534f;\n  padding: 2px 10px;\n  margin: 8px;\n  background: rgba(193,66,92,0);\n  border-bottom: none;\n  border-radius: 20px;\n}\ncode {\n  background: #555;\n  color: #fff;\n}\n","variables":""}},"length":1125,"excerpt":"<h3 id=\"一、背景\"><a href=\"#一、背景\" class=\"headerlink\" title=\"一、背景\"></a>一、背景</h3><ul>\n<li>线上ACK 集群部署了StatefulSet 应用（rabbitMQ），由于rabbitMQ 本身自带的management 后台数据展示较为简陋且没有告警功能，因此考虑接入云上产品监控资源数据且对接告警通知功能，主要通过如下产品实现：<ul>\n<li>接入Prometheus 监控+grafana 进行数据图表展示。</li>\n<li>利用Arms 产品获取Prometheus 的监控指标，按照设定的阈值进行告警通知功能。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"二、操作过程\"><a href=\"#二、操作过程\" class=\"headerlink\" title=\"二、操作过程\"></a>二、操作过程</h3><h4 id=\"1）接入Prometheus-组件监控，获取数据指标\"><a href=\"#1）接入Prometheus-组件监控，获取数据指标\" class=\"headerlink\" title=\"1）接入Prometheus 组件监控，获取数据指标\"></a>1）接入Prometheus 组件监控，获取数据指标</h4><ul>\n<li>进入云产品 <strong>Prometheus监控服务</strong>，选择对应集群。（ACK集群需要先安装Prometheus 监控组件，安装参考：<a href=\"https://help.aliyun.com/document_detail/161304.html\">ARMS Prometheus监控</a>）<img data-src=\"/posts/9a8h/1.png\" class></li>\n</ul>","more":"<ul>\n<li><p>选择 组件监控 ，点击添加组件监控，选择要添加的组件。（本次示例为RabbitMQ）</p>\n<img data-src=\"/posts/9a8h/2.png\" class>\n<img data-src=\"/posts/9a8h/3.png\" class>\n</li>\n<li><p>添加后即可进入grafana 大盘查看指标数据。验证数据方式可以通过 **curl  xxx:9419&#x2F;metrics ** 获取指标数据，如图:</p>\n<img data-src=\"/posts/9a8h/4.png\" class></li>\n</ul>\n<h4 id=\"2）grafana-接入数据展示\"><a href=\"#2）grafana-接入数据展示\" class=\"headerlink\" title=\"2）grafana 接入数据展示\"></a>2）grafana 接入数据展示</h4><ul>\n<li><p>从Pometheus 控制台，点击对应生成的大盘，进入grafana 数据展示界面</p>\n<img data-src=\"/posts/9a8h/5.png\" class>\n</li>\n<li><p>进入grafana Dashboard界面后，需要新增一个panel。操作如下：</p>\n<img data-src=\"/posts/9a8h/6.png\" class>\n<img data-src=\"/posts/9a8h/7.png\" class>\n<img data-src=\"/posts/9a8h/8.png\" class>\n</li>\n<li><p>在ACK集群查看展示组件相关监控数据：在对应ACK 集群中，选择 <strong>运维管理 – Prometheus监控 –Cloud RABBITMQ</strong> ，即可查看大盘数据。</p>\n<img data-src=\"/posts/9a8h/9.png\" class></li>\n</ul>\n<h4 id=\"3）创建告警阈值与通知\"><a href=\"#3）创建告警阈值与通知\" class=\"headerlink\" title=\"3）创建告警阈值与通知\"></a>3）创建告警阈值与通知</h4><ul>\n<li><p>创建钉钉群，并生成钉钉机器人webhook地址。参考：<a href=\"https://help.aliyun.com/document_detail/251838.html\">https://help.aliyun.com/document_detail&#x2F;251838.html</a></p>\n</li>\n<li><p>在云产品 <strong>Prometheus监控服务</strong> 中，将钉钉机器人添加到告警联系人，使用IM机器人方式。</p>\n<img data-src=\"/posts/9a8h/10.png\" class>\n</li>\n<li><p>在云产品 <strong>应用实时监控服务ARMS – Prometheus监控 – Prometheus告警规则</strong> 中，点击<strong>创建Prometheus告警规则</strong> ，创建告警规则。告警规则详细如图：</p>\n<img data-src=\"/posts/9a8h/11.png\" class>\n<img data-src=\"/posts/9a8h/12.png\" class>\n</li>\n<li><p>在云产品 <strong>应用实时监控服务ARMS – 告警管理 – 通知策略</strong> 中，点击<strong>创建通知策略</strong> ，创建告警通知策略。策略配置详细如图：</p>\n<img data-src=\"/posts/9a8h/13.png\" class>\n<img data-src=\"/posts/9a8h/14.png\" class></li>\n</ul>\n<h4 id=\"4）验证告警\"><a href=\"#4）验证告警\" class=\"headerlink\" title=\"4）验证告警\"></a>4）验证告警</h4><ul>\n<li>将告警规则中PromQL 语句暂时配置为：sum by (queue)(rabbitmq_queue_messages_unacknowledged{app&#x3D;”rabbi-exporter”}) &gt;&#x3D; 0</li>\n</ul>\n<p>来产生告警</p>\n<ul>\n<li><p>在云产品 <strong>应用实时监控服务ARMS – 告警管理 – 告警发送历史&#x2F;告警事件历史</strong> 中，搜索告警事件与发送结果：</p>\n<img data-src=\"/posts/9a8h/15.png\" class>\n<img data-src=\"/posts/9a8h/16.png\" class>\n</li>\n<li><p>可以看到钉钉群已正常接收告警通知（告警恢复自动发送恢复通知并停止发送告警消息）</p>\n<img data-src=\"/posts/9a8h/17.png\" class></li>\n</ul>\n<h3 id=\"三、注意事项\"><a href=\"#三、注意事项\" class=\"headerlink\" title=\"三、注意事项\"></a>三、注意事项</h3><ul>\n<li>ACK 集群 RabbitMQ应用告警是创建的临时告警群。后续如需添加其他人或告警通知发布到正式群组按情况进行调整。</li>\n</ul>"},{"title":"Kubernetes - kube-eventer 事件中心组件","abbrlink":"2ead","date":"2022-09-30T13:42:20.000Z","_content":"### 一、背景\n\n#### 概述\n\n+ 什么是事件：Kubernetes 的架构设计基于状态机，不同的状态之间进行转换则会生成相应的事件，正常的状态之间转换会生成 Normal 等级的事件，正常状态与异常状态之间的转换会生成Warning等级的事件。\n\n+ kube-eventer 组件：Alicloud开源组件，用于获取 Kubernetes 集群中事件消息，并转存至自定义中间件或存储中。（Kubernetes 集群默认只保存1小时内事件）\n\n+ 组件官方地址：https://github.com/AliyunContainerService/kube-eventer\n\n#### 部署前提与软件\n\n| 名称                               | 功能                         | 备注               |\n| -------------------------------- | -------------------------- | ---------------- |\n| Kubernetes 集群                           | 应用集群                       | 使用 minikube 测试集群 |\n| kube-eventer                     | 收集 Kubernetes 集群事件                | 集群第三方组件          |\n| Kafka / Elasticsearch / influxDB | 中间件：存储事件消息                 | 存储组件（选型 Kafka）   |\n| kube-eventer-py                  | 从队列获取事件消息发送至 telegram 告警群组 | 事件消费者            |\n\n<!--more-->\n### 二、安装部署步骤\n\n#### 1）minikube 集群部署\n\n参考：https://minikube.sigs.k8s.io/docs/start/\n\n#### 2）存储中间件部署（Kafka）\n\n使用 helm 部署 Kafka\n\n```shell\n# 添加 helm 仓库\nhelm repo add bitnami https://charts.bitnami.com/bitnami\n\n# 拉取 Kafka chart 包并解压\nmkdir /opt/helm_chats && cd /opt/helm_chats \nhelm pull bitnami/kafka && tar xf kafka-18.2.0.tgz && rm -rf kafka-18.2.0.tgz\n\n# 修改关键配置信息，启动 Kafka\n# 展示部分关键配置\ncat ./values.yaml  \n...\n...\n# Kafka 启动配置文件，通过 Configmap 挂载\nconfig: |-\n  broker.id=0\n  listeners=INTERNAL://:9093,CLIENT://:9092\n  advertised.listeners=INTERNAL://yakir-kafka-0.yakir-kafka-headless.default.svc.cluster.local:9093,CLIENT://yakir-kafka-0.yakir-kafka-headless.default.svc.cluster.local:9092\n  listener.security.protocol.map=INTERNAL:PLAINTEXT,CLIENT:PLAINTEXT\n  num.network.threads=5\n  num.io.threads=10\n  socket.send.buffer.bytes=102400\n  socket.receive.buffer.bytes=102400\n  socket.request.max.bytes=104857600\n  log.dirs=/bitnami/kafka/data\n  num.partitions=1\n  num.recovery.threads.per.data.dir=1\n  offsets.topic.replication.factor=1\n  transaction.state.log.replication.factor=1\n  transaction.state.log.min.isr=1\n  log.flush.interval.messages=10000\n  log.flush.interval.ms=1000\n  log.retention.hours=168   # 保留队列数据时间，默认为7天\n  log.retention.bytes=1073741824\n  log.segment.bytes=1073741824\n  log.retention.check.interval.ms=300000\n  zookeeper.connect=yakir-kafka-zookeeper\n  zookeeper.connection.timeout.ms=6000\n  group.initial.rebalance.delay.ms=0\n  allow.everyone.if.no.acl.found=true\n  auto.create.topics.enable=true\n  default.replication.factor=1\n  delete.topic.enable=true   # 超时时间后是否自动删除 topic 数据\n  inter.broker.listener.name=INTERNAL\n  log.retention.check.intervals.ms=300000\n  max.partition.fetch.bytes=1048576\n  max.request.size=1048576\n  message.max.bytes=1000012\n  sasl.enabled.mechanisms=PLAIN,SCRAM-SHA-256,SCRAM-SHA-512\n  sasl.mechanism.inter.broker.protocol=\n  super.users=User:admin\n...\n...\npersistence:\n  enabled: true\n  existingClaim: \"\"\n  storageClass: \"standard\"   # 挂载持久化存储类\n...\n...\nzookeeper:\n  enabled: true\n  replicaCount: 1\n  auth:\n    client:\n      enabled: false\n      clientUser: \"\"\n      clientPassword: \"\"\n      serverUsers: \"\"\n      serverPasswords: \"\"\n  persistence:\n    enabled: true\n    storageClass: \"standard\"   # 挂载持久化存储类，miniku 默认已有。\n\n\n# 部署与验证\nhelm install yakir-kafka .\n# 验证部署状态，查看是否为正常 Running 状态\nkubectl get pod  \nNAME                                  READY   STATUS    RESTARTS       AGE\nyakir-kafka-0                         1/1     Running   0              171m\nyakir-kafka-zookeeper-0               1/1     Running   6 (168m ago)   10d\n```\n\n#### 3）kube-eventer 部署\n\n+ 获取官方 YAML 资源文件进行部署\n\n```shell\ncat > kube-eventer.yaml << \"EOF\"\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    name: kube-eventer\n  name: kube-eventer\n  namespace: kube-system\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: kube-eventer\n  template:\n    metadata:\n      labels:\n        app: kube-eventer\n      annotations:      \n        #scheduler.alpha.kubernetes.io/critical-pod: ''\n        priorityClassName: ''\n    spec:\n      dnsPolicy: ClusterFirstWithHostNet\n      serviceAccount: kube-eventer\n      containers:\n        - image: registry.aliyuncs.com/acs/kube-eventer-amd64:v1.2.0-484d9cd-aliyun\n          name: kube-eventer\n          command:\n            - \"/kube-eventer\"\n            - \"--source=kubernetes:https://kubernetes.default\"\n            # 存储消息中间件配置，根据环境进行配置\n            - --sink=kafka:?brokers=yakir-kafka-headless.default:9092&eventstopic=yakirtopic\n          env:\n          # If TZ is assigned, set the TZ value as the time zone\n          - name: TZ\n            value: \"Asia/Shanghai\" \n          volumeMounts:\n            - name: localtime\n              mountPath: /etc/localtime\n              readOnly: true\n            - name: zoneinfo\n              mountPath: /usr/share/zoneinfo\n              readOnly: true\n          resources:\n            requests:\n              cpu: 100m\n              memory: 100Mi\n            limits:\n              cpu: 500m\n              memory: 250Mi\n      volumes:\n        - name: localtime\n          hostPath:\n            path: /etc/localtime\n        - name: zoneinfo\n          hostPath:\n            path: /usr/share/zoneinfo\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: kube-eventer\nrules:\n  - apiGroups:\n      - \"\"\n    resources:\n      - configmaps\n      - events\n    verbs:\n      - get\n      - list\n      - watch\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: kube-eventer\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: kube-eventer\nsubjects:\n  - kind: ServiceAccount\n    name: kube-eventer\n    namespace: kube-system\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: kube-eventer\n  namespace: kube-system\nEOF\n\n# 部署资源，默认部署至 kube-system namespace 中\nkubectl apply -f kube-eventer.yaml\n# 验证部署状态\nkubectl get pod -n kube-system\nNAME                               READY   STATUS    RESTARTS        AGE\nkube-eventer-69455778cd-cvr9w      1/1     Running   0               8d\n```\n\n#### 4）从消息队列获取事件，发送至 telegram\n\n+ telegram 机器人以及告警群组创建\n\n> 参考\n> \n> 1、机器人创建：https://cloud.tencent.com/developer/article/1835051\n> \n> 2、telegram python SDK：https://github.com/python-telegram-bot/python-telegram-bot\n\n+ Python 脚本信息\n\n```python\n# telegrambot.py 文件\nimport asyncio\nimport telegram\nimport json\nimport traceback\n\nTOKEN = \"xxxxxx\"\nchat_id = \"-xxx\"\nbot = telegram.Bot(token=TOKEN)\n\n\nclass FilterMsg(object):\n    def __init__(self, text):\n        self.event_value = json.loads(text['EventValue'])\n\n        self.data = dict()\n        self.data['kind'] = self.event_value['involvedObject']['kind']\n        self.data['namespace'] = self.event_value['involvedObject']['namespace']\n        self.data['reason'] = self.event_value['reason']\n        self.data['message'] = self.event_value['message']\n        self.data['first_timestamp'] = self.event_value['firstTimestamp']\n        self.data['last_timestamp'] = self.event_value['lastTimestamp']\n        self.data['count'] = self.event_value['count']\n        self.data['type'] = self.event_value['type']\n        self.data['event_time'] = self.event_value['eventTime']\n        self.data['pod_hostname'] = text['EventTags']['hostname']\n        self.data['pod_name'] = text['EventTags']['pod_name']\n\n    def convert(self):\n        msg_markdown = f\"\"\"\n        *Kubernetes Cluster Event*\n    `Kind: {self.data['kind']}`\n    `Namescodeace: {self.data['namespace']}`\n    `Reason: {self.data['reason']}`\n    `Timestamp: {self.data['first_timestamp']} to {self.data['last_timestamp']}`\n    `Count: {self.data['count']}`\n    `EventType: {self.data['type']}`\n    `EventTime: {self.data['event_time']}`\n    `PodHostname: {self.data['pod_hostname']}`\n    `PodName: {self.data['pod_name']}`\n    `Message: {self.data['message']}`\n\"\"\"\n        return msg_markdown\n\nasync def send_message(text):\n    try:\n        # Core: get message from Kafka,and filter message\n        convert_text = json.loads(text.decode('utf8').replace('\\\\n', ''))\n        msg_instance = FilterMsg(convert_text)\n        msg = msg_instance.convert()\n        send_result = bot.send_message(chat_id=chat_id, text=msg, parse_mode='MarkdownV2')\n        return send_result\n    except KeyError as e:\n        msg = \"Unknow message..\"\n        send_result = bot.send_message(chat_id=chat_id, text=msg)\n        return send_result\n    except Exception as e:\n        print(e.__str__())\n        #traceback.print_exc()\n        print('send message to telegram failed,please check.')\n\nif __name__ == '__main__':\n    text = b''\n    text = json.loads(text.decode('utf8').replace('\\\\n', ''))\n    send_result = asyncio.run(send_message(text))\n    print(send_result)\n\n# get_events.py 文件\nfrom kafka import KafkaConsumer, TopicPartition\nfrom telegrambot import send_message\nimport asyncio\n\nclass KConsumer(object):\n    \"\"\"kafka consumer instance\"\"\"\n    def __init__(self, topic, group_id, bootstrap_servers, auto_offset_reset, enable_auto_commit=False):\n        \"\"\"\n        :param topic:\n        :param group_id:\n        :param bootstrap_servers:\n        \"\"\"\n        self.consumer = KafkaConsumer(\n            topic,\n            bootstrap_servers=bootstrap_servers,\n            group_id=group_id,\n            auto_offset_reset=auto_offset_reset,\n            enable_auto_commit=enable_auto_commit,\n            consumer_timeout_ms=10000\n        )\n        self.tp = TopicPartition(topic, 0)\n\n    def start_consumer(self):\n        while True:\n            try:\n                # 手动拉取消息，间隔时间30s，然后手动 commit 提交当前 offset\n                msg_list_dict = self.consumer.poll(timeout_ms=30000)\n                for tp, msg_list in msg_list_dict.items():\n                    for msg in msg_list: \n                        ### core operate,send message to telegram\n                        send_result = asyncio.run(send_message(msg.value))\n                        print(send_result)\n                #print(f\"current offset is {self.consumer.position(tp)}\")\n                self.consumer.commit()\n            except Exception as e:\n                print('ERROR: get cluster events failed,please check.')\n\n    def close_consumer(self):\n        try:\n            self.consumer.unsubscribe()\n            self.consumer.close()\n        except:\n            print(\"consumer stop failed,please check.\")\n\nif __name__ == '__main__':\n    # env，中间件配置信息\n    topic = 'yakirtopic'\n    bootstrap_servers = 'yakir-kafka-headless:9092'\n    group_id = 'yakir1.group'\n    auto_offset_reset = 'earliest'\n    enable_auto_commit = False\n\n    # start\n    consumer = KConsumer(topic, group_id=group_id, bootstrap_servers=bootstrap_servers, auto_offset_reset=auto_offset_reset, enable_auto_commit=enable_auto_commit)\n    consumer.start_consumer()\n    # stop\n    #consumer.close_consumer()\n```\n\n+ Dockerfile 配置\n\n```dockerfile\nFROM python:3.8\n\n# Set an environment variable \nENV APP /app\n\n# Create the directory\nRUN mkdir $APP\nWORKDIR $APP\n\n# Expose the port uWSGI will listen on\n#EXPOSE 5000\n\n# Copy the requirements file in order to install\n# Python dependencies\n#COPY requirements.txt .\nCOPY . .\nRUN pip install --upgrade pip && pip install --no-cache-dir -r requirements.txt\n\n# Finally, we run uWSGI with the ini file\n#CMD [\"sleep\", \"infinity\"]\nCMD [\"python\", \"get_events.py\"]\n```\n\n+ 打包镜像，启动验证\n\n```shell\n# 编译源码打包镜像步骤\ncd /opt/yakir/kube-eventer-py/ && mkdir APP-META\nrm -f APP-META/*.py && cp *.py APP-META/\n\ncd APP-META && build -t kube-eventer-telegrambot:latest .\n\n# 启动镜像（docker 或 kubectl）\ncat > kube-eventer-telegrambot.yaml << \"EOF\"\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: yakir-kube-eventer\n  namespace: default\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: yakir-kube-eventer\n  template:\n    metadata:\n      labels:\n        app: yakir-kube-eventer\n    spec:\n      containers:\n        - image: kube-eventer-telegrambot:latest\n          name: yakir-kube-eventer\n          env:\n          - name: TZ\n            value: \"Asia/Shanghai\" \n      volumes:\n        - name: localtime\n          hostPath:\n            path: /etc/localtime\n        - name: zoneinfo\n          hostPath:\n            path: /usr/share/zoneinfo\nEOF\n# 验证启动结果\nkubectl apply -f kube-eventer-telegrambot.yaml\nkubectl get pod                               \nNAME                                  READY   STATUS    RESTARTS        AGE\nyakir-kube-eventer-589bf867bc-tgs5l   1/1     Running   0               27\n```\n\n+ 事件消息接收验证\n\n{% asset_img telegram.png %}\n\n### 三、后续\nxxxx\n","source":"_posts/kube-eventer.md","raw":"---\ntitle: Kubernetes - kube-eventer 事件中心组件\ncategories:\n  - CNCF\ntags:\n  - Kubernetes\nabbrlink: 2ead\ndate: 2022-09-30 21:42:20\n---\n### 一、背景\n\n#### 概述\n\n+ 什么是事件：Kubernetes 的架构设计基于状态机，不同的状态之间进行转换则会生成相应的事件，正常的状态之间转换会生成 Normal 等级的事件，正常状态与异常状态之间的转换会生成Warning等级的事件。\n\n+ kube-eventer 组件：Alicloud开源组件，用于获取 Kubernetes 集群中事件消息，并转存至自定义中间件或存储中。（Kubernetes 集群默认只保存1小时内事件）\n\n+ 组件官方地址：https://github.com/AliyunContainerService/kube-eventer\n\n#### 部署前提与软件\n\n| 名称                               | 功能                         | 备注               |\n| -------------------------------- | -------------------------- | ---------------- |\n| Kubernetes 集群                           | 应用集群                       | 使用 minikube 测试集群 |\n| kube-eventer                     | 收集 Kubernetes 集群事件                | 集群第三方组件          |\n| Kafka / Elasticsearch / influxDB | 中间件：存储事件消息                 | 存储组件（选型 Kafka）   |\n| kube-eventer-py                  | 从队列获取事件消息发送至 telegram 告警群组 | 事件消费者            |\n\n<!--more-->\n### 二、安装部署步骤\n\n#### 1）minikube 集群部署\n\n参考：https://minikube.sigs.k8s.io/docs/start/\n\n#### 2）存储中间件部署（Kafka）\n\n使用 helm 部署 Kafka\n\n```shell\n# 添加 helm 仓库\nhelm repo add bitnami https://charts.bitnami.com/bitnami\n\n# 拉取 Kafka chart 包并解压\nmkdir /opt/helm_chats && cd /opt/helm_chats \nhelm pull bitnami/kafka && tar xf kafka-18.2.0.tgz && rm -rf kafka-18.2.0.tgz\n\n# 修改关键配置信息，启动 Kafka\n# 展示部分关键配置\ncat ./values.yaml  \n...\n...\n# Kafka 启动配置文件，通过 Configmap 挂载\nconfig: |-\n  broker.id=0\n  listeners=INTERNAL://:9093,CLIENT://:9092\n  advertised.listeners=INTERNAL://yakir-kafka-0.yakir-kafka-headless.default.svc.cluster.local:9093,CLIENT://yakir-kafka-0.yakir-kafka-headless.default.svc.cluster.local:9092\n  listener.security.protocol.map=INTERNAL:PLAINTEXT,CLIENT:PLAINTEXT\n  num.network.threads=5\n  num.io.threads=10\n  socket.send.buffer.bytes=102400\n  socket.receive.buffer.bytes=102400\n  socket.request.max.bytes=104857600\n  log.dirs=/bitnami/kafka/data\n  num.partitions=1\n  num.recovery.threads.per.data.dir=1\n  offsets.topic.replication.factor=1\n  transaction.state.log.replication.factor=1\n  transaction.state.log.min.isr=1\n  log.flush.interval.messages=10000\n  log.flush.interval.ms=1000\n  log.retention.hours=168   # 保留队列数据时间，默认为7天\n  log.retention.bytes=1073741824\n  log.segment.bytes=1073741824\n  log.retention.check.interval.ms=300000\n  zookeeper.connect=yakir-kafka-zookeeper\n  zookeeper.connection.timeout.ms=6000\n  group.initial.rebalance.delay.ms=0\n  allow.everyone.if.no.acl.found=true\n  auto.create.topics.enable=true\n  default.replication.factor=1\n  delete.topic.enable=true   # 超时时间后是否自动删除 topic 数据\n  inter.broker.listener.name=INTERNAL\n  log.retention.check.intervals.ms=300000\n  max.partition.fetch.bytes=1048576\n  max.request.size=1048576\n  message.max.bytes=1000012\n  sasl.enabled.mechanisms=PLAIN,SCRAM-SHA-256,SCRAM-SHA-512\n  sasl.mechanism.inter.broker.protocol=\n  super.users=User:admin\n...\n...\npersistence:\n  enabled: true\n  existingClaim: \"\"\n  storageClass: \"standard\"   # 挂载持久化存储类\n...\n...\nzookeeper:\n  enabled: true\n  replicaCount: 1\n  auth:\n    client:\n      enabled: false\n      clientUser: \"\"\n      clientPassword: \"\"\n      serverUsers: \"\"\n      serverPasswords: \"\"\n  persistence:\n    enabled: true\n    storageClass: \"standard\"   # 挂载持久化存储类，miniku 默认已有。\n\n\n# 部署与验证\nhelm install yakir-kafka .\n# 验证部署状态，查看是否为正常 Running 状态\nkubectl get pod  \nNAME                                  READY   STATUS    RESTARTS       AGE\nyakir-kafka-0                         1/1     Running   0              171m\nyakir-kafka-zookeeper-0               1/1     Running   6 (168m ago)   10d\n```\n\n#### 3）kube-eventer 部署\n\n+ 获取官方 YAML 资源文件进行部署\n\n```shell\ncat > kube-eventer.yaml << \"EOF\"\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    name: kube-eventer\n  name: kube-eventer\n  namespace: kube-system\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: kube-eventer\n  template:\n    metadata:\n      labels:\n        app: kube-eventer\n      annotations:      \n        #scheduler.alpha.kubernetes.io/critical-pod: ''\n        priorityClassName: ''\n    spec:\n      dnsPolicy: ClusterFirstWithHostNet\n      serviceAccount: kube-eventer\n      containers:\n        - image: registry.aliyuncs.com/acs/kube-eventer-amd64:v1.2.0-484d9cd-aliyun\n          name: kube-eventer\n          command:\n            - \"/kube-eventer\"\n            - \"--source=kubernetes:https://kubernetes.default\"\n            # 存储消息中间件配置，根据环境进行配置\n            - --sink=kafka:?brokers=yakir-kafka-headless.default:9092&eventstopic=yakirtopic\n          env:\n          # If TZ is assigned, set the TZ value as the time zone\n          - name: TZ\n            value: \"Asia/Shanghai\" \n          volumeMounts:\n            - name: localtime\n              mountPath: /etc/localtime\n              readOnly: true\n            - name: zoneinfo\n              mountPath: /usr/share/zoneinfo\n              readOnly: true\n          resources:\n            requests:\n              cpu: 100m\n              memory: 100Mi\n            limits:\n              cpu: 500m\n              memory: 250Mi\n      volumes:\n        - name: localtime\n          hostPath:\n            path: /etc/localtime\n        - name: zoneinfo\n          hostPath:\n            path: /usr/share/zoneinfo\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: kube-eventer\nrules:\n  - apiGroups:\n      - \"\"\n    resources:\n      - configmaps\n      - events\n    verbs:\n      - get\n      - list\n      - watch\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: kube-eventer\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: kube-eventer\nsubjects:\n  - kind: ServiceAccount\n    name: kube-eventer\n    namespace: kube-system\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: kube-eventer\n  namespace: kube-system\nEOF\n\n# 部署资源，默认部署至 kube-system namespace 中\nkubectl apply -f kube-eventer.yaml\n# 验证部署状态\nkubectl get pod -n kube-system\nNAME                               READY   STATUS    RESTARTS        AGE\nkube-eventer-69455778cd-cvr9w      1/1     Running   0               8d\n```\n\n#### 4）从消息队列获取事件，发送至 telegram\n\n+ telegram 机器人以及告警群组创建\n\n> 参考\n> \n> 1、机器人创建：https://cloud.tencent.com/developer/article/1835051\n> \n> 2、telegram python SDK：https://github.com/python-telegram-bot/python-telegram-bot\n\n+ Python 脚本信息\n\n```python\n# telegrambot.py 文件\nimport asyncio\nimport telegram\nimport json\nimport traceback\n\nTOKEN = \"xxxxxx\"\nchat_id = \"-xxx\"\nbot = telegram.Bot(token=TOKEN)\n\n\nclass FilterMsg(object):\n    def __init__(self, text):\n        self.event_value = json.loads(text['EventValue'])\n\n        self.data = dict()\n        self.data['kind'] = self.event_value['involvedObject']['kind']\n        self.data['namespace'] = self.event_value['involvedObject']['namespace']\n        self.data['reason'] = self.event_value['reason']\n        self.data['message'] = self.event_value['message']\n        self.data['first_timestamp'] = self.event_value['firstTimestamp']\n        self.data['last_timestamp'] = self.event_value['lastTimestamp']\n        self.data['count'] = self.event_value['count']\n        self.data['type'] = self.event_value['type']\n        self.data['event_time'] = self.event_value['eventTime']\n        self.data['pod_hostname'] = text['EventTags']['hostname']\n        self.data['pod_name'] = text['EventTags']['pod_name']\n\n    def convert(self):\n        msg_markdown = f\"\"\"\n        *Kubernetes Cluster Event*\n    `Kind: {self.data['kind']}`\n    `Namescodeace: {self.data['namespace']}`\n    `Reason: {self.data['reason']}`\n    `Timestamp: {self.data['first_timestamp']} to {self.data['last_timestamp']}`\n    `Count: {self.data['count']}`\n    `EventType: {self.data['type']}`\n    `EventTime: {self.data['event_time']}`\n    `PodHostname: {self.data['pod_hostname']}`\n    `PodName: {self.data['pod_name']}`\n    `Message: {self.data['message']}`\n\"\"\"\n        return msg_markdown\n\nasync def send_message(text):\n    try:\n        # Core: get message from Kafka,and filter message\n        convert_text = json.loads(text.decode('utf8').replace('\\\\n', ''))\n        msg_instance = FilterMsg(convert_text)\n        msg = msg_instance.convert()\n        send_result = bot.send_message(chat_id=chat_id, text=msg, parse_mode='MarkdownV2')\n        return send_result\n    except KeyError as e:\n        msg = \"Unknow message..\"\n        send_result = bot.send_message(chat_id=chat_id, text=msg)\n        return send_result\n    except Exception as e:\n        print(e.__str__())\n        #traceback.print_exc()\n        print('send message to telegram failed,please check.')\n\nif __name__ == '__main__':\n    text = b''\n    text = json.loads(text.decode('utf8').replace('\\\\n', ''))\n    send_result = asyncio.run(send_message(text))\n    print(send_result)\n\n# get_events.py 文件\nfrom kafka import KafkaConsumer, TopicPartition\nfrom telegrambot import send_message\nimport asyncio\n\nclass KConsumer(object):\n    \"\"\"kafka consumer instance\"\"\"\n    def __init__(self, topic, group_id, bootstrap_servers, auto_offset_reset, enable_auto_commit=False):\n        \"\"\"\n        :param topic:\n        :param group_id:\n        :param bootstrap_servers:\n        \"\"\"\n        self.consumer = KafkaConsumer(\n            topic,\n            bootstrap_servers=bootstrap_servers,\n            group_id=group_id,\n            auto_offset_reset=auto_offset_reset,\n            enable_auto_commit=enable_auto_commit,\n            consumer_timeout_ms=10000\n        )\n        self.tp = TopicPartition(topic, 0)\n\n    def start_consumer(self):\n        while True:\n            try:\n                # 手动拉取消息，间隔时间30s，然后手动 commit 提交当前 offset\n                msg_list_dict = self.consumer.poll(timeout_ms=30000)\n                for tp, msg_list in msg_list_dict.items():\n                    for msg in msg_list: \n                        ### core operate,send message to telegram\n                        send_result = asyncio.run(send_message(msg.value))\n                        print(send_result)\n                #print(f\"current offset is {self.consumer.position(tp)}\")\n                self.consumer.commit()\n            except Exception as e:\n                print('ERROR: get cluster events failed,please check.')\n\n    def close_consumer(self):\n        try:\n            self.consumer.unsubscribe()\n            self.consumer.close()\n        except:\n            print(\"consumer stop failed,please check.\")\n\nif __name__ == '__main__':\n    # env，中间件配置信息\n    topic = 'yakirtopic'\n    bootstrap_servers = 'yakir-kafka-headless:9092'\n    group_id = 'yakir1.group'\n    auto_offset_reset = 'earliest'\n    enable_auto_commit = False\n\n    # start\n    consumer = KConsumer(topic, group_id=group_id, bootstrap_servers=bootstrap_servers, auto_offset_reset=auto_offset_reset, enable_auto_commit=enable_auto_commit)\n    consumer.start_consumer()\n    # stop\n    #consumer.close_consumer()\n```\n\n+ Dockerfile 配置\n\n```dockerfile\nFROM python:3.8\n\n# Set an environment variable \nENV APP /app\n\n# Create the directory\nRUN mkdir $APP\nWORKDIR $APP\n\n# Expose the port uWSGI will listen on\n#EXPOSE 5000\n\n# Copy the requirements file in order to install\n# Python dependencies\n#COPY requirements.txt .\nCOPY . .\nRUN pip install --upgrade pip && pip install --no-cache-dir -r requirements.txt\n\n# Finally, we run uWSGI with the ini file\n#CMD [\"sleep\", \"infinity\"]\nCMD [\"python\", \"get_events.py\"]\n```\n\n+ 打包镜像，启动验证\n\n```shell\n# 编译源码打包镜像步骤\ncd /opt/yakir/kube-eventer-py/ && mkdir APP-META\nrm -f APP-META/*.py && cp *.py APP-META/\n\ncd APP-META && build -t kube-eventer-telegrambot:latest .\n\n# 启动镜像（docker 或 kubectl）\ncat > kube-eventer-telegrambot.yaml << \"EOF\"\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: yakir-kube-eventer\n  namespace: default\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: yakir-kube-eventer\n  template:\n    metadata:\n      labels:\n        app: yakir-kube-eventer\n    spec:\n      containers:\n        - image: kube-eventer-telegrambot:latest\n          name: yakir-kube-eventer\n          env:\n          - name: TZ\n            value: \"Asia/Shanghai\" \n      volumes:\n        - name: localtime\n          hostPath:\n            path: /etc/localtime\n        - name: zoneinfo\n          hostPath:\n            path: /usr/share/zoneinfo\nEOF\n# 验证启动结果\nkubectl apply -f kube-eventer-telegrambot.yaml\nkubectl get pod                               \nNAME                                  READY   STATUS    RESTARTS        AGE\nyakir-kube-eventer-589bf867bc-tgs5l   1/1     Running   0               27\n```\n\n+ 事件消息接收验证\n\n{% asset_img telegram.png %}\n\n### 三、后续\nxxxx\n","slug":"kube-eventer","published":1,"updated":"2024-01-21T15:28:43.156Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm0fat8zq001zs0nj772x7w9v","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"一、背景\"><a href=\"#一、背景\" class=\"headerlink\" title=\"一、背景\"></a>一、背景</h3><h4 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h4><ul>\n<li><p>什么是事件：Kubernetes 的架构设计基于状态机，不同的状态之间进行转换则会生成相应的事件，正常的状态之间转换会生成 Normal 等级的事件，正常状态与异常状态之间的转换会生成Warning等级的事件。</p>\n</li>\n<li><p>kube-eventer 组件：Alicloud开源组件，用于获取 Kubernetes 集群中事件消息，并转存至自定义中间件或存储中。（Kubernetes 集群默认只保存1小时内事件）</p>\n</li>\n<li><p>组件官方地址：<a href=\"https://github.com/AliyunContainerService/kube-eventer\">https://github.com/AliyunContainerService/kube-eventer</a></p>\n</li>\n</ul>\n<h4 id=\"部署前提与软件\"><a href=\"#部署前提与软件\" class=\"headerlink\" title=\"部署前提与软件\"></a>部署前提与软件</h4><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>功能</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Kubernetes 集群</td>\n<td>应用集群</td>\n<td>使用 minikube 测试集群</td>\n</tr>\n<tr>\n<td>kube-eventer</td>\n<td>收集 Kubernetes 集群事件</td>\n<td>集群第三方组件</td>\n</tr>\n<tr>\n<td>Kafka &#x2F; Elasticsearch &#x2F; influxDB</td>\n<td>中间件：存储事件消息</td>\n<td>存储组件（选型 Kafka）</td>\n</tr>\n<tr>\n<td>kube-eventer-py</td>\n<td>从队列获取事件消息发送至 telegram 告警群组</td>\n<td>事件消费者</td>\n</tr>\n</tbody></table>\n<span id=\"more\"></span>\n<h3 id=\"二、安装部署步骤\"><a href=\"#二、安装部署步骤\" class=\"headerlink\" title=\"二、安装部署步骤\"></a>二、安装部署步骤</h3><h4 id=\"1）minikube-集群部署\"><a href=\"#1）minikube-集群部署\" class=\"headerlink\" title=\"1）minikube 集群部署\"></a>1）minikube 集群部署</h4><p>参考：<a href=\"https://minikube.sigs.k8s.io/docs/start/\">https://minikube.sigs.k8s.io/docs/start/</a></p>\n<h4 id=\"2）存储中间件部署（Kafka）\"><a href=\"#2）存储中间件部署（Kafka）\" class=\"headerlink\" title=\"2）存储中间件部署（Kafka）\"></a>2）存储中间件部署（Kafka）</h4><p>使用 helm 部署 Kafka</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加 helm 仓库</span></span><br><span class=\"line\">helm repo add bitnami https://charts.bitnami.com/bitnami</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">拉取 Kafka chart 包并解压</span></span><br><span class=\"line\">mkdir /opt/helm_chats &amp;&amp; cd /opt/helm_chats </span><br><span class=\"line\">helm pull bitnami/kafka &amp;&amp; tar xf kafka-18.2.0.tgz &amp;&amp; rm -rf kafka-18.2.0.tgz</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改关键配置信息，启动 Kafka</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">展示部分关键配置</span></span><br><span class=\"line\">cat ./values.yaml  </span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Kafka 启动配置文件，通过 Configmap 挂载</span></span><br><span class=\"line\">config: |-</span><br><span class=\"line\">  broker.id=0</span><br><span class=\"line\">  listeners=INTERNAL://:9093,CLIENT://:9092</span><br><span class=\"line\">  advertised.listeners=INTERNAL://yakir-kafka-0.yakir-kafka-headless.default.svc.cluster.local:9093,CLIENT://yakir-kafka-0.yakir-kafka-headless.default.svc.cluster.local:9092</span><br><span class=\"line\">  listener.security.protocol.map=INTERNAL:PLAINTEXT,CLIENT:PLAINTEXT</span><br><span class=\"line\">  num.network.threads=5</span><br><span class=\"line\">  num.io.threads=10</span><br><span class=\"line\">  socket.send.buffer.bytes=102400</span><br><span class=\"line\">  socket.receive.buffer.bytes=102400</span><br><span class=\"line\">  socket.request.max.bytes=104857600</span><br><span class=\"line\">  log.dirs=/bitnami/kafka/data</span><br><span class=\"line\">  num.partitions=1</span><br><span class=\"line\">  num.recovery.threads.per.data.dir=1</span><br><span class=\"line\">  offsets.topic.replication.factor=1</span><br><span class=\"line\">  transaction.state.log.replication.factor=1</span><br><span class=\"line\">  transaction.state.log.min.isr=1</span><br><span class=\"line\">  log.flush.interval.messages=10000</span><br><span class=\"line\">  log.flush.interval.ms=1000</span><br><span class=\"line\">  log.retention.hours=168   # 保留队列数据时间，默认为7天</span><br><span class=\"line\">  log.retention.bytes=1073741824</span><br><span class=\"line\">  log.segment.bytes=1073741824</span><br><span class=\"line\">  log.retention.check.interval.ms=300000</span><br><span class=\"line\">  zookeeper.connect=yakir-kafka-zookeeper</span><br><span class=\"line\">  zookeeper.connection.timeout.ms=6000</span><br><span class=\"line\">  group.initial.rebalance.delay.ms=0</span><br><span class=\"line\">  allow.everyone.if.no.acl.found=true</span><br><span class=\"line\">  auto.create.topics.enable=true</span><br><span class=\"line\">  default.replication.factor=1</span><br><span class=\"line\">  delete.topic.enable=true   # 超时时间后是否自动删除 topic 数据</span><br><span class=\"line\">  inter.broker.listener.name=INTERNAL</span><br><span class=\"line\">  log.retention.check.intervals.ms=300000</span><br><span class=\"line\">  max.partition.fetch.bytes=1048576</span><br><span class=\"line\">  max.request.size=1048576</span><br><span class=\"line\">  message.max.bytes=1000012</span><br><span class=\"line\">  sasl.enabled.mechanisms=PLAIN,SCRAM-SHA-256,SCRAM-SHA-512</span><br><span class=\"line\">  sasl.mechanism.inter.broker.protocol=</span><br><span class=\"line\">  super.users=User:admin</span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\">persistence:</span><br><span class=\"line\">  enabled: true</span><br><span class=\"line\">  existingClaim: &quot;&quot;</span><br><span class=\"line\">  storageClass: &quot;standard&quot;   # 挂载持久化存储类</span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\">zookeeper:</span><br><span class=\"line\">  enabled: true</span><br><span class=\"line\">  replicaCount: 1</span><br><span class=\"line\">  auth:</span><br><span class=\"line\">    client:</span><br><span class=\"line\">      enabled: false</span><br><span class=\"line\">      clientUser: &quot;&quot;</span><br><span class=\"line\">      clientPassword: &quot;&quot;</span><br><span class=\"line\">      serverUsers: &quot;&quot;</span><br><span class=\"line\">      serverPasswords: &quot;&quot;</span><br><span class=\"line\">  persistence:</span><br><span class=\"line\">    enabled: true</span><br><span class=\"line\">    storageClass: &quot;standard&quot;   # 挂载持久化存储类，miniku 默认已有。</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">部署与验证</span></span><br><span class=\"line\">helm install yakir-kafka .</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">验证部署状态，查看是否为正常 Running 状态</span></span><br><span class=\"line\">kubectl get pod  </span><br><span class=\"line\">NAME                                  READY   STATUS    RESTARTS       AGE</span><br><span class=\"line\">yakir-kafka-0                         1/1     Running   0              171m</span><br><span class=\"line\">yakir-kafka-zookeeper-0               1/1     Running   6 (168m ago)   10d</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3）kube-eventer-部署\"><a href=\"#3）kube-eventer-部署\" class=\"headerlink\" title=\"3）kube-eventer 部署\"></a>3）kube-eventer 部署</h4><ul>\n<li>获取官方 YAML 资源文件进行部署</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; kube-eventer.yaml &lt;&lt; &quot;EOF&quot;</span><br><span class=\"line\">apiVersion: apps/v1</span><br><span class=\"line\">kind: Deployment</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    name: kube-eventer</span><br><span class=\"line\">  name: kube-eventer</span><br><span class=\"line\">  namespace: kube-system</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  replicas: 1</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      app: kube-eventer</span><br><span class=\"line\">  template:</span><br><span class=\"line\">    metadata:</span><br><span class=\"line\">      labels:</span><br><span class=\"line\">        app: kube-eventer</span><br><span class=\"line\">      annotations:      </span><br><span class=\"line\">        #scheduler.alpha.kubernetes.io/critical-pod: &#x27;&#x27;</span><br><span class=\"line\">        priorityClassName: &#x27;&#x27;</span><br><span class=\"line\">    spec:</span><br><span class=\"line\">      dnsPolicy: ClusterFirstWithHostNet</span><br><span class=\"line\">      serviceAccount: kube-eventer</span><br><span class=\"line\">      containers:</span><br><span class=\"line\">        - image: registry.aliyuncs.com/acs/kube-eventer-amd64:v1.2.0-484d9cd-aliyun</span><br><span class=\"line\">          name: kube-eventer</span><br><span class=\"line\">          command:</span><br><span class=\"line\">            - &quot;/kube-eventer&quot;</span><br><span class=\"line\">            - &quot;--source=kubernetes:https://kubernetes.default&quot;</span><br><span class=\"line\">            # 存储消息中间件配置，根据环境进行配置</span><br><span class=\"line\">            - --sink=kafka:?brokers=yakir-kafka-headless.default:9092&amp;eventstopic=yakirtopic</span><br><span class=\"line\">          env:</span><br><span class=\"line\">          # If TZ is assigned, set the TZ value as the time zone</span><br><span class=\"line\">          - name: TZ</span><br><span class=\"line\">            value: &quot;Asia/Shanghai&quot; </span><br><span class=\"line\">          volumeMounts:</span><br><span class=\"line\">            - name: localtime</span><br><span class=\"line\">              mountPath: /etc/localtime</span><br><span class=\"line\">              readOnly: true</span><br><span class=\"line\">            - name: zoneinfo</span><br><span class=\"line\">              mountPath: /usr/share/zoneinfo</span><br><span class=\"line\">              readOnly: true</span><br><span class=\"line\">          resources:</span><br><span class=\"line\">            requests:</span><br><span class=\"line\">              cpu: 100m</span><br><span class=\"line\">              memory: 100Mi</span><br><span class=\"line\">            limits:</span><br><span class=\"line\">              cpu: 500m</span><br><span class=\"line\">              memory: 250Mi</span><br><span class=\"line\">      volumes:</span><br><span class=\"line\">        - name: localtime</span><br><span class=\"line\">          hostPath:</span><br><span class=\"line\">            path: /etc/localtime</span><br><span class=\"line\">        - name: zoneinfo</span><br><span class=\"line\">          hostPath:</span><br><span class=\"line\">            path: /usr/share/zoneinfo</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class=\"line\">kind: ClusterRole</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: kube-eventer</span><br><span class=\"line\">rules:</span><br><span class=\"line\">  - apiGroups:</span><br><span class=\"line\">      - &quot;&quot;</span><br><span class=\"line\">    resources:</span><br><span class=\"line\">      - configmaps</span><br><span class=\"line\">      - events</span><br><span class=\"line\">    verbs:</span><br><span class=\"line\">      - get</span><br><span class=\"line\">      - list</span><br><span class=\"line\">      - watch</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class=\"line\">kind: ClusterRoleBinding</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: kube-eventer</span><br><span class=\"line\">roleRef:</span><br><span class=\"line\">  apiGroup: rbac.authorization.k8s.io</span><br><span class=\"line\">  kind: ClusterRole</span><br><span class=\"line\">  name: kube-eventer</span><br><span class=\"line\">subjects:</span><br><span class=\"line\">  - kind: ServiceAccount</span><br><span class=\"line\">    name: kube-eventer</span><br><span class=\"line\">    namespace: kube-system</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: ServiceAccount</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: kube-eventer</span><br><span class=\"line\">  namespace: kube-system</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">部署资源，默认部署至 kube-system namespace 中</span></span><br><span class=\"line\">kubectl apply -f kube-eventer.yaml</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">验证部署状态</span></span><br><span class=\"line\">kubectl get pod -n kube-system</span><br><span class=\"line\">NAME                               READY   STATUS    RESTARTS        AGE</span><br><span class=\"line\">kube-eventer-69455778cd-cvr9w      1/1     Running   0               8d</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4）从消息队列获取事件，发送至-telegram\"><a href=\"#4）从消息队列获取事件，发送至-telegram\" class=\"headerlink\" title=\"4）从消息队列获取事件，发送至 telegram\"></a>4）从消息队列获取事件，发送至 telegram</h4><ul>\n<li>telegram 机器人以及告警群组创建</li>\n</ul>\n<blockquote>\n<p>参考</p>\n<p>1、机器人创建：<a href=\"https://cloud.tencent.com/developer/article/1835051\">https://cloud.tencent.com/developer/article/1835051</a></p>\n<p>2、telegram python SDK：<a href=\"https://github.com/python-telegram-bot/python-telegram-bot\">https://github.com/python-telegram-bot/python-telegram-bot</a></p>\n</blockquote>\n<ul>\n<li>Python 脚本信息</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># telegrambot.py 文件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"><span class=\"keyword\">import</span> telegram</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> traceback</span><br><span class=\"line\"></span><br><span class=\"line\">TOKEN = <span class=\"string\">&quot;xxxxxx&quot;</span></span><br><span class=\"line\">chat_id = <span class=\"string\">&quot;-xxx&quot;</span></span><br><span class=\"line\">bot = telegram.Bot(token=TOKEN)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FilterMsg</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, text</span>):</span><br><span class=\"line\">        self.event_value = json.loads(text[<span class=\"string\">&#x27;EventValue&#x27;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">        self.data = <span class=\"built_in\">dict</span>()</span><br><span class=\"line\">        self.data[<span class=\"string\">&#x27;kind&#x27;</span>] = self.event_value[<span class=\"string\">&#x27;involvedObject&#x27;</span>][<span class=\"string\">&#x27;kind&#x27;</span>]</span><br><span class=\"line\">        self.data[<span class=\"string\">&#x27;namespace&#x27;</span>] = self.event_value[<span class=\"string\">&#x27;involvedObject&#x27;</span>][<span class=\"string\">&#x27;namespace&#x27;</span>]</span><br><span class=\"line\">        self.data[<span class=\"string\">&#x27;reason&#x27;</span>] = self.event_value[<span class=\"string\">&#x27;reason&#x27;</span>]</span><br><span class=\"line\">        self.data[<span class=\"string\">&#x27;message&#x27;</span>] = self.event_value[<span class=\"string\">&#x27;message&#x27;</span>]</span><br><span class=\"line\">        self.data[<span class=\"string\">&#x27;first_timestamp&#x27;</span>] = self.event_value[<span class=\"string\">&#x27;firstTimestamp&#x27;</span>]</span><br><span class=\"line\">        self.data[<span class=\"string\">&#x27;last_timestamp&#x27;</span>] = self.event_value[<span class=\"string\">&#x27;lastTimestamp&#x27;</span>]</span><br><span class=\"line\">        self.data[<span class=\"string\">&#x27;count&#x27;</span>] = self.event_value[<span class=\"string\">&#x27;count&#x27;</span>]</span><br><span class=\"line\">        self.data[<span class=\"string\">&#x27;type&#x27;</span>] = self.event_value[<span class=\"string\">&#x27;type&#x27;</span>]</span><br><span class=\"line\">        self.data[<span class=\"string\">&#x27;event_time&#x27;</span>] = self.event_value[<span class=\"string\">&#x27;eventTime&#x27;</span>]</span><br><span class=\"line\">        self.data[<span class=\"string\">&#x27;pod_hostname&#x27;</span>] = text[<span class=\"string\">&#x27;EventTags&#x27;</span>][<span class=\"string\">&#x27;hostname&#x27;</span>]</span><br><span class=\"line\">        self.data[<span class=\"string\">&#x27;pod_name&#x27;</span>] = text[<span class=\"string\">&#x27;EventTags&#x27;</span>][<span class=\"string\">&#x27;pod_name&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">convert</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        msg_markdown = <span class=\"string\">f&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        *Kubernetes Cluster Event*</span></span><br><span class=\"line\"><span class=\"string\">    `Kind: <span class=\"subst\">&#123;self.data[<span class=\"string\">&#x27;kind&#x27;</span>]&#125;</span>`</span></span><br><span class=\"line\"><span class=\"string\">    `Namescodeace: <span class=\"subst\">&#123;self.data[<span class=\"string\">&#x27;namespace&#x27;</span>]&#125;</span>`</span></span><br><span class=\"line\"><span class=\"string\">    `Reason: <span class=\"subst\">&#123;self.data[<span class=\"string\">&#x27;reason&#x27;</span>]&#125;</span>`</span></span><br><span class=\"line\"><span class=\"string\">    `Timestamp: <span class=\"subst\">&#123;self.data[<span class=\"string\">&#x27;first_timestamp&#x27;</span>]&#125;</span> to <span class=\"subst\">&#123;self.data[<span class=\"string\">&#x27;last_timestamp&#x27;</span>]&#125;</span>`</span></span><br><span class=\"line\"><span class=\"string\">    `Count: <span class=\"subst\">&#123;self.data[<span class=\"string\">&#x27;count&#x27;</span>]&#125;</span>`</span></span><br><span class=\"line\"><span class=\"string\">    `EventType: <span class=\"subst\">&#123;self.data[<span class=\"string\">&#x27;type&#x27;</span>]&#125;</span>`</span></span><br><span class=\"line\"><span class=\"string\">    `EventTime: <span class=\"subst\">&#123;self.data[<span class=\"string\">&#x27;event_time&#x27;</span>]&#125;</span>`</span></span><br><span class=\"line\"><span class=\"string\">    `PodHostname: <span class=\"subst\">&#123;self.data[<span class=\"string\">&#x27;pod_hostname&#x27;</span>]&#125;</span>`</span></span><br><span class=\"line\"><span class=\"string\">    `PodName: <span class=\"subst\">&#123;self.data[<span class=\"string\">&#x27;pod_name&#x27;</span>]&#125;</span>`</span></span><br><span class=\"line\"><span class=\"string\">    `Message: <span class=\"subst\">&#123;self.data[<span class=\"string\">&#x27;message&#x27;</span>]&#125;</span>`</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg_markdown</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">send_message</span>(<span class=\"params\">text</span>):</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"comment\"># Core: get message from Kafka,and filter message</span></span><br><span class=\"line\">        convert_text = json.loads(text.decode(<span class=\"string\">&#x27;utf8&#x27;</span>).replace(<span class=\"string\">&#x27;\\\\n&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>))</span><br><span class=\"line\">        msg_instance = FilterMsg(convert_text)</span><br><span class=\"line\">        msg = msg_instance.convert()</span><br><span class=\"line\">        send_result = bot.send_message(chat_id=chat_id, text=msg, parse_mode=<span class=\"string\">&#x27;MarkdownV2&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> send_result</span><br><span class=\"line\">    <span class=\"keyword\">except</span> KeyError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        msg = <span class=\"string\">&quot;Unknow message..&quot;</span></span><br><span class=\"line\">        send_result = bot.send_message(chat_id=chat_id, text=msg)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> send_result</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(e.__str__())</span><br><span class=\"line\">        <span class=\"comment\">#traceback.print_exc()</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;send message to telegram failed,please check.&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    text = <span class=\"string\">b&#x27;&#x27;</span></span><br><span class=\"line\">    text = json.loads(text.decode(<span class=\"string\">&#x27;utf8&#x27;</span>).replace(<span class=\"string\">&#x27;\\\\n&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>))</span><br><span class=\"line\">    send_result = asyncio.run(send_message(text))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(send_result)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># get_events.py 文件</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> kafka <span class=\"keyword\">import</span> KafkaConsumer, TopicPartition</span><br><span class=\"line\"><span class=\"keyword\">from</span> telegrambot <span class=\"keyword\">import</span> send_message</span><br><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">KConsumer</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;kafka consumer instance&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, topic, group_id, bootstrap_servers, auto_offset_reset, enable_auto_commit=<span class=\"literal\">False</span></span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        :param topic:</span></span><br><span class=\"line\"><span class=\"string\">        :param group_id:</span></span><br><span class=\"line\"><span class=\"string\">        :param bootstrap_servers:</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        self.consumer = KafkaConsumer(</span><br><span class=\"line\">            topic,</span><br><span class=\"line\">            bootstrap_servers=bootstrap_servers,</span><br><span class=\"line\">            group_id=group_id,</span><br><span class=\"line\">            auto_offset_reset=auto_offset_reset,</span><br><span class=\"line\">            enable_auto_commit=enable_auto_commit,</span><br><span class=\"line\">            consumer_timeout_ms=<span class=\"number\">10000</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        self.tp = TopicPartition(topic, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">start_consumer</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                <span class=\"comment\"># 手动拉取消息，间隔时间30s，然后手动 commit 提交当前 offset</span></span><br><span class=\"line\">                msg_list_dict = self.consumer.poll(timeout_ms=<span class=\"number\">30000</span>)</span><br><span class=\"line\">                <span class=\"keyword\">for</span> tp, msg_list <span class=\"keyword\">in</span> msg_list_dict.items():</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> msg <span class=\"keyword\">in</span> msg_list: </span><br><span class=\"line\">                        <span class=\"comment\">### core operate,send message to telegram</span></span><br><span class=\"line\">                        send_result = asyncio.run(send_message(msg.value))</span><br><span class=\"line\">                        <span class=\"built_in\">print</span>(send_result)</span><br><span class=\"line\">                <span class=\"comment\">#print(f&quot;current offset is &#123;self.consumer.position(tp)&#125;&quot;)</span></span><br><span class=\"line\">                self.consumer.commit()</span><br><span class=\"line\">            <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;ERROR: get cluster events failed,please check.&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">close_consumer</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            self.consumer.unsubscribe()</span><br><span class=\"line\">            self.consumer.close()</span><br><span class=\"line\">        <span class=\"keyword\">except</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;consumer stop failed,please check.&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># env，中间件配置信息</span></span><br><span class=\"line\">    topic = <span class=\"string\">&#x27;yakirtopic&#x27;</span></span><br><span class=\"line\">    bootstrap_servers = <span class=\"string\">&#x27;yakir-kafka-headless:9092&#x27;</span></span><br><span class=\"line\">    group_id = <span class=\"string\">&#x27;yakir1.group&#x27;</span></span><br><span class=\"line\">    auto_offset_reset = <span class=\"string\">&#x27;earliest&#x27;</span></span><br><span class=\"line\">    enable_auto_commit = <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># start</span></span><br><span class=\"line\">    consumer = KConsumer(topic, group_id=group_id, bootstrap_servers=bootstrap_servers, auto_offset_reset=auto_offset_reset, enable_auto_commit=enable_auto_commit)</span><br><span class=\"line\">    consumer.start_consumer()</span><br><span class=\"line\">    <span class=\"comment\"># stop</span></span><br><span class=\"line\">    <span class=\"comment\">#consumer.close_consumer()</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Dockerfile 配置</li>\n</ul>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> python:<span class=\"number\">3.8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Set an environment variable </span></span><br><span class=\"line\"><span class=\"keyword\">ENV</span> APP /app</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Create the directory</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">mkdir</span> <span class=\"variable\">$APP</span></span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> <span class=\"variable\">$APP</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Expose the port uWSGI will listen on</span></span><br><span class=\"line\"><span class=\"comment\">#EXPOSE 5000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Copy the requirements file in order to install</span></span><br><span class=\"line\"><span class=\"comment\"># Python dependencies</span></span><br><span class=\"line\"><span class=\"comment\">#COPY requirements.txt .</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> . .</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> pip install --upgrade pip &amp;&amp; pip install --no-cache-dir -r requirements.txt</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Finally, we run uWSGI with the ini file</span></span><br><span class=\"line\"><span class=\"comment\">#CMD [&quot;sleep&quot;, &quot;infinity&quot;]</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"string\">&quot;python&quot;</span>, <span class=\"string\">&quot;get_events.py&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>打包镜像，启动验证</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编译源码打包镜像步骤</span></span><br><span class=\"line\">cd /opt/yakir/kube-eventer-py/ &amp;&amp; mkdir APP-META</span><br><span class=\"line\">rm -f APP-META/*.py &amp;&amp; cp *.py APP-META/</span><br><span class=\"line\"></span><br><span class=\"line\">cd APP-META &amp;&amp; build -t kube-eventer-telegrambot:latest .</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动镜像（docker 或 kubectl）</span></span><br><span class=\"line\">cat &gt; kube-eventer-telegrambot.yaml &lt;&lt; &quot;EOF&quot;</span><br><span class=\"line\">apiVersion: apps/v1</span><br><span class=\"line\">kind: Deployment</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: yakir-kube-eventer</span><br><span class=\"line\">  namespace: default</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  replicas: 1</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      app: yakir-kube-eventer</span><br><span class=\"line\">  template:</span><br><span class=\"line\">    metadata:</span><br><span class=\"line\">      labels:</span><br><span class=\"line\">        app: yakir-kube-eventer</span><br><span class=\"line\">    spec:</span><br><span class=\"line\">      containers:</span><br><span class=\"line\">        - image: kube-eventer-telegrambot:latest</span><br><span class=\"line\">          name: yakir-kube-eventer</span><br><span class=\"line\">          env:</span><br><span class=\"line\">          - name: TZ</span><br><span class=\"line\">            value: &quot;Asia/Shanghai&quot; </span><br><span class=\"line\">      volumes:</span><br><span class=\"line\">        - name: localtime</span><br><span class=\"line\">          hostPath:</span><br><span class=\"line\">            path: /etc/localtime</span><br><span class=\"line\">        - name: zoneinfo</span><br><span class=\"line\">          hostPath:</span><br><span class=\"line\">            path: /usr/share/zoneinfo</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">验证启动结果</span></span><br><span class=\"line\">kubectl apply -f kube-eventer-telegrambot.yaml</span><br><span class=\"line\">kubectl get pod                               </span><br><span class=\"line\">NAME                                  READY   STATUS    RESTARTS        AGE</span><br><span class=\"line\">yakir-kube-eventer-589bf867bc-tgs5l   1/1     Running   0               27</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>事件消息接收验证</li>\n</ul>\n\n\n<h3 id=\"三、后续\"><a href=\"#三、后续\" class=\"headerlink\" title=\"三、后续\"></a>三、后续</h3><p>xxxx</p>\n","site":{"data":{"footer":"","styles":".post {\n  margin-top: 50px;\n  margin-bottom: 50px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n.headband {\n  display: none;\n}\nbody {\n  background: url(\"/images/background.jpeg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\n.post-block.page {\n  margin-top: 40px;\n}\n.category-all-page {\n  box-shadow: 0px 0px 10px 0px rgba(0,0,0,0.5);\n  background-color: #797d7f;\n  padding: 20px 30px 60px 30px;\n  border-radius: 25px 25px 25px 25px;\n}\n.category-all-title {\n  font-family: Impact;\n  font-size: 24px;\n  color: #0ff;\n}\n.category-list {\n  overflow: auto;\n}\n.category-list li {\n  height: 100%;\n  float: left;\n  border-right: 3px solid #222;\n  padding: 0 20px;\n}\n.category-all ul li {\n  list-style: none !important;\n}\n.category-list li:last-child {\n  border-right: none;\n}\n.category-list li a {\n  font-size: 16px;\n  text-decoration: none;\n  color: #7fff00;\n  font-family: Helvetica, Verdana, sans-serif;\n  -webkit-transition: all 0.5s ease;\n  -moz-transition: all 0.5s ease;\n  -o-transition: all 0.5s ease;\n  -ms-transition: all 0.5s ease;\n  transition: all 0.5s ease;\n}\n.category-list li a:hover {\n  color: #000;\n}\n.category-list li.active a {\n  font-weight: bold;\n  color: #000;\n}\n.tag-cloud a {\n  box-shadow: 0 1px 3px #6f42c1, 0 1px 2px #d9534f;\n  padding: 2px 10px;\n  margin: 8px;\n  background: rgba(193,66,92,0);\n  border-bottom: none;\n  border-radius: 20px;\n}\ncode {\n  background: #555;\n  color: #fff;\n}\n","variables":""}},"length":10759,"excerpt":"<h3 id=\"一、背景\"><a href=\"#一、背景\" class=\"headerlink\" title=\"一、背景\"></a>一、背景</h3><h4 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h4><ul>\n<li><p>什么是事件：Kubernetes 的架构设计基于状态机，不同的状态之间进行转换则会生成相应的事件，正常的状态之间转换会生成 Normal 等级的事件，正常状态与异常状态之间的转换会生成Warning等级的事件。</p>\n</li>\n<li><p>kube-eventer 组件：Alicloud开源组件，用于获取 Kubernetes 集群中事件消息，并转存至自定义中间件或存储中。（Kubernetes 集群默认只保存1小时内事件）</p>\n</li>\n<li><p>组件官方地址：<a href=\"https://github.com/AliyunContainerService/kube-eventer\">https://github.com/AliyunContainerService/kube-eventer</a></p>\n</li>\n</ul>\n<h4 id=\"部署前提与软件\"><a href=\"#部署前提与软件\" class=\"headerlink\" title=\"部署前提与软件\"></a>部署前提与软件</h4><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>功能</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Kubernetes 集群</td>\n<td>应用集群</td>\n<td>使用 minikube 测试集群</td>\n</tr>\n<tr>\n<td>kube-eventer</td>\n<td>收集 Kubernetes 集群事件</td>\n<td>集群第三方组件</td>\n</tr>\n<tr>\n<td>Kafka &#x2F; Elasticsearch &#x2F; influxDB</td>\n<td>中间件：存储事件消息</td>\n<td>存储组件（选型 Kafka）</td>\n</tr>\n<tr>\n<td>kube-eventer-py</td>\n<td>从队列获取事件消息发送至 telegram 告警群组</td>\n<td>事件消费者</td>\n</tr>\n</tbody></table>","more":"<h3 id=\"二、安装部署步骤\"><a href=\"#二、安装部署步骤\" class=\"headerlink\" title=\"二、安装部署步骤\"></a>二、安装部署步骤</h3><h4 id=\"1）minikube-集群部署\"><a href=\"#1）minikube-集群部署\" class=\"headerlink\" title=\"1）minikube 集群部署\"></a>1）minikube 集群部署</h4><p>参考：<a href=\"https://minikube.sigs.k8s.io/docs/start/\">https://minikube.sigs.k8s.io/docs/start/</a></p>\n<h4 id=\"2）存储中间件部署（Kafka）\"><a href=\"#2）存储中间件部署（Kafka）\" class=\"headerlink\" title=\"2）存储中间件部署（Kafka）\"></a>2）存储中间件部署（Kafka）</h4><p>使用 helm 部署 Kafka</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加 helm 仓库</span></span><br><span class=\"line\">helm repo add bitnami https://charts.bitnami.com/bitnami</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">拉取 Kafka chart 包并解压</span></span><br><span class=\"line\">mkdir /opt/helm_chats &amp;&amp; cd /opt/helm_chats </span><br><span class=\"line\">helm pull bitnami/kafka &amp;&amp; tar xf kafka-18.2.0.tgz &amp;&amp; rm -rf kafka-18.2.0.tgz</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改关键配置信息，启动 Kafka</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">展示部分关键配置</span></span><br><span class=\"line\">cat ./values.yaml  </span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Kafka 启动配置文件，通过 Configmap 挂载</span></span><br><span class=\"line\">config: |-</span><br><span class=\"line\">  broker.id=0</span><br><span class=\"line\">  listeners=INTERNAL://:9093,CLIENT://:9092</span><br><span class=\"line\">  advertised.listeners=INTERNAL://yakir-kafka-0.yakir-kafka-headless.default.svc.cluster.local:9093,CLIENT://yakir-kafka-0.yakir-kafka-headless.default.svc.cluster.local:9092</span><br><span class=\"line\">  listener.security.protocol.map=INTERNAL:PLAINTEXT,CLIENT:PLAINTEXT</span><br><span class=\"line\">  num.network.threads=5</span><br><span class=\"line\">  num.io.threads=10</span><br><span class=\"line\">  socket.send.buffer.bytes=102400</span><br><span class=\"line\">  socket.receive.buffer.bytes=102400</span><br><span class=\"line\">  socket.request.max.bytes=104857600</span><br><span class=\"line\">  log.dirs=/bitnami/kafka/data</span><br><span class=\"line\">  num.partitions=1</span><br><span class=\"line\">  num.recovery.threads.per.data.dir=1</span><br><span class=\"line\">  offsets.topic.replication.factor=1</span><br><span class=\"line\">  transaction.state.log.replication.factor=1</span><br><span class=\"line\">  transaction.state.log.min.isr=1</span><br><span class=\"line\">  log.flush.interval.messages=10000</span><br><span class=\"line\">  log.flush.interval.ms=1000</span><br><span class=\"line\">  log.retention.hours=168   # 保留队列数据时间，默认为7天</span><br><span class=\"line\">  log.retention.bytes=1073741824</span><br><span class=\"line\">  log.segment.bytes=1073741824</span><br><span class=\"line\">  log.retention.check.interval.ms=300000</span><br><span class=\"line\">  zookeeper.connect=yakir-kafka-zookeeper</span><br><span class=\"line\">  zookeeper.connection.timeout.ms=6000</span><br><span class=\"line\">  group.initial.rebalance.delay.ms=0</span><br><span class=\"line\">  allow.everyone.if.no.acl.found=true</span><br><span class=\"line\">  auto.create.topics.enable=true</span><br><span class=\"line\">  default.replication.factor=1</span><br><span class=\"line\">  delete.topic.enable=true   # 超时时间后是否自动删除 topic 数据</span><br><span class=\"line\">  inter.broker.listener.name=INTERNAL</span><br><span class=\"line\">  log.retention.check.intervals.ms=300000</span><br><span class=\"line\">  max.partition.fetch.bytes=1048576</span><br><span class=\"line\">  max.request.size=1048576</span><br><span class=\"line\">  message.max.bytes=1000012</span><br><span class=\"line\">  sasl.enabled.mechanisms=PLAIN,SCRAM-SHA-256,SCRAM-SHA-512</span><br><span class=\"line\">  sasl.mechanism.inter.broker.protocol=</span><br><span class=\"line\">  super.users=User:admin</span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\">persistence:</span><br><span class=\"line\">  enabled: true</span><br><span class=\"line\">  existingClaim: &quot;&quot;</span><br><span class=\"line\">  storageClass: &quot;standard&quot;   # 挂载持久化存储类</span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\">zookeeper:</span><br><span class=\"line\">  enabled: true</span><br><span class=\"line\">  replicaCount: 1</span><br><span class=\"line\">  auth:</span><br><span class=\"line\">    client:</span><br><span class=\"line\">      enabled: false</span><br><span class=\"line\">      clientUser: &quot;&quot;</span><br><span class=\"line\">      clientPassword: &quot;&quot;</span><br><span class=\"line\">      serverUsers: &quot;&quot;</span><br><span class=\"line\">      serverPasswords: &quot;&quot;</span><br><span class=\"line\">  persistence:</span><br><span class=\"line\">    enabled: true</span><br><span class=\"line\">    storageClass: &quot;standard&quot;   # 挂载持久化存储类，miniku 默认已有。</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">部署与验证</span></span><br><span class=\"line\">helm install yakir-kafka .</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">验证部署状态，查看是否为正常 Running 状态</span></span><br><span class=\"line\">kubectl get pod  </span><br><span class=\"line\">NAME                                  READY   STATUS    RESTARTS       AGE</span><br><span class=\"line\">yakir-kafka-0                         1/1     Running   0              171m</span><br><span class=\"line\">yakir-kafka-zookeeper-0               1/1     Running   6 (168m ago)   10d</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3）kube-eventer-部署\"><a href=\"#3）kube-eventer-部署\" class=\"headerlink\" title=\"3）kube-eventer 部署\"></a>3）kube-eventer 部署</h4><ul>\n<li>获取官方 YAML 资源文件进行部署</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; kube-eventer.yaml &lt;&lt; &quot;EOF&quot;</span><br><span class=\"line\">apiVersion: apps/v1</span><br><span class=\"line\">kind: Deployment</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    name: kube-eventer</span><br><span class=\"line\">  name: kube-eventer</span><br><span class=\"line\">  namespace: kube-system</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  replicas: 1</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      app: kube-eventer</span><br><span class=\"line\">  template:</span><br><span class=\"line\">    metadata:</span><br><span class=\"line\">      labels:</span><br><span class=\"line\">        app: kube-eventer</span><br><span class=\"line\">      annotations:      </span><br><span class=\"line\">        #scheduler.alpha.kubernetes.io/critical-pod: &#x27;&#x27;</span><br><span class=\"line\">        priorityClassName: &#x27;&#x27;</span><br><span class=\"line\">    spec:</span><br><span class=\"line\">      dnsPolicy: ClusterFirstWithHostNet</span><br><span class=\"line\">      serviceAccount: kube-eventer</span><br><span class=\"line\">      containers:</span><br><span class=\"line\">        - image: registry.aliyuncs.com/acs/kube-eventer-amd64:v1.2.0-484d9cd-aliyun</span><br><span class=\"line\">          name: kube-eventer</span><br><span class=\"line\">          command:</span><br><span class=\"line\">            - &quot;/kube-eventer&quot;</span><br><span class=\"line\">            - &quot;--source=kubernetes:https://kubernetes.default&quot;</span><br><span class=\"line\">            # 存储消息中间件配置，根据环境进行配置</span><br><span class=\"line\">            - --sink=kafka:?brokers=yakir-kafka-headless.default:9092&amp;eventstopic=yakirtopic</span><br><span class=\"line\">          env:</span><br><span class=\"line\">          # If TZ is assigned, set the TZ value as the time zone</span><br><span class=\"line\">          - name: TZ</span><br><span class=\"line\">            value: &quot;Asia/Shanghai&quot; </span><br><span class=\"line\">          volumeMounts:</span><br><span class=\"line\">            - name: localtime</span><br><span class=\"line\">              mountPath: /etc/localtime</span><br><span class=\"line\">              readOnly: true</span><br><span class=\"line\">            - name: zoneinfo</span><br><span class=\"line\">              mountPath: /usr/share/zoneinfo</span><br><span class=\"line\">              readOnly: true</span><br><span class=\"line\">          resources:</span><br><span class=\"line\">            requests:</span><br><span class=\"line\">              cpu: 100m</span><br><span class=\"line\">              memory: 100Mi</span><br><span class=\"line\">            limits:</span><br><span class=\"line\">              cpu: 500m</span><br><span class=\"line\">              memory: 250Mi</span><br><span class=\"line\">      volumes:</span><br><span class=\"line\">        - name: localtime</span><br><span class=\"line\">          hostPath:</span><br><span class=\"line\">            path: /etc/localtime</span><br><span class=\"line\">        - name: zoneinfo</span><br><span class=\"line\">          hostPath:</span><br><span class=\"line\">            path: /usr/share/zoneinfo</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class=\"line\">kind: ClusterRole</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: kube-eventer</span><br><span class=\"line\">rules:</span><br><span class=\"line\">  - apiGroups:</span><br><span class=\"line\">      - &quot;&quot;</span><br><span class=\"line\">    resources:</span><br><span class=\"line\">      - configmaps</span><br><span class=\"line\">      - events</span><br><span class=\"line\">    verbs:</span><br><span class=\"line\">      - get</span><br><span class=\"line\">      - list</span><br><span class=\"line\">      - watch</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class=\"line\">kind: ClusterRoleBinding</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: kube-eventer</span><br><span class=\"line\">roleRef:</span><br><span class=\"line\">  apiGroup: rbac.authorization.k8s.io</span><br><span class=\"line\">  kind: ClusterRole</span><br><span class=\"line\">  name: kube-eventer</span><br><span class=\"line\">subjects:</span><br><span class=\"line\">  - kind: ServiceAccount</span><br><span class=\"line\">    name: kube-eventer</span><br><span class=\"line\">    namespace: kube-system</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: ServiceAccount</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: kube-eventer</span><br><span class=\"line\">  namespace: kube-system</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">部署资源，默认部署至 kube-system namespace 中</span></span><br><span class=\"line\">kubectl apply -f kube-eventer.yaml</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">验证部署状态</span></span><br><span class=\"line\">kubectl get pod -n kube-system</span><br><span class=\"line\">NAME                               READY   STATUS    RESTARTS        AGE</span><br><span class=\"line\">kube-eventer-69455778cd-cvr9w      1/1     Running   0               8d</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4）从消息队列获取事件，发送至-telegram\"><a href=\"#4）从消息队列获取事件，发送至-telegram\" class=\"headerlink\" title=\"4）从消息队列获取事件，发送至 telegram\"></a>4）从消息队列获取事件，发送至 telegram</h4><ul>\n<li>telegram 机器人以及告警群组创建</li>\n</ul>\n<blockquote>\n<p>参考</p>\n<p>1、机器人创建：<a href=\"https://cloud.tencent.com/developer/article/1835051\">https://cloud.tencent.com/developer/article/1835051</a></p>\n<p>2、telegram python SDK：<a href=\"https://github.com/python-telegram-bot/python-telegram-bot\">https://github.com/python-telegram-bot/python-telegram-bot</a></p>\n</blockquote>\n<ul>\n<li>Python 脚本信息</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># telegrambot.py 文件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"><span class=\"keyword\">import</span> telegram</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> traceback</span><br><span class=\"line\"></span><br><span class=\"line\">TOKEN = <span class=\"string\">&quot;xxxxxx&quot;</span></span><br><span class=\"line\">chat_id = <span class=\"string\">&quot;-xxx&quot;</span></span><br><span class=\"line\">bot = telegram.Bot(token=TOKEN)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FilterMsg</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, text</span>):</span><br><span class=\"line\">        self.event_value = json.loads(text[<span class=\"string\">&#x27;EventValue&#x27;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">        self.data = <span class=\"built_in\">dict</span>()</span><br><span class=\"line\">        self.data[<span class=\"string\">&#x27;kind&#x27;</span>] = self.event_value[<span class=\"string\">&#x27;involvedObject&#x27;</span>][<span class=\"string\">&#x27;kind&#x27;</span>]</span><br><span class=\"line\">        self.data[<span class=\"string\">&#x27;namespace&#x27;</span>] = self.event_value[<span class=\"string\">&#x27;involvedObject&#x27;</span>][<span class=\"string\">&#x27;namespace&#x27;</span>]</span><br><span class=\"line\">        self.data[<span class=\"string\">&#x27;reason&#x27;</span>] = self.event_value[<span class=\"string\">&#x27;reason&#x27;</span>]</span><br><span class=\"line\">        self.data[<span class=\"string\">&#x27;message&#x27;</span>] = self.event_value[<span class=\"string\">&#x27;message&#x27;</span>]</span><br><span class=\"line\">        self.data[<span class=\"string\">&#x27;first_timestamp&#x27;</span>] = self.event_value[<span class=\"string\">&#x27;firstTimestamp&#x27;</span>]</span><br><span class=\"line\">        self.data[<span class=\"string\">&#x27;last_timestamp&#x27;</span>] = self.event_value[<span class=\"string\">&#x27;lastTimestamp&#x27;</span>]</span><br><span class=\"line\">        self.data[<span class=\"string\">&#x27;count&#x27;</span>] = self.event_value[<span class=\"string\">&#x27;count&#x27;</span>]</span><br><span class=\"line\">        self.data[<span class=\"string\">&#x27;type&#x27;</span>] = self.event_value[<span class=\"string\">&#x27;type&#x27;</span>]</span><br><span class=\"line\">        self.data[<span class=\"string\">&#x27;event_time&#x27;</span>] = self.event_value[<span class=\"string\">&#x27;eventTime&#x27;</span>]</span><br><span class=\"line\">        self.data[<span class=\"string\">&#x27;pod_hostname&#x27;</span>] = text[<span class=\"string\">&#x27;EventTags&#x27;</span>][<span class=\"string\">&#x27;hostname&#x27;</span>]</span><br><span class=\"line\">        self.data[<span class=\"string\">&#x27;pod_name&#x27;</span>] = text[<span class=\"string\">&#x27;EventTags&#x27;</span>][<span class=\"string\">&#x27;pod_name&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">convert</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        msg_markdown = <span class=\"string\">f&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        *Kubernetes Cluster Event*</span></span><br><span class=\"line\"><span class=\"string\">    `Kind: <span class=\"subst\">&#123;self.data[<span class=\"string\">&#x27;kind&#x27;</span>]&#125;</span>`</span></span><br><span class=\"line\"><span class=\"string\">    `Namescodeace: <span class=\"subst\">&#123;self.data[<span class=\"string\">&#x27;namespace&#x27;</span>]&#125;</span>`</span></span><br><span class=\"line\"><span class=\"string\">    `Reason: <span class=\"subst\">&#123;self.data[<span class=\"string\">&#x27;reason&#x27;</span>]&#125;</span>`</span></span><br><span class=\"line\"><span class=\"string\">    `Timestamp: <span class=\"subst\">&#123;self.data[<span class=\"string\">&#x27;first_timestamp&#x27;</span>]&#125;</span> to <span class=\"subst\">&#123;self.data[<span class=\"string\">&#x27;last_timestamp&#x27;</span>]&#125;</span>`</span></span><br><span class=\"line\"><span class=\"string\">    `Count: <span class=\"subst\">&#123;self.data[<span class=\"string\">&#x27;count&#x27;</span>]&#125;</span>`</span></span><br><span class=\"line\"><span class=\"string\">    `EventType: <span class=\"subst\">&#123;self.data[<span class=\"string\">&#x27;type&#x27;</span>]&#125;</span>`</span></span><br><span class=\"line\"><span class=\"string\">    `EventTime: <span class=\"subst\">&#123;self.data[<span class=\"string\">&#x27;event_time&#x27;</span>]&#125;</span>`</span></span><br><span class=\"line\"><span class=\"string\">    `PodHostname: <span class=\"subst\">&#123;self.data[<span class=\"string\">&#x27;pod_hostname&#x27;</span>]&#125;</span>`</span></span><br><span class=\"line\"><span class=\"string\">    `PodName: <span class=\"subst\">&#123;self.data[<span class=\"string\">&#x27;pod_name&#x27;</span>]&#125;</span>`</span></span><br><span class=\"line\"><span class=\"string\">    `Message: <span class=\"subst\">&#123;self.data[<span class=\"string\">&#x27;message&#x27;</span>]&#125;</span>`</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg_markdown</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">send_message</span>(<span class=\"params\">text</span>):</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"comment\"># Core: get message from Kafka,and filter message</span></span><br><span class=\"line\">        convert_text = json.loads(text.decode(<span class=\"string\">&#x27;utf8&#x27;</span>).replace(<span class=\"string\">&#x27;\\\\n&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>))</span><br><span class=\"line\">        msg_instance = FilterMsg(convert_text)</span><br><span class=\"line\">        msg = msg_instance.convert()</span><br><span class=\"line\">        send_result = bot.send_message(chat_id=chat_id, text=msg, parse_mode=<span class=\"string\">&#x27;MarkdownV2&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> send_result</span><br><span class=\"line\">    <span class=\"keyword\">except</span> KeyError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        msg = <span class=\"string\">&quot;Unknow message..&quot;</span></span><br><span class=\"line\">        send_result = bot.send_message(chat_id=chat_id, text=msg)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> send_result</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(e.__str__())</span><br><span class=\"line\">        <span class=\"comment\">#traceback.print_exc()</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;send message to telegram failed,please check.&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    text = <span class=\"string\">b&#x27;&#x27;</span></span><br><span class=\"line\">    text = json.loads(text.decode(<span class=\"string\">&#x27;utf8&#x27;</span>).replace(<span class=\"string\">&#x27;\\\\n&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>))</span><br><span class=\"line\">    send_result = asyncio.run(send_message(text))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(send_result)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># get_events.py 文件</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> kafka <span class=\"keyword\">import</span> KafkaConsumer, TopicPartition</span><br><span class=\"line\"><span class=\"keyword\">from</span> telegrambot <span class=\"keyword\">import</span> send_message</span><br><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">KConsumer</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;kafka consumer instance&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, topic, group_id, bootstrap_servers, auto_offset_reset, enable_auto_commit=<span class=\"literal\">False</span></span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        :param topic:</span></span><br><span class=\"line\"><span class=\"string\">        :param group_id:</span></span><br><span class=\"line\"><span class=\"string\">        :param bootstrap_servers:</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        self.consumer = KafkaConsumer(</span><br><span class=\"line\">            topic,</span><br><span class=\"line\">            bootstrap_servers=bootstrap_servers,</span><br><span class=\"line\">            group_id=group_id,</span><br><span class=\"line\">            auto_offset_reset=auto_offset_reset,</span><br><span class=\"line\">            enable_auto_commit=enable_auto_commit,</span><br><span class=\"line\">            consumer_timeout_ms=<span class=\"number\">10000</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        self.tp = TopicPartition(topic, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">start_consumer</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                <span class=\"comment\"># 手动拉取消息，间隔时间30s，然后手动 commit 提交当前 offset</span></span><br><span class=\"line\">                msg_list_dict = self.consumer.poll(timeout_ms=<span class=\"number\">30000</span>)</span><br><span class=\"line\">                <span class=\"keyword\">for</span> tp, msg_list <span class=\"keyword\">in</span> msg_list_dict.items():</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> msg <span class=\"keyword\">in</span> msg_list: </span><br><span class=\"line\">                        <span class=\"comment\">### core operate,send message to telegram</span></span><br><span class=\"line\">                        send_result = asyncio.run(send_message(msg.value))</span><br><span class=\"line\">                        <span class=\"built_in\">print</span>(send_result)</span><br><span class=\"line\">                <span class=\"comment\">#print(f&quot;current offset is &#123;self.consumer.position(tp)&#125;&quot;)</span></span><br><span class=\"line\">                self.consumer.commit()</span><br><span class=\"line\">            <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;ERROR: get cluster events failed,please check.&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">close_consumer</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            self.consumer.unsubscribe()</span><br><span class=\"line\">            self.consumer.close()</span><br><span class=\"line\">        <span class=\"keyword\">except</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;consumer stop failed,please check.&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># env，中间件配置信息</span></span><br><span class=\"line\">    topic = <span class=\"string\">&#x27;yakirtopic&#x27;</span></span><br><span class=\"line\">    bootstrap_servers = <span class=\"string\">&#x27;yakir-kafka-headless:9092&#x27;</span></span><br><span class=\"line\">    group_id = <span class=\"string\">&#x27;yakir1.group&#x27;</span></span><br><span class=\"line\">    auto_offset_reset = <span class=\"string\">&#x27;earliest&#x27;</span></span><br><span class=\"line\">    enable_auto_commit = <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># start</span></span><br><span class=\"line\">    consumer = KConsumer(topic, group_id=group_id, bootstrap_servers=bootstrap_servers, auto_offset_reset=auto_offset_reset, enable_auto_commit=enable_auto_commit)</span><br><span class=\"line\">    consumer.start_consumer()</span><br><span class=\"line\">    <span class=\"comment\"># stop</span></span><br><span class=\"line\">    <span class=\"comment\">#consumer.close_consumer()</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Dockerfile 配置</li>\n</ul>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> python:<span class=\"number\">3.8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Set an environment variable </span></span><br><span class=\"line\"><span class=\"keyword\">ENV</span> APP /app</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Create the directory</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">mkdir</span> <span class=\"variable\">$APP</span></span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> <span class=\"variable\">$APP</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Expose the port uWSGI will listen on</span></span><br><span class=\"line\"><span class=\"comment\">#EXPOSE 5000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Copy the requirements file in order to install</span></span><br><span class=\"line\"><span class=\"comment\"># Python dependencies</span></span><br><span class=\"line\"><span class=\"comment\">#COPY requirements.txt .</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> . .</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> pip install --upgrade pip &amp;&amp; pip install --no-cache-dir -r requirements.txt</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Finally, we run uWSGI with the ini file</span></span><br><span class=\"line\"><span class=\"comment\">#CMD [&quot;sleep&quot;, &quot;infinity&quot;]</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"string\">&quot;python&quot;</span>, <span class=\"string\">&quot;get_events.py&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>打包镜像，启动验证</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编译源码打包镜像步骤</span></span><br><span class=\"line\">cd /opt/yakir/kube-eventer-py/ &amp;&amp; mkdir APP-META</span><br><span class=\"line\">rm -f APP-META/*.py &amp;&amp; cp *.py APP-META/</span><br><span class=\"line\"></span><br><span class=\"line\">cd APP-META &amp;&amp; build -t kube-eventer-telegrambot:latest .</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动镜像（docker 或 kubectl）</span></span><br><span class=\"line\">cat &gt; kube-eventer-telegrambot.yaml &lt;&lt; &quot;EOF&quot;</span><br><span class=\"line\">apiVersion: apps/v1</span><br><span class=\"line\">kind: Deployment</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: yakir-kube-eventer</span><br><span class=\"line\">  namespace: default</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  replicas: 1</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      app: yakir-kube-eventer</span><br><span class=\"line\">  template:</span><br><span class=\"line\">    metadata:</span><br><span class=\"line\">      labels:</span><br><span class=\"line\">        app: yakir-kube-eventer</span><br><span class=\"line\">    spec:</span><br><span class=\"line\">      containers:</span><br><span class=\"line\">        - image: kube-eventer-telegrambot:latest</span><br><span class=\"line\">          name: yakir-kube-eventer</span><br><span class=\"line\">          env:</span><br><span class=\"line\">          - name: TZ</span><br><span class=\"line\">            value: &quot;Asia/Shanghai&quot; </span><br><span class=\"line\">      volumes:</span><br><span class=\"line\">        - name: localtime</span><br><span class=\"line\">          hostPath:</span><br><span class=\"line\">            path: /etc/localtime</span><br><span class=\"line\">        - name: zoneinfo</span><br><span class=\"line\">          hostPath:</span><br><span class=\"line\">            path: /usr/share/zoneinfo</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">验证启动结果</span></span><br><span class=\"line\">kubectl apply -f kube-eventer-telegrambot.yaml</span><br><span class=\"line\">kubectl get pod                               </span><br><span class=\"line\">NAME                                  READY   STATUS    RESTARTS        AGE</span><br><span class=\"line\">yakir-kube-eventer-589bf867bc-tgs5l   1/1     Running   0               27</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>事件消息接收验证</li>\n</ul>\n\n\n<h3 id=\"三、后续\"><a href=\"#三、后续\" class=\"headerlink\" title=\"三、后续\"></a>三、后续</h3><p>xxxx</p>"},{"title":"RabbitMQ 简述与使用","abbrlink":"9bae","date":"2022-06-06T12:33:11.000Z","_content":"### 一、RabbitMQ 介绍\n#### 什么是消息队列\n消息（Message）是指在应用间传送的数据。消息可以非常简单，比如只包含文本字符串，也可以更复杂，可能包含嵌入对象。\n\n消息队列（Message Queue）是一种应用间的通信方式，消息发送后可以立即返回，由消息系统来确保消息的可靠传递。消息发布者只管把消息发布到 MQ 中而不用管谁来取，消息使用者只管从 MQ 中取消息而不管是谁发布的。这样发布者和使用者都不用知道对方的存在。\n\n\n#### 为何用消息队列\n以常见的订单系统为例，用户点击【下单】按钮之后的业务逻辑可能包括：扣减库存、生成相应单据、发红包、发短信通知。在业务发展初期这些逻辑可能放在一起同步执行，随着业务的发展订单量增长，需要提升系统服务的性能，这时可以将一些不需要立即生效的操作拆分出来异步执行，比如发放红包、发短信通知等。这种场景下就可以用 MQ ，在下单的主流程（比如扣减库存、生成相应单据）完成之后发送一条消息到 MQ 让主流程快速完结，而由另外的单独线程拉取MQ的消息（或者由 MQ 推送消息），当发现 MQ 中有发红包或发短信之类的消息时，执行相应的业务逻辑。\n\n以上是用于业务解耦的情况，其它常见场景包括最终一致性、广播、错峰流控等等。\n\n<!--more-->\n\n#### RabbitMQ 特点\n\n- 协议\n\nAMQP ：Advanced Message Queue，高级消息队列协议。它是应用层协议的一个开放标准，为面向消息的中间件设计，基于此协议的客户端与消息中间件可传递消息，并不受产品、开发语言等条件的限制。\n\n- 具体特点\n   - 可靠性：持久化、传输确认、发布确认机制。\n   - 灵活的路由：Exchange 路由消息\n   - 消息集群：多个RabbitMQ 组成集群，形成逻辑Broker\n   - 高可用\n   - 多种协议\n   - 多语言客户端\n   - UI 管理后台\n   - 跟踪机制：消息跟踪\n   - 插件机制\n\n\n#### RabbitMQ 概念模型\n\n- 基本概念（[详细名词解释](https://help.aliyun.com/document_detail/101628.html)）\n\nVhost：虚拟主机，逻辑上分隔RabbitMQ 实例。\nBroker：服务器实体，多个RabbitMQ 实例形成的集群。\n\nConnection：物理连接，如TCP 连接（应用与云上RabbitMQ 实例连接时大约需要15个TCP 报文交互）\nChannel：信道，多路复用Connection （TCP 连接）\n\nPublisher：应用程序，向Exchange 发布消息。\nConsumer：应用程序，从Queue 接收消息。\n\nMessage：由消息头+消息体组成。消息头属性有：routing-key（路由键）、priority（优先级）、delivery-mode（是否持久性存储消息）\nExchange：交换器，接收消息并路由到Queue。\nQueue：消息队列，保存消息直到发送给Consumer。消息可存在多个队列。\nBinding：绑定，基于routing-key 将Queue 与Exchange 关联，类似一条路由规则。\n{% asset_img rbmq1.png %}\n\n- AMQP 协议消息路由\n\nAMQP 中增加了 Exchange 和 Binding 的角色。生产者把消息发布到 Exchange 上，消息最终到达队列并被消费者接收，而 Binding 决定交换器的消息应该发送到那个队列。\n{% asset_img rbmq2.png %}\n\n- Exchange 类型\n\nheaders（已废弃）\n\ndirect：Message中routing-key 值与Binding 中binding-key 一致，则发入对应Queue。（完全匹配、单播方式）\n{% asset_img rbmq3.png %}\n\nfanout：不处理routing-key，将消息发到所有与Exchange 绑定的Queue。（广播方式）\n{% asset_img rbmq4.png %}\n\ntopic：模式匹配routing-key 属性，Queue 需要通过通配符绑定到某个模式上。（类似于正则匹配到主题）\n{% asset_img rbmq5.png %}\n\nJMS Queue Exchange：云上产品支持（与direct 类似）\nJMS topic Exchange：云上产品支持（与topic 类似）\n\n\n#### RabbitMQ 安装与运行、集群配置\n[https://www.jianshu.com/p/79ca08116d57](https://www.jianshu.com/p/79ca08116d57)\n> 云上实例默认开通都为集群模式\n\n\n\n### 二、云上最佳实践与业务结合\n#### RabbitMQ 使用最佳实践\n\n- 云上使用方式：直接创建对应地域的RabbitMQ 实例即可。\n\n当前日常环境实例规格限制（当前并未使用RabbitMQ 云产品）\n{% asset_img rbmq6.png %}\n\n- 云上实例高级特性\n   - 消息重试\n   - 延时消息（订单延时支付场景）\n   - 死信Exchange\n   - 消息存活时间\n\n- ACK 集群内部署RabbitMQ 使用方式\n   - 创建RabbitMQ 的StatefulSet ，注意持久化存储配置\n```yaml\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: camel-k-rabbitmq-test\n  namespace: default\nspec:\n  podManagementPolicy: OrderedReady\n  replicas: 1\n  revisionHistoryLimit: 10\n  selector:\n    matchLabels:\n      app: camel-k-rabbitmq-test\n  serviceName: camel-k-rabbitmq-test-svc\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: camel-k-rabbitmq-test\n    spec:\n      containers:\n      - env:\n        - name: OPENSSL_SOURCE_SHA256\n          value: f89199be8b23ca45fc7cb9f1d8d3ee67312318286ad030f5316aca6462db6c96\n        - name: OPENSSL_PGP_KEY_IDS\n          value: 0x8657ABB260F056B1E5190839D9C4D26D0E604491 0x5B2545DAB21995F4088CEFAA36CEE4DEB00CFE33\n            0xED230BEC4D4F2518B9D7DF41F0DB4D21C1D35231 0xC1F33DD8CE1D4CC613AF14DA9195C48241FBF7DD\n            0x7953AC1FBC3DC8B3B292393ED5E9E43F7DF9EE8C 0xE5E52560DD91C556DDBDA5D02064C53641C25E5D\n        - name: OTP_SOURCE_SHA256\n          value: af0f1928dcd16cd5746feeca8325811865578bf1a110a443d353ea3e509e6d41\n        - name: RABBITMQ_DATA_DIR\n          value: /var/lib/rabbitmq\n        - name: RABBITMQ_PGP_KEY_ID\n          value: 0x0A9AF2115F4687BD29803A206B73A36E6026DFCA\n        - name: RABBITMQ_HOME\n          value: /opt/rabbitmq\n        - name: RABBITMQ_LOGS\n          value: '-'\n        - name: HOME\n          value: /var/lib/rabbitmq\n        - name: LANG\n          value: C.UTF-8\n        - name: LANGUAGE\n          value: C.UTF-8\n        - name: LC_ALL\n          value: C.UTF-8\n        image: rabbitmq:3.9.11-management\n        imagePullPolicy: IfNotPresent\n        name: camel-k-rabbitmq-test\n        ports:\n        - containerPort: 15671\n          name: port1\n          protocol: TCP\n        - containerPort: 15672\n          name: port2\n          protocol: TCP\n        - containerPort: 15691\n          protocol: TCP\n        - containerPort: 15692\n          protocol: TCP\n        - containerPort: 25672\n          protocol: TCP\n        - containerPort: 4369\n          protocol: TCP\n        - containerPort: 5671\n          protocol: TCP\n        - containerPort: 5672\n          protocol: TCP\n        resources:\n          limits:\n            cpu: \"1\"\n            memory: 2Gi\n          requests:\n            cpu: 250m\n            memory: 512Mi\n        terminationMessagePath: /dev/termination-log\n        terminationMessagePolicy: File\n        volumeMounts:\n        - mountPath: /var/lib/rabbitmq\n          name: volume-image-0\n      dnsPolicy: ClusterFirst\n      restartPolicy: Always\n      schedulerName: default-scheduler\n      securityContext: {}\n      terminationGracePeriodSeconds: 30\n      volumes:\n      - hostPath:\n          path: /var/lib/rabbitmq\n          type: \"\"\n        name: volume-image-0\n  updateStrategy:\n    type: RollingUpdate\n```\n\n   - 暴露RabbitMQ 的管理UI 后台，以及集群内部 5672 server端端口（建议从ACK 控制台新建，使用yaml 文件新建Service 会新建SLB）\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: rabbitmq-svc\n  namespace: default\nspec:\n  clusterIP: 192.168.87.198\n  clusterIPs:\n  - 192.168.87.198\n  externalTrafficPolicy: Cluster\n  ports:\n  - nodePort: 32166\n    port: 5672\n    protocol: TCP\n    targetPort: 5672\n  selector:\n    app: camel-k-rabbitmq-test\n  sessionAffinity: None\n  type: NodePort\n```\n\n#### 业务测试验证\n> Python 使用RabbitMQ 教程：[https://www.rabbitmq.com/tutorials/tutorial-one-python.html](https://www.rabbitmq.com/tutorials/tutorial-one-python.html)\n\n1. 创建Vhost、Exchange（topic 类型）\n\n{% asset_img rbmq7.png %}\n{% asset_img rbmq8.png %}\n{% asset_img rbmq9.png %}\n\n\n\n2. 使用Python SDK 进行接收消息验证\n\nPublisher\n```python\nimport pika\nimport sys\n\ncredentials = pika.PlainCredentials('xxx', 'xxx')\nconnection = pika.BlockingConnection(pika.ConnectionParameters('xxx.com', 5672,'liyanjun-test', credentials))\nchannel = connection.channel()\n\n# 发送到 user.info.test 该routing key 的Exchange 上\nrouting_key = 'user.info.test'\nmessage = 'liyanjun rabbitmq test send...'\n\nchannel.basic_publish(exchange='userinfo_test', routing_key=routing_key, body=message)\nprint(\" [x] Sent %r:%r\" % (routing_key, message))\nconnection.close()\n```\nConsumer\n```python\nimport pika\nimport sys\n\ncredentials = pika.PlainCredentials('xxx', 'xxx')\nconnection = pika.BlockingConnection(pika.ConnectionParameters('amqp-cn-i7m2fw6ry00u.mq-amqp.cn-hangzhou-249959-a.aliyuncs.com', 5672,'liyanjun-test', credentials))\nchannel = connection.channel()\n\n# client 1\nresult = channel.queue_declare('user_info_queue')\n# client 2\nresult = channel.queue_declare('user_account_queue')    \nqueue_name = result.method.queue\n\nbinding_keys = sys.argv[1:]\nif not binding_keys:\n    sys.stderr.write(\"Usage: %s [binding_key]...\\n\" % sys.argv[0])\n    sys.exit(1)\n\nfor binding_key in binding_keys:\n    channel.queue_bind(exchange='userinfo_test', queue=queue_name, routing_key=binding_key)\n\nprint(' [*] Waiting for logs. To exit press CTRL+C')\n\n\ndef callback(ch, method, properties, body):\n    print(\" [x] %r:%r\" % (method.routing_key, body))\n\n\nchannel.basic_consume(queue=queue_name, on_message_callback=callback, auto_ack=True)\n\nchannel.start_consuming()\n```\n```python\n# 启动client，绑定不同routing key\npython rabbitmq_client_test1.py user.info.test\npython rabbitmq_client_test2.py user.account.test\n```\n\n3. 验证\n- userinfo_test Exchange 使用的binding key：\n   - user.info.#           -->  绑定user_info_queue 此QUEUE 上\n   - user.account.#     -->  绑定user_account_queue 此QUEUE 上\n\n{% asset_img rbmq10.png %}\n\n- Server 端发送携带user.info.test  routing_key 的消息，只有client1 可接收到消息，符合预期。\n\n{% asset_img rbmq11.png %}\n{% asset_img rbmq12.png %}\n\n\n> 参考：\n> 1、官方文档：[https://www.rabbitmq.com/](https://www.rabbitmq.com/)\n> 2、消息队列之RabbitMQ：[https://www.jianshu.com/p/79ca08116d57](https://www.jianshu.com/p/79ca08116d57)\n> 3、Alicloud云产品官方文档：[https://help.aliyun.com/document_detail/141604.html](https://help.aliyun.com/document_detail/141604.html)\n\n","source":"_posts/rabbitmq.md","raw":"---\ntitle: RabbitMQ 简述与使用\ncategories:\n  - Middleware\ntags:\n  - RabbitMQ\nabbrlink: 9bae\ndate: 2022-06-06 20:33:11\n---\n### 一、RabbitMQ 介绍\n#### 什么是消息队列\n消息（Message）是指在应用间传送的数据。消息可以非常简单，比如只包含文本字符串，也可以更复杂，可能包含嵌入对象。\n\n消息队列（Message Queue）是一种应用间的通信方式，消息发送后可以立即返回，由消息系统来确保消息的可靠传递。消息发布者只管把消息发布到 MQ 中而不用管谁来取，消息使用者只管从 MQ 中取消息而不管是谁发布的。这样发布者和使用者都不用知道对方的存在。\n\n\n#### 为何用消息队列\n以常见的订单系统为例，用户点击【下单】按钮之后的业务逻辑可能包括：扣减库存、生成相应单据、发红包、发短信通知。在业务发展初期这些逻辑可能放在一起同步执行，随着业务的发展订单量增长，需要提升系统服务的性能，这时可以将一些不需要立即生效的操作拆分出来异步执行，比如发放红包、发短信通知等。这种场景下就可以用 MQ ，在下单的主流程（比如扣减库存、生成相应单据）完成之后发送一条消息到 MQ 让主流程快速完结，而由另外的单独线程拉取MQ的消息（或者由 MQ 推送消息），当发现 MQ 中有发红包或发短信之类的消息时，执行相应的业务逻辑。\n\n以上是用于业务解耦的情况，其它常见场景包括最终一致性、广播、错峰流控等等。\n\n<!--more-->\n\n#### RabbitMQ 特点\n\n- 协议\n\nAMQP ：Advanced Message Queue，高级消息队列协议。它是应用层协议的一个开放标准，为面向消息的中间件设计，基于此协议的客户端与消息中间件可传递消息，并不受产品、开发语言等条件的限制。\n\n- 具体特点\n   - 可靠性：持久化、传输确认、发布确认机制。\n   - 灵活的路由：Exchange 路由消息\n   - 消息集群：多个RabbitMQ 组成集群，形成逻辑Broker\n   - 高可用\n   - 多种协议\n   - 多语言客户端\n   - UI 管理后台\n   - 跟踪机制：消息跟踪\n   - 插件机制\n\n\n#### RabbitMQ 概念模型\n\n- 基本概念（[详细名词解释](https://help.aliyun.com/document_detail/101628.html)）\n\nVhost：虚拟主机，逻辑上分隔RabbitMQ 实例。\nBroker：服务器实体，多个RabbitMQ 实例形成的集群。\n\nConnection：物理连接，如TCP 连接（应用与云上RabbitMQ 实例连接时大约需要15个TCP 报文交互）\nChannel：信道，多路复用Connection （TCP 连接）\n\nPublisher：应用程序，向Exchange 发布消息。\nConsumer：应用程序，从Queue 接收消息。\n\nMessage：由消息头+消息体组成。消息头属性有：routing-key（路由键）、priority（优先级）、delivery-mode（是否持久性存储消息）\nExchange：交换器，接收消息并路由到Queue。\nQueue：消息队列，保存消息直到发送给Consumer。消息可存在多个队列。\nBinding：绑定，基于routing-key 将Queue 与Exchange 关联，类似一条路由规则。\n{% asset_img rbmq1.png %}\n\n- AMQP 协议消息路由\n\nAMQP 中增加了 Exchange 和 Binding 的角色。生产者把消息发布到 Exchange 上，消息最终到达队列并被消费者接收，而 Binding 决定交换器的消息应该发送到那个队列。\n{% asset_img rbmq2.png %}\n\n- Exchange 类型\n\nheaders（已废弃）\n\ndirect：Message中routing-key 值与Binding 中binding-key 一致，则发入对应Queue。（完全匹配、单播方式）\n{% asset_img rbmq3.png %}\n\nfanout：不处理routing-key，将消息发到所有与Exchange 绑定的Queue。（广播方式）\n{% asset_img rbmq4.png %}\n\ntopic：模式匹配routing-key 属性，Queue 需要通过通配符绑定到某个模式上。（类似于正则匹配到主题）\n{% asset_img rbmq5.png %}\n\nJMS Queue Exchange：云上产品支持（与direct 类似）\nJMS topic Exchange：云上产品支持（与topic 类似）\n\n\n#### RabbitMQ 安装与运行、集群配置\n[https://www.jianshu.com/p/79ca08116d57](https://www.jianshu.com/p/79ca08116d57)\n> 云上实例默认开通都为集群模式\n\n\n\n### 二、云上最佳实践与业务结合\n#### RabbitMQ 使用最佳实践\n\n- 云上使用方式：直接创建对应地域的RabbitMQ 实例即可。\n\n当前日常环境实例规格限制（当前并未使用RabbitMQ 云产品）\n{% asset_img rbmq6.png %}\n\n- 云上实例高级特性\n   - 消息重试\n   - 延时消息（订单延时支付场景）\n   - 死信Exchange\n   - 消息存活时间\n\n- ACK 集群内部署RabbitMQ 使用方式\n   - 创建RabbitMQ 的StatefulSet ，注意持久化存储配置\n```yaml\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: camel-k-rabbitmq-test\n  namespace: default\nspec:\n  podManagementPolicy: OrderedReady\n  replicas: 1\n  revisionHistoryLimit: 10\n  selector:\n    matchLabels:\n      app: camel-k-rabbitmq-test\n  serviceName: camel-k-rabbitmq-test-svc\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: camel-k-rabbitmq-test\n    spec:\n      containers:\n      - env:\n        - name: OPENSSL_SOURCE_SHA256\n          value: f89199be8b23ca45fc7cb9f1d8d3ee67312318286ad030f5316aca6462db6c96\n        - name: OPENSSL_PGP_KEY_IDS\n          value: 0x8657ABB260F056B1E5190839D9C4D26D0E604491 0x5B2545DAB21995F4088CEFAA36CEE4DEB00CFE33\n            0xED230BEC4D4F2518B9D7DF41F0DB4D21C1D35231 0xC1F33DD8CE1D4CC613AF14DA9195C48241FBF7DD\n            0x7953AC1FBC3DC8B3B292393ED5E9E43F7DF9EE8C 0xE5E52560DD91C556DDBDA5D02064C53641C25E5D\n        - name: OTP_SOURCE_SHA256\n          value: af0f1928dcd16cd5746feeca8325811865578bf1a110a443d353ea3e509e6d41\n        - name: RABBITMQ_DATA_DIR\n          value: /var/lib/rabbitmq\n        - name: RABBITMQ_PGP_KEY_ID\n          value: 0x0A9AF2115F4687BD29803A206B73A36E6026DFCA\n        - name: RABBITMQ_HOME\n          value: /opt/rabbitmq\n        - name: RABBITMQ_LOGS\n          value: '-'\n        - name: HOME\n          value: /var/lib/rabbitmq\n        - name: LANG\n          value: C.UTF-8\n        - name: LANGUAGE\n          value: C.UTF-8\n        - name: LC_ALL\n          value: C.UTF-8\n        image: rabbitmq:3.9.11-management\n        imagePullPolicy: IfNotPresent\n        name: camel-k-rabbitmq-test\n        ports:\n        - containerPort: 15671\n          name: port1\n          protocol: TCP\n        - containerPort: 15672\n          name: port2\n          protocol: TCP\n        - containerPort: 15691\n          protocol: TCP\n        - containerPort: 15692\n          protocol: TCP\n        - containerPort: 25672\n          protocol: TCP\n        - containerPort: 4369\n          protocol: TCP\n        - containerPort: 5671\n          protocol: TCP\n        - containerPort: 5672\n          protocol: TCP\n        resources:\n          limits:\n            cpu: \"1\"\n            memory: 2Gi\n          requests:\n            cpu: 250m\n            memory: 512Mi\n        terminationMessagePath: /dev/termination-log\n        terminationMessagePolicy: File\n        volumeMounts:\n        - mountPath: /var/lib/rabbitmq\n          name: volume-image-0\n      dnsPolicy: ClusterFirst\n      restartPolicy: Always\n      schedulerName: default-scheduler\n      securityContext: {}\n      terminationGracePeriodSeconds: 30\n      volumes:\n      - hostPath:\n          path: /var/lib/rabbitmq\n          type: \"\"\n        name: volume-image-0\n  updateStrategy:\n    type: RollingUpdate\n```\n\n   - 暴露RabbitMQ 的管理UI 后台，以及集群内部 5672 server端端口（建议从ACK 控制台新建，使用yaml 文件新建Service 会新建SLB）\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: rabbitmq-svc\n  namespace: default\nspec:\n  clusterIP: 192.168.87.198\n  clusterIPs:\n  - 192.168.87.198\n  externalTrafficPolicy: Cluster\n  ports:\n  - nodePort: 32166\n    port: 5672\n    protocol: TCP\n    targetPort: 5672\n  selector:\n    app: camel-k-rabbitmq-test\n  sessionAffinity: None\n  type: NodePort\n```\n\n#### 业务测试验证\n> Python 使用RabbitMQ 教程：[https://www.rabbitmq.com/tutorials/tutorial-one-python.html](https://www.rabbitmq.com/tutorials/tutorial-one-python.html)\n\n1. 创建Vhost、Exchange（topic 类型）\n\n{% asset_img rbmq7.png %}\n{% asset_img rbmq8.png %}\n{% asset_img rbmq9.png %}\n\n\n\n2. 使用Python SDK 进行接收消息验证\n\nPublisher\n```python\nimport pika\nimport sys\n\ncredentials = pika.PlainCredentials('xxx', 'xxx')\nconnection = pika.BlockingConnection(pika.ConnectionParameters('xxx.com', 5672,'liyanjun-test', credentials))\nchannel = connection.channel()\n\n# 发送到 user.info.test 该routing key 的Exchange 上\nrouting_key = 'user.info.test'\nmessage = 'liyanjun rabbitmq test send...'\n\nchannel.basic_publish(exchange='userinfo_test', routing_key=routing_key, body=message)\nprint(\" [x] Sent %r:%r\" % (routing_key, message))\nconnection.close()\n```\nConsumer\n```python\nimport pika\nimport sys\n\ncredentials = pika.PlainCredentials('xxx', 'xxx')\nconnection = pika.BlockingConnection(pika.ConnectionParameters('amqp-cn-i7m2fw6ry00u.mq-amqp.cn-hangzhou-249959-a.aliyuncs.com', 5672,'liyanjun-test', credentials))\nchannel = connection.channel()\n\n# client 1\nresult = channel.queue_declare('user_info_queue')\n# client 2\nresult = channel.queue_declare('user_account_queue')    \nqueue_name = result.method.queue\n\nbinding_keys = sys.argv[1:]\nif not binding_keys:\n    sys.stderr.write(\"Usage: %s [binding_key]...\\n\" % sys.argv[0])\n    sys.exit(1)\n\nfor binding_key in binding_keys:\n    channel.queue_bind(exchange='userinfo_test', queue=queue_name, routing_key=binding_key)\n\nprint(' [*] Waiting for logs. To exit press CTRL+C')\n\n\ndef callback(ch, method, properties, body):\n    print(\" [x] %r:%r\" % (method.routing_key, body))\n\n\nchannel.basic_consume(queue=queue_name, on_message_callback=callback, auto_ack=True)\n\nchannel.start_consuming()\n```\n```python\n# 启动client，绑定不同routing key\npython rabbitmq_client_test1.py user.info.test\npython rabbitmq_client_test2.py user.account.test\n```\n\n3. 验证\n- userinfo_test Exchange 使用的binding key：\n   - user.info.#           -->  绑定user_info_queue 此QUEUE 上\n   - user.account.#     -->  绑定user_account_queue 此QUEUE 上\n\n{% asset_img rbmq10.png %}\n\n- Server 端发送携带user.info.test  routing_key 的消息，只有client1 可接收到消息，符合预期。\n\n{% asset_img rbmq11.png %}\n{% asset_img rbmq12.png %}\n\n\n> 参考：\n> 1、官方文档：[https://www.rabbitmq.com/](https://www.rabbitmq.com/)\n> 2、消息队列之RabbitMQ：[https://www.jianshu.com/p/79ca08116d57](https://www.jianshu.com/p/79ca08116d57)\n> 3、Alicloud云产品官方文档：[https://help.aliyun.com/document_detail/141604.html](https://help.aliyun.com/document_detail/141604.html)\n\n","slug":"rabbitmq","published":1,"updated":"2024-01-21T15:28:43.161Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm0fat8zr0023s0nje0aahnle","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"一、RabbitMQ-介绍\"><a href=\"#一、RabbitMQ-介绍\" class=\"headerlink\" title=\"一、RabbitMQ 介绍\"></a>一、RabbitMQ 介绍</h3><h4 id=\"什么是消息队列\"><a href=\"#什么是消息队列\" class=\"headerlink\" title=\"什么是消息队列\"></a>什么是消息队列</h4><p>消息（Message）是指在应用间传送的数据。消息可以非常简单，比如只包含文本字符串，也可以更复杂，可能包含嵌入对象。</p>\n<p>消息队列（Message Queue）是一种应用间的通信方式，消息发送后可以立即返回，由消息系统来确保消息的可靠传递。消息发布者只管把消息发布到 MQ 中而不用管谁来取，消息使用者只管从 MQ 中取消息而不管是谁发布的。这样发布者和使用者都不用知道对方的存在。</p>\n<h4 id=\"为何用消息队列\"><a href=\"#为何用消息队列\" class=\"headerlink\" title=\"为何用消息队列\"></a>为何用消息队列</h4><p>以常见的订单系统为例，用户点击【下单】按钮之后的业务逻辑可能包括：扣减库存、生成相应单据、发红包、发短信通知。在业务发展初期这些逻辑可能放在一起同步执行，随着业务的发展订单量增长，需要提升系统服务的性能，这时可以将一些不需要立即生效的操作拆分出来异步执行，比如发放红包、发短信通知等。这种场景下就可以用 MQ ，在下单的主流程（比如扣减库存、生成相应单据）完成之后发送一条消息到 MQ 让主流程快速完结，而由另外的单独线程拉取MQ的消息（或者由 MQ 推送消息），当发现 MQ 中有发红包或发短信之类的消息时，执行相应的业务逻辑。</p>\n<p>以上是用于业务解耦的情况，其它常见场景包括最终一致性、广播、错峰流控等等。</p>\n<span id=\"more\"></span>\n\n<h4 id=\"RabbitMQ-特点\"><a href=\"#RabbitMQ-特点\" class=\"headerlink\" title=\"RabbitMQ 特点\"></a>RabbitMQ 特点</h4><ul>\n<li>协议</li>\n</ul>\n<p>AMQP ：Advanced Message Queue，高级消息队列协议。它是应用层协议的一个开放标准，为面向消息的中间件设计，基于此协议的客户端与消息中间件可传递消息，并不受产品、开发语言等条件的限制。</p>\n<ul>\n<li>具体特点<ul>\n<li>可靠性：持久化、传输确认、发布确认机制。</li>\n<li>灵活的路由：Exchange 路由消息</li>\n<li>消息集群：多个RabbitMQ 组成集群，形成逻辑Broker</li>\n<li>高可用</li>\n<li>多种协议</li>\n<li>多语言客户端</li>\n<li>UI 管理后台</li>\n<li>跟踪机制：消息跟踪</li>\n<li>插件机制</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"RabbitMQ-概念模型\"><a href=\"#RabbitMQ-概念模型\" class=\"headerlink\" title=\"RabbitMQ 概念模型\"></a>RabbitMQ 概念模型</h4><ul>\n<li>基本概念（<a href=\"https://help.aliyun.com/document_detail/101628.html\">详细名词解释</a>）</li>\n</ul>\n<p>Vhost：虚拟主机，逻辑上分隔RabbitMQ 实例。<br>Broker：服务器实体，多个RabbitMQ 实例形成的集群。</p>\n<p>Connection：物理连接，如TCP 连接（应用与云上RabbitMQ 实例连接时大约需要15个TCP 报文交互）<br>Channel：信道，多路复用Connection （TCP 连接）</p>\n<p>Publisher：应用程序，向Exchange 发布消息。<br>Consumer：应用程序，从Queue 接收消息。</p>\n<p>Message：由消息头+消息体组成。消息头属性有：routing-key（路由键）、priority（优先级）、delivery-mode（是否持久性存储消息）<br>Exchange：交换器，接收消息并路由到Queue。<br>Queue：消息队列，保存消息直到发送给Consumer。消息可存在多个队列。<br>Binding：绑定，基于routing-key 将Queue 与Exchange 关联，类似一条路由规则。</p>\n<img data-src=\"/posts/9bae/rbmq1.png\" class>\n\n<ul>\n<li>AMQP 协议消息路由</li>\n</ul>\n<p>AMQP 中增加了 Exchange 和 Binding 的角色。生产者把消息发布到 Exchange 上，消息最终到达队列并被消费者接收，而 Binding 决定交换器的消息应该发送到那个队列。</p>\n<img data-src=\"/posts/9bae/rbmq2.png\" class>\n\n<ul>\n<li>Exchange 类型</li>\n</ul>\n<p>headers（已废弃）</p>\n<p>direct：Message中routing-key 值与Binding 中binding-key 一致，则发入对应Queue。（完全匹配、单播方式）</p>\n<img data-src=\"/posts/9bae/rbmq3.png\" class>\n\n<p>fanout：不处理routing-key，将消息发到所有与Exchange 绑定的Queue。（广播方式）</p>\n<img data-src=\"/posts/9bae/rbmq4.png\" class>\n\n<p>topic：模式匹配routing-key 属性，Queue 需要通过通配符绑定到某个模式上。（类似于正则匹配到主题）</p>\n<img data-src=\"/posts/9bae/rbmq5.png\" class>\n\n<p>JMS Queue Exchange：云上产品支持（与direct 类似）<br>JMS topic Exchange：云上产品支持（与topic 类似）</p>\n<h4 id=\"RabbitMQ-安装与运行、集群配置\"><a href=\"#RabbitMQ-安装与运行、集群配置\" class=\"headerlink\" title=\"RabbitMQ 安装与运行、集群配置\"></a>RabbitMQ 安装与运行、集群配置</h4><p><a href=\"https://www.jianshu.com/p/79ca08116d57\">https://www.jianshu.com/p/79ca08116d57</a></p>\n<blockquote>\n<p>云上实例默认开通都为集群模式</p>\n</blockquote>\n<h3 id=\"二、云上最佳实践与业务结合\"><a href=\"#二、云上最佳实践与业务结合\" class=\"headerlink\" title=\"二、云上最佳实践与业务结合\"></a>二、云上最佳实践与业务结合</h3><h4 id=\"RabbitMQ-使用最佳实践\"><a href=\"#RabbitMQ-使用最佳实践\" class=\"headerlink\" title=\"RabbitMQ 使用最佳实践\"></a>RabbitMQ 使用最佳实践</h4><ul>\n<li>云上使用方式：直接创建对应地域的RabbitMQ 实例即可。</li>\n</ul>\n<p>当前日常环境实例规格限制（当前并未使用RabbitMQ 云产品）</p>\n<img data-src=\"/posts/9bae/rbmq6.png\" class>\n\n<ul>\n<li><p>云上实例高级特性</p>\n<ul>\n<li>消息重试</li>\n<li>延时消息（订单延时支付场景）</li>\n<li>死信Exchange</li>\n<li>消息存活时间</li>\n</ul>\n</li>\n<li><p>ACK 集群内部署RabbitMQ 使用方式</p>\n<ul>\n<li><p>创建RabbitMQ 的StatefulSet ，注意持久化存储配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">StatefulSet</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">camel-k-rabbitmq-test</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">default</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">podManagementPolicy:</span> <span class=\"string\">OrderedReady</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">revisionHistoryLimit:</span> <span class=\"number\">10</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">camel-k-rabbitmq-test</span></span><br><span class=\"line\">  <span class=\"attr\">serviceName:</span> <span class=\"string\">camel-k-rabbitmq-test-svc</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">creationTimestamp:</span> <span class=\"literal\">null</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">camel-k-rabbitmq-test</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">env:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">OPENSSL_SOURCE_SHA256</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">f89199be8b23ca45fc7cb9f1d8d3ee67312318286ad030f5316aca6462db6c96</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">OPENSSL_PGP_KEY_IDS</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"number\">0x8657ABB260F056B1E5190839D9C4D26D0E604491</span> <span class=\"number\">0x5B2545DAB21995F4088CEFAA36CEE4DEB00CFE33</span></span><br><span class=\"line\">            <span class=\"number\">0xED230BEC4D4F2518B9D7DF41F0DB4D21C1D35231</span> <span class=\"number\">0xC1F33DD8CE1D4CC613AF14DA9195C48241FBF7DD</span></span><br><span class=\"line\">            <span class=\"number\">0x7953AC1FBC3DC8B3B292393ED5E9E43F7DF9EE8C</span> <span class=\"number\">0xE5E52560DD91C556DDBDA5D02064C53641C25E5D</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">OTP_SOURCE_SHA256</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">af0f1928dcd16cd5746feeca8325811865578bf1a110a443d353ea3e509e6d41</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">RABBITMQ_DATA_DIR</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">/var/lib/rabbitmq</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">RABBITMQ_PGP_KEY_ID</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"number\">0x0A9AF2115F4687BD29803A206B73A36E6026DFCA</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">RABBITMQ_HOME</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">/opt/rabbitmq</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">RABBITMQ_LOGS</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">&#x27;-&#x27;</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">HOME</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">/var/lib/rabbitmq</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">LANG</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">C.UTF-8</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">LANGUAGE</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">C.UTF-8</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">LC_ALL</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">C.UTF-8</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">rabbitmq:3.9.11-management</span></span><br><span class=\"line\">        <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">camel-k-rabbitmq-test</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">15671</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">port1</span></span><br><span class=\"line\">          <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">15672</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">port2</span></span><br><span class=\"line\">          <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">15691</span></span><br><span class=\"line\">          <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">15692</span></span><br><span class=\"line\">          <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">25672</span></span><br><span class=\"line\">          <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">4369</span></span><br><span class=\"line\">          <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">5671</span></span><br><span class=\"line\">          <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">5672</span></span><br><span class=\"line\">          <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">limits:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">&quot;1&quot;</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">2Gi</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">250m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">512Mi</span></span><br><span class=\"line\">        <span class=\"attr\">terminationMessagePath:</span> <span class=\"string\">/dev/termination-log</span></span><br><span class=\"line\">        <span class=\"attr\">terminationMessagePolicy:</span> <span class=\"string\">File</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/var/lib/rabbitmq</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">volume-image-0</span></span><br><span class=\"line\">      <span class=\"attr\">dnsPolicy:</span> <span class=\"string\">ClusterFirst</span></span><br><span class=\"line\">      <span class=\"attr\">restartPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\">      <span class=\"attr\">schedulerName:</span> <span class=\"string\">default-scheduler</span></span><br><span class=\"line\">      <span class=\"attr\">securityContext:</span> &#123;&#125;</span><br><span class=\"line\">      <span class=\"attr\">terminationGracePeriodSeconds:</span> <span class=\"number\">30</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">hostPath:</span></span><br><span class=\"line\">          <span class=\"attr\">path:</span> <span class=\"string\">/var/lib/rabbitmq</span></span><br><span class=\"line\">          <span class=\"attr\">type:</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">volume-image-0</span></span><br><span class=\"line\">  <span class=\"attr\">updateStrategy:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">RollingUpdate</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>暴露RabbitMQ 的管理UI 后台，以及集群内部 5672 server端端口（建议从ACK 控制台新建，使用yaml 文件新建Service 会新建SLB）</p>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">rabbitmq-svc</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">default</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">clusterIP:</span> <span class=\"number\">192.168</span><span class=\"number\">.87</span><span class=\"number\">.198</span></span><br><span class=\"line\">  <span class=\"attr\">clusterIPs:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"number\">192.168</span><span class=\"number\">.87</span><span class=\"number\">.198</span></span><br><span class=\"line\">  <span class=\"attr\">externalTrafficPolicy:</span> <span class=\"string\">Cluster</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">nodePort:</span> <span class=\"number\">32166</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">5672</span></span><br><span class=\"line\">    <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">5672</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">camel-k-rabbitmq-test</span></span><br><span class=\"line\">  <span class=\"attr\">sessionAffinity:</span> <span class=\"string\">None</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">NodePort</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"业务测试验证\"><a href=\"#业务测试验证\" class=\"headerlink\" title=\"业务测试验证\"></a>业务测试验证</h4><blockquote>\n<p>Python 使用RabbitMQ 教程：<a href=\"https://www.rabbitmq.com/tutorials/tutorial-one-python.html\">https://www.rabbitmq.com/tutorials/tutorial-one-python.html</a></p>\n</blockquote>\n<ol>\n<li>创建Vhost、Exchange（topic 类型）</li>\n</ol>\n<img data-src=\"/posts/9bae/rbmq7.png\" class>\n<img data-src=\"/posts/9bae/rbmq8.png\" class>\n<img data-src=\"/posts/9bae/rbmq9.png\" class>\n\n\n\n<ol start=\"2\">\n<li>使用Python SDK 进行接收消息验证</li>\n</ol>\n<p>Publisher</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pika</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\">credentials = pika.PlainCredentials(<span class=\"string\">&#x27;xxx&#x27;</span>, <span class=\"string\">&#x27;xxx&#x27;</span>)</span><br><span class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(<span class=\"string\">&#x27;xxx.com&#x27;</span>, <span class=\"number\">5672</span>,<span class=\"string\">&#x27;liyanjun-test&#x27;</span>, credentials))</span><br><span class=\"line\">channel = connection.channel()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 发送到 user.info.test 该routing key 的Exchange 上</span></span><br><span class=\"line\">routing_key = <span class=\"string\">&#x27;user.info.test&#x27;</span></span><br><span class=\"line\">message = <span class=\"string\">&#x27;liyanjun rabbitmq test send...&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">channel.basic_publish(exchange=<span class=\"string\">&#x27;userinfo_test&#x27;</span>, routing_key=routing_key, body=message)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot; [x] Sent %r:%r&quot;</span> % (routing_key, message))</span><br><span class=\"line\">connection.close()</span><br></pre></td></tr></table></figure>\n<p>Consumer</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pika</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\">credentials = pika.PlainCredentials(<span class=\"string\">&#x27;xxx&#x27;</span>, <span class=\"string\">&#x27;xxx&#x27;</span>)</span><br><span class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(<span class=\"string\">&#x27;amqp-cn-i7m2fw6ry00u.mq-amqp.cn-hangzhou-249959-a.aliyuncs.com&#x27;</span>, <span class=\"number\">5672</span>,<span class=\"string\">&#x27;liyanjun-test&#x27;</span>, credentials))</span><br><span class=\"line\">channel = connection.channel()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># client 1</span></span><br><span class=\"line\">result = channel.queue_declare(<span class=\"string\">&#x27;user_info_queue&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># client 2</span></span><br><span class=\"line\">result = channel.queue_declare(<span class=\"string\">&#x27;user_account_queue&#x27;</span>)    </span><br><span class=\"line\">queue_name = result.method.queue</span><br><span class=\"line\"></span><br><span class=\"line\">binding_keys = sys.argv[<span class=\"number\">1</span>:]</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> binding_keys:</span><br><span class=\"line\">    sys.stderr.write(<span class=\"string\">&quot;Usage: %s [binding_key]...\\n&quot;</span> % sys.argv[<span class=\"number\">0</span>])</span><br><span class=\"line\">    sys.exit(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> binding_key <span class=\"keyword\">in</span> binding_keys:</span><br><span class=\"line\">    channel.queue_bind(exchange=<span class=\"string\">&#x27;userinfo_test&#x27;</span>, queue=queue_name, routing_key=binding_key)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27; [*] Waiting for logs. To exit press CTRL+C&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">callback</span>(<span class=\"params\">ch, method, properties, body</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot; [x] %r:%r&quot;</span> % (method.routing_key, body))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">channel.basic_consume(queue=queue_name, on_message_callback=callback, auto_ack=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">channel.start_consuming()</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动client，绑定不同routing key</span></span><br><span class=\"line\">python rabbitmq_client_test1.py user.info.test</span><br><span class=\"line\">python rabbitmq_client_test2.py user.account.test</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>验证</li>\n</ol>\n<ul>\n<li>userinfo_test Exchange 使用的binding key：<ul>\n<li>user.info.#           –&gt;  绑定user_info_queue 此QUEUE 上</li>\n<li>user.account.#     –&gt;  绑定user_account_queue 此QUEUE 上</li>\n</ul>\n</li>\n</ul>\n<img data-src=\"/posts/9bae/rbmq10.png\" class>\n\n<ul>\n<li>Server 端发送携带user.info.test  routing_key 的消息，只有client1 可接收到消息，符合预期。</li>\n</ul>\n<img data-src=\"/posts/9bae/rbmq11.png\" class>\n<img data-src=\"/posts/9bae/rbmq12.png\" class>\n\n\n<blockquote>\n<p>参考：<br>1、官方文档：<a href=\"https://www.rabbitmq.com/\">https://www.rabbitmq.com/</a><br>2、消息队列之RabbitMQ：<a href=\"https://www.jianshu.com/p/79ca08116d57\">https://www.jianshu.com/p/79ca08116d57</a><br>3、Alicloud云产品官方文档：<a href=\"https://help.aliyun.com/document_detail/141604.html\">https://help.aliyun.com/document_detail&#x2F;141604.html</a></p>\n</blockquote>\n","site":{"data":{"footer":"","styles":".post {\n  margin-top: 50px;\n  margin-bottom: 50px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n.headband {\n  display: none;\n}\nbody {\n  background: url(\"/images/background.jpeg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\n.post-block.page {\n  margin-top: 40px;\n}\n.category-all-page {\n  box-shadow: 0px 0px 10px 0px rgba(0,0,0,0.5);\n  background-color: #797d7f;\n  padding: 20px 30px 60px 30px;\n  border-radius: 25px 25px 25px 25px;\n}\n.category-all-title {\n  font-family: Impact;\n  font-size: 24px;\n  color: #0ff;\n}\n.category-list {\n  overflow: auto;\n}\n.category-list li {\n  height: 100%;\n  float: left;\n  border-right: 3px solid #222;\n  padding: 0 20px;\n}\n.category-all ul li {\n  list-style: none !important;\n}\n.category-list li:last-child {\n  border-right: none;\n}\n.category-list li a {\n  font-size: 16px;\n  text-decoration: none;\n  color: #7fff00;\n  font-family: Helvetica, Verdana, sans-serif;\n  -webkit-transition: all 0.5s ease;\n  -moz-transition: all 0.5s ease;\n  -o-transition: all 0.5s ease;\n  -ms-transition: all 0.5s ease;\n  transition: all 0.5s ease;\n}\n.category-list li a:hover {\n  color: #000;\n}\n.category-list li.active a {\n  font-weight: bold;\n  color: #000;\n}\n.tag-cloud a {\n  box-shadow: 0 1px 3px #6f42c1, 0 1px 2px #d9534f;\n  padding: 2px 10px;\n  margin: 8px;\n  background: rgba(193,66,92,0);\n  border-bottom: none;\n  border-radius: 20px;\n}\ncode {\n  background: #555;\n  color: #fff;\n}\n","variables":""}},"length":6399,"excerpt":"<h3 id=\"一、RabbitMQ-介绍\"><a href=\"#一、RabbitMQ-介绍\" class=\"headerlink\" title=\"一、RabbitMQ 介绍\"></a>一、RabbitMQ 介绍</h3><h4 id=\"什么是消息队列\"><a href=\"#什么是消息队列\" class=\"headerlink\" title=\"什么是消息队列\"></a>什么是消息队列</h4><p>消息（Message）是指在应用间传送的数据。消息可以非常简单，比如只包含文本字符串，也可以更复杂，可能包含嵌入对象。</p>\n<p>消息队列（Message Queue）是一种应用间的通信方式，消息发送后可以立即返回，由消息系统来确保消息的可靠传递。消息发布者只管把消息发布到 MQ 中而不用管谁来取，消息使用者只管从 MQ 中取消息而不管是谁发布的。这样发布者和使用者都不用知道对方的存在。</p>\n<h4 id=\"为何用消息队列\"><a href=\"#为何用消息队列\" class=\"headerlink\" title=\"为何用消息队列\"></a>为何用消息队列</h4><p>以常见的订单系统为例，用户点击【下单】按钮之后的业务逻辑可能包括：扣减库存、生成相应单据、发红包、发短信通知。在业务发展初期这些逻辑可能放在一起同步执行，随着业务的发展订单量增长，需要提升系统服务的性能，这时可以将一些不需要立即生效的操作拆分出来异步执行，比如发放红包、发短信通知等。这种场景下就可以用 MQ ，在下单的主流程（比如扣减库存、生成相应单据）完成之后发送一条消息到 MQ 让主流程快速完结，而由另外的单独线程拉取MQ的消息（或者由 MQ 推送消息），当发现 MQ 中有发红包或发短信之类的消息时，执行相应的业务逻辑。</p>\n<p>以上是用于业务解耦的情况，其它常见场景包括最终一致性、广播、错峰流控等等。</p>","more":"<h4 id=\"RabbitMQ-特点\"><a href=\"#RabbitMQ-特点\" class=\"headerlink\" title=\"RabbitMQ 特点\"></a>RabbitMQ 特点</h4><ul>\n<li>协议</li>\n</ul>\n<p>AMQP ：Advanced Message Queue，高级消息队列协议。它是应用层协议的一个开放标准，为面向消息的中间件设计，基于此协议的客户端与消息中间件可传递消息，并不受产品、开发语言等条件的限制。</p>\n<ul>\n<li>具体特点<ul>\n<li>可靠性：持久化、传输确认、发布确认机制。</li>\n<li>灵活的路由：Exchange 路由消息</li>\n<li>消息集群：多个RabbitMQ 组成集群，形成逻辑Broker</li>\n<li>高可用</li>\n<li>多种协议</li>\n<li>多语言客户端</li>\n<li>UI 管理后台</li>\n<li>跟踪机制：消息跟踪</li>\n<li>插件机制</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"RabbitMQ-概念模型\"><a href=\"#RabbitMQ-概念模型\" class=\"headerlink\" title=\"RabbitMQ 概念模型\"></a>RabbitMQ 概念模型</h4><ul>\n<li>基本概念（<a href=\"https://help.aliyun.com/document_detail/101628.html\">详细名词解释</a>）</li>\n</ul>\n<p>Vhost：虚拟主机，逻辑上分隔RabbitMQ 实例。<br>Broker：服务器实体，多个RabbitMQ 实例形成的集群。</p>\n<p>Connection：物理连接，如TCP 连接（应用与云上RabbitMQ 实例连接时大约需要15个TCP 报文交互）<br>Channel：信道，多路复用Connection （TCP 连接）</p>\n<p>Publisher：应用程序，向Exchange 发布消息。<br>Consumer：应用程序，从Queue 接收消息。</p>\n<p>Message：由消息头+消息体组成。消息头属性有：routing-key（路由键）、priority（优先级）、delivery-mode（是否持久性存储消息）<br>Exchange：交换器，接收消息并路由到Queue。<br>Queue：消息队列，保存消息直到发送给Consumer。消息可存在多个队列。<br>Binding：绑定，基于routing-key 将Queue 与Exchange 关联，类似一条路由规则。</p>\n<img data-src=\"/posts/9bae/rbmq1.png\" class>\n\n<ul>\n<li>AMQP 协议消息路由</li>\n</ul>\n<p>AMQP 中增加了 Exchange 和 Binding 的角色。生产者把消息发布到 Exchange 上，消息最终到达队列并被消费者接收，而 Binding 决定交换器的消息应该发送到那个队列。</p>\n<img data-src=\"/posts/9bae/rbmq2.png\" class>\n\n<ul>\n<li>Exchange 类型</li>\n</ul>\n<p>headers（已废弃）</p>\n<p>direct：Message中routing-key 值与Binding 中binding-key 一致，则发入对应Queue。（完全匹配、单播方式）</p>\n<img data-src=\"/posts/9bae/rbmq3.png\" class>\n\n<p>fanout：不处理routing-key，将消息发到所有与Exchange 绑定的Queue。（广播方式）</p>\n<img data-src=\"/posts/9bae/rbmq4.png\" class>\n\n<p>topic：模式匹配routing-key 属性，Queue 需要通过通配符绑定到某个模式上。（类似于正则匹配到主题）</p>\n<img data-src=\"/posts/9bae/rbmq5.png\" class>\n\n<p>JMS Queue Exchange：云上产品支持（与direct 类似）<br>JMS topic Exchange：云上产品支持（与topic 类似）</p>\n<h4 id=\"RabbitMQ-安装与运行、集群配置\"><a href=\"#RabbitMQ-安装与运行、集群配置\" class=\"headerlink\" title=\"RabbitMQ 安装与运行、集群配置\"></a>RabbitMQ 安装与运行、集群配置</h4><p><a href=\"https://www.jianshu.com/p/79ca08116d57\">https://www.jianshu.com/p/79ca08116d57</a></p>\n<blockquote>\n<p>云上实例默认开通都为集群模式</p>\n</blockquote>\n<h3 id=\"二、云上最佳实践与业务结合\"><a href=\"#二、云上最佳实践与业务结合\" class=\"headerlink\" title=\"二、云上最佳实践与业务结合\"></a>二、云上最佳实践与业务结合</h3><h4 id=\"RabbitMQ-使用最佳实践\"><a href=\"#RabbitMQ-使用最佳实践\" class=\"headerlink\" title=\"RabbitMQ 使用最佳实践\"></a>RabbitMQ 使用最佳实践</h4><ul>\n<li>云上使用方式：直接创建对应地域的RabbitMQ 实例即可。</li>\n</ul>\n<p>当前日常环境实例规格限制（当前并未使用RabbitMQ 云产品）</p>\n<img data-src=\"/posts/9bae/rbmq6.png\" class>\n\n<ul>\n<li><p>云上实例高级特性</p>\n<ul>\n<li>消息重试</li>\n<li>延时消息（订单延时支付场景）</li>\n<li>死信Exchange</li>\n<li>消息存活时间</li>\n</ul>\n</li>\n<li><p>ACK 集群内部署RabbitMQ 使用方式</p>\n<ul>\n<li><p>创建RabbitMQ 的StatefulSet ，注意持久化存储配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">StatefulSet</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">camel-k-rabbitmq-test</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">default</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">podManagementPolicy:</span> <span class=\"string\">OrderedReady</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">revisionHistoryLimit:</span> <span class=\"number\">10</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">camel-k-rabbitmq-test</span></span><br><span class=\"line\">  <span class=\"attr\">serviceName:</span> <span class=\"string\">camel-k-rabbitmq-test-svc</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">creationTimestamp:</span> <span class=\"literal\">null</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">camel-k-rabbitmq-test</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">env:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">OPENSSL_SOURCE_SHA256</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">f89199be8b23ca45fc7cb9f1d8d3ee67312318286ad030f5316aca6462db6c96</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">OPENSSL_PGP_KEY_IDS</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"number\">0x8657ABB260F056B1E5190839D9C4D26D0E604491</span> <span class=\"number\">0x5B2545DAB21995F4088CEFAA36CEE4DEB00CFE33</span></span><br><span class=\"line\">            <span class=\"number\">0xED230BEC4D4F2518B9D7DF41F0DB4D21C1D35231</span> <span class=\"number\">0xC1F33DD8CE1D4CC613AF14DA9195C48241FBF7DD</span></span><br><span class=\"line\">            <span class=\"number\">0x7953AC1FBC3DC8B3B292393ED5E9E43F7DF9EE8C</span> <span class=\"number\">0xE5E52560DD91C556DDBDA5D02064C53641C25E5D</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">OTP_SOURCE_SHA256</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">af0f1928dcd16cd5746feeca8325811865578bf1a110a443d353ea3e509e6d41</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">RABBITMQ_DATA_DIR</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">/var/lib/rabbitmq</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">RABBITMQ_PGP_KEY_ID</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"number\">0x0A9AF2115F4687BD29803A206B73A36E6026DFCA</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">RABBITMQ_HOME</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">/opt/rabbitmq</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">RABBITMQ_LOGS</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">&#x27;-&#x27;</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">HOME</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">/var/lib/rabbitmq</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">LANG</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">C.UTF-8</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">LANGUAGE</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">C.UTF-8</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">LC_ALL</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">C.UTF-8</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">rabbitmq:3.9.11-management</span></span><br><span class=\"line\">        <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">camel-k-rabbitmq-test</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">15671</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">port1</span></span><br><span class=\"line\">          <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">15672</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">port2</span></span><br><span class=\"line\">          <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">15691</span></span><br><span class=\"line\">          <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">15692</span></span><br><span class=\"line\">          <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">25672</span></span><br><span class=\"line\">          <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">4369</span></span><br><span class=\"line\">          <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">5671</span></span><br><span class=\"line\">          <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">5672</span></span><br><span class=\"line\">          <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">limits:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">&quot;1&quot;</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">2Gi</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">250m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">512Mi</span></span><br><span class=\"line\">        <span class=\"attr\">terminationMessagePath:</span> <span class=\"string\">/dev/termination-log</span></span><br><span class=\"line\">        <span class=\"attr\">terminationMessagePolicy:</span> <span class=\"string\">File</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/var/lib/rabbitmq</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">volume-image-0</span></span><br><span class=\"line\">      <span class=\"attr\">dnsPolicy:</span> <span class=\"string\">ClusterFirst</span></span><br><span class=\"line\">      <span class=\"attr\">restartPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\">      <span class=\"attr\">schedulerName:</span> <span class=\"string\">default-scheduler</span></span><br><span class=\"line\">      <span class=\"attr\">securityContext:</span> &#123;&#125;</span><br><span class=\"line\">      <span class=\"attr\">terminationGracePeriodSeconds:</span> <span class=\"number\">30</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">hostPath:</span></span><br><span class=\"line\">          <span class=\"attr\">path:</span> <span class=\"string\">/var/lib/rabbitmq</span></span><br><span class=\"line\">          <span class=\"attr\">type:</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">volume-image-0</span></span><br><span class=\"line\">  <span class=\"attr\">updateStrategy:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">RollingUpdate</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>暴露RabbitMQ 的管理UI 后台，以及集群内部 5672 server端端口（建议从ACK 控制台新建，使用yaml 文件新建Service 会新建SLB）</p>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">rabbitmq-svc</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">default</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">clusterIP:</span> <span class=\"number\">192.168</span><span class=\"number\">.87</span><span class=\"number\">.198</span></span><br><span class=\"line\">  <span class=\"attr\">clusterIPs:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"number\">192.168</span><span class=\"number\">.87</span><span class=\"number\">.198</span></span><br><span class=\"line\">  <span class=\"attr\">externalTrafficPolicy:</span> <span class=\"string\">Cluster</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">nodePort:</span> <span class=\"number\">32166</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">5672</span></span><br><span class=\"line\">    <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">5672</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">camel-k-rabbitmq-test</span></span><br><span class=\"line\">  <span class=\"attr\">sessionAffinity:</span> <span class=\"string\">None</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">NodePort</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"业务测试验证\"><a href=\"#业务测试验证\" class=\"headerlink\" title=\"业务测试验证\"></a>业务测试验证</h4><blockquote>\n<p>Python 使用RabbitMQ 教程：<a href=\"https://www.rabbitmq.com/tutorials/tutorial-one-python.html\">https://www.rabbitmq.com/tutorials/tutorial-one-python.html</a></p>\n</blockquote>\n<ol>\n<li>创建Vhost、Exchange（topic 类型）</li>\n</ol>\n<img data-src=\"/posts/9bae/rbmq7.png\" class>\n<img data-src=\"/posts/9bae/rbmq8.png\" class>\n<img data-src=\"/posts/9bae/rbmq9.png\" class>\n\n\n\n<ol start=\"2\">\n<li>使用Python SDK 进行接收消息验证</li>\n</ol>\n<p>Publisher</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pika</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\">credentials = pika.PlainCredentials(<span class=\"string\">&#x27;xxx&#x27;</span>, <span class=\"string\">&#x27;xxx&#x27;</span>)</span><br><span class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(<span class=\"string\">&#x27;xxx.com&#x27;</span>, <span class=\"number\">5672</span>,<span class=\"string\">&#x27;liyanjun-test&#x27;</span>, credentials))</span><br><span class=\"line\">channel = connection.channel()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 发送到 user.info.test 该routing key 的Exchange 上</span></span><br><span class=\"line\">routing_key = <span class=\"string\">&#x27;user.info.test&#x27;</span></span><br><span class=\"line\">message = <span class=\"string\">&#x27;liyanjun rabbitmq test send...&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">channel.basic_publish(exchange=<span class=\"string\">&#x27;userinfo_test&#x27;</span>, routing_key=routing_key, body=message)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot; [x] Sent %r:%r&quot;</span> % (routing_key, message))</span><br><span class=\"line\">connection.close()</span><br></pre></td></tr></table></figure>\n<p>Consumer</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pika</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\">credentials = pika.PlainCredentials(<span class=\"string\">&#x27;xxx&#x27;</span>, <span class=\"string\">&#x27;xxx&#x27;</span>)</span><br><span class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(<span class=\"string\">&#x27;amqp-cn-i7m2fw6ry00u.mq-amqp.cn-hangzhou-249959-a.aliyuncs.com&#x27;</span>, <span class=\"number\">5672</span>,<span class=\"string\">&#x27;liyanjun-test&#x27;</span>, credentials))</span><br><span class=\"line\">channel = connection.channel()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># client 1</span></span><br><span class=\"line\">result = channel.queue_declare(<span class=\"string\">&#x27;user_info_queue&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># client 2</span></span><br><span class=\"line\">result = channel.queue_declare(<span class=\"string\">&#x27;user_account_queue&#x27;</span>)    </span><br><span class=\"line\">queue_name = result.method.queue</span><br><span class=\"line\"></span><br><span class=\"line\">binding_keys = sys.argv[<span class=\"number\">1</span>:]</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> binding_keys:</span><br><span class=\"line\">    sys.stderr.write(<span class=\"string\">&quot;Usage: %s [binding_key]...\\n&quot;</span> % sys.argv[<span class=\"number\">0</span>])</span><br><span class=\"line\">    sys.exit(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> binding_key <span class=\"keyword\">in</span> binding_keys:</span><br><span class=\"line\">    channel.queue_bind(exchange=<span class=\"string\">&#x27;userinfo_test&#x27;</span>, queue=queue_name, routing_key=binding_key)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27; [*] Waiting for logs. To exit press CTRL+C&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">callback</span>(<span class=\"params\">ch, method, properties, body</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot; [x] %r:%r&quot;</span> % (method.routing_key, body))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">channel.basic_consume(queue=queue_name, on_message_callback=callback, auto_ack=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">channel.start_consuming()</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动client，绑定不同routing key</span></span><br><span class=\"line\">python rabbitmq_client_test1.py user.info.test</span><br><span class=\"line\">python rabbitmq_client_test2.py user.account.test</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>验证</li>\n</ol>\n<ul>\n<li>userinfo_test Exchange 使用的binding key：<ul>\n<li>user.info.#           –&gt;  绑定user_info_queue 此QUEUE 上</li>\n<li>user.account.#     –&gt;  绑定user_account_queue 此QUEUE 上</li>\n</ul>\n</li>\n</ul>\n<img data-src=\"/posts/9bae/rbmq10.png\" class>\n\n<ul>\n<li>Server 端发送携带user.info.test  routing_key 的消息，只有client1 可接收到消息，符合预期。</li>\n</ul>\n<img data-src=\"/posts/9bae/rbmq11.png\" class>\n<img data-src=\"/posts/9bae/rbmq12.png\" class>\n\n\n<blockquote>\n<p>参考：<br>1、官方文档：<a href=\"https://www.rabbitmq.com/\">https://www.rabbitmq.com/</a><br>2、消息队列之RabbitMQ：<a href=\"https://www.jianshu.com/p/79ca08116d57\">https://www.jianshu.com/p/79ca08116d57</a><br>3、Alicloud云产品官方文档：<a href=\"https://help.aliyun.com/document_detail/141604.html\">https://help.aliyun.com/document_detail&#x2F;141604.html</a></p>\n</blockquote>"},{"title":"基于 Ubuntu + Containerd 部署 Kubernetes 集群","abbrlink":"28d6","date":"2022-06-07T14:17:15.000Z","_content":"### 一、环境准备\n#### 1. multipass  虚拟机创建\n```shell\n# 生成密钥对\nssh-keygen -t rsa -b 4096 -f ~/k8s_rsa -C k8s\n\n# 创建 Master 节点\nmultipass launch -c 2 -m 2G -d 20G -n master --cloud-init - << EOF\nssh_authorized_keys:\n- $(cat ~/.ssh/k8s_rsa.pub)\nEOF\n\n# 创建 Node 节点\nmultipass launch -c 1 -m 2G -d 20G -n node1 --cloud-init - << EOF\nssh_authorized_keys:\n- $(cat ~/.ssh/k8s_rsa.pub)\nEOF\n\nmultipass launch -c 1 -m 2G -d 20G -n node2 --cloud-init - << EOF\nssh_authorized_keys:\n- $(cat ~/.ssh/k8s_rsa.pub)\nEOF\n```\n> --cloud-init ：导入本地生成的公钥文件到初始化系统中，可以使用密钥免密 SSH\n<!--more-->\n\n\n#### 2. 主机与网络规划\n| **主机 IP** | **主机名** | **主机配置** | **节点角色** |\n| --- | --- | --- | --- |\n| 192.168.64.4 | master1 | 2C/2G | master 节点 |\n| 192.168.64.5 | node1 | 1C/1G | node 节点 |\n| 192.168.64.6 | node2 | 1C/1G | node 节点 |\n\n| **子网 Subnet** | **CIDR 网段** |\n| --- | --- |\n| nodeSubnet | 192.168.64.0/24 |\n| PodSubnet | 172.16.0.0/16 |\n| ServiceSubnet | 10.10.0.0/16 |\n\n\n#### 3.软件版本\n| **软件** | **版本** |\n| --- | --- |\n| 操作系统 | Ubuntu 20.04.4 LTS |\n| 内核版本 | 5.4.0-109-generic |\n| containerd | 1.5.10-1 |\n| kubernetes | v1.23.2 |\n| kubeadm | v1.23.2 |\n| kube-apiserver | v1.23.2 |\n| kube-controller-manager | v1.23.2 |\n| kube-scheduler | v1.23.2 |\n| kubectl | v1.23.2 |\n| kubelet | v1.23.2 |\n| kube-proxy |  |\n| etcd | v3.5.1 |\n| CNI 插件（calico） | v3.18 |\n\n\n### 二、集群配置（所有节点执行）\n#### 1. 节点初始化\n\n- 主机名与 host 解析\n```shell\nhostnamectl --static set-hostname master    # master 节点执行\nhostnamectl --static set-hostname node1     # node1 节点执行\nhostnamectl --static set-hostname node2     # node2 节点执行\n\nsudo tee -a /etc/hosts << EOF\n192.168.64.4 master\n192.168.64.5 node1\n192.168.64.6 node2\nEOF\n```\n\n- 关闭防火墙与禁用 swap 分区\n```shell\nsudo ufw disable && sudo systemctl disable ufw\n\nswapoff -a\nsed -ri 's/.*swap.*/#&/' /etc/fstab\n```\n> k8s集群安装为什么需要关闭 swap 分区？ swap 必须关，否则 kubelet 起不来,进而导致 k8s 集群起不来； 且考虑 kublet 会用 swap 做数据交换的话，对性能影响比较大\n\n\n- 同步时间与时区\n```shell\nsudo cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\nsudo timedatectl set-timezone Asia/Shanghai\n\n# 将当前的 UTC 时间写入硬件时钟 (硬件时间默认为UTC)\nsudo timedatectl set-local-rtc 0\n# 启用 NTP 时间同步：\nsudo timedatectl set-ntp yes\n\n# 校准时间服务器-时间同步(推荐使用 chronyc 进行平滑同步)\nsudo apt-get install chrony -y\nsudo chronyc tracking\n# 手动校准-强制更新时间\n# chronyc -a makestep\n# 系统时钟同步硬件时钟\nsudo hwclock -w\n\n# 重启依赖于系统时间的服务\nsudo systemctl restart rsyslog.service cron.service\n```\n\n- 内核模块加载与配置\n```shell\n# 1.安装 ipvs\nsudo apt-get install ipset ipvsadm -y\n\n# 2.加载内核模块\n# 配置重启后永久加载模块\nsudo tee /etc/modules-load.d/k8s.conf << EOF\n# netfilter\nbr_netfilter\n# containerd.\noverlay\n# ipvs\nip_vs\nip_vs_rr\nip_vs_wrr\nip_vs_sh\nnf_conntrack\nEOF\n# 临时加载模块\nmod_tmp=(br_netfilter overlay ip_vs ip_vs_rr ip_vs_wrr ip_vs_sh nf_conntrack)\nfor m in ${mod_tmp[@]};do sudo modprobe $m; done\nlsmod | egrep \"ip_vs|nf_conntrack_ipv4\"\n\n# 3.配置内核参数\n# 设置 sysctl 必须参数，重启后永久生效\nsudo tee /etc/sysctl.d/99-kubernetes-cri.conf << EOF\nnet.bridge.bridge-nf-call-ipv6tables = 1\nnet.bridge.bridge-nf-call-iptables = 1\nnet.ipv4.ip_forward = 1\nEOF\n# 临时应用 sysctl 参数而无需重新启动\nsudo sysctl --system\n```\n\n- 配置免密登录（master 节点执行，非必须）\n```shell\n# master 节点执行\nssh-keygen\nssh-copy-id -i ~/.ssh/id_rsa.pub root@node1\nssh-copy-id -i ~/.ssh/id_rsa.pub root@node2\n```\n\n#### 2. 容器运行时安装\n```shell\n# 1.删除旧版本\nsudo apt-get remove docker docker-engine docker.io containerd runc\n \n# 2.更新 apt 程序包索引并安装程序包，以允许 apt 通过 HTTPS 使用存储库\nsudo apt-get update\nsudo apt-get install \\\n  apt-transport-https \\\n  ca-certificates \\\n  curl \\\n  gnupg \\\n  lsb-release -y\n\n# 3.添加 Docker 的官方 GPG 密钥\nsudo mkdir -p /etc/apt/keyrings\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\n\n# 4.设置稳定存储库，添加 nightly 或 test 存储库\necho \"deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\\n $(lsb_release -cs) stable nightly\" | sudo tee /etc/apt/sources.list.d/container.list\n \n# 5.安装 containerd\n#更新 apt 包索引，安装最新版本的 containerd 或进入下一步安装特定版本\nsudo apt-get update\n#查看 containerd.io 可用的版本\napt-cache madison containerd.io\n#安装指定版本\nsudo apt install containerd.io=1.5.10-1 -y\n\n# 6.配置 containerd\ncontainerd config default | sudo tee /etc/containerd/config.toml\n#替换 pause 镜像源\nsudo sed -i \"s#k8s.gcr.io/pause#registry.cn-hangzhou.aliyuncs.com/google_containers/pause#g\"  /etc/containerd/config.toml\n# docker.io & gcr.io & k8s.gcr.io & quay.io 镜像加速\nsudo tee ~/tmp.txt << EOF\n        [plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors.\"docker.io\"]\n          endpoint = [\"https://taa4w07u.mirror.aliyuncs.com\"]\n        [plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors.\"gcr.io\"]\n          endpoint = [\"https://gcr.mirrors.ustc.edu.cn\"]\n        [plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors.\"k8s.gcr.io\"]\n          endpoint = [\"https://gcr.mirrors.ustc.edu.cn/google-containers/\", \"https://registry.aliyuncs.com/google-containers/\"]\n        [plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors.\"quay.io\"]\n          endpoint = [\"https://quay.mirrors.ustc.edu.cn\"]\nEOF\nsudo sed -i '/registry.mirrors\\]/r ./tmp.txt' /etc/containerd/config.toml\n#使用 SystemdCgroup 驱动程序，节点资源紧张时更稳定\nsudo sed -i 's# SystemdCgroup = false# SystemdCgroup = true#g' /etc/containerd/config.toml\n\n# 7.启动 containerd 并验证\nsudo systemctl daemon-reload\nsudo systemctl enable containerd\nsudo systemctl restart containerd\n#验证\nsudo ctr version\n\n\n```\n\n### 三、构建集群\n#### 1.组件安装（所有节点执行）\n```shell\n# 使用Alicloud加速镜像\ncurl https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | sudo apt-key add -\nsudo tee /etc/apt/sources.list.d/kubernetes.list << EOF\ndeb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main\nEOF\n\n# 更新 apt 包索引 & 查看并安装版本\nsudo apt-get update\napt-cache madison kubeadm |head\nsudo apt install kubeadm=1.23.2-00 kubelet=1.23.2-00 kubectl=1.23.2-00 -y\n# 锁定版本\nsudo apt-mark hold kubelet kubeadm kubectl\n```\n\n```shell\n# 配置客户端工具 runtime 与镜像端点配置\nsudo crictl config runtime-endpoint /run/containerd/containerd.sock\nsudo tee /etc/crictl.yaml << EOF\nruntime-endpoint: unix:///run/containerd/containerd.sock\nimage-endpoint: unix:///run/containerd/containerd.sock\ntimeout: 10\ndebug: false\nEOF\n\n# 重载 systemd 守护进程并将 kubelet 设置开机启动\nsudo systemctl daemon-reload\nsudo systemctl enable --now kubelet\n# 查看 kubelet 状态异常，会每隔几秒重启，陷入等待 kubeadm 指令的死循环\nsystemctl status kubelet \n\n```\n\n#### 2.初始化主节点\n+ Master 节点执行\n```shell\n# 导出默认初始化配置\nkubeadm config print init-defaults > kubeadm.yaml\n\n# 根据本地环境修改初始配置内容\ncat > kubeadm.yaml << EOF\napiVersion: kubeadm.k8s.io/v1beta3\nbootstrapTokens:\n- groups:\n  - system:bootstrappers:kubeadm:default-node-token\n  token: abcdef.0123456789abcdef\n  ttl: 24h0m0s\n  usages:\n  - signing\n  - authentication\nkind: InitConfiguration\nlocalAPIEndpoint:\n  advertiseAddress: 192.168.64.4 # 修改 master 节点 IP\n  bindPort: 6443\nnodeRegistration:\n  criSocket: /run/containerd/containerd.sock # 修改容器运行时为 containerd\n  imagePullPolicy: IfNotPresent\n  name: master # 修改 master 节点名称\n  taints: # master 节点添加污点，不能调度应用\n  - effect: \"NoSchedule\"\n    key: \"node-role.kubernetes.io/master\"\n---\napiServer:\n  timeoutForControlPlane: 4m0s\napiVersion: kubeadm.k8s.io/v1beta3\ncertificatesDir: /etc/kubernetes/pki\nclusterName: kubernetes\ncontrollerManager: {}\ndns: {}\netcd:\n  local:\n    dataDir: /var/lib/etcd\nimageRepository: registry.cn-hangzhou.aliyuncs.com/google_containers # 修改镜像加速地址\nkind: ClusterConfiguration\nkubernetesVersion: 1.23.0\nnetworking:\n  dnsDomain: cluster.local\n  podSubnet: 172.16.0.0/16  # 修改 Pod 子网\n  serviceSubnet: 10.10.0.0/16 # 修改 Service CIDR 网段\nscheduler: {}\n---\napiVersion: kubeproxy.config.k8s.io/v1alpha1\nkind: KubeProxyConfiguration\nmode: ipvs # 修改kube-proxy 模式为ipvs，默认为iptables\n---\napiVersion: kubelet.config.k8s.io/v1beta1\nkind: KubeletConfiguration\ncgroupDriver: systemd # 配置 cgroup driver\nEOF\n\n# 查看初始化集群所需镜像与提前拉取\nkubeadm config images list --config kubeadm.yaml\nkubeadm config images pull --config kubeadm.yaml\n\n# 初始化 master 节点\nsudo kubeadm init --config=kubeadm.yaml\n\n```\n\n+ Node 节点执行\n```shell\n#初始化完成生成的命令：Node 节点执行，加入集群\nsudo kubeadm join 192.168.64.4:6443 --token abcdef.0123456789abcdef \\\n\t--discovery-token-ca-cert-hash sha256:6e25620c2478e38edfe335761b8dd37dbbe0dc8c1df9b41d539b148732d32718\n#打印 join token 值\n#kubeadm token create --print-join-command\n\n#初始化完成生成的命令：用于 kubectl 命令\nmkdir -p $HOME/.kube\nsudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\nsudo chown $(id -u):$(id -g) $HOME/.kube/config\n```\n\n#### 3.安装 CNI 网络插件（calico）\n> calico 插件官方地址: [https://projectcalico.docs.tigera.io/getting-started/kubernetes/quickstart](https://projectcalico.docs.tigera.io/getting-started/kubernetes/quickstart)\n\n```shell\n# calico 官方下载 calico 插件部署清单\nwget https://docs.projectcalico.org/v3.18/manifests/calico.yaml\n#wget https://docs.projectcalico.org/v3.22/manifests/calico.yaml\n\n# 修改自定义配置\nvim calico.yaml\n- name: CALICO_IPV4POOL_CIDR\n  value: \"172.16.0.0/16\"\n  \n# 验证等待 calico 插件 Pod 成功运行\nwatch kubectl get pod -n kube-system\nNAME                                       READY   STATUS    RESTARTS     AGE\ncalico-kube-controllers-6cfb54c7bb-7xdld   1/1     Running   0            2m51s\ncalico-node-sjr6r                          1/1     Running   0            2m52s\ncalico-node-vsczr                          1/1     Running   0            2m51s\n\n\n```\n\n```shell\n# 设置节点角色\nkubectl label nodes master node-role.kubernetes.io/control-plane=\nkubectl label nodes node1 node-role.kubernetes.io/work=\nkubectl label nodes node2 node-role.kubernetes.io/work=\nkubectl get nodes\n\n# 自动补齐 kubectl 命令\nsudo apt install -y bash-completion\nsource /usr/share/bash-completion/bash_completion\nsource <(kubectl completion bash)\necho \"source <(kubectl completion bash)\" >> ~/.bashrc\n\n# nerdctl 工具（替代 docker 命令）\n#官方地址\n# https://github.com/containerd/nerdctl\n#下载安装\nwget https://github.com/containerd/nerdctl/releases/download/v0.20.0/nerdctl-0.20.0-linux-amd64.tar.gz\ntar Cxfz /usr/local/bin/ nerdctl-0.20.0-linux-amd64.tar.gz\n#使用方式\nsudo nerdctl -n k8s.io images \nsudo nerdctl -n k8s.io ps\nsudo nerdctl -n k8s.io images     # 等同于 = sudo ctr -n k8s.io images ls\nsudo nerdctl -n k8s.io pull nginx # 等同于 = sudo crictl pull nginx\n```\n\n```shell\n# flannel 插件重置方式，非适用 calico\nkubeadm reset\nifconfig cni0 down && ip link delete cni0\nifconfig flannel.1 down && ip link delete flannel.1\nrm -rf /var/lib/cni/\n```\n\n#### 4.集群部署验证\n```shell\n# 部署 Nginx Deployment\nkubectl create deployment nginx --image=nginx\n\n# 暴露 Nginx 服务，类型为 NodePort\nkubectl expose deployment nginx --port=80 --target-port=80 --type=NodePort \n\n# 访问验证\ncurl 10.10.225.108:80 -I      # 请求 Service 端口（port，集群内部）\ncurl 192.168.64.5:31052 -I    # 请求 Node 节点端口（nodePort，可集群外部访问）\ncurl 172.16.166.132:80 -I     # 请求 Pod 应用内部端口（targetPort，容器的启动端口）\n```\n\n#### 5.Kubernetes 组件\n**控制平面组件**\n\n- kube-apiserver：多实例伸缩，高可用且可均衡流量？\n- etcd：高可用与备份策略？\n- kube-scheduler  调度策略：Pod 资源需求、硬件/软件/策略约束、亲和性和反亲和性规范、数据位置、工作负载间干扰和最后时限\n- kube-controller-manager\n\n**数据平面组件（所有节点）**\n\n- kubelet\n- kubeproxy\n- 容器运行时（CR）：containerd（Kubernetes 后续版本不使用 docker）\n\n**插件 Addons**\n\n- 网络插件：calico、flannel\n\n**可观测性：日志与监控**\n\n- 日志：fluentd\n- 监控：Prometheus\n\n### 四、Kubernetes 仪表板（Dashboard）\n#### 1.Kubernetes 原生仪表板\n> 官方文档：[https://kubernetes.io/zh/docs/tasks/access-application-cluster/web-ui-dashboard/](https://kubernetes.io/zh/docs/tasks/access-application-cluster/web-ui-dashboard/)\n\n```shell\n# 1.部署 Dashboard 清单\n#wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.5.1/aio/deploy/recommended.yaml\n#kubectl apply -f recommended.yaml\nkubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.6.0/aio/deploy/recommended.yaml\n\n# 2.启用 Dashboard 访问\n#查看资源是否正常启动\nkubectl get pod,service -n kubernetes-dashboard\n#修改服务暴露为 nodePort 方式\nkubectl edit service kubernetes-dashboard -n kubernetes-dashboard\n#===主要配置内容\n  ports:\n  - nodePort: 30333  # 新增\n    port: 443\n    protocol: TCP\n    targetPort: 8443\n  selector:\n    k8s-app: kubernetes-dashboard\n  sessionAffinity: None\n  type: NodePort  # 修改\n#### \n\n# 3.默认仪表板部署为最小 RBAC 权限集，需要操作资源时，需要创建 ClusterRole 角色。\n# RBAC 参考：https://github.com/kubernetes/dashboard/blob/master/docs/user/access-control/README.md\n#登录 Dashboard\nkubectl describe secret -n kubernetes-dashboard $(kubectl get secret -n kubernetes-dashboard |grep kubernetes-dashboard-token |awk '{print $1}')\n#浏览器访问（使用firefox） https://192.168.64.4:30333\n#使用上面获取的 token 值登录（默认 token 只有 kubernetes-dashboard 空间权限）\n```\n\n#### 2.K9S 集群管理工具\n官方文档：[https://k9scli.io/](https://k9scli.io/)\n\n### 五、参考文档\n1、[multipass 官网](https://multipass.run/)\n2、[Kubernetes 官方文档](https://kubernetes.io/zh/docs/concepts/overview/components/#container-runtime)\n3、[二进制方式安装 Kubernetes 集群](https://blog.weiyigeek.top/2022/5-7-654.html)\n\n","source":"_posts/ubuntuk8sdeploy.md","raw":"---\ntitle: 基于 Ubuntu + Containerd 部署 Kubernetes 集群\ncategories:\n  - CNCF\ntags:\n  - Kubernetes\nabbrlink: 28d6\ndate: 2022-06-07 22:17:15\n---\n### 一、环境准备\n#### 1. multipass  虚拟机创建\n```shell\n# 生成密钥对\nssh-keygen -t rsa -b 4096 -f ~/k8s_rsa -C k8s\n\n# 创建 Master 节点\nmultipass launch -c 2 -m 2G -d 20G -n master --cloud-init - << EOF\nssh_authorized_keys:\n- $(cat ~/.ssh/k8s_rsa.pub)\nEOF\n\n# 创建 Node 节点\nmultipass launch -c 1 -m 2G -d 20G -n node1 --cloud-init - << EOF\nssh_authorized_keys:\n- $(cat ~/.ssh/k8s_rsa.pub)\nEOF\n\nmultipass launch -c 1 -m 2G -d 20G -n node2 --cloud-init - << EOF\nssh_authorized_keys:\n- $(cat ~/.ssh/k8s_rsa.pub)\nEOF\n```\n> --cloud-init ：导入本地生成的公钥文件到初始化系统中，可以使用密钥免密 SSH\n<!--more-->\n\n\n#### 2. 主机与网络规划\n| **主机 IP** | **主机名** | **主机配置** | **节点角色** |\n| --- | --- | --- | --- |\n| 192.168.64.4 | master1 | 2C/2G | master 节点 |\n| 192.168.64.5 | node1 | 1C/1G | node 节点 |\n| 192.168.64.6 | node2 | 1C/1G | node 节点 |\n\n| **子网 Subnet** | **CIDR 网段** |\n| --- | --- |\n| nodeSubnet | 192.168.64.0/24 |\n| PodSubnet | 172.16.0.0/16 |\n| ServiceSubnet | 10.10.0.0/16 |\n\n\n#### 3.软件版本\n| **软件** | **版本** |\n| --- | --- |\n| 操作系统 | Ubuntu 20.04.4 LTS |\n| 内核版本 | 5.4.0-109-generic |\n| containerd | 1.5.10-1 |\n| kubernetes | v1.23.2 |\n| kubeadm | v1.23.2 |\n| kube-apiserver | v1.23.2 |\n| kube-controller-manager | v1.23.2 |\n| kube-scheduler | v1.23.2 |\n| kubectl | v1.23.2 |\n| kubelet | v1.23.2 |\n| kube-proxy |  |\n| etcd | v3.5.1 |\n| CNI 插件（calico） | v3.18 |\n\n\n### 二、集群配置（所有节点执行）\n#### 1. 节点初始化\n\n- 主机名与 host 解析\n```shell\nhostnamectl --static set-hostname master    # master 节点执行\nhostnamectl --static set-hostname node1     # node1 节点执行\nhostnamectl --static set-hostname node2     # node2 节点执行\n\nsudo tee -a /etc/hosts << EOF\n192.168.64.4 master\n192.168.64.5 node1\n192.168.64.6 node2\nEOF\n```\n\n- 关闭防火墙与禁用 swap 分区\n```shell\nsudo ufw disable && sudo systemctl disable ufw\n\nswapoff -a\nsed -ri 's/.*swap.*/#&/' /etc/fstab\n```\n> k8s集群安装为什么需要关闭 swap 分区？ swap 必须关，否则 kubelet 起不来,进而导致 k8s 集群起不来； 且考虑 kublet 会用 swap 做数据交换的话，对性能影响比较大\n\n\n- 同步时间与时区\n```shell\nsudo cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\nsudo timedatectl set-timezone Asia/Shanghai\n\n# 将当前的 UTC 时间写入硬件时钟 (硬件时间默认为UTC)\nsudo timedatectl set-local-rtc 0\n# 启用 NTP 时间同步：\nsudo timedatectl set-ntp yes\n\n# 校准时间服务器-时间同步(推荐使用 chronyc 进行平滑同步)\nsudo apt-get install chrony -y\nsudo chronyc tracking\n# 手动校准-强制更新时间\n# chronyc -a makestep\n# 系统时钟同步硬件时钟\nsudo hwclock -w\n\n# 重启依赖于系统时间的服务\nsudo systemctl restart rsyslog.service cron.service\n```\n\n- 内核模块加载与配置\n```shell\n# 1.安装 ipvs\nsudo apt-get install ipset ipvsadm -y\n\n# 2.加载内核模块\n# 配置重启后永久加载模块\nsudo tee /etc/modules-load.d/k8s.conf << EOF\n# netfilter\nbr_netfilter\n# containerd.\noverlay\n# ipvs\nip_vs\nip_vs_rr\nip_vs_wrr\nip_vs_sh\nnf_conntrack\nEOF\n# 临时加载模块\nmod_tmp=(br_netfilter overlay ip_vs ip_vs_rr ip_vs_wrr ip_vs_sh nf_conntrack)\nfor m in ${mod_tmp[@]};do sudo modprobe $m; done\nlsmod | egrep \"ip_vs|nf_conntrack_ipv4\"\n\n# 3.配置内核参数\n# 设置 sysctl 必须参数，重启后永久生效\nsudo tee /etc/sysctl.d/99-kubernetes-cri.conf << EOF\nnet.bridge.bridge-nf-call-ipv6tables = 1\nnet.bridge.bridge-nf-call-iptables = 1\nnet.ipv4.ip_forward = 1\nEOF\n# 临时应用 sysctl 参数而无需重新启动\nsudo sysctl --system\n```\n\n- 配置免密登录（master 节点执行，非必须）\n```shell\n# master 节点执行\nssh-keygen\nssh-copy-id -i ~/.ssh/id_rsa.pub root@node1\nssh-copy-id -i ~/.ssh/id_rsa.pub root@node2\n```\n\n#### 2. 容器运行时安装\n```shell\n# 1.删除旧版本\nsudo apt-get remove docker docker-engine docker.io containerd runc\n \n# 2.更新 apt 程序包索引并安装程序包，以允许 apt 通过 HTTPS 使用存储库\nsudo apt-get update\nsudo apt-get install \\\n  apt-transport-https \\\n  ca-certificates \\\n  curl \\\n  gnupg \\\n  lsb-release -y\n\n# 3.添加 Docker 的官方 GPG 密钥\nsudo mkdir -p /etc/apt/keyrings\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\n\n# 4.设置稳定存储库，添加 nightly 或 test 存储库\necho \"deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\\n $(lsb_release -cs) stable nightly\" | sudo tee /etc/apt/sources.list.d/container.list\n \n# 5.安装 containerd\n#更新 apt 包索引，安装最新版本的 containerd 或进入下一步安装特定版本\nsudo apt-get update\n#查看 containerd.io 可用的版本\napt-cache madison containerd.io\n#安装指定版本\nsudo apt install containerd.io=1.5.10-1 -y\n\n# 6.配置 containerd\ncontainerd config default | sudo tee /etc/containerd/config.toml\n#替换 pause 镜像源\nsudo sed -i \"s#k8s.gcr.io/pause#registry.cn-hangzhou.aliyuncs.com/google_containers/pause#g\"  /etc/containerd/config.toml\n# docker.io & gcr.io & k8s.gcr.io & quay.io 镜像加速\nsudo tee ~/tmp.txt << EOF\n        [plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors.\"docker.io\"]\n          endpoint = [\"https://taa4w07u.mirror.aliyuncs.com\"]\n        [plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors.\"gcr.io\"]\n          endpoint = [\"https://gcr.mirrors.ustc.edu.cn\"]\n        [plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors.\"k8s.gcr.io\"]\n          endpoint = [\"https://gcr.mirrors.ustc.edu.cn/google-containers/\", \"https://registry.aliyuncs.com/google-containers/\"]\n        [plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors.\"quay.io\"]\n          endpoint = [\"https://quay.mirrors.ustc.edu.cn\"]\nEOF\nsudo sed -i '/registry.mirrors\\]/r ./tmp.txt' /etc/containerd/config.toml\n#使用 SystemdCgroup 驱动程序，节点资源紧张时更稳定\nsudo sed -i 's# SystemdCgroup = false# SystemdCgroup = true#g' /etc/containerd/config.toml\n\n# 7.启动 containerd 并验证\nsudo systemctl daemon-reload\nsudo systemctl enable containerd\nsudo systemctl restart containerd\n#验证\nsudo ctr version\n\n\n```\n\n### 三、构建集群\n#### 1.组件安装（所有节点执行）\n```shell\n# 使用Alicloud加速镜像\ncurl https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | sudo apt-key add -\nsudo tee /etc/apt/sources.list.d/kubernetes.list << EOF\ndeb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main\nEOF\n\n# 更新 apt 包索引 & 查看并安装版本\nsudo apt-get update\napt-cache madison kubeadm |head\nsudo apt install kubeadm=1.23.2-00 kubelet=1.23.2-00 kubectl=1.23.2-00 -y\n# 锁定版本\nsudo apt-mark hold kubelet kubeadm kubectl\n```\n\n```shell\n# 配置客户端工具 runtime 与镜像端点配置\nsudo crictl config runtime-endpoint /run/containerd/containerd.sock\nsudo tee /etc/crictl.yaml << EOF\nruntime-endpoint: unix:///run/containerd/containerd.sock\nimage-endpoint: unix:///run/containerd/containerd.sock\ntimeout: 10\ndebug: false\nEOF\n\n# 重载 systemd 守护进程并将 kubelet 设置开机启动\nsudo systemctl daemon-reload\nsudo systemctl enable --now kubelet\n# 查看 kubelet 状态异常，会每隔几秒重启，陷入等待 kubeadm 指令的死循环\nsystemctl status kubelet \n\n```\n\n#### 2.初始化主节点\n+ Master 节点执行\n```shell\n# 导出默认初始化配置\nkubeadm config print init-defaults > kubeadm.yaml\n\n# 根据本地环境修改初始配置内容\ncat > kubeadm.yaml << EOF\napiVersion: kubeadm.k8s.io/v1beta3\nbootstrapTokens:\n- groups:\n  - system:bootstrappers:kubeadm:default-node-token\n  token: abcdef.0123456789abcdef\n  ttl: 24h0m0s\n  usages:\n  - signing\n  - authentication\nkind: InitConfiguration\nlocalAPIEndpoint:\n  advertiseAddress: 192.168.64.4 # 修改 master 节点 IP\n  bindPort: 6443\nnodeRegistration:\n  criSocket: /run/containerd/containerd.sock # 修改容器运行时为 containerd\n  imagePullPolicy: IfNotPresent\n  name: master # 修改 master 节点名称\n  taints: # master 节点添加污点，不能调度应用\n  - effect: \"NoSchedule\"\n    key: \"node-role.kubernetes.io/master\"\n---\napiServer:\n  timeoutForControlPlane: 4m0s\napiVersion: kubeadm.k8s.io/v1beta3\ncertificatesDir: /etc/kubernetes/pki\nclusterName: kubernetes\ncontrollerManager: {}\ndns: {}\netcd:\n  local:\n    dataDir: /var/lib/etcd\nimageRepository: registry.cn-hangzhou.aliyuncs.com/google_containers # 修改镜像加速地址\nkind: ClusterConfiguration\nkubernetesVersion: 1.23.0\nnetworking:\n  dnsDomain: cluster.local\n  podSubnet: 172.16.0.0/16  # 修改 Pod 子网\n  serviceSubnet: 10.10.0.0/16 # 修改 Service CIDR 网段\nscheduler: {}\n---\napiVersion: kubeproxy.config.k8s.io/v1alpha1\nkind: KubeProxyConfiguration\nmode: ipvs # 修改kube-proxy 模式为ipvs，默认为iptables\n---\napiVersion: kubelet.config.k8s.io/v1beta1\nkind: KubeletConfiguration\ncgroupDriver: systemd # 配置 cgroup driver\nEOF\n\n# 查看初始化集群所需镜像与提前拉取\nkubeadm config images list --config kubeadm.yaml\nkubeadm config images pull --config kubeadm.yaml\n\n# 初始化 master 节点\nsudo kubeadm init --config=kubeadm.yaml\n\n```\n\n+ Node 节点执行\n```shell\n#初始化完成生成的命令：Node 节点执行，加入集群\nsudo kubeadm join 192.168.64.4:6443 --token abcdef.0123456789abcdef \\\n\t--discovery-token-ca-cert-hash sha256:6e25620c2478e38edfe335761b8dd37dbbe0dc8c1df9b41d539b148732d32718\n#打印 join token 值\n#kubeadm token create --print-join-command\n\n#初始化完成生成的命令：用于 kubectl 命令\nmkdir -p $HOME/.kube\nsudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\nsudo chown $(id -u):$(id -g) $HOME/.kube/config\n```\n\n#### 3.安装 CNI 网络插件（calico）\n> calico 插件官方地址: [https://projectcalico.docs.tigera.io/getting-started/kubernetes/quickstart](https://projectcalico.docs.tigera.io/getting-started/kubernetes/quickstart)\n\n```shell\n# calico 官方下载 calico 插件部署清单\nwget https://docs.projectcalico.org/v3.18/manifests/calico.yaml\n#wget https://docs.projectcalico.org/v3.22/manifests/calico.yaml\n\n# 修改自定义配置\nvim calico.yaml\n- name: CALICO_IPV4POOL_CIDR\n  value: \"172.16.0.0/16\"\n  \n# 验证等待 calico 插件 Pod 成功运行\nwatch kubectl get pod -n kube-system\nNAME                                       READY   STATUS    RESTARTS     AGE\ncalico-kube-controllers-6cfb54c7bb-7xdld   1/1     Running   0            2m51s\ncalico-node-sjr6r                          1/1     Running   0            2m52s\ncalico-node-vsczr                          1/1     Running   0            2m51s\n\n\n```\n\n```shell\n# 设置节点角色\nkubectl label nodes master node-role.kubernetes.io/control-plane=\nkubectl label nodes node1 node-role.kubernetes.io/work=\nkubectl label nodes node2 node-role.kubernetes.io/work=\nkubectl get nodes\n\n# 自动补齐 kubectl 命令\nsudo apt install -y bash-completion\nsource /usr/share/bash-completion/bash_completion\nsource <(kubectl completion bash)\necho \"source <(kubectl completion bash)\" >> ~/.bashrc\n\n# nerdctl 工具（替代 docker 命令）\n#官方地址\n# https://github.com/containerd/nerdctl\n#下载安装\nwget https://github.com/containerd/nerdctl/releases/download/v0.20.0/nerdctl-0.20.0-linux-amd64.tar.gz\ntar Cxfz /usr/local/bin/ nerdctl-0.20.0-linux-amd64.tar.gz\n#使用方式\nsudo nerdctl -n k8s.io images \nsudo nerdctl -n k8s.io ps\nsudo nerdctl -n k8s.io images     # 等同于 = sudo ctr -n k8s.io images ls\nsudo nerdctl -n k8s.io pull nginx # 等同于 = sudo crictl pull nginx\n```\n\n```shell\n# flannel 插件重置方式，非适用 calico\nkubeadm reset\nifconfig cni0 down && ip link delete cni0\nifconfig flannel.1 down && ip link delete flannel.1\nrm -rf /var/lib/cni/\n```\n\n#### 4.集群部署验证\n```shell\n# 部署 Nginx Deployment\nkubectl create deployment nginx --image=nginx\n\n# 暴露 Nginx 服务，类型为 NodePort\nkubectl expose deployment nginx --port=80 --target-port=80 --type=NodePort \n\n# 访问验证\ncurl 10.10.225.108:80 -I      # 请求 Service 端口（port，集群内部）\ncurl 192.168.64.5:31052 -I    # 请求 Node 节点端口（nodePort，可集群外部访问）\ncurl 172.16.166.132:80 -I     # 请求 Pod 应用内部端口（targetPort，容器的启动端口）\n```\n\n#### 5.Kubernetes 组件\n**控制平面组件**\n\n- kube-apiserver：多实例伸缩，高可用且可均衡流量？\n- etcd：高可用与备份策略？\n- kube-scheduler  调度策略：Pod 资源需求、硬件/软件/策略约束、亲和性和反亲和性规范、数据位置、工作负载间干扰和最后时限\n- kube-controller-manager\n\n**数据平面组件（所有节点）**\n\n- kubelet\n- kubeproxy\n- 容器运行时（CR）：containerd（Kubernetes 后续版本不使用 docker）\n\n**插件 Addons**\n\n- 网络插件：calico、flannel\n\n**可观测性：日志与监控**\n\n- 日志：fluentd\n- 监控：Prometheus\n\n### 四、Kubernetes 仪表板（Dashboard）\n#### 1.Kubernetes 原生仪表板\n> 官方文档：[https://kubernetes.io/zh/docs/tasks/access-application-cluster/web-ui-dashboard/](https://kubernetes.io/zh/docs/tasks/access-application-cluster/web-ui-dashboard/)\n\n```shell\n# 1.部署 Dashboard 清单\n#wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.5.1/aio/deploy/recommended.yaml\n#kubectl apply -f recommended.yaml\nkubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.6.0/aio/deploy/recommended.yaml\n\n# 2.启用 Dashboard 访问\n#查看资源是否正常启动\nkubectl get pod,service -n kubernetes-dashboard\n#修改服务暴露为 nodePort 方式\nkubectl edit service kubernetes-dashboard -n kubernetes-dashboard\n#===主要配置内容\n  ports:\n  - nodePort: 30333  # 新增\n    port: 443\n    protocol: TCP\n    targetPort: 8443\n  selector:\n    k8s-app: kubernetes-dashboard\n  sessionAffinity: None\n  type: NodePort  # 修改\n#### \n\n# 3.默认仪表板部署为最小 RBAC 权限集，需要操作资源时，需要创建 ClusterRole 角色。\n# RBAC 参考：https://github.com/kubernetes/dashboard/blob/master/docs/user/access-control/README.md\n#登录 Dashboard\nkubectl describe secret -n kubernetes-dashboard $(kubectl get secret -n kubernetes-dashboard |grep kubernetes-dashboard-token |awk '{print $1}')\n#浏览器访问（使用firefox） https://192.168.64.4:30333\n#使用上面获取的 token 值登录（默认 token 只有 kubernetes-dashboard 空间权限）\n```\n\n#### 2.K9S 集群管理工具\n官方文档：[https://k9scli.io/](https://k9scli.io/)\n\n### 五、参考文档\n1、[multipass 官网](https://multipass.run/)\n2、[Kubernetes 官方文档](https://kubernetes.io/zh/docs/concepts/overview/components/#container-runtime)\n3、[二进制方式安装 Kubernetes 集群](https://blog.weiyigeek.top/2022/5-7-654.html)\n\n","slug":"ubuntuk8sdeploy","published":1,"updated":"2024-01-21T15:28:43.162Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm0fat8zr0026s0nj920cab1s","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"一、环境准备\"><a href=\"#一、环境准备\" class=\"headerlink\" title=\"一、环境准备\"></a>一、环境准备</h3><h4 id=\"1-multipass-虚拟机创建\"><a href=\"#1-multipass-虚拟机创建\" class=\"headerlink\" title=\"1. multipass  虚拟机创建\"></a>1. multipass  虚拟机创建</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">生成密钥对</span></span><br><span class=\"line\">ssh-keygen -t rsa -b 4096 -f ~/k8s_rsa -C k8s</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建 Master 节点</span></span><br><span class=\"line\">multipass launch -c 2 -m 2G -d 20G -n master --cloud-init - &lt;&lt; EOF</span><br><span class=\"line\">ssh_authorized_keys:</span><br><span class=\"line\">- $(cat ~/.ssh/k8s_rsa.pub)</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建 Node 节点</span></span><br><span class=\"line\">multipass launch -c 1 -m 2G -d 20G -n node1 --cloud-init - &lt;&lt; EOF</span><br><span class=\"line\">ssh_authorized_keys:</span><br><span class=\"line\">- $(cat ~/.ssh/k8s_rsa.pub)</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">multipass launch -c 1 -m 2G -d 20G -n node2 --cloud-init - &lt;&lt; EOF</span><br><span class=\"line\">ssh_authorized_keys:</span><br><span class=\"line\">- $(cat ~/.ssh/k8s_rsa.pub)</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>–cloud-init ：导入本地生成的公钥文件到初始化系统中，可以使用密钥免密 SSH</p>\n</blockquote>\n<span id=\"more\"></span>\n\n\n<h4 id=\"2-主机与网络规划\"><a href=\"#2-主机与网络规划\" class=\"headerlink\" title=\"2. 主机与网络规划\"></a>2. 主机与网络规划</h4><table>\n<thead>\n<tr>\n<th><strong>主机 IP</strong></th>\n<th><strong>主机名</strong></th>\n<th><strong>主机配置</strong></th>\n<th><strong>节点角色</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>192.168.64.4</td>\n<td>master1</td>\n<td>2C&#x2F;2G</td>\n<td>master 节点</td>\n</tr>\n<tr>\n<td>192.168.64.5</td>\n<td>node1</td>\n<td>1C&#x2F;1G</td>\n<td>node 节点</td>\n</tr>\n<tr>\n<td>192.168.64.6</td>\n<td>node2</td>\n<td>1C&#x2F;1G</td>\n<td>node 节点</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th><strong>子网 Subnet</strong></th>\n<th><strong>CIDR 网段</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>nodeSubnet</td>\n<td>192.168.64.0&#x2F;24</td>\n</tr>\n<tr>\n<td>PodSubnet</td>\n<td>172.16.0.0&#x2F;16</td>\n</tr>\n<tr>\n<td>ServiceSubnet</td>\n<td>10.10.0.0&#x2F;16</td>\n</tr>\n</tbody></table>\n<h4 id=\"3-软件版本\"><a href=\"#3-软件版本\" class=\"headerlink\" title=\"3.软件版本\"></a>3.软件版本</h4><table>\n<thead>\n<tr>\n<th><strong>软件</strong></th>\n<th><strong>版本</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>操作系统</td>\n<td>Ubuntu 20.04.4 LTS</td>\n</tr>\n<tr>\n<td>内核版本</td>\n<td>5.4.0-109-generic</td>\n</tr>\n<tr>\n<td>containerd</td>\n<td>1.5.10-1</td>\n</tr>\n<tr>\n<td>kubernetes</td>\n<td>v1.23.2</td>\n</tr>\n<tr>\n<td>kubeadm</td>\n<td>v1.23.2</td>\n</tr>\n<tr>\n<td>kube-apiserver</td>\n<td>v1.23.2</td>\n</tr>\n<tr>\n<td>kube-controller-manager</td>\n<td>v1.23.2</td>\n</tr>\n<tr>\n<td>kube-scheduler</td>\n<td>v1.23.2</td>\n</tr>\n<tr>\n<td>kubectl</td>\n<td>v1.23.2</td>\n</tr>\n<tr>\n<td>kubelet</td>\n<td>v1.23.2</td>\n</tr>\n<tr>\n<td>kube-proxy</td>\n<td></td>\n</tr>\n<tr>\n<td>etcd</td>\n<td>v3.5.1</td>\n</tr>\n<tr>\n<td>CNI 插件（calico）</td>\n<td>v3.18</td>\n</tr>\n</tbody></table>\n<h3 id=\"二、集群配置（所有节点执行）\"><a href=\"#二、集群配置（所有节点执行）\" class=\"headerlink\" title=\"二、集群配置（所有节点执行）\"></a>二、集群配置（所有节点执行）</h3><h4 id=\"1-节点初始化\"><a href=\"#1-节点初始化\" class=\"headerlink\" title=\"1. 节点初始化\"></a>1. 节点初始化</h4><ul>\n<li><p>主机名与 host 解析</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl --static set-hostname master    # master 节点执行</span><br><span class=\"line\">hostnamectl --static set-hostname node1     # node1 节点执行</span><br><span class=\"line\">hostnamectl --static set-hostname node2     # node2 节点执行</span><br><span class=\"line\"></span><br><span class=\"line\">sudo tee -a /etc/hosts &lt;&lt; EOF</span><br><span class=\"line\">192.168.64.4 master</span><br><span class=\"line\">192.168.64.5 node1</span><br><span class=\"line\">192.168.64.6 node2</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>关闭防火墙与禁用 swap 分区</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ufw disable &amp;&amp; sudo systemctl disable ufw</span><br><span class=\"line\"></span><br><span class=\"line\">swapoff -a</span><br><span class=\"line\">sed -ri &#x27;s/.*swap.*/#&amp;/&#x27; /etc/fstab</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>k8s集群安装为什么需要关闭 swap 分区？ swap 必须关，否则 kubelet 起不来,进而导致 k8s 集群起不来； 且考虑 kublet 会用 swap 做数据交换的话，对性能影响比较大</p>\n</blockquote>\n</li>\n<li><p>同步时间与时区</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class=\"line\">sudo timedatectl set-timezone Asia/Shanghai</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">将当前的 UTC 时间写入硬件时钟 (硬件时间默认为UTC)</span></span><br><span class=\"line\">sudo timedatectl set-local-rtc 0</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启用 NTP 时间同步：</span></span><br><span class=\"line\">sudo timedatectl set-ntp yes</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">校准时间服务器-时间同步(推荐使用 chronyc 进行平滑同步)</span></span><br><span class=\"line\">sudo apt-get install chrony -y</span><br><span class=\"line\">sudo chronyc tracking</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">手动校准-强制更新时间</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">chronyc -a makestep</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">系统时钟同步硬件时钟</span></span><br><span class=\"line\">sudo hwclock -w</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">重启依赖于系统时间的服务</span></span><br><span class=\"line\">sudo systemctl restart rsyslog.service cron.service</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>内核模块加载与配置</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">1.安装 ipvs</span></span><br><span class=\"line\">sudo apt-get install ipset ipvsadm -y</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">2.加载内核模块</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置重启后永久加载模块</span></span><br><span class=\"line\">sudo tee /etc/modules-load.d/k8s.conf &lt;&lt; EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">netfilter</span></span><br><span class=\"line\">br_netfilter</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">containerd.</span></span><br><span class=\"line\">overlay</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ipvs</span></span><br><span class=\"line\">ip_vs</span><br><span class=\"line\">ip_vs_rr</span><br><span class=\"line\">ip_vs_wrr</span><br><span class=\"line\">ip_vs_sh</span><br><span class=\"line\">nf_conntrack</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">临时加载模块</span></span><br><span class=\"line\">mod_tmp=(br_netfilter overlay ip_vs ip_vs_rr ip_vs_wrr ip_vs_sh nf_conntrack)</span><br><span class=\"line\">for m in $&#123;mod_tmp[@]&#125;;do sudo modprobe $m; done</span><br><span class=\"line\">lsmod | egrep &quot;ip_vs|nf_conntrack_ipv4&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">3.配置内核参数</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">设置 sysctl 必须参数，重启后永久生效</span></span><br><span class=\"line\">sudo tee /etc/sysctl.d/99-kubernetes-cri.conf &lt;&lt; EOF</span><br><span class=\"line\">net.bridge.bridge-nf-call-ipv6tables = 1</span><br><span class=\"line\">net.bridge.bridge-nf-call-iptables = 1</span><br><span class=\"line\">net.ipv4.ip_forward = 1</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">临时应用 sysctl 参数而无需重新启动</span></span><br><span class=\"line\">sudo sysctl --system</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置免密登录（master 节点执行，非必须）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">master 节点执行</span></span><br><span class=\"line\">ssh-keygen</span><br><span class=\"line\">ssh-copy-id -i ~/.ssh/id_rsa.pub root@node1</span><br><span class=\"line\">ssh-copy-id -i ~/.ssh/id_rsa.pub root@node2</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"2-容器运行时安装\"><a href=\"#2-容器运行时安装\" class=\"headerlink\" title=\"2. 容器运行时安装\"></a>2. 容器运行时安装</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">1.删除旧版本</span></span><br><span class=\"line\">sudo apt-get remove docker docker-engine docker.io containerd runc</span><br><span class=\"line\"><span class=\"meta prompt_\"> </span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">2.更新 apt 程序包索引并安装程序包，以允许 apt 通过 HTTPS 使用存储库</span></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install \\</span><br><span class=\"line\">  apt-transport-https \\</span><br><span class=\"line\">  ca-certificates \\</span><br><span class=\"line\">  curl \\</span><br><span class=\"line\">  gnupg \\</span><br><span class=\"line\">  lsb-release -y</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">3.添加 Docker 的官方 GPG 密钥</span></span><br><span class=\"line\">sudo mkdir -p /etc/apt/keyrings</span><br><span class=\"line\">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">4.设置稳定存储库，添加 nightly 或 <span class=\"built_in\">test</span> 存储库</span></span><br><span class=\"line\">echo &quot;deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\</span><br><span class=\"line\"><span class=\"meta prompt_\"> $</span><span class=\"language-bash\">(lsb_release -cs) stable nightly<span class=\"string\">&quot; | sudo tee /etc/apt/sources.list.d/container.list</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"> </span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"string\">5.安装 containerd</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"string\">更新 apt 包索引，安装最新版本的 containerd 或进入下一步安装特定版本</span></span></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"string\">查看 containerd.io 可用的版本</span></span></span><br><span class=\"line\">apt-cache madison containerd.io</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"string\">安装指定版本</span></span></span><br><span class=\"line\">sudo apt install containerd.io=1.5.10-1 -y</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"string\">6.配置 containerd</span></span></span><br><span class=\"line\">containerd config default | sudo tee /etc/containerd/config.toml</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"string\">替换 pause 镜像源</span></span></span><br><span class=\"line\">sudo sed -i &quot;s#k8s.gcr.io/pause#registry.cn-hangzhou.aliyuncs.com/google_containers/pause#g&quot;  /etc/containerd/config.toml</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"string\">docker.io &amp; gcr.io &amp; k8s.gcr.io &amp; quay.io 镜像加速</span></span></span><br><span class=\"line\">sudo tee ~/tmp.txt &lt;&lt; EOF</span><br><span class=\"line\">        [plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.mirrors.&quot;docker.io&quot;]</span><br><span class=\"line\">          endpoint = [&quot;https://taa4w07u.mirror.aliyuncs.com&quot;]</span><br><span class=\"line\">        [plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.mirrors.&quot;gcr.io&quot;]</span><br><span class=\"line\">          endpoint = [&quot;https://gcr.mirrors.ustc.edu.cn&quot;]</span><br><span class=\"line\">        [plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.mirrors.&quot;k8s.gcr.io&quot;]</span><br><span class=\"line\">          endpoint = [&quot;https://gcr.mirrors.ustc.edu.cn/google-containers/&quot;, &quot;https://registry.aliyuncs.com/google-containers/&quot;]</span><br><span class=\"line\">        [plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.mirrors.&quot;quay.io&quot;]</span><br><span class=\"line\">          endpoint = [&quot;https://quay.mirrors.ustc.edu.cn&quot;]</span><br><span class=\"line\">EOF</span><br><span class=\"line\">sudo sed -i &#x27;/registry.mirrors\\]/r ./tmp.txt&#x27; /etc/containerd/config.toml</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"string\">使用 SystemdCgroup 驱动程序，节点资源紧张时更稳定</span></span></span><br><span class=\"line\">sudo sed -i &#x27;s# SystemdCgroup = false# SystemdCgroup = true#g&#x27; /etc/containerd/config.toml</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"string\">7.启动 containerd 并验证</span></span></span><br><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo systemctl enable containerd</span><br><span class=\"line\">sudo systemctl restart containerd</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"string\">验证</span></span></span><br><span class=\"line\">sudo ctr version</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"三、构建集群\"><a href=\"#三、构建集群\" class=\"headerlink\" title=\"三、构建集群\"></a>三、构建集群</h3><h4 id=\"1-组件安装（所有节点执行）\"><a href=\"#1-组件安装（所有节点执行）\" class=\"headerlink\" title=\"1.组件安装（所有节点执行）\"></a>1.组件安装（所有节点执行）</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用Alicloud加速镜像</span></span><br><span class=\"line\">curl https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | sudo apt-key add -</span><br><span class=\"line\">sudo tee /etc/apt/sources.list.d/kubernetes.list &lt;&lt; EOF</span><br><span class=\"line\">deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">更新 apt 包索引 &amp; 查看并安装版本</span></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">apt-cache madison kubeadm |head</span><br><span class=\"line\">sudo apt install kubeadm=1.23.2-00 kubelet=1.23.2-00 kubectl=1.23.2-00 -y</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">锁定版本</span></span><br><span class=\"line\">sudo apt-mark hold kubelet kubeadm kubectl</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置客户端工具 runtime 与镜像端点配置</span></span><br><span class=\"line\">sudo crictl config runtime-endpoint /run/containerd/containerd.sock</span><br><span class=\"line\">sudo tee /etc/crictl.yaml &lt;&lt; EOF</span><br><span class=\"line\">runtime-endpoint: unix:///run/containerd/containerd.sock</span><br><span class=\"line\">image-endpoint: unix:///run/containerd/containerd.sock</span><br><span class=\"line\">timeout: 10</span><br><span class=\"line\">debug: false</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">重载 systemd 守护进程并将 kubelet 设置开机启动</span></span><br><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo systemctl enable --now kubelet</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看 kubelet 状态异常，会每隔几秒重启，陷入等待 kubeadm 指令的死循环</span></span><br><span class=\"line\">systemctl status kubelet </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-初始化主节点\"><a href=\"#2-初始化主节点\" class=\"headerlink\" title=\"2.初始化主节点\"></a>2.初始化主节点</h4><ul>\n<li><p>Master 节点执行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">导出默认初始化配置</span></span><br><span class=\"line\">kubeadm config print init-defaults &gt; kubeadm.yaml</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">根据本地环境修改初始配置内容</span></span><br><span class=\"line\">cat &gt; kubeadm.yaml &lt;&lt; EOF</span><br><span class=\"line\">apiVersion: kubeadm.k8s.io/v1beta3</span><br><span class=\"line\">bootstrapTokens:</span><br><span class=\"line\">- groups:</span><br><span class=\"line\">  - system:bootstrappers:kubeadm:default-node-token</span><br><span class=\"line\">  token: abcdef.0123456789abcdef</span><br><span class=\"line\">  ttl: 24h0m0s</span><br><span class=\"line\">  usages:</span><br><span class=\"line\">  - signing</span><br><span class=\"line\">  - authentication</span><br><span class=\"line\">kind: InitConfiguration</span><br><span class=\"line\">localAPIEndpoint:</span><br><span class=\"line\">  advertiseAddress: 192.168.64.4 # 修改 master 节点 IP</span><br><span class=\"line\">  bindPort: 6443</span><br><span class=\"line\">nodeRegistration:</span><br><span class=\"line\">  criSocket: /run/containerd/containerd.sock # 修改容器运行时为 containerd</span><br><span class=\"line\">  imagePullPolicy: IfNotPresent</span><br><span class=\"line\">  name: master # 修改 master 节点名称</span><br><span class=\"line\">  taints: # master 节点添加污点，不能调度应用</span><br><span class=\"line\">  - effect: &quot;NoSchedule&quot;</span><br><span class=\"line\">    key: &quot;node-role.kubernetes.io/master&quot;</span><br><span class=\"line\">---</span><br><span class=\"line\">apiServer:</span><br><span class=\"line\">  timeoutForControlPlane: 4m0s</span><br><span class=\"line\">apiVersion: kubeadm.k8s.io/v1beta3</span><br><span class=\"line\">certificatesDir: /etc/kubernetes/pki</span><br><span class=\"line\">clusterName: kubernetes</span><br><span class=\"line\">controllerManager: &#123;&#125;</span><br><span class=\"line\">dns: &#123;&#125;</span><br><span class=\"line\">etcd:</span><br><span class=\"line\">  local:</span><br><span class=\"line\">    dataDir: /var/lib/etcd</span><br><span class=\"line\">imageRepository: registry.cn-hangzhou.aliyuncs.com/google_containers # 修改镜像加速地址</span><br><span class=\"line\">kind: ClusterConfiguration</span><br><span class=\"line\">kubernetesVersion: 1.23.0</span><br><span class=\"line\">networking:</span><br><span class=\"line\">  dnsDomain: cluster.local</span><br><span class=\"line\">  podSubnet: 172.16.0.0/16  # 修改 Pod 子网</span><br><span class=\"line\">  serviceSubnet: 10.10.0.0/16 # 修改 Service CIDR 网段</span><br><span class=\"line\">scheduler: &#123;&#125;</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: kubeproxy.config.k8s.io/v1alpha1</span><br><span class=\"line\">kind: KubeProxyConfiguration</span><br><span class=\"line\">mode: ipvs # 修改kube-proxy 模式为ipvs，默认为iptables</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: kubelet.config.k8s.io/v1beta1</span><br><span class=\"line\">kind: KubeletConfiguration</span><br><span class=\"line\">cgroupDriver: systemd # 配置 cgroup driver</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看初始化集群所需镜像与提前拉取</span></span><br><span class=\"line\">kubeadm config images list --config kubeadm.yaml</span><br><span class=\"line\">kubeadm config images pull --config kubeadm.yaml</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">初始化 master 节点</span></span><br><span class=\"line\">sudo kubeadm init --config=kubeadm.yaml</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Node 节点执行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">初始化完成生成的命令：Node 节点执行，加入集群</span></span><br><span class=\"line\">sudo kubeadm join 192.168.64.4:6443 --token abcdef.0123456789abcdef \\</span><br><span class=\"line\">\t--discovery-token-ca-cert-hash sha256:6e25620c2478e38edfe335761b8dd37dbbe0dc8c1df9b41d539b148732d32718</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">打印 <span class=\"built_in\">join</span> token 值</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">kubeadm token create --print-join-command</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">初始化完成生成的命令：用于 kubectl 命令</span></span><br><span class=\"line\">mkdir -p $HOME/.kube</span><br><span class=\"line\">sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class=\"line\">sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"3-安装-CNI-网络插件（calico）\"><a href=\"#3-安装-CNI-网络插件（calico）\" class=\"headerlink\" title=\"3.安装 CNI 网络插件（calico）\"></a>3.安装 CNI 网络插件（calico）</h4><blockquote>\n<p>calico 插件官方地址: <a href=\"https://projectcalico.docs.tigera.io/getting-started/kubernetes/quickstart\">https://projectcalico.docs.tigera.io/getting-started/kubernetes/quickstart</a></p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">calico 官方下载 calico 插件部署清单</span></span><br><span class=\"line\">wget https://docs.projectcalico.org/v3.18/manifests/calico.yaml</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">wget https://docs.projectcalico.org/v3.22/manifests/calico.yaml</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改自定义配置</span></span><br><span class=\"line\">vim calico.yaml</span><br><span class=\"line\">- name: CALICO_IPV4POOL_CIDR</span><br><span class=\"line\">  value: &quot;172.16.0.0/16&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\">  </span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">验证等待 calico 插件 Pod 成功运行</span></span><br><span class=\"line\">watch kubectl get pod -n kube-system</span><br><span class=\"line\">NAME                                       READY   STATUS    RESTARTS     AGE</span><br><span class=\"line\">calico-kube-controllers-6cfb54c7bb-7xdld   1/1     Running   0            2m51s</span><br><span class=\"line\">calico-node-sjr6r                          1/1     Running   0            2m52s</span><br><span class=\"line\">calico-node-vsczr                          1/1     Running   0            2m51s</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">设置节点角色</span></span><br><span class=\"line\">kubectl label nodes master node-role.kubernetes.io/control-plane=</span><br><span class=\"line\">kubectl label nodes node1 node-role.kubernetes.io/work=</span><br><span class=\"line\">kubectl label nodes node2 node-role.kubernetes.io/work=</span><br><span class=\"line\">kubectl get nodes</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">自动补齐 kubectl 命令</span></span><br><span class=\"line\">sudo apt install -y bash-completion</span><br><span class=\"line\">source /usr/share/bash-completion/bash_completion</span><br><span class=\"line\">source &lt;(kubectl completion bash)</span><br><span class=\"line\">echo &quot;source &lt;(kubectl completion bash)&quot; &gt;&gt; ~/.bashrc</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">nerdctl 工具（替代 docker 命令）</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">官方地址</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">https://github.com/containerd/nerdctl</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">下载安装</span></span><br><span class=\"line\">wget https://github.com/containerd/nerdctl/releases/download/v0.20.0/nerdctl-0.20.0-linux-amd64.tar.gz</span><br><span class=\"line\">tar Cxfz /usr/local/bin/ nerdctl-0.20.0-linux-amd64.tar.gz</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">使用方式</span></span><br><span class=\"line\">sudo nerdctl -n k8s.io images </span><br><span class=\"line\">sudo nerdctl -n k8s.io ps</span><br><span class=\"line\">sudo nerdctl -n k8s.io images     # 等同于 = sudo ctr -n k8s.io images ls</span><br><span class=\"line\">sudo nerdctl -n k8s.io pull nginx # 等同于 = sudo crictl pull nginx</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">flannel 插件重置方式，非适用 calico</span></span><br><span class=\"line\">kubeadm reset</span><br><span class=\"line\">ifconfig cni0 down &amp;&amp; ip link delete cni0</span><br><span class=\"line\">ifconfig flannel.1 down &amp;&amp; ip link delete flannel.1</span><br><span class=\"line\">rm -rf /var/lib/cni/</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-集群部署验证\"><a href=\"#4-集群部署验证\" class=\"headerlink\" title=\"4.集群部署验证\"></a>4.集群部署验证</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">部署 Nginx Deployment</span></span><br><span class=\"line\">kubectl create deployment nginx --image=nginx</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">暴露 Nginx 服务，类型为 NodePort</span></span><br><span class=\"line\">kubectl expose deployment nginx --port=80 --target-port=80 --type=NodePort </span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">访问验证</span></span><br><span class=\"line\">curl 10.10.225.108:80 -I      # 请求 Service 端口（port，集群内部）</span><br><span class=\"line\">curl 192.168.64.5:31052 -I    # 请求 Node 节点端口（nodePort，可集群外部访问）</span><br><span class=\"line\">curl 172.16.166.132:80 -I     # 请求 Pod 应用内部端口（targetPort，容器的启动端口）</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-Kubernetes-组件\"><a href=\"#5-Kubernetes-组件\" class=\"headerlink\" title=\"5.Kubernetes 组件\"></a>5.Kubernetes 组件</h4><p><strong>控制平面组件</strong></p>\n<ul>\n<li>kube-apiserver：多实例伸缩，高可用且可均衡流量？</li>\n<li>etcd：高可用与备份策略？</li>\n<li>kube-scheduler  调度策略：Pod 资源需求、硬件&#x2F;软件&#x2F;策略约束、亲和性和反亲和性规范、数据位置、工作负载间干扰和最后时限</li>\n<li>kube-controller-manager</li>\n</ul>\n<p><strong>数据平面组件（所有节点）</strong></p>\n<ul>\n<li>kubelet</li>\n<li>kubeproxy</li>\n<li>容器运行时（CR）：containerd（Kubernetes 后续版本不使用 docker）</li>\n</ul>\n<p><strong>插件 Addons</strong></p>\n<ul>\n<li>网络插件：calico、flannel</li>\n</ul>\n<p><strong>可观测性：日志与监控</strong></p>\n<ul>\n<li>日志：fluentd</li>\n<li>监控：Prometheus</li>\n</ul>\n<h3 id=\"四、Kubernetes-仪表板（Dashboard）\"><a href=\"#四、Kubernetes-仪表板（Dashboard）\" class=\"headerlink\" title=\"四、Kubernetes 仪表板（Dashboard）\"></a>四、Kubernetes 仪表板（Dashboard）</h3><h4 id=\"1-Kubernetes-原生仪表板\"><a href=\"#1-Kubernetes-原生仪表板\" class=\"headerlink\" title=\"1.Kubernetes 原生仪表板\"></a>1.Kubernetes 原生仪表板</h4><blockquote>\n<p>官方文档：<a href=\"https://kubernetes.io/zh/docs/tasks/access-application-cluster/web-ui-dashboard/\">https://kubernetes.io/zh/docs/tasks/access-application-cluster/web-ui-dashboard/</a></p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">1.部署 Dashboard 清单</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.5.1/aio/deploy/recommended.yaml</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">kubectl apply -f recommended.yaml</span></span><br><span class=\"line\">kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.6.0/aio/deploy/recommended.yaml</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">2.启用 Dashboard 访问</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">查看资源是否正常启动</span></span><br><span class=\"line\">kubectl get pod,service -n kubernetes-dashboard</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">修改服务暴露为 nodePort 方式</span></span><br><span class=\"line\">kubectl edit service kubernetes-dashboard -n kubernetes-dashboard</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">===主要配置内容</span></span><br><span class=\"line\">  ports:</span><br><span class=\"line\">  - nodePort: 30333  # 新增</span><br><span class=\"line\">    port: 443</span><br><span class=\"line\">    protocol: TCP</span><br><span class=\"line\">    targetPort: 8443</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    k8s-app: kubernetes-dashboard</span><br><span class=\"line\">  sessionAffinity: None</span><br><span class=\"line\">  type: NodePort  # 修改</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\">###</span></span> </span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">3.默认仪表板部署为最小 RBAC 权限集，需要操作资源时，需要创建 ClusterRole 角色。</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">RBAC 参考：https://github.com/kubernetes/dashboard/blob/master/docs/user/access-control/README.md</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">登录 Dashboard</span></span><br><span class=\"line\">kubectl describe secret -n kubernetes-dashboard $(kubectl get secret -n kubernetes-dashboard |grep kubernetes-dashboard-token |awk &#x27;&#123;print $1&#125;&#x27;)</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">浏览器访问（使用firefox） https://192.168.64.4:30333</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">使用上面获取的 token 值登录（默认 token 只有 kubernetes-dashboard 空间权限）</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-K9S-集群管理工具\"><a href=\"#2-K9S-集群管理工具\" class=\"headerlink\" title=\"2.K9S 集群管理工具\"></a>2.K9S 集群管理工具</h4><p>官方文档：<a href=\"https://k9scli.io/\">https://k9scli.io/</a></p>\n<h3 id=\"五、参考文档\"><a href=\"#五、参考文档\" class=\"headerlink\" title=\"五、参考文档\"></a>五、参考文档</h3><p>1、<a href=\"https://multipass.run/\">multipass 官网</a><br>2、<a href=\"https://kubernetes.io/zh/docs/concepts/overview/components/#container-runtime\">Kubernetes 官方文档</a><br>3、<a href=\"https://blog.weiyigeek.top/2022/5-7-654.html\">二进制方式安装 Kubernetes 集群</a></p>\n","site":{"data":{"footer":"","styles":".post {\n  margin-top: 50px;\n  margin-bottom: 50px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\n.headband {\n  display: none;\n}\nbody {\n  background: url(\"/images/background.jpeg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: cover;\n  background-position: 50% 50%;\n}\n.content-wrap {\n  opacity: 0.9;\n}\n.sidebar {\n  opacity: 0.9;\n}\n.header-inner {\n  background: rgba(255,255,255,0.9);\n}\n.popup {\n  opacity: 0.9;\n}\n.post-block.page {\n  margin-top: 40px;\n}\n.category-all-page {\n  box-shadow: 0px 0px 10px 0px rgba(0,0,0,0.5);\n  background-color: #797d7f;\n  padding: 20px 30px 60px 30px;\n  border-radius: 25px 25px 25px 25px;\n}\n.category-all-title {\n  font-family: Impact;\n  font-size: 24px;\n  color: #0ff;\n}\n.category-list {\n  overflow: auto;\n}\n.category-list li {\n  height: 100%;\n  float: left;\n  border-right: 3px solid #222;\n  padding: 0 20px;\n}\n.category-all ul li {\n  list-style: none !important;\n}\n.category-list li:last-child {\n  border-right: none;\n}\n.category-list li a {\n  font-size: 16px;\n  text-decoration: none;\n  color: #7fff00;\n  font-family: Helvetica, Verdana, sans-serif;\n  -webkit-transition: all 0.5s ease;\n  -moz-transition: all 0.5s ease;\n  -o-transition: all 0.5s ease;\n  -ms-transition: all 0.5s ease;\n  transition: all 0.5s ease;\n}\n.category-list li a:hover {\n  color: #000;\n}\n.category-list li.active a {\n  font-weight: bold;\n  color: #000;\n}\n.tag-cloud a {\n  box-shadow: 0 1px 3px #6f42c1, 0 1px 2px #d9534f;\n  padding: 2px 10px;\n  margin: 8px;\n  background: rgba(193,66,92,0);\n  border-bottom: none;\n  border-radius: 20px;\n}\ncode {\n  background: #555;\n  color: #fff;\n}\n","variables":""}},"length":10836,"excerpt":"<h3 id=\"一、环境准备\"><a href=\"#一、环境准备\" class=\"headerlink\" title=\"一、环境准备\"></a>一、环境准备</h3><h4 id=\"1-multipass-虚拟机创建\"><a href=\"#1-multipass-虚拟机创建\" class=\"headerlink\" title=\"1. multipass  虚拟机创建\"></a>1. multipass  虚拟机创建</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">生成密钥对</span></span><br><span class=\"line\">ssh-keygen -t rsa -b 4096 -f ~/k8s_rsa -C k8s</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建 Master 节点</span></span><br><span class=\"line\">multipass launch -c 2 -m 2G -d 20G -n master --cloud-init - &lt;&lt; EOF</span><br><span class=\"line\">ssh_authorized_keys:</span><br><span class=\"line\">- $(cat ~/.ssh/k8s_rsa.pub)</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建 Node 节点</span></span><br><span class=\"line\">multipass launch -c 1 -m 2G -d 20G -n node1 --cloud-init - &lt;&lt; EOF</span><br><span class=\"line\">ssh_authorized_keys:</span><br><span class=\"line\">- $(cat ~/.ssh/k8s_rsa.pub)</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">multipass launch -c 1 -m 2G -d 20G -n node2 --cloud-init - &lt;&lt; EOF</span><br><span class=\"line\">ssh_authorized_keys:</span><br><span class=\"line\">- $(cat ~/.ssh/k8s_rsa.pub)</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>–cloud-init ：导入本地生成的公钥文件到初始化系统中，可以使用密钥免密 SSH</p>\n</blockquote>","more":"<h4 id=\"2-主机与网络规划\"><a href=\"#2-主机与网络规划\" class=\"headerlink\" title=\"2. 主机与网络规划\"></a>2. 主机与网络规划</h4><table>\n<thead>\n<tr>\n<th><strong>主机 IP</strong></th>\n<th><strong>主机名</strong></th>\n<th><strong>主机配置</strong></th>\n<th><strong>节点角色</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>192.168.64.4</td>\n<td>master1</td>\n<td>2C&#x2F;2G</td>\n<td>master 节点</td>\n</tr>\n<tr>\n<td>192.168.64.5</td>\n<td>node1</td>\n<td>1C&#x2F;1G</td>\n<td>node 节点</td>\n</tr>\n<tr>\n<td>192.168.64.6</td>\n<td>node2</td>\n<td>1C&#x2F;1G</td>\n<td>node 节点</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th><strong>子网 Subnet</strong></th>\n<th><strong>CIDR 网段</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>nodeSubnet</td>\n<td>192.168.64.0&#x2F;24</td>\n</tr>\n<tr>\n<td>PodSubnet</td>\n<td>172.16.0.0&#x2F;16</td>\n</tr>\n<tr>\n<td>ServiceSubnet</td>\n<td>10.10.0.0&#x2F;16</td>\n</tr>\n</tbody></table>\n<h4 id=\"3-软件版本\"><a href=\"#3-软件版本\" class=\"headerlink\" title=\"3.软件版本\"></a>3.软件版本</h4><table>\n<thead>\n<tr>\n<th><strong>软件</strong></th>\n<th><strong>版本</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>操作系统</td>\n<td>Ubuntu 20.04.4 LTS</td>\n</tr>\n<tr>\n<td>内核版本</td>\n<td>5.4.0-109-generic</td>\n</tr>\n<tr>\n<td>containerd</td>\n<td>1.5.10-1</td>\n</tr>\n<tr>\n<td>kubernetes</td>\n<td>v1.23.2</td>\n</tr>\n<tr>\n<td>kubeadm</td>\n<td>v1.23.2</td>\n</tr>\n<tr>\n<td>kube-apiserver</td>\n<td>v1.23.2</td>\n</tr>\n<tr>\n<td>kube-controller-manager</td>\n<td>v1.23.2</td>\n</tr>\n<tr>\n<td>kube-scheduler</td>\n<td>v1.23.2</td>\n</tr>\n<tr>\n<td>kubectl</td>\n<td>v1.23.2</td>\n</tr>\n<tr>\n<td>kubelet</td>\n<td>v1.23.2</td>\n</tr>\n<tr>\n<td>kube-proxy</td>\n<td></td>\n</tr>\n<tr>\n<td>etcd</td>\n<td>v3.5.1</td>\n</tr>\n<tr>\n<td>CNI 插件（calico）</td>\n<td>v3.18</td>\n</tr>\n</tbody></table>\n<h3 id=\"二、集群配置（所有节点执行）\"><a href=\"#二、集群配置（所有节点执行）\" class=\"headerlink\" title=\"二、集群配置（所有节点执行）\"></a>二、集群配置（所有节点执行）</h3><h4 id=\"1-节点初始化\"><a href=\"#1-节点初始化\" class=\"headerlink\" title=\"1. 节点初始化\"></a>1. 节点初始化</h4><ul>\n<li><p>主机名与 host 解析</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl --static set-hostname master    # master 节点执行</span><br><span class=\"line\">hostnamectl --static set-hostname node1     # node1 节点执行</span><br><span class=\"line\">hostnamectl --static set-hostname node2     # node2 节点执行</span><br><span class=\"line\"></span><br><span class=\"line\">sudo tee -a /etc/hosts &lt;&lt; EOF</span><br><span class=\"line\">192.168.64.4 master</span><br><span class=\"line\">192.168.64.5 node1</span><br><span class=\"line\">192.168.64.6 node2</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>关闭防火墙与禁用 swap 分区</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ufw disable &amp;&amp; sudo systemctl disable ufw</span><br><span class=\"line\"></span><br><span class=\"line\">swapoff -a</span><br><span class=\"line\">sed -ri &#x27;s/.*swap.*/#&amp;/&#x27; /etc/fstab</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>k8s集群安装为什么需要关闭 swap 分区？ swap 必须关，否则 kubelet 起不来,进而导致 k8s 集群起不来； 且考虑 kublet 会用 swap 做数据交换的话，对性能影响比较大</p>\n</blockquote>\n</li>\n<li><p>同步时间与时区</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class=\"line\">sudo timedatectl set-timezone Asia/Shanghai</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">将当前的 UTC 时间写入硬件时钟 (硬件时间默认为UTC)</span></span><br><span class=\"line\">sudo timedatectl set-local-rtc 0</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启用 NTP 时间同步：</span></span><br><span class=\"line\">sudo timedatectl set-ntp yes</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">校准时间服务器-时间同步(推荐使用 chronyc 进行平滑同步)</span></span><br><span class=\"line\">sudo apt-get install chrony -y</span><br><span class=\"line\">sudo chronyc tracking</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">手动校准-强制更新时间</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">chronyc -a makestep</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">系统时钟同步硬件时钟</span></span><br><span class=\"line\">sudo hwclock -w</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">重启依赖于系统时间的服务</span></span><br><span class=\"line\">sudo systemctl restart rsyslog.service cron.service</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>内核模块加载与配置</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">1.安装 ipvs</span></span><br><span class=\"line\">sudo apt-get install ipset ipvsadm -y</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">2.加载内核模块</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置重启后永久加载模块</span></span><br><span class=\"line\">sudo tee /etc/modules-load.d/k8s.conf &lt;&lt; EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">netfilter</span></span><br><span class=\"line\">br_netfilter</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">containerd.</span></span><br><span class=\"line\">overlay</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ipvs</span></span><br><span class=\"line\">ip_vs</span><br><span class=\"line\">ip_vs_rr</span><br><span class=\"line\">ip_vs_wrr</span><br><span class=\"line\">ip_vs_sh</span><br><span class=\"line\">nf_conntrack</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">临时加载模块</span></span><br><span class=\"line\">mod_tmp=(br_netfilter overlay ip_vs ip_vs_rr ip_vs_wrr ip_vs_sh nf_conntrack)</span><br><span class=\"line\">for m in $&#123;mod_tmp[@]&#125;;do sudo modprobe $m; done</span><br><span class=\"line\">lsmod | egrep &quot;ip_vs|nf_conntrack_ipv4&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">3.配置内核参数</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">设置 sysctl 必须参数，重启后永久生效</span></span><br><span class=\"line\">sudo tee /etc/sysctl.d/99-kubernetes-cri.conf &lt;&lt; EOF</span><br><span class=\"line\">net.bridge.bridge-nf-call-ipv6tables = 1</span><br><span class=\"line\">net.bridge.bridge-nf-call-iptables = 1</span><br><span class=\"line\">net.ipv4.ip_forward = 1</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">临时应用 sysctl 参数而无需重新启动</span></span><br><span class=\"line\">sudo sysctl --system</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置免密登录（master 节点执行，非必须）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">master 节点执行</span></span><br><span class=\"line\">ssh-keygen</span><br><span class=\"line\">ssh-copy-id -i ~/.ssh/id_rsa.pub root@node1</span><br><span class=\"line\">ssh-copy-id -i ~/.ssh/id_rsa.pub root@node2</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"2-容器运行时安装\"><a href=\"#2-容器运行时安装\" class=\"headerlink\" title=\"2. 容器运行时安装\"></a>2. 容器运行时安装</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">1.删除旧版本</span></span><br><span class=\"line\">sudo apt-get remove docker docker-engine docker.io containerd runc</span><br><span class=\"line\"><span class=\"meta prompt_\"> </span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">2.更新 apt 程序包索引并安装程序包，以允许 apt 通过 HTTPS 使用存储库</span></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install \\</span><br><span class=\"line\">  apt-transport-https \\</span><br><span class=\"line\">  ca-certificates \\</span><br><span class=\"line\">  curl \\</span><br><span class=\"line\">  gnupg \\</span><br><span class=\"line\">  lsb-release -y</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">3.添加 Docker 的官方 GPG 密钥</span></span><br><span class=\"line\">sudo mkdir -p /etc/apt/keyrings</span><br><span class=\"line\">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">4.设置稳定存储库，添加 nightly 或 <span class=\"built_in\">test</span> 存储库</span></span><br><span class=\"line\">echo &quot;deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\</span><br><span class=\"line\"><span class=\"meta prompt_\"> $</span><span class=\"language-bash\">(lsb_release -cs) stable nightly<span class=\"string\">&quot; | sudo tee /etc/apt/sources.list.d/container.list</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"> </span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"string\">5.安装 containerd</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"string\">更新 apt 包索引，安装最新版本的 containerd 或进入下一步安装特定版本</span></span></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"string\">查看 containerd.io 可用的版本</span></span></span><br><span class=\"line\">apt-cache madison containerd.io</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"string\">安装指定版本</span></span></span><br><span class=\"line\">sudo apt install containerd.io=1.5.10-1 -y</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"string\">6.配置 containerd</span></span></span><br><span class=\"line\">containerd config default | sudo tee /etc/containerd/config.toml</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"string\">替换 pause 镜像源</span></span></span><br><span class=\"line\">sudo sed -i &quot;s#k8s.gcr.io/pause#registry.cn-hangzhou.aliyuncs.com/google_containers/pause#g&quot;  /etc/containerd/config.toml</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"string\">docker.io &amp; gcr.io &amp; k8s.gcr.io &amp; quay.io 镜像加速</span></span></span><br><span class=\"line\">sudo tee ~/tmp.txt &lt;&lt; EOF</span><br><span class=\"line\">        [plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.mirrors.&quot;docker.io&quot;]</span><br><span class=\"line\">          endpoint = [&quot;https://taa4w07u.mirror.aliyuncs.com&quot;]</span><br><span class=\"line\">        [plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.mirrors.&quot;gcr.io&quot;]</span><br><span class=\"line\">          endpoint = [&quot;https://gcr.mirrors.ustc.edu.cn&quot;]</span><br><span class=\"line\">        [plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.mirrors.&quot;k8s.gcr.io&quot;]</span><br><span class=\"line\">          endpoint = [&quot;https://gcr.mirrors.ustc.edu.cn/google-containers/&quot;, &quot;https://registry.aliyuncs.com/google-containers/&quot;]</span><br><span class=\"line\">        [plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.mirrors.&quot;quay.io&quot;]</span><br><span class=\"line\">          endpoint = [&quot;https://quay.mirrors.ustc.edu.cn&quot;]</span><br><span class=\"line\">EOF</span><br><span class=\"line\">sudo sed -i &#x27;/registry.mirrors\\]/r ./tmp.txt&#x27; /etc/containerd/config.toml</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"string\">使用 SystemdCgroup 驱动程序，节点资源紧张时更稳定</span></span></span><br><span class=\"line\">sudo sed -i &#x27;s# SystemdCgroup = false# SystemdCgroup = true#g&#x27; /etc/containerd/config.toml</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"string\">7.启动 containerd 并验证</span></span></span><br><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo systemctl enable containerd</span><br><span class=\"line\">sudo systemctl restart containerd</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"string\">验证</span></span></span><br><span class=\"line\">sudo ctr version</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"三、构建集群\"><a href=\"#三、构建集群\" class=\"headerlink\" title=\"三、构建集群\"></a>三、构建集群</h3><h4 id=\"1-组件安装（所有节点执行）\"><a href=\"#1-组件安装（所有节点执行）\" class=\"headerlink\" title=\"1.组件安装（所有节点执行）\"></a>1.组件安装（所有节点执行）</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用Alicloud加速镜像</span></span><br><span class=\"line\">curl https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | sudo apt-key add -</span><br><span class=\"line\">sudo tee /etc/apt/sources.list.d/kubernetes.list &lt;&lt; EOF</span><br><span class=\"line\">deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">更新 apt 包索引 &amp; 查看并安装版本</span></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">apt-cache madison kubeadm |head</span><br><span class=\"line\">sudo apt install kubeadm=1.23.2-00 kubelet=1.23.2-00 kubectl=1.23.2-00 -y</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">锁定版本</span></span><br><span class=\"line\">sudo apt-mark hold kubelet kubeadm kubectl</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置客户端工具 runtime 与镜像端点配置</span></span><br><span class=\"line\">sudo crictl config runtime-endpoint /run/containerd/containerd.sock</span><br><span class=\"line\">sudo tee /etc/crictl.yaml &lt;&lt; EOF</span><br><span class=\"line\">runtime-endpoint: unix:///run/containerd/containerd.sock</span><br><span class=\"line\">image-endpoint: unix:///run/containerd/containerd.sock</span><br><span class=\"line\">timeout: 10</span><br><span class=\"line\">debug: false</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">重载 systemd 守护进程并将 kubelet 设置开机启动</span></span><br><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo systemctl enable --now kubelet</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看 kubelet 状态异常，会每隔几秒重启，陷入等待 kubeadm 指令的死循环</span></span><br><span class=\"line\">systemctl status kubelet </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-初始化主节点\"><a href=\"#2-初始化主节点\" class=\"headerlink\" title=\"2.初始化主节点\"></a>2.初始化主节点</h4><ul>\n<li><p>Master 节点执行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">导出默认初始化配置</span></span><br><span class=\"line\">kubeadm config print init-defaults &gt; kubeadm.yaml</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">根据本地环境修改初始配置内容</span></span><br><span class=\"line\">cat &gt; kubeadm.yaml &lt;&lt; EOF</span><br><span class=\"line\">apiVersion: kubeadm.k8s.io/v1beta3</span><br><span class=\"line\">bootstrapTokens:</span><br><span class=\"line\">- groups:</span><br><span class=\"line\">  - system:bootstrappers:kubeadm:default-node-token</span><br><span class=\"line\">  token: abcdef.0123456789abcdef</span><br><span class=\"line\">  ttl: 24h0m0s</span><br><span class=\"line\">  usages:</span><br><span class=\"line\">  - signing</span><br><span class=\"line\">  - authentication</span><br><span class=\"line\">kind: InitConfiguration</span><br><span class=\"line\">localAPIEndpoint:</span><br><span class=\"line\">  advertiseAddress: 192.168.64.4 # 修改 master 节点 IP</span><br><span class=\"line\">  bindPort: 6443</span><br><span class=\"line\">nodeRegistration:</span><br><span class=\"line\">  criSocket: /run/containerd/containerd.sock # 修改容器运行时为 containerd</span><br><span class=\"line\">  imagePullPolicy: IfNotPresent</span><br><span class=\"line\">  name: master # 修改 master 节点名称</span><br><span class=\"line\">  taints: # master 节点添加污点，不能调度应用</span><br><span class=\"line\">  - effect: &quot;NoSchedule&quot;</span><br><span class=\"line\">    key: &quot;node-role.kubernetes.io/master&quot;</span><br><span class=\"line\">---</span><br><span class=\"line\">apiServer:</span><br><span class=\"line\">  timeoutForControlPlane: 4m0s</span><br><span class=\"line\">apiVersion: kubeadm.k8s.io/v1beta3</span><br><span class=\"line\">certificatesDir: /etc/kubernetes/pki</span><br><span class=\"line\">clusterName: kubernetes</span><br><span class=\"line\">controllerManager: &#123;&#125;</span><br><span class=\"line\">dns: &#123;&#125;</span><br><span class=\"line\">etcd:</span><br><span class=\"line\">  local:</span><br><span class=\"line\">    dataDir: /var/lib/etcd</span><br><span class=\"line\">imageRepository: registry.cn-hangzhou.aliyuncs.com/google_containers # 修改镜像加速地址</span><br><span class=\"line\">kind: ClusterConfiguration</span><br><span class=\"line\">kubernetesVersion: 1.23.0</span><br><span class=\"line\">networking:</span><br><span class=\"line\">  dnsDomain: cluster.local</span><br><span class=\"line\">  podSubnet: 172.16.0.0/16  # 修改 Pod 子网</span><br><span class=\"line\">  serviceSubnet: 10.10.0.0/16 # 修改 Service CIDR 网段</span><br><span class=\"line\">scheduler: &#123;&#125;</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: kubeproxy.config.k8s.io/v1alpha1</span><br><span class=\"line\">kind: KubeProxyConfiguration</span><br><span class=\"line\">mode: ipvs # 修改kube-proxy 模式为ipvs，默认为iptables</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: kubelet.config.k8s.io/v1beta1</span><br><span class=\"line\">kind: KubeletConfiguration</span><br><span class=\"line\">cgroupDriver: systemd # 配置 cgroup driver</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看初始化集群所需镜像与提前拉取</span></span><br><span class=\"line\">kubeadm config images list --config kubeadm.yaml</span><br><span class=\"line\">kubeadm config images pull --config kubeadm.yaml</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">初始化 master 节点</span></span><br><span class=\"line\">sudo kubeadm init --config=kubeadm.yaml</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Node 节点执行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">初始化完成生成的命令：Node 节点执行，加入集群</span></span><br><span class=\"line\">sudo kubeadm join 192.168.64.4:6443 --token abcdef.0123456789abcdef \\</span><br><span class=\"line\">\t--discovery-token-ca-cert-hash sha256:6e25620c2478e38edfe335761b8dd37dbbe0dc8c1df9b41d539b148732d32718</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">打印 <span class=\"built_in\">join</span> token 值</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">kubeadm token create --print-join-command</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">初始化完成生成的命令：用于 kubectl 命令</span></span><br><span class=\"line\">mkdir -p $HOME/.kube</span><br><span class=\"line\">sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class=\"line\">sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"3-安装-CNI-网络插件（calico）\"><a href=\"#3-安装-CNI-网络插件（calico）\" class=\"headerlink\" title=\"3.安装 CNI 网络插件（calico）\"></a>3.安装 CNI 网络插件（calico）</h4><blockquote>\n<p>calico 插件官方地址: <a href=\"https://projectcalico.docs.tigera.io/getting-started/kubernetes/quickstart\">https://projectcalico.docs.tigera.io/getting-started/kubernetes/quickstart</a></p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">calico 官方下载 calico 插件部署清单</span></span><br><span class=\"line\">wget https://docs.projectcalico.org/v3.18/manifests/calico.yaml</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">wget https://docs.projectcalico.org/v3.22/manifests/calico.yaml</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改自定义配置</span></span><br><span class=\"line\">vim calico.yaml</span><br><span class=\"line\">- name: CALICO_IPV4POOL_CIDR</span><br><span class=\"line\">  value: &quot;172.16.0.0/16&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\">  </span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">验证等待 calico 插件 Pod 成功运行</span></span><br><span class=\"line\">watch kubectl get pod -n kube-system</span><br><span class=\"line\">NAME                                       READY   STATUS    RESTARTS     AGE</span><br><span class=\"line\">calico-kube-controllers-6cfb54c7bb-7xdld   1/1     Running   0            2m51s</span><br><span class=\"line\">calico-node-sjr6r                          1/1     Running   0            2m52s</span><br><span class=\"line\">calico-node-vsczr                          1/1     Running   0            2m51s</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">设置节点角色</span></span><br><span class=\"line\">kubectl label nodes master node-role.kubernetes.io/control-plane=</span><br><span class=\"line\">kubectl label nodes node1 node-role.kubernetes.io/work=</span><br><span class=\"line\">kubectl label nodes node2 node-role.kubernetes.io/work=</span><br><span class=\"line\">kubectl get nodes</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">自动补齐 kubectl 命令</span></span><br><span class=\"line\">sudo apt install -y bash-completion</span><br><span class=\"line\">source /usr/share/bash-completion/bash_completion</span><br><span class=\"line\">source &lt;(kubectl completion bash)</span><br><span class=\"line\">echo &quot;source &lt;(kubectl completion bash)&quot; &gt;&gt; ~/.bashrc</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">nerdctl 工具（替代 docker 命令）</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">官方地址</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">https://github.com/containerd/nerdctl</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">下载安装</span></span><br><span class=\"line\">wget https://github.com/containerd/nerdctl/releases/download/v0.20.0/nerdctl-0.20.0-linux-amd64.tar.gz</span><br><span class=\"line\">tar Cxfz /usr/local/bin/ nerdctl-0.20.0-linux-amd64.tar.gz</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">使用方式</span></span><br><span class=\"line\">sudo nerdctl -n k8s.io images </span><br><span class=\"line\">sudo nerdctl -n k8s.io ps</span><br><span class=\"line\">sudo nerdctl -n k8s.io images     # 等同于 = sudo ctr -n k8s.io images ls</span><br><span class=\"line\">sudo nerdctl -n k8s.io pull nginx # 等同于 = sudo crictl pull nginx</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">flannel 插件重置方式，非适用 calico</span></span><br><span class=\"line\">kubeadm reset</span><br><span class=\"line\">ifconfig cni0 down &amp;&amp; ip link delete cni0</span><br><span class=\"line\">ifconfig flannel.1 down &amp;&amp; ip link delete flannel.1</span><br><span class=\"line\">rm -rf /var/lib/cni/</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-集群部署验证\"><a href=\"#4-集群部署验证\" class=\"headerlink\" title=\"4.集群部署验证\"></a>4.集群部署验证</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">部署 Nginx Deployment</span></span><br><span class=\"line\">kubectl create deployment nginx --image=nginx</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">暴露 Nginx 服务，类型为 NodePort</span></span><br><span class=\"line\">kubectl expose deployment nginx --port=80 --target-port=80 --type=NodePort </span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">访问验证</span></span><br><span class=\"line\">curl 10.10.225.108:80 -I      # 请求 Service 端口（port，集群内部）</span><br><span class=\"line\">curl 192.168.64.5:31052 -I    # 请求 Node 节点端口（nodePort，可集群外部访问）</span><br><span class=\"line\">curl 172.16.166.132:80 -I     # 请求 Pod 应用内部端口（targetPort，容器的启动端口）</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-Kubernetes-组件\"><a href=\"#5-Kubernetes-组件\" class=\"headerlink\" title=\"5.Kubernetes 组件\"></a>5.Kubernetes 组件</h4><p><strong>控制平面组件</strong></p>\n<ul>\n<li>kube-apiserver：多实例伸缩，高可用且可均衡流量？</li>\n<li>etcd：高可用与备份策略？</li>\n<li>kube-scheduler  调度策略：Pod 资源需求、硬件&#x2F;软件&#x2F;策略约束、亲和性和反亲和性规范、数据位置、工作负载间干扰和最后时限</li>\n<li>kube-controller-manager</li>\n</ul>\n<p><strong>数据平面组件（所有节点）</strong></p>\n<ul>\n<li>kubelet</li>\n<li>kubeproxy</li>\n<li>容器运行时（CR）：containerd（Kubernetes 后续版本不使用 docker）</li>\n</ul>\n<p><strong>插件 Addons</strong></p>\n<ul>\n<li>网络插件：calico、flannel</li>\n</ul>\n<p><strong>可观测性：日志与监控</strong></p>\n<ul>\n<li>日志：fluentd</li>\n<li>监控：Prometheus</li>\n</ul>\n<h3 id=\"四、Kubernetes-仪表板（Dashboard）\"><a href=\"#四、Kubernetes-仪表板（Dashboard）\" class=\"headerlink\" title=\"四、Kubernetes 仪表板（Dashboard）\"></a>四、Kubernetes 仪表板（Dashboard）</h3><h4 id=\"1-Kubernetes-原生仪表板\"><a href=\"#1-Kubernetes-原生仪表板\" class=\"headerlink\" title=\"1.Kubernetes 原生仪表板\"></a>1.Kubernetes 原生仪表板</h4><blockquote>\n<p>官方文档：<a href=\"https://kubernetes.io/zh/docs/tasks/access-application-cluster/web-ui-dashboard/\">https://kubernetes.io/zh/docs/tasks/access-application-cluster/web-ui-dashboard/</a></p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">1.部署 Dashboard 清单</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.5.1/aio/deploy/recommended.yaml</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">kubectl apply -f recommended.yaml</span></span><br><span class=\"line\">kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.6.0/aio/deploy/recommended.yaml</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">2.启用 Dashboard 访问</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">查看资源是否正常启动</span></span><br><span class=\"line\">kubectl get pod,service -n kubernetes-dashboard</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">修改服务暴露为 nodePort 方式</span></span><br><span class=\"line\">kubectl edit service kubernetes-dashboard -n kubernetes-dashboard</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">===主要配置内容</span></span><br><span class=\"line\">  ports:</span><br><span class=\"line\">  - nodePort: 30333  # 新增</span><br><span class=\"line\">    port: 443</span><br><span class=\"line\">    protocol: TCP</span><br><span class=\"line\">    targetPort: 8443</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    k8s-app: kubernetes-dashboard</span><br><span class=\"line\">  sessionAffinity: None</span><br><span class=\"line\">  type: NodePort  # 修改</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\">###</span></span> </span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">3.默认仪表板部署为最小 RBAC 权限集，需要操作资源时，需要创建 ClusterRole 角色。</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">RBAC 参考：https://github.com/kubernetes/dashboard/blob/master/docs/user/access-control/README.md</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">登录 Dashboard</span></span><br><span class=\"line\">kubectl describe secret -n kubernetes-dashboard $(kubectl get secret -n kubernetes-dashboard |grep kubernetes-dashboard-token |awk &#x27;&#123;print $1&#125;&#x27;)</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">浏览器访问（使用firefox） https://192.168.64.4:30333</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">使用上面获取的 token 值登录（默认 token 只有 kubernetes-dashboard 空间权限）</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-K9S-集群管理工具\"><a href=\"#2-K9S-集群管理工具\" class=\"headerlink\" title=\"2.K9S 集群管理工具\"></a>2.K9S 集群管理工具</h4><p>官方文档：<a href=\"https://k9scli.io/\">https://k9scli.io/</a></p>\n<h3 id=\"五、参考文档\"><a href=\"#五、参考文档\" class=\"headerlink\" title=\"五、参考文档\"></a>五、参考文档</h3><p>1、<a href=\"https://multipass.run/\">multipass 官网</a><br>2、<a href=\"https://kubernetes.io/zh/docs/concepts/overview/components/#container-runtime\">Kubernetes 官方文档</a><br>3、<a href=\"https://blog.weiyigeek.top/2022/5-7-654.html\">二进制方式安装 Kubernetes 集群</a></p>"}],"PostAsset":[{"_id":"source/_posts/alicloud-vpc/vpc1.png","slug":"vpc1.png","post":"cm0fat8zj0007s0nj78qnen2i","modified":0,"renderable":0},{"_id":"source/_posts/alicloud-vpc/vpc2.png","slug":"vpc2.png","post":"cm0fat8zj0007s0nj78qnen2i","modified":0,"renderable":0},{"_id":"source/_posts/alicloud-vpc/vpc3.png","slug":"vpc3.png","post":"cm0fat8zj0007s0nj78qnen2i","modified":0,"renderable":0},{"_id":"source/_posts/alicloud-vpc/vpc4.png","slug":"vpc4.png","post":"cm0fat8zj0007s0nj78qnen2i","modified":0,"renderable":0},{"_id":"source/_posts/alicloud-ram-sts/ram1.png","slug":"ram1.png","post":"cm0fat8zh0003s0njgnlk7dhl","modified":0,"renderable":0},{"_id":"source/_posts/alicloud-ram-sts/ram2.png","slug":"ram2.png","post":"cm0fat8zh0003s0njgnlk7dhl","modified":0,"renderable":0},{"_id":"source/_posts/alicloud-ram-sts/ram3.png","slug":"ram3.png","post":"cm0fat8zh0003s0njgnlk7dhl","modified":0,"renderable":0},{"_id":"source/_posts/alicloud-ram-sts/ram4.png","slug":"ram4.png","post":"cm0fat8zh0003s0njgnlk7dhl","modified":0,"renderable":0},{"_id":"source/_posts/alicloud-ram-sts/ram5.png","slug":"ram5.png","post":"cm0fat8zh0003s0njgnlk7dhl","modified":0,"renderable":0},{"_id":"source/_posts/alicloud-ram-sts/ram6.png","slug":"ram6.png","post":"cm0fat8zh0003s0njgnlk7dhl","modified":0,"renderable":0},{"_id":"source/_posts/alicloud-ram-sts/ram7.png","slug":"ram7.png","post":"cm0fat8zh0003s0njgnlk7dhl","modified":0,"renderable":0},{"_id":"source/_posts/alicloud-ram-sts/ram8.png","slug":"ram8.png","post":"cm0fat8zh0003s0njgnlk7dhl","modified":0,"renderable":0},{"_id":"source/_posts/alicloud-ack-sls-deploy/acksls1.png","slug":"acksls1.png","post":"cm0fat8zg0001s0njgl080pl2","modified":0,"renderable":0},{"_id":"source/_posts/alicloud-ack-sls-deploy/acksls10.png","slug":"acksls10.png","post":"cm0fat8zg0001s0njgl080pl2","modified":0,"renderable":0},{"_id":"source/_posts/alicloud-ack-sls-deploy/acksls11.png","slug":"acksls11.png","post":"cm0fat8zg0001s0njgl080pl2","modified":0,"renderable":0},{"_id":"source/_posts/alicloud-ack-sls-deploy/acksls12.png","slug":"acksls12.png","post":"cm0fat8zg0001s0njgl080pl2","modified":0,"renderable":0},{"_id":"source/_posts/alicloud-ack-sls-deploy/acksls13.png","slug":"acksls13.png","post":"cm0fat8zg0001s0njgl080pl2","modified":0,"renderable":0},{"_id":"source/_posts/alicloud-ack-sls-deploy/acksls14.png","slug":"acksls14.png","post":"cm0fat8zg0001s0njgl080pl2","modified":0,"renderable":0},{"_id":"source/_posts/alicloud-ack-sls-deploy/acksls15.png","slug":"acksls15.png","post":"cm0fat8zg0001s0njgl080pl2","modified":0,"renderable":0},{"_id":"source/_posts/alicloud-ack-sls-deploy/acksls16.png","slug":"acksls16.png","post":"cm0fat8zg0001s0njgl080pl2","modified":0,"renderable":0},{"_id":"source/_posts/alicloud-ack-sls-deploy/acksls2.png","slug":"acksls2.png","post":"cm0fat8zg0001s0njgl080pl2","modified":0,"renderable":0},{"_id":"source/_posts/alicloud-ack-sls-deploy/acksls3.png","slug":"acksls3.png","post":"cm0fat8zg0001s0njgl080pl2","modified":0,"renderable":0},{"_id":"source/_posts/alicloud-ack-sls-deploy/acksls4.png","slug":"acksls4.png","post":"cm0fat8zg0001s0njgl080pl2","modified":0,"renderable":0},{"_id":"source/_posts/alicloud-ack-sls-deploy/acksls5.png","slug":"acksls5.png","post":"cm0fat8zg0001s0njgl080pl2","modified":0,"renderable":0},{"_id":"source/_posts/alicloud-ack-sls-deploy/acksls6.png","slug":"acksls6.png","post":"cm0fat8zg0001s0njgl080pl2","modified":0,"renderable":0},{"_id":"source/_posts/alicloud-ack-sls-deploy/acksls7.png","slug":"acksls7.png","post":"cm0fat8zg0001s0njgl080pl2","modified":0,"renderable":0},{"_id":"source/_posts/alicloud-ack-sls-deploy/acksls8.png","slug":"acksls8.png","post":"cm0fat8zg0001s0njgl080pl2","modified":0,"renderable":0},{"_id":"source/_posts/alicloud-ack-sls-deploy/acksls9.png","slug":"acksls9.png","post":"cm0fat8zg0001s0njgl080pl2","modified":0,"renderable":0},{"_id":"source/_posts/helm-deploy/helm1.png","slug":"helm1.png","post":"cm0fat8zl000ks0nj53b06id7","modified":0,"renderable":0},{"_id":"source/_posts/helm-deploy/helm2.png","slug":"helm2.png","post":"cm0fat8zl000ks0nj53b06id7","modified":0,"renderable":0},{"_id":"source/_posts/helm-deploy/helm3.png","slug":"helm3.png","post":"cm0fat8zl000ks0nj53b06id7","modified":0,"renderable":0},{"_id":"source/_posts/helm-deploy/helm4.png","slug":"helm4.png","post":"cm0fat8zl000ks0nj53b06id7","modified":0,"renderable":0},{"_id":"source/_posts/helm-deploy/helm5.png","slug":"helm5.png","post":"cm0fat8zl000ks0nj53b06id7","modified":0,"renderable":0},{"_id":"source/_posts/k8s-ack-learn/k8s1.png","slug":"k8s1.png","post":"cm0fat8zm000ms0njbhzpcuxw","modified":0,"renderable":0},{"_id":"source/_posts/k8s-ack-learn/k8s2.png","slug":"k8s2.png","post":"cm0fat8zm000ms0njbhzpcuxw","modified":0,"renderable":0},{"_id":"source/_posts/k8s-ack-learn/k8s3.png","slug":"k8s3.png","post":"cm0fat8zm000ms0njbhzpcuxw","modified":0,"renderable":0},{"_id":"source/_posts/k8s-ack-learn/k8s4.png","slug":"k8s4.png","post":"cm0fat8zm000ms0njbhzpcuxw","modified":0,"renderable":0},{"_id":"source/_posts/git-flow/gf1.png","slug":"gf1.png","post":"cm0fat8zl000gs0njfffade4a","modified":0,"renderable":0},{"_id":"source/_posts/git-flow/gf10.png","slug":"gf10.png","post":"cm0fat8zl000gs0njfffade4a","modified":0,"renderable":0},{"_id":"source/_posts/git-flow/gf11.png","slug":"gf11.png","post":"cm0fat8zl000gs0njfffade4a","modified":0,"renderable":0},{"_id":"source/_posts/git-flow/gf12.png","slug":"gf12.png","post":"cm0fat8zl000gs0njfffade4a","modified":0,"renderable":0},{"_id":"source/_posts/git-flow/gf13.png","slug":"gf13.png","post":"cm0fat8zl000gs0njfffade4a","modified":0,"renderable":0},{"_id":"source/_posts/git-flow/gf14.png","slug":"gf14.png","post":"cm0fat8zl000gs0njfffade4a","modified":0,"renderable":0},{"_id":"source/_posts/git-flow/gf15.png","slug":"gf15.png","post":"cm0fat8zl000gs0njfffade4a","modified":0,"renderable":0},{"_id":"source/_posts/git-flow/gf2.png","slug":"gf2.png","post":"cm0fat8zl000gs0njfffade4a","modified":0,"renderable":0},{"_id":"source/_posts/git-flow/gf3.png","slug":"gf3.png","post":"cm0fat8zl000gs0njfffade4a","modified":0,"renderable":0},{"_id":"source/_posts/git-flow/gf4.png","slug":"gf4.png","post":"cm0fat8zl000gs0njfffade4a","modified":0,"renderable":0},{"_id":"source/_posts/git-flow/gf5.png","slug":"gf5.png","post":"cm0fat8zl000gs0njfffade4a","modified":0,"renderable":0},{"_id":"source/_posts/git-flow/gf6.png","slug":"gf6.png","post":"cm0fat8zl000gs0njfffade4a","modified":0,"renderable":0},{"_id":"source/_posts/git-flow/gf7.png","slug":"gf7.png","post":"cm0fat8zl000gs0njfffade4a","modified":0,"renderable":0},{"_id":"source/_posts/git-flow/gf8.png","slug":"gf8.png","post":"cm0fat8zl000gs0njfffade4a","modified":0,"renderable":0},{"_id":"source/_posts/git-flow/gf9.png","slug":"gf9.png","post":"cm0fat8zl000gs0njfffade4a","modified":0,"renderable":0},{"_id":"source/_posts/k8s-networkpolicy/2afdc3d69fa9.png","slug":"2afdc3d69fa9.png","post":"cm0fat8zn000qs0nj1nkr7p0e","modified":0,"renderable":0},{"_id":"source/_posts/k8s-networkpolicy/6bbe6aab7201.png","slug":"6bbe6aab7201.png","post":"cm0fat8zn000qs0nj1nkr7p0e","modified":0,"renderable":0},{"_id":"source/_posts/k8s-networkpolicy/7b70de99e5f7.png","slug":"7b70de99e5f7.png","post":"cm0fat8zn000qs0nj1nkr7p0e","modified":0,"renderable":0},{"_id":"source/_posts/observability-fluentd-component/fluent1.png","slug":"fluent1.png","post":"cm0fat8zq001ps0njgnra83jk","modified":0,"renderable":0},{"_id":"source/_posts/observability-fluentd-component/fluent2.png","slug":"fluent2.png","post":"cm0fat8zq001ps0njgnra83jk","modified":0,"renderable":0},{"_id":"source/_posts/observability-fluentd-component/fluent3.png","slug":"fluent3.png","post":"cm0fat8zq001ps0njgnra83jk","modified":0,"renderable":0},{"_id":"source/_posts/observability-fluentd-component/fluent4.png","slug":"fluent4.png","post":"cm0fat8zq001ps0njgnra83jk","modified":0,"renderable":0},{"_id":"source/_posts/k8s-rbac/1572c2ebc891.png","slug":"1572c2ebc891.png","post":"cm0fat8zp001ns0nj9rlw9lar","modified":0,"renderable":0},{"_id":"source/_posts/k8s-rbac/21812e1bbfad.png","slug":"21812e1bbfad.png","post":"cm0fat8zp001ns0nj9rlw9lar","modified":0,"renderable":0},{"_id":"source/_posts/k8s-rbac/634be995b5bc.png","slug":"634be995b5bc.png","post":"cm0fat8zp001ns0nj9rlw9lar","modified":0,"renderable":0},{"_id":"source/_posts/k8s-rbac/7528aa1bf3da.png","slug":"7528aa1bf3da.png","post":"cm0fat8zp001ns0nj9rlw9lar","modified":0,"renderable":0},{"_id":"source/_posts/k8s-rbac/ab8f20ce2acc.png","slug":"ab8f20ce2acc.png","post":"cm0fat8zp001ns0nj9rlw9lar","modified":0,"renderable":0},{"_id":"source/_posts/k8s-rbac/c31775e8bbe3.png","slug":"c31775e8bbe3.png","post":"cm0fat8zp001ns0nj9rlw9lar","modified":0,"renderable":0},{"_id":"source/_posts/k8s-rbac/d6da8c845c41.png","slug":"d6da8c845c41.png","post":"cm0fat8zp001ns0nj9rlw9lar","modified":0,"renderable":0},{"_id":"source/_posts/k8s-rbac/de3ebdd4f016.png","slug":"de3ebdd4f016.png","post":"cm0fat8zp001ns0nj9rlw9lar","modified":0,"renderable":0},{"_id":"source/_posts/k8s-rbac/de4222775e67.png","slug":"de4222775e67.png","post":"cm0fat8zp001ns0nj9rlw9lar","modified":0,"renderable":0},{"_id":"source/_posts/k8s-rbac/gaisu.png","slug":"gaisu.png","post":"cm0fat8zp001ns0nj9rlw9lar","modified":0,"renderable":0},{"_id":"source/_posts/k8s-network/k8s-nw1.png","slug":"k8s-nw1.png","post":"cm0fat8zp001ms0nj1dyrabyk","modified":0,"renderable":0},{"_id":"source/_posts/k8s-network/k8s-nw2.png","slug":"k8s-nw2.png","post":"cm0fat8zp001ms0nj1dyrabyk","modified":0,"renderable":0},{"_id":"source/_posts/k8s-network/k8s-nw3.png","slug":"k8s-nw3.png","post":"cm0fat8zp001ms0nj1dyrabyk","modified":0,"renderable":0},{"_id":"source/_posts/k8s-network/k8s-nw4.png","slug":"k8s-nw4.png","post":"cm0fat8zp001ms0nj1dyrabyk","modified":0,"renderable":0},{"_id":"source/_posts/k8s-network/k8s-nw5.png","slug":"k8s-nw5.png","post":"cm0fat8zp001ms0nj1dyrabyk","modified":0,"renderable":0},{"_id":"source/_posts/k8s-network/k8s-nw6.png","slug":"k8s-nw6.png","post":"cm0fat8zp001ms0nj1dyrabyk","modified":0,"renderable":0},{"_id":"source/_posts/k8s-network/k8s-nw7.png","slug":"k8s-nw7.png","post":"cm0fat8zp001ms0nj1dyrabyk","modified":0,"renderable":0},{"_id":"source/_posts/k8s-network/k8s-nw8.png","slug":"k8s-nw8.png","post":"cm0fat8zp001ms0nj1dyrabyk","modified":0,"renderable":0},{"_id":"source/_posts/openssl-basic/openssl-1.jpeg","slug":"openssl-1.jpeg","post":"cm0fat8zq001rs0nj45ma5k69","modified":0,"renderable":0},{"_id":"source/_posts/rabbitmq/rbmq1.png","slug":"rbmq1.png","post":"cm0fat8zr0023s0nje0aahnle","modified":0,"renderable":0},{"_id":"source/_posts/rabbitmq/rbmq10.png","slug":"rbmq10.png","post":"cm0fat8zr0023s0nje0aahnle","modified":0,"renderable":0},{"_id":"source/_posts/rabbitmq/rbmq11.png","slug":"rbmq11.png","post":"cm0fat8zr0023s0nje0aahnle","modified":0,"renderable":0},{"_id":"source/_posts/rabbitmq/rbmq12.png","slug":"rbmq12.png","post":"cm0fat8zr0023s0nje0aahnle","modified":0,"renderable":0},{"_id":"source/_posts/rabbitmq/rbmq2.png","slug":"rbmq2.png","post":"cm0fat8zr0023s0nje0aahnle","modified":0,"renderable":0},{"_id":"source/_posts/rabbitmq/rbmq3.png","slug":"rbmq3.png","post":"cm0fat8zr0023s0nje0aahnle","modified":0,"renderable":0},{"_id":"source/_posts/rabbitmq/rbmq4.png","slug":"rbmq4.png","post":"cm0fat8zr0023s0nje0aahnle","modified":0,"renderable":0},{"_id":"source/_posts/rabbitmq/rbmq5.png","slug":"rbmq5.png","post":"cm0fat8zr0023s0nje0aahnle","modified":0,"renderable":0},{"_id":"source/_posts/rabbitmq/rbmq6.png","slug":"rbmq6.png","post":"cm0fat8zr0023s0nje0aahnle","modified":0,"renderable":0},{"_id":"source/_posts/rabbitmq/rbmq7.png","slug":"rbmq7.png","post":"cm0fat8zr0023s0nje0aahnle","modified":0,"renderable":0},{"_id":"source/_posts/rabbitmq/rbmq8.png","slug":"rbmq8.png","post":"cm0fat8zr0023s0nje0aahnle","modified":0,"renderable":0},{"_id":"source/_posts/rabbitmq/rbmq9.png","slug":"rbmq9.png","post":"cm0fat8zr0023s0nje0aahnle","modified":0,"renderable":0},{"_id":"source/_posts/prometheus-grafana-notice/1.png","slug":"1.png","post":"cm0fat8zq001xs0njexlfbxdk","modified":0,"renderable":0},{"_id":"source/_posts/prometheus-grafana-notice/10.png","slug":"10.png","post":"cm0fat8zq001xs0njexlfbxdk","modified":0,"renderable":0},{"_id":"source/_posts/prometheus-grafana-notice/11.png","slug":"11.png","post":"cm0fat8zq001xs0njexlfbxdk","modified":0,"renderable":0},{"_id":"source/_posts/prometheus-grafana-notice/12.png","slug":"12.png","post":"cm0fat8zq001xs0njexlfbxdk","modified":0,"renderable":0},{"_id":"source/_posts/prometheus-grafana-notice/13.png","slug":"13.png","post":"cm0fat8zq001xs0njexlfbxdk","modified":0,"renderable":0},{"_id":"source/_posts/prometheus-grafana-notice/14.png","slug":"14.png","post":"cm0fat8zq001xs0njexlfbxdk","modified":0,"renderable":0},{"_id":"source/_posts/prometheus-grafana-notice/15.png","slug":"15.png","post":"cm0fat8zq001xs0njexlfbxdk","modified":0,"renderable":0},{"_id":"source/_posts/prometheus-grafana-notice/16.png","slug":"16.png","post":"cm0fat8zq001xs0njexlfbxdk","modified":0,"renderable":0},{"_id":"source/_posts/prometheus-grafana-notice/17.png","slug":"17.png","post":"cm0fat8zq001xs0njexlfbxdk","modified":0,"renderable":0},{"_id":"source/_posts/prometheus-grafana-notice/2.png","slug":"2.png","post":"cm0fat8zq001xs0njexlfbxdk","modified":0,"renderable":0},{"_id":"source/_posts/prometheus-grafana-notice/3.png","slug":"3.png","post":"cm0fat8zq001xs0njexlfbxdk","modified":0,"renderable":0},{"_id":"source/_posts/prometheus-grafana-notice/4.png","slug":"4.png","post":"cm0fat8zq001xs0njexlfbxdk","modified":0,"renderable":0},{"_id":"source/_posts/prometheus-grafana-notice/5.png","slug":"5.png","post":"cm0fat8zq001xs0njexlfbxdk","modified":0,"renderable":0},{"_id":"source/_posts/prometheus-grafana-notice/6.png","slug":"6.png","post":"cm0fat8zq001xs0njexlfbxdk","modified":0,"renderable":0},{"_id":"source/_posts/prometheus-grafana-notice/7.png","slug":"7.png","post":"cm0fat8zq001xs0njexlfbxdk","modified":0,"renderable":0},{"_id":"source/_posts/prometheus-grafana-notice/8.png","slug":"8.png","post":"cm0fat8zq001xs0njexlfbxdk","modified":0,"renderable":0},{"_id":"source/_posts/prometheus-grafana-notice/9.png","slug":"9.png","post":"cm0fat8zq001xs0njexlfbxdk","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cm0fat8zg0001s0njgl080pl2","category_id":"cm0fat8zi0004s0njgieg3w5h","_id":"cm0fat8zl000is0njdmpa3p2a"},{"post_id":"cm0fat8zh0003s0njgnlk7dhl","category_id":"cm0fat8zi0004s0njgieg3w5h","_id":"cm0fat8zn000os0njhbwscr8l"},{"post_id":"cm0fat8zk000bs0nj1p9k5py2","category_id":"cm0fat8zn000ns0njdxr37li7","_id":"cm0fat8zn000vs0nj03yqe1v3"},{"post_id":"cm0fat8zl000gs0njfffade4a","category_id":"cm0fat8zn000ws0njb5pid2pg","_id":"cm0fat8zo0013s0nj4uwd46uz"},{"post_id":"cm0fat8zl000ks0nj53b06id7","category_id":"cm0fat8zn000ss0njdmbp1ahq","_id":"cm0fat8zo0016s0njdbbh33b3"},{"post_id":"cm0fat8zj0007s0nj78qnen2i","category_id":"cm0fat8zi0004s0njgieg3w5h","_id":"cm0fat8zo001as0njhye85sgc"},{"post_id":"cm0fat8zj0007s0nj78qnen2i","category_id":"cm0fat8zo0012s0nj6aop0rhb","_id":"cm0fat8zo001cs0nj0efr05i1"},{"post_id":"cm0fat8zm000ms0njbhzpcuxw","category_id":"cm0fat8zn000ss0njdmbp1ahq","_id":"cm0fat8zo001es0nj3nyidb2g"},{"post_id":"cm0fat8zn000qs0nj1nkr7p0e","category_id":"cm0fat8zi0004s0njgieg3w5h","_id":"cm0fat8zo001is0njenam4q0i"},{"post_id":"cm0fat8zn000qs0nj1nkr7p0e","category_id":"cm0fat8zo0019s0nja09050r2","_id":"cm0fat8zo001js0njexgl9612"},{"post_id":"cm0fat8zl000fs0nj7p6m6d3k","category_id":"cm0fat8zn000ss0njdmbp1ahq","_id":"cm0fat8zo001ks0nj89jcb9e0"},{"post_id":"cm0fat8zl000fs0nj7p6m6d3k","category_id":"cm0fat8zo001fs0nj6mwx7xvx","_id":"cm0fat8zo001ls0nj4oawhfjy"},{"post_id":"cm0fat8zp001ms0nj1dyrabyk","category_id":"cm0fat8zn000ss0njdmbp1ahq","_id":"cm0fat8zq001ss0nj5i4eaiqf"},{"post_id":"cm0fat8zp001ns0nj9rlw9lar","category_id":"cm0fat8zn000ss0njdmbp1ahq","_id":"cm0fat8zq001ws0nj8s5sds3p"},{"post_id":"cm0fat8zq001ps0njgnra83jk","category_id":"cm0fat8zn000ss0njdmbp1ahq","_id":"cm0fat8zq001ys0njfnlu87ss"},{"post_id":"cm0fat8zq001rs0nj45ma5k69","category_id":"cm0fat8zn000ws0njb5pid2pg","_id":"cm0fat8zr0021s0nj7v19el2z"},{"post_id":"cm0fat8zq001vs0nj7ppme6tb","category_id":"cm0fat8zn000ss0njdmbp1ahq","_id":"cm0fat8zr0024s0njdpci42qr"},{"post_id":"cm0fat8zq001xs0njexlfbxdk","category_id":"cm0fat8zi0004s0njgieg3w5h","_id":"cm0fat8zr0027s0njb0vb1ixc"},{"post_id":"cm0fat8zq001xs0njexlfbxdk","category_id":"cm0fat8zo0019s0nja09050r2","_id":"cm0fat8zr002bs0njfbo21lmd"},{"post_id":"cm0fat8zq001zs0nj772x7w9v","category_id":"cm0fat8zn000ss0njdmbp1ahq","_id":"cm0fat8zr002ds0nj1xacazwn"},{"post_id":"cm0fat8zr0026s0nj920cab1s","category_id":"cm0fat8zn000ss0njdmbp1ahq","_id":"cm0fat8zr002fs0nj5hpu3ysi"},{"post_id":"cm0fat8zr0023s0nje0aahnle","category_id":"cm0fat8zr0029s0nj7ukk0alx","_id":"cm0fat8zr002js0nje11w9frc"}],"PostTag":[{"post_id":"cm0fat8zg0001s0njgl080pl2","tag_id":"cm0fat8zj0005s0nj1rknff2g","_id":"cm0fat8zl000es0njgze5euu3"},{"post_id":"cm0fat8zh0003s0njgnlk7dhl","tag_id":"cm0fat8zk000ds0nj14x5edb8","_id":"cm0fat8zm000ls0nj2dbkdeun"},{"post_id":"cm0fat8zj0007s0nj78qnen2i","tag_id":"cm0fat8zl000js0nje6nnhvdl","_id":"cm0fat8zn000rs0nj5oorhbku"},{"post_id":"cm0fat8zk000bs0nj1p9k5py2","tag_id":"cm0fat8zn000ps0njhrgw67ee","_id":"cm0fat8zn000us0nj0bynfuxe"},{"post_id":"cm0fat8zl000fs0nj7p6m6d3k","tag_id":"cm0fat8zn000ts0njdkg38h9s","_id":"cm0fat8zn000ys0nj4jgkbk56"},{"post_id":"cm0fat8zl000gs0njfffade4a","tag_id":"cm0fat8zn000xs0nj4zvzcvf7","_id":"cm0fat8zo0011s0nj3kk390yx"},{"post_id":"cm0fat8zl000ks0nj53b06id7","tag_id":"cm0fat8zo0010s0nj4ksx7d1q","_id":"cm0fat8zo0015s0nja3rsgdpd"},{"post_id":"cm0fat8zm000ms0njbhzpcuxw","tag_id":"cm0fat8zo0014s0njbi04ea5p","_id":"cm0fat8zo001ds0nj9zk59q17"},{"post_id":"cm0fat8zm000ms0njbhzpcuxw","tag_id":"cm0fat8zo0010s0nj4ksx7d1q","_id":"cm0fat8zo001gs0nj67c81iwz"},{"post_id":"cm0fat8zn000qs0nj1nkr7p0e","tag_id":"cm0fat8zo0014s0njbi04ea5p","_id":"cm0fat8zo001hs0nj0guxc71t"},{"post_id":"cm0fat8zp001ms0nj1dyrabyk","tag_id":"cm0fat8zo0014s0njbi04ea5p","_id":"cm0fat8zq001os0nj38xrcocm"},{"post_id":"cm0fat8zp001ns0nj9rlw9lar","tag_id":"cm0fat8zo0010s0nj4ksx7d1q","_id":"cm0fat8zq001qs0nj1nach562"},{"post_id":"cm0fat8zp001ns0nj9rlw9lar","tag_id":"cm0fat8zo0014s0njbi04ea5p","_id":"cm0fat8zq001us0njhpes1fu8"},{"post_id":"cm0fat8zq001xs0njexlfbxdk","tag_id":"cm0fat8zo0014s0njbi04ea5p","_id":"cm0fat8zr0022s0nj0pt6hgxl"},{"post_id":"cm0fat8zq001ps0njgnra83jk","tag_id":"cm0fat8zq001ts0nj7cwj7kyj","_id":"cm0fat8zr0025s0njhwoe1t4e"},{"post_id":"cm0fat8zq001zs0nj772x7w9v","tag_id":"cm0fat8zo0014s0njbi04ea5p","_id":"cm0fat8zr002as0nj0x9ybtrj"},{"post_id":"cm0fat8zr0026s0nj920cab1s","tag_id":"cm0fat8zo0014s0njbi04ea5p","_id":"cm0fat8zr002cs0nj8kga4jdt"},{"post_id":"cm0fat8zq001rs0nj45ma5k69","tag_id":"cm0fat8zr0020s0njgtrm085k","_id":"cm0fat8zr002gs0nje8ua3qny"},{"post_id":"cm0fat8zq001rs0nj45ma5k69","tag_id":"cm0fat8zr0028s0nj8szm4z3l","_id":"cm0fat8zr002hs0nj56pv8hpa"},{"post_id":"cm0fat8zq001vs0nj7ppme6tb","tag_id":"cm0fat8zq001ts0nj7cwj7kyj","_id":"cm0fat8zr002ks0nj81zp12jr"},{"post_id":"cm0fat8zr0023s0nje0aahnle","tag_id":"cm0fat8zr002is0njbmxl4e1f","_id":"cm0fat8zr002ls0nj9fwv4oa4"}],"Tag":[{"name":"ACK","_id":"cm0fat8zj0005s0nj1rknff2g"},{"name":"RAM","_id":"cm0fat8zk000ds0nj14x5edb8"},{"name":"VPC","_id":"cm0fat8zl000js0nje6nnhvdl"},{"name":"Docker","_id":"cm0fat8zn000ps0njhrgw67ee"},{"name":"Istio","_id":"cm0fat8zn000ts0njdkg38h9s"},{"name":"git","_id":"cm0fat8zn000xs0nj4zvzcvf7"},{"name":"Alicloud","_id":"cm0fat8zo0010s0nj4ksx7d1q"},{"name":"Kubernetes","_id":"cm0fat8zo0014s0njbi04ea5p"},{"name":"Observability","_id":"cm0fat8zq001ts0nj7cwj7kyj"},{"name":"openssl","_id":"cm0fat8zr0020s0njgtrm085k"},{"name":"Linux","_id":"cm0fat8zr0028s0nj8szm4z3l"},{"name":"RabbitMQ","_id":"cm0fat8zr002is0njbmxl4e1f"}]}}