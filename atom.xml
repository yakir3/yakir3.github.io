<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yakir Blog</title>
  <icon>https://359sun.top/images/favicon_200x200.png</icon>
  
  <link href="https://359sun.top/atom.xml" rel="self"/>
  
  <link href="https://359sun.top/"/>
  <updated>2022-05-04T13:33:42.831Z</updated>
  <id>https://359sun.top/</id>
  
  <author>
    <name>Yakir</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git flow 工作流理解</title>
    <link href="https://359sun.top/posts/539.html"/>
    <id>https://359sun.top/posts/539.html</id>
    <published>2022-05-04T13:14:23.000Z</published>
    <updated>2022-05-04T13:33:42.831Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;</summary>
        
      
    
    
    
    <category term="Linux" scheme="https://359sun.top/categories/linux/"/>
    
    
    <category term="git" scheme="https://359sun.top/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>阿里云-RAM与STS权限</title>
    <link href="https://359sun.top/posts/fdc.html"/>
    <id>https://359sun.top/posts/fdc.html</id>
    <published>2022-03-20T15:37:32.000Z</published>
    <updated>2022-05-03T13:20:22.280Z</updated>
    
    
    <summary type="html">&lt;h3 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h3&gt;&lt;p&gt;当通过OpenApi接口来调用云资源时（即替代控制台的操作），当前的方式有两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过 AK+SK 方式直接调用，只要该AK所属的账号有相关权限即可调用对应资源（授权分为系统策略和自定义策略）&lt;/li&gt;
&lt;li&gt;阿里云账号（RAM用户）&amp;#x2F;阿里云服务（ECS等）&amp;#x2F;身份提供商（SSO） 通过扮演角色获取角色的临时令牌（即通过调用AssumeRole接口），通过该临时令牌（临时令牌可设定会话时间），通过 STS接口获取到的 临时AK+临时SK+临时STSToken 进行调用对应资源&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;二、官方概念介绍&quot;&gt;&lt;a href=&quot;#二、官方概念介绍&quot; class=&quot;headerlink&quot; title=&quot;二、官方概念介绍&quot;&gt;&lt;/a&gt;二、官方概念介绍&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;STS概念&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;阿里云STS（Security Token Service）是阿里云提供的一种临时访问权限管理服务。RAM提供RAM用户和RAM角色两种身份。其中，RAM角色不具备永久身份凭证，而只能通过STS获取可以自定义时效和访问权限的临时身份凭证，即安全令牌（STS Token）&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="阿里云" scheme="https://359sun.top/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>promotheus组件-grafana大盘配置监控大盘与告警通知</title>
    <link href="https://359sun.top/posts/9a8h.html"/>
    <id>https://359sun.top/posts/9a8h.html</id>
    <published>2022-03-16T15:21:06.000Z</published>
    <updated>2022-05-03T13:20:22.255Z</updated>
    
    
    <summary type="html">&lt;h3 id=&quot;一、背景&quot;&gt;&lt;a href=&quot;#一、背景&quot; class=&quot;headerlink&quot; title=&quot;一、背景&quot;&gt;&lt;/a&gt;一、背景&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;线上ACK 集群部署了StatefulSet 应用（rabbitMQ），由于rabbitMQ 本身自带的management 后台数据展示较为简陋且没有告警功能，因此考虑接入云上产品监控资源数据且对接告警通知功能，主要通过如下产品实现：&lt;ul&gt;
&lt;li&gt;接入Prometheus 监控+grafana 进行数据图表展示。&lt;/li&gt;
&lt;li&gt;利用Arms 产品获取Prometheus 的监控指标，按照设定的阈值进行告警通知功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;二、操作过程&quot;&gt;&lt;a href=&quot;#二、操作过程&quot; class=&quot;headerlink&quot; title=&quot;二、操作过程&quot;&gt;&lt;/a&gt;二、操作过程&lt;/h3&gt;&lt;h4 id=&quot;1）接入Prometheus-组件监控，获取数据指标&quot;&gt;&lt;a href=&quot;#1）接入Prometheus-组件监控，获取数据指标&quot; class=&quot;headerlink&quot; title=&quot;1）接入Prometheus 组件监控，获取数据指标&quot;&gt;&lt;/a&gt;1）接入Prometheus 组件监控，获取数据指标&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;进入云产品 &lt;strong&gt;Prometheus监控服务&lt;/strong&gt;，选择对应集群。（ACK集群需要先安装Prometheus 监控组件，安装参考：&lt;a href=&quot;https://help.aliyun.com/document_detail/161304.html&quot;&gt;ARMS Prometheus监控&lt;/a&gt;）&lt;img data-src=&quot;/posts/9a8h/1.png&quot; class title=&quot;img.png&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="云原生" scheme="https://359sun.top/categories/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
    
    <category term="阿里云" scheme="https://359sun.top/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
    <category term="K8S" scheme="https://359sun.top/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>NetworkPolicy隔离策略</title>
    <link href="https://359sun.top/posts/8aa0.html"/>
    <id>https://359sun.top/posts/8aa0.html</id>
    <published>2022-03-07T14:01:06.000Z</published>
    <updated>2022-05-03T13:20:22.250Z</updated>
    
    
    <summary type="html">&lt;h3 id=&quot;一、背景&quot;&gt;&lt;a href=&quot;#一、背景&quot; class=&quot;headerlink&quot; title=&quot;一、背景&quot;&gt;&lt;/a&gt;一、背景&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;一次对当前业务使用ACK 集群的业务调研与改造：针对NetworkPolicy 策略的调研，主要用于新建ACK 集群的网络规划与网络隔离&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;1）当前云环境ACK-集群使用现状和痛点&quot;&gt;&lt;a href=&quot;#1）当前云环境ACK-集群使用现状和痛点&quot; class=&quot;headerlink&quot; title=&quot;1）当前云环境ACK 集群使用现状和痛点&quot;&gt;&lt;/a&gt;1）当前云环境ACK 集群使用现状和痛点&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;UAT&amp;#x2F;线上 环境应用较多，且应用没有做集群内隔离，所有应用全部都在ACK 集群的default namespace 中。没有做到逻辑网络隔离。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;集群通过暴露公网SLB 方式进行集群调用，存在浪费资源、管理混乱、安全风险等问题。通过namespace 隔离 + NetworkPolicy 策略通信的方式可以实现集群内部应用自行调用，和VPC 打通之后使用NetworkPolicy 的IP 块策略还可实现跨集群的应用内网调用。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;2）实现隔离策略价值&quot;&gt;&lt;a href=&quot;#2）实现隔离策略价值&quot; class=&quot;headerlink&quot; title=&quot;2）实现隔离策略价值&quot;&gt;&lt;/a&gt;2）实现隔离策略价值&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;降低成本：可以通过网络逻辑隔离的方式将应用已namespace 方式进行隔离，减少冗余的物理设备降低成本。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;增加效能：避免复杂且多余的网络设计，使应用之间的调用简单且易于排查。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="云原生" scheme="https://359sun.top/categories/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
    
    <category term="阿里云" scheme="https://359sun.top/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
    <category term="K8S" scheme="https://359sun.top/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>K8S-RBAC权限控制</title>
    <link href="https://359sun.top/posts/fa45.html"/>
    <id>https://359sun.top/posts/fa45.html</id>
    <published>2022-03-01T15:55:02.000Z</published>
    <updated>2022-05-03T13:20:22.236Z</updated>
    
    
    <summary type="html">&lt;h3 id=&quot;一、RBAC简易概述&quot;&gt;&lt;a href=&quot;#一、RBAC简易概述&quot; class=&quot;headerlink&quot; title=&quot;一、RBAC简易概述&quot;&gt;&lt;/a&gt;一、RBAC简易概述&lt;/h3&gt;&lt;img data-src=&quot;/posts/fa45/gaisu.png&quot; class title=&quot;概述&quot;&gt;
&lt;h4 id=&quot;1-RBAC-四种-API-对象&quot;&gt;&lt;a href=&quot;#1-RBAC-四种-API-对象&quot; class=&quot;headerlink&quot; title=&quot;1) RBAC 四种 API 对象&quot;&gt;&lt;/a&gt;1) RBAC 四种 API 对象&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Role：一组权限的集合，在一个命名空间中，可以用其来定义一个角色，只能对命名空间内的资源进行授权。如果是集群级别的资源，则需要使用ClusterRole。例如：定义一个角色用来读取Pod的权限&lt;/li&gt;
&lt;li&gt;ClusterRole：具有和角色一致的命名空间资源的管理能力，还可用于以下特殊元素的授权&lt;ul&gt;
&lt;li&gt;集群范围的资源，例如Node&lt;/li&gt;
&lt;li&gt;非资源型的路径，例如：&amp;#x2F;healthz&lt;/li&gt;
&lt;li&gt;包含全部命名空间的资源，例如Pods&lt;blockquote&gt;
&lt;p&gt;例如：定义一个集群角色可让用户访问任意secrets&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RoleBinding：角色绑定&lt;/li&gt;
&lt;li&gt;ClusterRoleBinding：集群角色绑定&lt;blockquote&gt;
&lt;p&gt;角色绑定和集群角色绑定用于把一个角色绑定在一个目标上，可以是User，Group，Service Account，使用RoleBinding为某个命名空间授权，使用ClusterRoleBinding为集群范围内授权。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Role和ClusterRole是权限规则的定义&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;rules代表具体的授权规则，类似于阿里云RAM中的权限策略Policy&lt;/li&gt;
&lt;li&gt;Role和ClusterRole区别只在于一个是集群级别的资源控制&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="云原生" scheme="https://359sun.top/categories/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
    
    <category term="阿里云" scheme="https://359sun.top/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
    <category term="K8S" scheme="https://359sun.top/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://359sun.top/posts/3eeb.html"/>
    <id>https://359sun.top/posts/3eeb.html</id>
    <published>2022-02-27T15:30:35.000Z</published>
    <updated>2022-05-03T13:20:22.236Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;</summary>
        
      
    
    
    
    
  </entry>
  
</feed>
